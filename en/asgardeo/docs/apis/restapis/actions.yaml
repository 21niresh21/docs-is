openapi: 3.0.0
info:
  version: v1
  title: Asgardeo - Action Management Rest API
  description:
    "This is the RESTful API for managing action configuration for an organization in WSO2 Asgardeo. \n
    This API allows creating, retrieving, updating and deleting the action configurations. \n\n
    To access Action Management APIs in Asgardeo, you need to first [get an access token](https://wso2.com/asgardeo/docs/apis/authentication/#get-an-access-token) from your organization."
servers:
  - url: 'https://api.asgardeo.io/t/{organization-name}/api/server/v1'
security:
  - OAuth2: []
paths:
  /actions/types:
    get:
      tags:
      - Actions Endpoint
      summary: List Action Types
      description: "This API returns the detailed summary of the action types.\n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_view``\n\n"
      operationId: getActionTypes
      responses:
        '200':
          description: Action Types are found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionTypesResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /actions/{actionType}:
    post:
      tags:
        - Actions Endpoint
      summary: Add Action
      description: "This API creates an action and returns the action details along with the action's unique ID.\n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_create``\n\n"
      operationId: createAction
      parameters:
        - name: actionType
          in: path
          description: Name of the Action Type.
          required: true
          schema:
            enum:
              - preIssueAccessToken
              - preUpdatePassword
              - preUpdateProfile
              - preRegistration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionModel'
        description: This represents the information of the action to be created.
        required: true
      responses:
        '201':
          description: Action is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Actions Endpoint
      summary: List Actions
      description: "This API returns actions according to the action type. \n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_view``\n\n"
      operationId: getActionsByActionType
      parameters:
        - name: actionType
          in: path
          description: Name of the Action Type.
          required: true
          schema:
            enum:
              - preIssueAccessToken
              - preUpdatePassword
              - preUpdateProfile
              - preRegistration
      responses:
        '200':
          description: Actions are found for the given action type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponseList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /actions/{actionType}/{actionId}:
    patch:
      tags:
        - Actions Endpoint
      summary: Update Action
      description: "This API updates action configurations and return the updated action configurations. \n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_update``\n\n"
      operationId: updateAction
      parameters:
        - name: actionType
          in: path
          description: Name of the Action Type.
          required: true
          schema:
            enum:
              - preIssueAccessToken
              - preUpdatePassword
              - preUpdateProfile
              - preRegistration
        - name: actionId
          in: path
          description: Id of the Action.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionUpdateModel'
        description: This represents the action configurations to be updated.
        required: true
      responses:
        '200':
          description: Action is Updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Actions Endpoint
      summary: Delete Action
      description: "This API deletes an action using the action's type and unique ID. \n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_delete``\n\n"      
      operationId: deleteAction
      parameters:
        - name: actionType
          in: path
          description: Name of the Action Type.
          required: true
          schema:
            enum:
              - preIssueAccessToken
              - preUpdatePassword
              - preUpdateProfile
              - preRegistration
        - name: actionId
          in: path
          description: Id of the Action.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully Deleted
          content: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /actions/{actionType}/{actionId}/activate:
    post:
      tags:
        - Actions Endpoint
      summary: Activate Action
      description: "This API activates an action using the action's type and unique ID. \n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_update``\n\n"  
      operationId: activateAction
      parameters:
        - name: actionType
          in: path
          description: Name of the Action Type.
          required: true
          schema:
            enum:
              - preIssueAccessToken
              - preUpdatePassword
              - preUpdateProfile
              - preRegistration
        - name: actionId
          in: path
          description: Id of the Action.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Action is activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionBasicResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /actions/{actionType}/{actionId}/deactivate:
    post:
      tags:
        - Actions Endpoint
      summary: Deactivate Action
      description: "This API deactivates an action using the action's type and unique ID. \n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_update``\n\n"  
      operationId: deactivateAction
      parameters:
        - name: actionType
          in: path
          description: Name of the Action Type.
          required: true
          schema:
            enum:
              - preIssueAccessToken
              - preUpdatePassword
              - preUpdateProfile
              - preRegistration
        - name: actionId
          in: path
          description: Id of the Action.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Action is deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionBasicResponseInactive'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /actions/{actionType}/{actionId}/{authType}:
    put:
      tags:
        - Actions Endpoint
      summary: Update Action Authentication
      description: "This API updates action endpoint authentication and return the updated action configurations. \n\n
      - <b>Scope(Permission) required:</b> ``internal_action_mgt_update``\n\n"
      operationId: updateActionEndpointAuthentication
      parameters:
        - name: actionType
          in: path
          description: Name of the Action Type.
          required: true
          schema:
            enum:
              - preIssueAccessToken
              - preUpdatePassword
              - preUpdateProfile
              - preRegistration
        - name: actionId
          in: path
          description: Id of the Action.
          required: true
          schema:
            type: string
        - name: authType
          in: path
          description: Authentication Type of the Action Endpoint.
          required: true
          schema:
            enum:
              - none
              - basic
              - apiKey
              - bearer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTypeProperties'
        description: This represents the action endpoint authentication to be updated.
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://api.asgardeo.io/t/{org-name}/oauth2/authorize'
          tokenUrl: 'https://api.asgardeo.io/t/{org-name}/oauth2/token'
          scopes: { internal_action_mgt_create internal_action_mgt_update internal_action_mgt_view internal_action_mgt_delete }

  schemas:
    ActionModel:
      type: object
      required:
        - name
        - endpoint
      properties:
        name:
          type: string
          example: Access Token Pre Issue
          minLength: 1
          maxLength: 255
        description:
          type: string
          example: This is the configuration of pre-action for issuing access token.
          maxLength: 255
        endpoint:
          $ref: '#/components/schemas/Endpoint'

    Endpoint:
      type: object
      required:
        - uri
        - authentication
      properties:
        uri:
          type: string
          example: https://myextension.com/token
          pattern: '^https?://.+'
        authentication:
          $ref: '#/components/schemas/Authentication'

    EndpointResponse:
      type: object
      required:
        - uri
        - authentication
      properties:
        uri:
          type: string
          example: https://myextension.com/token
          pattern: '^https?://.+'
        authentication:
          $ref: '#/components/schemas/AuthenticationTypeResponse'

    ActionResponse:
      type: object
      properties:
        id:
          type: string
          example: '24f64d17-9824-4e28-8413-de45728d8e84'
        type:
          type: string
          enum:
            - PRE_ISSUE_ACCESS_TOKEN
            - PRE_UPDATE_PASSWORD
            - PRE_UPDATE_PROFILE
            - PRE_REGISTRATION
        name:
          type: string
          example: Access Token Pre Issue
          minLength: 1
          maxLength: 255
        description:
          type: string
          example: This is the configuration of pre-action for issuing access token.
          maxLength: 255
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        endpoint:
          $ref: '#/components/schemas/EndpointResponse'

    ActionBasicResponse:
      type: object
      properties:
        id:
          type: string
          example: '24f64d17-9824-4e28-8413-de45728d8e84'
        type:
          type: string
          enum:
            - PRE_ISSUE_ACCESS_TOKEN
            - PRE_UPDATE_PASSWORD
            - PRE_UPDATE_PROFILE
            - PRE_REGISTRATION
        name:
          type: string
          example: Access Token Pre Issue
          minLength: 1
          maxLength: 255
        description:
          type: string
          example: This is the configuration of pre-action for issuing access token.
          maxLength: 255
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE

    ActionResponseList:
      type: array
      items:
        $ref: '#/components/schemas/ActionResponse'

    ActionTypesResponse:
      type: array
      items:
        $ref: '#/components/schemas/ActionTypesResponseItem'

    ActionTypesResponseItem:
      type: object
      properties:
        type:
          type: string
          enum:
            - PRE_ISSUE_ACCESS_TOKEN
            - PRE_UPDATE_PASSWORD
            - PRE_UPDATE_PROFILE
            - PRE_REGISTRATION
        displayName:
          type: string
          example: "Pre Issue Access Token."
        description:
          type: string
          example: "Extension point configuration for Pre Issue Access Token."
        count:
          type: integer
          example: 2
        self:
          type: string
          example: "/t/wso2.com/api/server/v1/actions/preIssueAccessToken"

    AuthenticationTypeResponse:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - NONE
            - BEARER
            - API_KEY
            - BASIC
          example: BASIC

    ActionUpdateModel:
      type: object
      properties:
        name:
          type: string
          example: Access Token Pre Issue
          minLength: 1
          maxLength: 255
        description:
          type: string
          example: This is the configuration of pre-action for issuing access token.
          maxLength: 255
        endpoint:
          $ref: '#/components/schemas/EndpointUpdateModel'

    EndpointUpdateModel:
      type: object
      properties:
        uri:
          type: string
          example: https://myextension.com/token
          pattern: '^https?://.+'
        authentication:
          $ref: '#/components/schemas/Authentication'

    ActionBasicResponseInactive:
      allOf:
        - $ref: '#/components/schemas/ActionBasicResponse'
        - type: object
          properties:
            status:
              type: string
              enum:
                - INACTIVE

    None:
      type: object
      properties:
        properties:
          type: object
    Basic:
      type: object
      properties:
        properties:
          type: object
          required:
            - username
            - password
          properties:      
            username:
              type: string
              example: 'auth_username'
            password:
              type: string
              example: 'auth_password'
    ApiKey:
      type: object
      properties:
        properties:
          type: object
          required:
            - header
            - value
          properties: 
            header:
              type: string
              example: 'auth_header'
            value:
              type: string
              example: 'auth_value'
    Bearer:
      type: object
      properties:
        properties:
          type: object
          required:
            - accessToken
          properties: 
            accessToken:
              type: string
              example: 'bearer_token'

    NoAuthentication:
      type: object
      allOf:
        - $ref: '#/components/schemas/None'
        - type: object
          properties:
            type:
              type: string
              enum:
                - NONE

    BasicAuthentication:
      type: object
      allOf:
        - $ref: '#/components/schemas/Basic'
        - type: object
          properties:
            type:
              type: string
              enum:
                - BASIC

    ApiKeyAuthentication:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiKey'
        - type: object
          properties:
            type:
              type: string
              enum:
                - API_KEY

    BearerAuthentication:
      type: object
      allOf:
        - $ref: '#/components/schemas/Bearer'
        - type: object
          properties:
            type:
              type: string
              enum:
                - BEARER
    
    Authentication:
      oneOf:
        - $ref: '#/components/schemas/BasicAuthentication'
        - $ref: '#/components/schemas/ApiKeyAuthentication'
        - $ref: '#/components/schemas/BearerAuthentication'
        - $ref: '#/components/schemas/NoAuthentication'

    AuthTypeProperties:
      oneOf:
        - $ref: '#/components/schemas/Basic'
        - $ref: '#/components/schemas/ApiKey'
        - $ref: '#/components/schemas/Bearer'
        - $ref: '#/components/schemas/None'

    Error:
      type: object
      properties:
        code:
          type: string
          example: AAA-00000
        message:
          type: string
          example: Some error message.
        description:
          type: string
          example: Some error description.
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047
