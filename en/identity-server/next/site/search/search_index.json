{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.\u00a0</p>"},{"location":"apis/","title":"APIs - Overview","text":"<p>Administrators can use REST APIs in WSO2 Identity Server to manage their organizations and application users can use these APIs to manage their logins and profiles.</p> <p>Info</p> <p>Two OSGi services provide authentication and authorization services for REST APIs based on their handlers.</p> <p>You can write your handlers for authentication and authorization and register them in OSGI. For more information, refer to Write a Custom Local Authenticator.</p>"},{"location":"apis/#get-access-to-apis","title":"Get access to APIs","text":"<p>At least one authentication element should be sent in an API invocation request to invoke the API successfully. If you fail to add the authentication element, the  API request will return a <code>401</code> unauthorized HTTP response.</p> <p>WSO2 Identity Server supports the following API authentication methods:</p> <ul> <li>Basic authentication</li> <li>OAuth-based authentication</li> <li>Certificate-based authentication</li> </ul>"},{"location":"apis/#basic-authentication","title":"Basic authentication","text":"<p>This authentication method uses the user's credentials to invoke the APIs. If the API you wish to invoke has <code>Basic authentication</code> as the authentication requirement, use the following request format to access the API.</p> Access the API <p>This is a sample cURL command template for the request.</p> <pre><code>curl -X GET \"https://localhost:9443/t/carbon.super/api/server/v1/applications?limit=30&amp;offset=0\" -H \"accept: application/json\" -H \"Authorization: Basic &lt;Base64(username:password)&gt;\"\n</code></pre>"},{"location":"apis/#oauth-based-authentication","title":"OAuth-based authentication","text":"<p>This authentication method requires users to obtain an OAuth2 token and then use it to invoke the APIs. If the API you wish to invoke has <code>Password</code>, <code>Client-credentials</code>, or <code>AuthorizationCode</code> as the authentication requirement, use the following request format to obtain a bearer token.</p> <p>Before you begin</p> <ul> <li>You need to create an application with Management Application enabled.</li> <li>Expand the relevant API definition on the docs and obtain the scope required to invoke the API.</li> </ul> <p>Abstract</p> <p>Request <pre><code>curl https://localhost:9443/oauth2/token -k -H \"Authorization: Basic Base64 (&lt;clientid&gt;:&lt;client-secret&gt;)\" -d \"grant_type=password&amp;username=&lt;username&gt;&amp;password=&lt;password&gt;&amp;scope=&lt;scope&gt;\"\n</code></pre> Sample request <pre><code>curl https://localhost:9443/oauth2/token -k -H \"Authorization: Basic d21VRm5oY2xlWFJNSFFZb29iUkx5VGY0TUxFYTowc0doU0dOOG4zMXJFQnpSRjkyYlN1dG5IRUFh\" -d \"grant_type=password&amp;username=admin&amp;password=admin&amp;scope=internal_login\"\n</code></pre> Sample response <pre><code>{\n    \"access_token\":\"846575e6-52b9-346d-95a5-cb0ff22d009f\",\n    \"refresh_token\":\"9466cd69-4f9c-3675-861f-188a95bb60d3\",\"scope\":\"internal_login\",\"token_type\":\"Bearer\",\n    \"expires_in\":3600\n}\n</code></pre></p> <p>The variables used in the cURL request are as follows: </p> Variable Description Sample value <code>clientid</code> Client ID of your application. This is generated when registering the service provider on IS. <code>wmUFnhcleXRMHQYoobRLyTf4MLEa</code> <code>clientsecret</code> Client secret of your application. This is generated when registering the service provider on IS. <code>0sGhSGN8n31rEBzRF92bSutnHEAa</code> <code>Base64 (&lt;clientid&gt;:&lt;client-secret&gt;)</code> The base64 encoded value of <code>clientid:clientsecret</code>. <code>d21VRm5oY2xlWFJNSFFZb29iUkx5VGY0TUxFYTowc0doU0dOOG4zMXJFQnpSRjkyYlN1dG5IRUFh</code> <code>username</code> Username of the user trying to invoke the API. <code>alex</code> <code>password</code> Password of the user trying to invoke the API. <code>alex@123</code> <code>scope</code> The scope corresponding to the API you want to use. See the relevant API reference docs for each API's list of internal scopes. <code>internal_login</code> Access the API <p>You can now use the access token as an Authorization Bearer header to access the APIs.</p> <p>This is a sample cURL command template for the request.</p> <pre><code>curl -X GET \"https://localhost:9443/t/carbon.super/api/users/v1/me/sessions\" -H \"accept: application/json\u201d -H Authorization: Bearer &lt;access_token&gt;\"\n</code></pre>"},{"location":"apis/#certificate-based-authentication","title":"Certificate-based authentication","text":"<p>This authentication method uses mutual SSL to authenticate users and invoke the APIs.</p> <p>If you opt for mutual SSL for API authentication, configuring intermediate certificate validation enables you only to use certificates that are signed by a defined list of issuers.</p> <p>Add the following configuration to the <code>deployment.toml</code> file to enable this feature.</p> <p>Abstract</p> <p>Config <pre><code>[intermediate_cert_validation]\nenable=true\ncert_cns=[\"cert_CN_list\"]\nexempt_contexts=[\"endpoint_list\"]\n</code></pre></p> <p>Sample <pre><code>[intermediate_cert_validation]\nenable=true\ncert_cns=[\"wso2is.org\"]\nexempt_contexts=[\"dcr\",\"scim2\"]\n</code></pre></p> Parameter Purpose <code>enable</code> Defines whether intermediate certificate validation is enabled or not. <code>cert_cns</code> Specifies the context paths of the intermediate certificates. Multiple context paths can be defined for multiple certificates as follows.  <code>cert_cns=[\"wso2is.org\",\"abc.com\"]</code> <code>exempt_contexts</code> Specifies the context paths that need to be exempted from intermediate certificate validation. Multiple context paths can be defined as follows.  <code>exempt_contexts=[\"dcr\",\"scim2\"]</code> <p>Info</p> <p>When using intermediate certificate validation, note that the CN will be taken as the <code>username</code> instead of retrieving it from the header. Therefore, the incoming certificate request CN should ideally be the username of the user sending the request.</p> <p>The certificate CN should be in the following formats for the following cases.</p> <ul> <li>If the user is in the primary user store, the incoming cert CN should be <code>&lt;username&gt;</code>, e.g., <code>john</code>.</li> <li>If the user is in a secondary user store, the incoming cert CN should be <code>&lt;userstore_domain&gt;/&lt;username&gt;</code>, e.g., <code>SECONDARY/john</code>.</li> <li>If the user is not a super tenant and belongs to the primary user store, the incoming cert CN should be <code>&lt;username@tenant_doman&gt;</code>, e.g., <code>john@abc.com</code>.</li> <li>If the user is not a super tenant and belongs to a secondary user store, the incoming cert CN should be <code>&lt;userstore_domain&gt;/&lt;username@tenant_doman&gt;</code> e.g., <code>SECONDARY/john@abc.com</code>.</li> </ul>"},{"location":"apis/#additional-configurations","title":"Additional configurations","text":"<p>This section covers the additional configurations that admins can use when using APIS.</p>"},{"location":"apis/#secure-resources","title":"Secure resources","text":"<p>You can configure user role permissions to restrict access to resources. To do so, follow the guide below.</p> <ol> <li> <p>Open the deployment.toml file found in the IS_HOME/repository/conf directory.</p> </li> <li> <p>In the <code>[resource.access_control]</code> section, specify the resource you want to secure along with the following parameters.</p> Parameter Description Sample Value <code>context</code> The resource context that needs to be secured relative to the root context. <code>/api/identity/*</code> <code>secured</code> Enable or disable security in the given resource context. <code>true</code> <code>http_method</code> Specify an HTTP method i.e <code>all</code>, <code>post</code>, <code>get</code>, etc. <code>all</code> <code>permissions</code> The user role permission required to authorize the resource. You can enter multiple permission strings in a comma-separated list. <code>/permission/admin/ login</code> <code>scope</code> Scopes that an access token requires to access the resource. You can enter multiple scopes in a comma-separated list. <code>internal_idp_create</code> <code>allowed_auth_handlers</code> This parameter defines the handlers that need to be engaged for the particular resource. The default value <code>all</code> implies that all available handlers are engaged with the resource. <code>BasicAuthentication</code> <p>Abstract</p> <p>Example <pre><code>[resource.access_control]\ncontext = \"/api/identity/*\"\nsecured = true\nhttp_method = \"all\"\npermissions = [\"p1\",\"p2\"]\nscope = [\"scope1\", \"scope2\"]\nallowed_auth_handlers = [\"handler1\", \"handler2\"]\n</code></pre></p> </li> </ol>"},{"location":"apis/admin-services-for-one-way-operations/","title":"Admin Services for One Way Operations","text":"<p>Warning</p> <p>Admin services are deprecated from IS 6.0.0 onwards. You can use REST-based APIs.</p> <p>The following are the <code>.wsdl</code> files for key admin services for one way operations.</p> <ul> <li>UserIdentityManagementAdminService</li> <li>RemoteUserStoreManagerService</li> <li>UserInformationRecoveryService</li> <li>AuthenticationAdminService</li> <li>ChallengeQuestionManagementAdminService</li> </ul>"},{"location":"apis/application-rest-api/","title":"Application management API","text":""},{"location":"apis/approvals-rest-api/","title":"Approvals management API","text":""},{"location":"apis/association-rest-api/","title":"Associated accounts API","text":""},{"location":"apis/authorized-apps-rest-api/","title":"Authorized apps API V1","text":""},{"location":"apis/authorized-apps-v2-rest-api/","title":"Authorized apps API V2","text":""},{"location":"apis/call-admin-services/","title":"Call Admin Services","text":"<p>Warning</p> <p>Admin services are deprecated from IS 6.0.0 onwards. You can use REST-based APIs.</p> <p>WSO2 Identity Server (WSO2 IS) is managed internally using SOAP Web services known as admin services. WSO2 IS comes with a management console UI, which communicates with these admin services to facilitate administration capabilities through the UI.</p> <p>A service in WSO2 IS is defined by the following components:</p> <ul> <li>Service component: provides the actual service.</li> <li>UI component: provides the Web user interface to the service.</li> <li>Service stub: provides the interface to invoke the service generated from the service Web Services Description Language (WSDL).</li> </ul> <p>There can be instances where you want to call back-end Web services directly. For example, in test automation, to minimize the overhead of having to change automation scripts whenever a UI change happens, developers prefer to call the underlying services in scripts. The topics below explain how to discover and invoke these services from your applications.</p>"},{"location":"apis/call-admin-services/#discover-the-admin-services","title":"Discover the admin services","text":"<p>By default, the WSDLs of admin services are hidden from consumers. Explained below is how to discover them using the OSGi console.</p> <ol> <li> <p>Add the following configuration to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[admin_service.wsdl] \nenable= true\n</code></pre> </li> <li> <p>Go to the <code>&lt;IS_HOME&gt;/bin/</code> folder and start the WSO2 product as follows:</p> <p>``` java tab=\"In Linux Environment\" sh wso2server.sh -DosgiConsole <pre><code>``` java tab=\"In Windows Environment\"\nwso2server.bat -DosgiConsole\n</code></pre></p> </li> <li> <p>Once the server starts, hit the enter/return key several times to get the OSGI shell in the console.</p> </li> <li> <p>In the OSGi shell, type <code>listAdminServices</code> to view the list of admin services of your product.     </p> <p>Info</p> <p>The admin service's URL appears as follows in the list you discovered:</p> <pre><code>RemoteUserStoreManagerService, RemoteUserStoreManagerService, https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/services/RemoteUserStoreManagerService/  \n</code></pre> <p>After discovering the admin service, you can restart the server without <code>-DosgiConsole</code>.</p> <p>To see the service contract of an admin service, select the admin service's URL and then paste it into your browser with ?wsdl at the end. For example:</p> <p><code>https://localhost:9443/services/RemoteUserStoreManagerService?wsdl</code></p> </li> </ol>"},{"location":"apis/call-admin-services/#invoke-an-admin-service","title":"Invoke an admin service","text":"<p>Tip</p> <p>To generate the stubs, you can write your client program using the Axis2 client API or use an existing tool like SoapUI (4.5.1 or later).</p> <p>Related topics</p> <ul> <li>Reference: Permissions required to invoke admin services</li> <li>The following article guides you through transforming existing SOAP-based services into REST services in WSO2 Identity Server: Exposing WSO2 Identity Server Admin Services the REST Way.</li> </ul>"},{"location":"apis/challenge-questions/","title":"Challenge question API","text":""},{"location":"apis/challenge-rest-api/","title":"Challenge answers API","text":""},{"location":"apis/claim-management-rest-api/","title":"Claim management API","text":""},{"location":"apis/configs-rest-api/","title":"Server configuration API","text":""},{"location":"apis/consent-management-api-definition/","title":"Consent management API","text":""},{"location":"apis/cors-rest-api/","title":"CORS API","text":""},{"location":"apis/count-users-and-roles-using-management-console-and-admin-services/","title":"Count Users and User Roles","text":"<p>WSO2 Identity Server enables easily counting the users and user roles using the Management Console and Admin Services. </p> <p>Before you begin</p> <ol> <li> <p>Open the <code>deployment.toml</code> file in the <code>&lt;IS_HOME&gt;/repository/conf</code> directory and add the following configuration.</p> <pre><code>[user_store]\ncount_retriever_class = \"org.wso2.carbon.identity.user.store.count.jdbc.JDBCUserStoreCountRetriever\"\n</code></pre> </li> <li> <p>Restart the server.</p> </li> </ol> <p>Let's get started! </p>"},{"location":"apis/count-users-and-roles-using-management-console-and-admin-services/#count-via-management-console","title":"Count via management console","text":"<p>Follow the steps below to count users via the Management Console: </p> <ol> <li>On the Main menu of the Management Console, click Identity &gt; Users and Roles &gt; List.</li> <li> <p>To count users:</p> <ol> <li>Click Users.</li> <li> <p>Click Count Users. Note that you can count the number of users in each domain for different claims, user name patterns, etc. </p> <p>Example</p> <p>In this example, <code>%admin</code> is given as search pattern.  </p> </li> </ol> </li> <li> <p>Similarly, to count user roles:</p> <ol> <li>Click Roles.</li> <li> <p>Click Count Roles. Note that you can count the number of user roles in different userstore domains.</p> <p>Example</p> <p> </p> </li> </ol> </li> </ol> <p>Note</p> <p>By default, only JDBC userstore implementations supports this service but the functionality can be extended to LDAP userstores or any other type of userstore as well.</p>"},{"location":"apis/email-templates-rest-api/","title":"Email templates API","text":""},{"location":"apis/entitlement-with-apis/","title":"Entitlement with APIs","text":"<p>For entitlement management, WSO2 Identity Server provides two APIs for Policy Administration and Policy Evaluation.</p> <p>The following section guides you on invoking the two admin service and describes the operations available in the  Entitlement Management APIs.</p> <p>Before you begin</p> <p>As admin services are secured to prevent anonymous invocations, you cannot view the WSDL of the admin service by default. Follow the steps below to view and invoke it:</p> <ol> <li> <p>Set\u00a0the <code>admin_service.wsdl</code> element\u00a0to     <code>true</code> in     <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[admin_service.wsdl]\nenable = true\n</code></pre> </li> <li> <p>Restart the Identity Server.</p> </li> <li>If you have started the server in default configurations,\u00a0use the     following URL in your browser to see the WSDL of the admin service:\u00a0     eg:     <code>https://localhost:9443/services/EntitlementService?wsdl</code></li> </ol> <p>For more information on WSO2 admin services and how to invoke an admin service using either SoapUI or any other client program, see Call Admin Services.</p> <p>The following section guides you on entitlement management in two different areas.</p>"},{"location":"apis/entitlement-with-apis/#policy-administration-api","title":"Policy Administration API","text":"<p>Policy administration includes all the actions that should be done to manage a policy. Such as adding and updating policy/policies, publishing policies, removing policies etc. For this, WSO2 Carbon Platform has provided an admin service called EntitlementPolicyAdminService to manage policy administration stuff.</p> <ul> <li> <p>You can use the following URL in your browser to see the WSDL of the     EntitlementPolicyAdminService admin service.</p> <pre><code>https://localhost:9443/services/EntitlementPolicyAdminService?wsdl\n</code></pre> <p>By using any SoapUI, you can call this admin SOAP service.</p> <p>Note</p> <p>All the APIs are secured with basic authentication. Follow the steps below to add a basic auth header when calling these methods.</p> <ol> <li>Build a string of the form\u00a0username:password.</li> <li>Encode the string you created     above using Base64.</li> <li>Define an authorization header with the term      <code>Basic</code> , followed by the encoded     string. For example, the basic auth authorization header using     <code>admin</code> as both username and password is as follows:</li> </ol> <pre><code>``` java\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n</code></pre> </li> </ul>"},{"location":"apis/entitlement-with-apis/#operations-included-in-the-entitlementpolicyadminservice-soap-api","title":"Operations included in the EntitlementPolicyAdminService SOAP API","text":"<p>The following commonly used operations are available in the EntitlementPolicyAdminService.</p> addPolicy() Description Adds a new policy. Input Parameters Parameter Description <pre><code>policy</code></pre> The policy that should be registered. The XACML policy should be embedded to the SOAP service as a CDATA. <pre><code>version</code></pre> Version of the policy. <pre><code>policyId</code></pre> The policy name that should be registered. Request  Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.entitlement.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:addPolicy&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:policyDTO&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:policy&gt;&lt;![CDATA[\n                   &lt;Policy xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\"  PolicyId=\"sample_policy_template\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable\" Version=\"1.0\"&gt;\n                   &lt;Description&gt;This policy template provides ability to authorize users to a given service provider(defined by SP_NAME) in the authentication flow based on the roles of the user (defined by ROLE_1 and ROLE_2). Users who have at least one of the given roles, will be allowed and any others will be denied.&lt;/Description&gt;\n                   &lt;Target&gt;\n                      &lt;AnyOf&gt;\n                         &lt;AllOf&gt;\n                            &lt;Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;\n                               &lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;SP_NAME&lt;/AttributeValue&gt;\n                               &lt;AttributeDesignator AttributeId=\"http://wso2.org/identity/sp/sp-name\" Category=\"http://wso2.org/identity/sp\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"false\"&gt;&lt;/AttributeDesignator&gt;\n                            &lt;/Match&gt;\n                         &lt;/AllOf&gt;\n                      &lt;/AnyOf&gt;\n                   &lt;/Target&gt;\n                   &lt;Rule Effect=\"Permit\" RuleId=\"permit_by_roles\"&gt;\n                      &lt;Condition&gt;\n                         &lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:or\"&gt;\n                            &lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\"&gt;\n                               &lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;ROLE_1_1_1&lt;/AttributeValue&gt;\n                               &lt;AttributeDesignator AttributeId=\"http://wso2.org/claims/role\" Category=\"urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\"&gt;&lt;/AttributeDesignator&gt;\n                            &lt;/Apply&gt;\n                         &lt;/Apply&gt;\n                      &lt;/Condition&gt;\n                   &lt;/Rule&gt;\n                   &lt;Rule Effect=\"Deny\" RuleId=\"deny_others\"&gt;&lt;/Rule&gt;\n                &lt;/Policy&gt;        \n                ]]&gt;\n            &lt;/xsd1:policy&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:version&gt;1.0&lt;/xsd1:version&gt;\n            &lt;xsd1:policyId&gt;sample_policy_template&lt;/xsd1:policyId&gt;\n         &lt;/xsd:policyDTO&gt;\n      &lt;/xsd:addPolicy&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to see the sample response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:addPolicyResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n      &lt;/ns:addPolicyResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> getAllPolicyIds() Description Retrieve all policy names or policy Ids. Input Parameters <p>None</p> <p> </p> Request  Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getAllPolicyIds&gt;    \n      &lt;/xsd:getAllPolicyIds&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getAllPolicyIdsResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2340=\"http://dto.entitlement.identity.carbon.wso2.org/xsd\" xmlns:ax2338=\"http://entitlement.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return&gt;authn_role_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_scope_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_time_and_role_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_time_and_scope_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_time_and_user_claim_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_time_and_user_store_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_time_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_user_claim_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;authn_user_store_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;provisioning_role_based_policy&lt;/ns:return&gt;\n         &lt;ns:return&gt;provisioning_role_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;provisioning_time_and_role_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;provisioning_time_and_user_claim_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;provisioning_time_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;provisioning_user_claim_based_policy_template&lt;/ns:return&gt;\n         &lt;ns:return&gt;samplePolicy&lt;/ns:return&gt;\n         &lt;ns:return&gt;samplePolicy1&lt;/ns:return&gt;\n         &lt;ns:return&gt;samplepolicy_template&lt;/ns:return&gt;\n      &lt;/ns:getAllPolicyIdsResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> getPolicy() Description Retrieve a pre-defined policy. Input Parameters Parameter Description <pre><code>policyId</code></pre> The policy name that is registered. <pre><code>isPDPPolicy</code></pre> A boolean which tells whether the policy is published to PDP or not. Request  Click here to see the request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getPolicy&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:policyId&gt;authn_time_and_user_claim_based_policy_template&lt;/xsd:policyId&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:isPDPPolicy&gt;false&lt;/xsd:isPDPPolicy&gt;\n      &lt;/xsd:getPolicy&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getPolicyResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:type=\"ax2340:PolicyDTO\" xmlns:ax2340=\"http://dto.entitlement.identity.carbon.wso2.org/xsd\" xmlns:ax2338=\"http://entitlement.identity.carbon.wso2.org/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2340:active&gt;true&lt;/ax2340:active&gt;\n            &lt;ax2340:attributeDTOs xsi:type=\"ax2340:AttributeDTO\"&gt;\n               &lt;ax2340:attributeDataType&gt;http://www.w3.org/2001/XMLSchema#string&lt;/ax2340:attributeDataType&gt;\n               &lt;ax2340:attributeId&gt;http://wso2.org/identity/sp/sp-name&lt;/ax2340:attributeId&gt;\n               &lt;ax2340:attributeValue&gt;SP_NAME&lt;/ax2340:attributeValue&gt;\n               &lt;ax2340:category&gt;http://wso2.org/identity/sp&lt;/ax2340:category&gt;\n            &lt;/ax2340:attributeDTOs&gt;\n            &lt;ax2340:attributeDTOs xsi:type=\"ax2340:AttributeDTO\"&gt;\n               &lt;ax2340:attributeDataType&gt;http://www.w3.org/2001/XMLSchema#string&lt;/ax2340:attributeDataType&gt;\n               &lt;ax2340:attributeId&gt;http://wso2.org/identity/identity-action/action-name&lt;/ax2340:attributeId&gt;\n               &lt;ax2340:attributeValue&gt;authenticate&lt;/ax2340:attributeValue&gt;\n               &lt;ax2340:category&gt;http://wso2.org/identity/identity-action&lt;/ax2340:category&gt;\n            &lt;/ax2340:attributeDTOs&gt;\n            &lt;ax2340:attributeDTOs xsi:type=\"ax2340:AttributeDTO\"&gt;\n               &lt;ax2340:attributeDataType&gt;http://www.w3.org/2001/XMLSchema#time&lt;/ax2340:attributeDataType&gt;\n               &lt;ax2340:attributeId&gt;urn:oasis:names:tc:xacml:1.0:environment:current-time&lt;/ax2340:attributeId&gt;\n               &lt;ax2340:attributeValue&gt;09:00:00&lt;/ax2340:attributeValue&gt;\n               &lt;ax2340:category&gt;urn:oasis:names:tc:xacml:3.0:attribute-category:environment&lt;/ax2340:category&gt;\n            &lt;/ax2340:attributeDTOs&gt;\n            &lt;ax2340:attributeDTOs xsi:type=\"ax2340:AttributeDTO\"&gt;\n               &lt;ax2340:attributeDataType&gt;http://www.w3.org/2001/XMLSchema#time&lt;/ax2340:attributeDataType&gt;\n               &lt;ax2340:attributeId&gt;urn:oasis:names:tc:xacml:1.0:environment:current-time&lt;/ax2340:attributeId&gt;\n               &lt;ax2340:attributeValue&gt;17:00:00&lt;/ax2340:attributeValue&gt;\n               &lt;ax2340:category&gt;urn:oasis:names:tc:xacml:3.0:attribute-category:environment&lt;/ax2340:category&gt;\n            &lt;/ax2340:attributeDTOs&gt;\n            &lt;ax2340:attributeDTOs xsi:type=\"ax2340:AttributeDTO\"&gt;\n               &lt;ax2340:attributeDataType&gt;http://www.w3.org/2001/XMLSchema#string&lt;/ax2340:attributeDataType&gt;\n               &lt;ax2340:attributeId&gt;CLAIM_URI_1&lt;/ax2340:attributeId&gt;\n               &lt;ax2340:attributeValue&gt;CLAIM_VALUE_1&lt;/ax2340:attributeValue&gt;\n               &lt;ax2340:category&gt;urn:oasis:names:tc:xacml:3.0:attribute-category:resource&lt;/ax2340:category&gt;\n            &lt;/ax2340:attributeDTOs&gt;\n            &lt;ax2340:attributeDTOs xsi:type=\"ax2340:AttributeDTO\"&gt;\n               &lt;ax2340:attributeDataType&gt;http://www.w3.org/2001/XMLSchema#string&lt;/ax2340:attributeDataType&gt;\n               &lt;ax2340:attributeId&gt;CLAIM_URI_2&lt;/ax2340:attributeId&gt;\n               &lt;ax2340:attributeValue&gt;CLAIM_VALUE_2&lt;/ax2340:attributeValue&gt;\n               &lt;ax2340:category&gt;urn:oasis:names:tc:xacml:3.0:attribute-category:resource&lt;/ax2340:category&gt;\n            &lt;/ax2340:attributeDTOs&gt;\n            &lt;ax2340:lastModifiedTime&gt;1508817592043&lt;/ax2340:lastModifiedTime&gt;\n            &lt;ax2340:lastModifiedUser xsi:nil=\"true\"/&gt;\n            &lt;ax2340:policy&gt;&lt;![CDATA[&lt;Policy xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\"  PolicyId=\"authn_time_and_user_claim_based_policy_template\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable\" Version=\"1.0\"&gt;&lt;Description&gt;This template policy provides ability to authorize users to a given service provider(defined by SP_NAME) in the authentication flow based on the claim values of the user (CLAIM_URI_1=CLAIM_VALUE_1 and CLAIM_URI_2=CLAIM_VALUE_2) and the time of the day (eg. between 09:00:00 to 17:00:00). Users with the given claim values and who are logged in within the given time range will be allowed and any other users will be denied.&lt;/Description&gt;&lt;Target&gt;&lt;AnyOf&gt;&lt;AllOf&gt;&lt;Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;SP_NAME&lt;/AttributeValue&gt;&lt;AttributeDesignator AttributeId=\"http://wso2.org/identity/sp/sp-name\" Category=\"http://wso2.org/identity/sp\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"false\"&gt;&lt;/AttributeDesignator&gt;&lt;/Match&gt;&lt;Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;authenticate&lt;/AttributeValue&gt;&lt;AttributeDesignator AttributeId=\"http://wso2.org/identity/identity-action/action-name\" Category=\"http://wso2.org/identity/identity-action\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"false\"&gt;&lt;/AttributeDesignator&gt;&lt;/Match&gt;&lt;/AllOf&gt;&lt;/AnyOf&gt;&lt;/Target&gt;&lt;Rule Effect=\"Permit\" RuleId=\"permit_by_claims_and_time\"&gt;&lt;Condition&gt;&lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:and\"&gt;&lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:2.0:function:time-in-range\"&gt;&lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:time-one-and-only\"&gt;&lt;AttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:environment:current-time\" Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:environment\" DataType=\"http://www.w3.org/2001/XMLSchema#time\" MustBePresent=\"true\"&gt;&lt;/AttributeDesignator&gt;&lt;/Apply&gt;&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#time\"&gt;09:00:00&lt;/AttributeValue&gt;&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#time\"&gt;17:00:00&lt;/AttributeValue&gt;&lt;/Apply&gt;&lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;&lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-one-and-only\"&gt;&lt;AttributeDesignator AttributeId=\"CLAIM_URI_1\" Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\"&gt;&lt;/AttributeDesignator&gt;&lt;/Apply&gt;&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;CLAIM_VALUE_1&lt;/AttributeValue&gt;&lt;/Apply&gt;&lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;&lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-one-and-only\"&gt;&lt;AttributeDesignator AttributeId=\"CLAIM_URI_2\" Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\"&gt;&lt;/AttributeDesignator&gt;&lt;/Apply&gt;&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;CLAIM_VALUE_2&lt;/AttributeValue&gt;&lt;/Apply&gt;&lt;/Apply&gt;&lt;/Condition&gt;&lt;/Rule&gt;&lt;Rule Effect=\"Deny\" RuleId=\"deny_others\"&gt;&lt;/Rule&gt;&lt;/Policy&gt;]]&gt;&lt;/ax2340:policy&gt;\n            &lt;ax2340:policyEditor xsi:nil=\"true\"/&gt;\n            &lt;ax2340:policyId&gt;authn_time_and_user_claim_based_policy_template&lt;/ax2340:policyId&gt;\n            &lt;ax2340:policyOrder&gt;12&lt;/ax2340:policyOrder&gt;\n            &lt;ax2340:policyType&gt;Policy&lt;/ax2340:policyType&gt;\n            &lt;ax2340:promote&gt;false&lt;/ax2340:promote&gt;\n            &lt;ax2340:version&gt;1&lt;/ax2340:version&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getPolicyResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> getPolicyVersions() Description Get the version of a given policy. Input Parameters Parameter Description <pre><code>policyId</code></pre> The policy name is registered. Request  Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getPolicyVersions&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:policyId&gt;authn_time_and_user_claim_based_policy_template&lt;/xsd:policyId&gt;\n      &lt;/xsd:getPolicyVersions&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Responae  Click here to expand <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getPolicyVersionsResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2340=\"http://dto.entitlement.identity.carbon.wso2.org/xsd\" xmlns:ax2338=\"http://entitlement.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return&gt;1&lt;/ns:return&gt;\n      &lt;/ns:getPolicyVersionsResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> getPublisherModuleData() Description Get the details of the publisher Input Parameters <p>None</p> Request  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getPublisherModuleData/&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getPublisherModuleDataResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2340=\"http://dto.entitlement.identity.carbon.wso2.org/xsd\" xmlns:ax2338=\"http://entitlement.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return xsi:type=\"ax2340:PublisherDataHolder\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2340:moduleName&gt;Carbon Basic Auth Policy Publisher Module&lt;/ax2340:moduleName&gt;\n            &lt;ax2340:propertyDTOs xsi:type=\"ax2340:PublisherPropertyDTO\"&gt;\n               &lt;ax2340:displayName&gt;Subscriber Password&lt;/ax2340:displayName&gt;\n               &lt;ax2340:displayOrder&gt;3&lt;/ax2340:displayOrder&gt;\n               &lt;ax2340:id&gt;subscriberPassword&lt;/ax2340:id&gt;\n               &lt;ax2340:module&gt;Carbon Basic Auth Policy Publisher Module&lt;/ax2340:module&gt;\n               &lt;ax2340:required&gt;true&lt;/ax2340:required&gt;\n               &lt;ax2340:secret&gt;true&lt;/ax2340:secret&gt;\n               &lt;ax2340:value xsi:nil=\"true\"/&gt;\n            &lt;/ax2340:propertyDTOs&gt;\n            &lt;ax2340:propertyDTOs xsi:type=\"ax2340:PublisherPropertyDTO\"&gt;\n               &lt;ax2340:displayName&gt;Subscriber URL&lt;/ax2340:displayName&gt;\n               &lt;ax2340:displayOrder&gt;1&lt;/ax2340:displayOrder&gt;\n               &lt;ax2340:id&gt;subscriberURL&lt;/ax2340:id&gt;\n               &lt;ax2340:module&gt;Carbon Basic Auth Policy Publisher Module&lt;/ax2340:module&gt;\n               &lt;ax2340:required&gt;true&lt;/ax2340:required&gt;\n               &lt;ax2340:secret&gt;false&lt;/ax2340:secret&gt;\n               &lt;ax2340:value xsi:nil=\"true\"/&gt;\n            &lt;/ax2340:propertyDTOs&gt;\n            &lt;ax2340:propertyDTOs xsi:type=\"ax2340:PublisherPropertyDTO\"&gt;\n               &lt;ax2340:displayName&gt;Subscriber User Name&lt;/ax2340:displayName&gt;\n               &lt;ax2340:displayOrder&gt;2&lt;/ax2340:displayOrder&gt;\n               &lt;ax2340:id&gt;subscriberUserName&lt;/ax2340:id&gt;\n               &lt;ax2340:module&gt;Carbon Basic Auth Policy Publisher Module&lt;/ax2340:module&gt;\n               &lt;ax2340:required&gt;true&lt;/ax2340:required&gt;\n               &lt;ax2340:secret&gt;false&lt;/ax2340:secret&gt;\n               &lt;ax2340:value xsi:nil=\"true\"/&gt;\n            &lt;/ax2340:propertyDTOs&gt;\n            &lt;ax2340:propertyDTOs xsi:type=\"ax2340:PublisherPropertyDTO\"&gt;\n               &lt;ax2340:displayName&gt;Subscriber Id&lt;/ax2340:displayName&gt;\n               &lt;ax2340:displayOrder&gt;0&lt;/ax2340:displayOrder&gt;\n               &lt;ax2340:id&gt;subscriberId&lt;/ax2340:id&gt;\n               &lt;ax2340:module&gt;Carbon Basic Auth Policy Publisher Module&lt;/ax2340:module&gt;\n               &lt;ax2340:required&gt;true&lt;/ax2340:required&gt;\n               &lt;ax2340:secret&gt;false&lt;/ax2340:secret&gt;\n               &lt;ax2340:value xsi:nil=\"true\"/&gt;\n            &lt;/ax2340:propertyDTOs&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getPublisherModuleDataResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> publishToPDP() Description Publish a policy to PDP Input Parameters Parameter Description <pre><code>policyId</code></pre> The policy name that should be published to PDP. Request  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:publishToPDP&gt;\n         &lt;!--Zero or more repetitions:--&gt;\n         &lt;xsd:policyIds&gt;provisioning_user_claim_based_policy_template&lt;/xsd:policyIds&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:version&gt;1&lt;/xsd:version&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:enabled&gt;false&lt;/xsd:enabled&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:order&gt;30&lt;/xsd:order&gt;\n      &lt;/xsd:publishToPDP&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:publishToPDPResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n      &lt;/ns:publishToPDPResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> removePolicy() Description Remove policy from PDP Input Parameters Parameter Description <pre><code>policyId</code></pre> The policy name that should be removed. Request  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:removePolicy&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:policyId&gt;authn_role_based_policy_template&lt;/xsd:policyId&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:dePromote&gt;true&lt;/xsd:dePromote&gt;\n      &lt;/xsd:removePolicy&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:removePolicyResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n      &lt;/ns:removePolicyResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> updatePolicy() Description Publish a policy to PDP Input Parameters Parameter Description <pre><code>policyId</code></pre> The policy name that should be published to PDP. Request  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.entitlement.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:updatePolicy&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:policyDTO&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:policy&gt;\n            &lt;![CDATA[\n                   &lt;Policy xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\"  PolicyId=\"samplepolicy_template\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable\" Version=\"1.0\"&gt;\n                   &lt;Description&gt;This policy template provides ability to authorize users to a given service provider(defined by SP_NAME) in the authentication flow based on the roles of the user (defined by ROLE_1 and ROLE_2). Users who have at least one of the given roles, will be allowed and any others will be denied.&lt;/Description&gt;\n                   &lt;Target&gt;\n                      &lt;AnyOf&gt;\n                         &lt;AllOf&gt;\n                            &lt;Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;\n                               &lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;SP_NAME&lt;/AttributeValue&gt;\n                               &lt;AttributeDesignator AttributeId=\"http://wso2.org/identity/sp/sp-name\" Category=\"http://wso2.org/identity/sp\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"false\"&gt;&lt;/AttributeDesignator&gt;\n                            &lt;/Match&gt;\n                         &lt;/AllOf&gt;\n                      &lt;/AnyOf&gt;\n                   &lt;/Target&gt;\n                   &lt;Rule Effect=\"Permit\" RuleId=\"permit_by_roles\"&gt;\n                      &lt;Condition&gt;\n                         &lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:or\"&gt;\n                            &lt;Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\"&gt;\n                               &lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;myName&lt;/AttributeValue&gt;\n                               &lt;AttributeDesignator AttributeId=\"http://wso2.org/claims/role\" Category=\"urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\"&gt;&lt;/AttributeDesignator&gt;\n                            &lt;/Apply&gt;\n                         &lt;/Apply&gt;\n                      &lt;/Condition&gt;\n                   &lt;/Rule&gt;\n                   &lt;Rule Effect=\"Deny\" RuleId=\"deny_others\"&gt;&lt;/Rule&gt;\n                &lt;/Policy&gt;        \n                ]]&gt;\n            &lt;/xsd1:policy&gt;\n            &lt;xsd1:policyEditorData&gt;?&lt;/xsd1:policyEditorData&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:policyId&gt;samplepolicy_template&lt;/xsd1:policyId&gt;\n         &lt;/xsd:policyDTO&gt;\n      &lt;/xsd:updatePolicy&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:updatePolicyResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n      &lt;/ns:updatePolicyResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> <p>There is no REST API available for the policy management.</p>"},{"location":"apis/entitlement-with-apis/#policy-evaluation-api","title":"Policy Evaluation API","text":"<p>Policy evaluation includes all the actions that should be done during the policy evaluation such as getting the decision, getting all entitlement attributes, etc. For this, WSO2 Carbon Platform has provided an admin service called EntitlementService to evaluate a policy.</p> <ul> <li> <p>You can use the following URL in your browser to see the WSDL of the     EntitlementService admin\u00a0service.</p> <pre><code>https://localhost:9443/services/EntitlementService?wsdl\n</code></pre> <p>By using any SoapUI, you can call this admin SOAP service.</p> <p>Note</p> <p>Note:</p> <p>All the APIs are secured with basic authentication. Follow the steps below to add a basic auth header when calling these methods.</p> <ol> <li>Build a string of the form\u00a0username:password.</li> <li>Encode the string you created     above using Base64.</li> <li>Define an authorization header with the term      <code>Basic</code> , followed by the encoded     string. For example, the basic auth authorization header using     <code>admin</code> as both username and password is as follows:</li> </ol> <pre><code>``` java\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n</code></pre> </li> </ul>"},{"location":"apis/entitlement-with-apis/#operations-included-in-entitlementservice-soap-api","title":"Operations included in EntitlementService SOAP API","text":"<p>Note</p> <p>Before you begin,</p> <p>In order to try this EntitlementService using SOAP UI, You need to publish a Policy to the PDP. For this, you can use EntitlementPolicyAdminService or management console UI.</p> <p>We use the following sample policy to evaluate using EntitlementService admin service.</p> <pre><code>&lt;Policy xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" PolicyId=\"samplePolicy\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides\" Version=\"1.0\"&gt;\n&lt;Target&gt;\n&lt;AnyOf&gt;\n&lt;AllOf&gt;\n&lt;Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;\n&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;read&lt;/AttributeValue&gt;\n&lt;AttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\"/&gt;\n&lt;/Match&gt;\n&lt;/AllOf&gt;\n&lt;/AnyOf&gt;\n&lt;/Target&gt;\n&lt;Rule Effect=\"Permit\" RuleId=\"permit\"/&gt;\n&lt;/Policy&gt;\n</code></pre> <p>The following commonly used operations are available in the EntitlementPolicyAdminService. A sample SOAP request and response will be available with each of the operation.</p> getDecision() Description Get the decision after evaluating the request with the policy. Input Parameters Parameter Description <pre><code>request</code></pre> The XML request to be evaluated as a CDATA Request  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getDecision&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:request&gt;&lt;![CDATA[\n         &lt;Request CombinedDecision=\"false\" ReturnPolicyIdList=\"false\" xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\"&gt;\n &lt;Attributes Category=\"urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\"&gt;\n      &lt;Attribute IncludeInResult=\"false\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:subject:subject-id\"&gt;\n         &lt;AttributeValue DataType=\"urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name\"&gt;bs@simpsons.com&lt;/AttributeValue&gt;\n      &lt;/Attribute&gt;\n   &lt;/Attributes&gt;\n    &lt;Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\"&gt;\n        &lt;Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" IncludeInResult=\"false\"&gt;\n            &lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;read&lt;/AttributeValue&gt;\n        &lt;/Attribute&gt;\n    &lt;/Attributes&gt;\n    &lt;Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\"&gt;\n        &lt;Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" IncludeInResult=\"false\"&gt;\n            &lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;http://127.0.0.1/service/very_secure/ &lt;/AttributeValue&gt;\n        &lt;/Attribute&gt;\n    &lt;/Attributes&gt;\n&lt;/Request&gt;\n         ]]&gt;&lt;/xsd:request&gt;\n      &lt;/xsd:getDecision&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getDecisionResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return&gt;&lt;![CDATA[&lt;Response xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\"&gt;&lt;Result&gt;&lt;Decision&gt;Permit&lt;/Decision&gt;&lt;Status&gt;&lt;StatusCode Value=\"urn:oasis:names:tc:xacml:1.0:status:ok\"/&gt;&lt;/Status&gt;&lt;/Result&gt;&lt;/Response&gt;]]&gt;&lt;/ns:return&gt;\n      &lt;/ns:getDecisionResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> getBooleanDecision() Description Get the decision after evaluating the request with the policy published in a boolean format. Input Parameters Parameter Description <pre><code>subject</code></pre> The subject/user who is using the resource. <pre><code>resource</code></pre> The resource which is accessed by the user. <pre><code>action</code></pre> The action performed by the user. Request  Click here to expand the request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getBooleanDecision&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:subject&gt;admin&lt;/xsd:subject&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:resource&gt;http://127.0.0.1/service/very_secure/&lt;/xsd:resource&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:action&gt;read&lt;/xsd:action&gt;\n      &lt;/xsd:getBooleanDecision&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getBooleanDecisionResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return&gt;true&lt;/ns:return&gt;\n      &lt;/ns:getBooleanDecisionResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> getDecisionByAttributes() Description Get the decision by evaluating attributes with the policy. Input Parameters <pre><code>subject</code></pre> Request  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getDecisionByAttributes&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:subject&gt;admin&lt;/xsd:subject&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:resource&gt;http://127.0.0.1/service/very_secure/&lt;/xsd:resource&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:action&gt;read&lt;/xsd:action&gt;\n      &lt;/xsd:getDecisionByAttributes&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getDecisionByAttributesResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return&gt;&lt;![CDATA[&lt;Response xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\"&gt;&lt;Result&gt;&lt;Decision&gt;Permit&lt;/Decision&gt;&lt;Status&gt;&lt;StatusCode Value=\"urn:oasis:names:tc:xacml:1.0:status:ok\"/&gt;&lt;/Status&gt;&lt;/Result&gt;&lt;/Response&gt;]]&gt;&lt;/ns:return&gt;\n      &lt;/ns:getDecisionByAttributesResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> getEntitledAttributes() Description Get all the details of the entitled attributes. Input Parameters Parameter Description <pre><code>subjectName</code></pre> Subject/Username of the subject which access the resource. <pre><code>resourceName</code></pre> Name of the resource which is accessed by the subject. <pre><code>subjectId</code></pre> XACML id of the subject <pre><code>action</code></pre> Action which is performed by the subject. <pre><code>enableChildSearch</code></pre> Enable search over child attributes. Request  Click here to expand the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getEntitledAttributes&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:subjectName&gt;admin&lt;/xsd:subjectName&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:resourceName&gt;http://127.0.0.1/service/very_secure/&lt;/xsd:resourceName&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:subjectId&gt;urn:oasis:names:tc:xacml:1.0:subject:subject-id&lt;/xsd:subjectId&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:action&gt;read&lt;/xsd:action&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:enableChildSearch&gt;true&lt;/xsd:enableChildSearch&gt;\n      &lt;/xsd:getEntitledAttributes&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response  Click here to expand the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getEntitledAttributesResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:type=\"ax2348:EntitledResultSetDTO\" xmlns:ax2346=\"http://entitlement.identity.carbon.wso2.org/xsd\" xmlns:ax2348=\"http://dto.entitlement.identity.carbon.wso2.org/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2348:advanceResult&gt;false&lt;/ax2348:advanceResult&gt;\n            &lt;ax2348:entitledAttributesDTOs xsi:type=\"ax2348:EntitledAttributesDTO\"&gt;\n               &lt;ax2348:action&gt;read&lt;/ax2348:action&gt;\n               &lt;ax2348:allActions&gt;false&lt;/ax2348:allActions&gt;\n               &lt;ax2348:allResources&gt;true&lt;/ax2348:allResources&gt;\n               &lt;ax2348:environment xsi:nil=\"true\"/&gt;\n               &lt;ax2348:resourceName xsi:nil=\"true\"/&gt;\n            &lt;/ax2348:entitledAttributesDTOs&gt;\n            &lt;ax2348:message xsi:nil=\"true\"/&gt;\n            &lt;ax2348:messageType xsi:nil=\"true\"/&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getEntitledAttributesResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> <p>REST API</p> <p>WSO2 Identity Server provides a REST API and a REST endpoint for the policy evaluation. Please read more about this REST API from here.</p>"},{"location":"apis/entitlement-with-apis/#EntitlementwithAPIs-Parameter","title":"Parameter","text":""},{"location":"apis/entitlement-with-apis/#EntitlementwithAPIs-Description","title":"Description","text":""},{"location":"apis/entitlement-with-apis/#EntitlementwithAPIs-Thesubject/userwhoisusingtheresource.","title":"The subject/user who is using the resource.","text":""},{"location":"apis/entitlement-with-apis/#EntitlementwithAPIs-resource","title":"resource","text":""},{"location":"apis/entitlement-with-apis/#EntitlementwithAPIs-Theresourcewhichisaccessedbytheuser.","title":"The resource which is accessed by the user.","text":""},{"location":"apis/entitlement-with-apis/#EntitlementwithAPIs-action","title":"action","text":""},{"location":"apis/entitlement-with-apis/#EntitlementwithAPIs-Theactionperformedbytheuser.","title":"The action performed by the user.","text":""},{"location":"apis/entitlement-with-rest-apis/","title":"Entitlement with REST APIs","text":"<p>Entitlement management is the process that grants, resolves, enforces, revokes and administers fine-grained access privileges.</p> <p>The WSO2 Identity Server supports REST APIs for entitlement management via the <code>https://{IS_IP}:{IS_PORT}/api/identity/entitlement/decision/</code> endpoint.</p> <p>If your WSO2 Identity Server is running on localhost (127.0.0.1) and on the default port, the entitlement endpoint is:     <pre><code>https://localhost:9443/api/identity/entitlement/decision/\n</code></pre></p> <p>Note</p> <p>The REST APIs are secured with basic authentication. Follow the steps below to add a basic auth header when calling these methods.</p> <ol> <li>Build a string of the form\u00a0username:password and encode it using Base64.</li> <li> <p>Define an authorization header with the term <code>Basic</code>, followed by the encoded     string.  For example, the basic authorization header for <code>admin</code> user with password <code>admin</code> is:</p> <pre><code>Authorization: Basic YWRtaW46YWRtaW4=\n</code></pre> </li> </ol> Get API resource list Description Get the API resource list according to XACML 3.0 specification. Resource Path /home HTTP Method GET Request/Response Format application/json <p>application/xml</p> Authentication Basic Username admin Password admin Parameters Name Located In Description Required Schema Accept header Request Media Type Yes string Auth_Type header Authentication Type Yes string Authorization header Add HTTP Basic Authorization Yes string Content-type header Response Media Type Yes string Response Code Description Schema 200 XACML JSON/XML Response 40010 Error in response <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> 40020 Request parse exception <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> <p> </p> <p> </p> <p>A sample request and response is as follows:</p> Sample request GET Request: cURL <pre><code>curl -X GET   https://localhost:9443/api/identity/entitlement/decision/home   -H 'accept: application/json'   -H 'authorization: Basic YWRtaW46YWRtaW4='   -H 'content-type: application/json'  -k</code></pre> Sample Response Sample response: JSON <pre><code>{\n\"xmlns\": \"http://ietf.org/ns/home-documents\",\n\"resources\": [\n        {\n\"link\": {\n\"href\": \"/pdp\"\n            },\n\"rel\": \"http://docs.oasis-open.org/ns/xacml/relation/pdp\"\n        }\n    ]\n}</code></pre> Evaluate XACML request Description Get a response by evaluating the JSON/XML XACML request. Resource Path /pdp HTTP Method POST Request/Response Format <p>application/json</p> <p>application/xml</p> Authentication Basic Username admin Password admin Parameters Name Located In Description Required Schema Accept header Request Media Type Yes string Auth_Type header Authentication Type Yes string Authorization header Add HTTP Basic Authorization Yes string Content-type header Response Media Type Yes string body body XACML JSON/XML Request Yes string Response Code Description Schema 200 XACML JSON/XML Response 40010 Error in response <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> 40020 Request parse exception <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> <p> </p> <p> </p> <p>A sample request and response is as follows:</p> XACML Policy Evaluated XACML Policy <pre><code>&lt;Policy xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" PolicyId=\"samplePolicy\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides\" Version=\"1.0\"&gt;\n&lt;Target&gt;\n&lt;AnyOf&gt;\n&lt;AllOf&gt;\n&lt;Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\"&gt;\n&lt;AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\"&gt;read&lt;/AttributeValue&gt;\n&lt;AttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\"/&gt;\n&lt;/Match&gt;\n&lt;/AllOf&gt;\n&lt;/AnyOf&gt;\n&lt;/Target&gt;\n&lt;Rule Effect=\"Permit\" RuleId=\"permit\"/&gt;\n&lt;/Policy&gt;</code></pre> Sample Request Request: JSON <pre><code>{\n\"Request\": {\n\"AccessSubject\": {\n\"Attribute\": [\n                           {\n\"AttributeId\": \"urn:oasis:names:tc:xacml:1.0:subject:subject-id\",\n\"Value\": \"Andreas\"\n                           }\n           ]\n              },        \"Action\": {\n\"Attribute\": [\n                {\n\"AttributeId\": \"urn:oasis:names:tc:xacml:1.0:action:action-id\",\n\"Value\": \"read\"\n                }\n            ]\n        },\n\"Resource\": {\n\"Attribute\": [\n                {\n\"AttributeId\": \"urn:oasis:names:tc:xacml:1.0:resource:resource-id\",\n\"Value\": \"http://127.0.0.1/service/very_secure/\"\n                }\n            ]\n        }\n    }\n}</code></pre> Sample Response Response: JSON <pre><code>{\n\"Response\": [\n    {\n\"Decision\": \"Permit\",\n\"Status\": {\n\"StatusCode\": {\n\"Value\": \"urn:oasis:names:tc:xacml:1.0:status:ok\"\n        }\n      }\n    }\n  ]\n}</code></pre> Evaluate XACML request by attributes Description Get a response by evaluating attributes. Resource Path /by-attrib HTTP Method POST Request/Response Format application/json <p>application/xml</p> Authentication Basic Username admin Password admin Parameters Name Located In Description Required Schema Accept header Request Media Type Yes string Auth_Type header Authentication Type Yes string Authorization header Add HTTP Basic Authorization Yes string Content-type header Response Media Type Yes string body body Decision Request Model Yes <pre><code>DecisionRequestModel {\n\u00a0\n    subject:string\n    action:string\n    resource:string\n    environment:[\n            string\n    ]\n}</code></pre> Response Code Description Schema 200 Method call success <code>                                     HomeResponseModel\u00a0{                                    }                 </code> 40010 Error in response <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> 40020 Request parse exception <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> <p>A sample request and response are as follows,</p> A sample request Request: cURL <pre><code>curl --request POST \\\n  --url https://localhost:9443/api/identity/entitlement/decision/by-attrib \\\n  --header 'accept: application/json' \\\n  --header 'authorization: Basic YWRtaW46YWRtaW4=' \\\n  --header 'content-type: application/json' \\\n  --data '{\n\"action\":\"read\",\n\"resource\":\"http://127.0.0.1/service/very_secure/\",\n\"subject\" : \"admin\"\n}' -k</code></pre> A sample response Response: JSON <pre><code>{\n\"Response\": [\n    {\n\"Decision\": \"Permit\",\n\"Status\": {\n\"StatusCode\": {\n\"Value\": \"urn:oasis:names:tc:xacml:1.0:status:ok\"\n        }\n      }\n    }\n  ]\n}</code></pre> Evaluate XACML request by attributes and receive boolean response Description Get a boolean response by evaluating attributes. Resource Path /by-attrib-boolean HTTP Method POST Request/Response Format <p>application/json</p> <p>application/xml</p> Authentication Basic Username admin Password admin Parameters Name Located In Description Required Schema Accept header Request Media Type Yes string Auth_Type header Authentication Type Yes string Authorization header Add HTTP Basic Authorization Yes string Content-type header Response Media Type Yes string body body Decision Request Model Yes <pre><code>DecisionRequestModel {\n\u00a0\n    subject:string\n    action:string\n    resource:string\n    environment:[\n            string\n    ]\n}</code></pre> Response Code Description Schema 200 XACML JSON/XML Response 40010 Error in response <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> 40020 Request parse exception <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> <p>A sample request and response are as follows,</p> A sample request Request: cURL <pre><code>curl --request POST \\\n  --url https://localhost:9443/api/identity/entitlement/decision/by-attrib-boolean \\\n  --header 'accept: application/json' \\\n  --header 'authorization: Basic YWRtaW46YWRtaW4=' \\\n  --header 'content-type: application/json' \\\n  --data '{\n\"action\":\"read\",\n\"resource\":\"http://127.0.0.1/service/very_secure/\",\n\"subject\" : \"admin\"\n}' -k</code></pre> A sample response Response: Boolean <pre><code>true</code></pre> Get entitled attributes Description Get entitled attributes for a given set of parameters. Resource Path /entitled-attribs HTTP Method POST Request/Response Format <p>application/json</p> <p>application/xml</p> Authentication Basic Username admin Password admin Parameters Name Located In Description Required Schema Accept header Request Media Type Yes string Auth_Type header Authentication Type Yes string Authorization header Add HTTP Basic Authorization Yes string Content-type header Response Media Type Yes string body body Decision Request Model Yes <pre><code>EntitledAttributesRequestModel {\n    subjectName:string\n    resourceName:string\n    subjectId:string\n    action:string\n    enableChildSearch:boolean\n}</code></pre> Response Code Description Schema 200 Entitled attributes response <pre><code>EntitledAttributesResponseModel {\n    entitledResultSetDTO:EntitledResultSetDTO {\n        entitledAttributesDTOs:[\n            EntitledAttributesDTO {\n                resourceName:string\n                action:string\n                environment:string\n                allActions:boolean\n                allResources:boolean\n                attributeDTOs:[\n                    AttributeDTO {\n                        attributeValue:string\n                        attributeDataType:string\n                        attributeId:string\n                        category:string\n                    }\n                ]\n            }\n        ]\n        advanceResult:boolean\n        message:string\n        messageType:string\n    }\n}</code></pre> 40010 Error in response <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> 40020 Request parse exception <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> <p>A sample request and response are as follows,</p> A sample request Request: cURL <pre><code>curl --request POST \\\n  --url https://localhost:9443/api/identity/entitlement/decision/entitled-attribs \\\n  --header 'accept: application/json' \\\n  --header 'authorization: Basic YWRtaW46YWRtaW4=' \\\n  --header 'content-type: application/json' \\\n  --data '{\n\"subjectName\" : \"admin\",\n\"enableChildSearch\" : \"false\"\n}' -k</code></pre> A sample response Response: JSON <pre><code>{\n\"entitledResultSetDTO\": {\n\"entitledAttributesDTOs\": [\n         {\n\"resourceName\": null,\n\"action\": \"read\",\n\"environment\": null,\n\"allActions\": false,\n\"allResources\": true,\n\"attributeDTOs\": []\n         }\n      ],\n\"advanceResult\": false,\n\"message\": null,\n\"messageType\": null\n   }\n}</code></pre> Get all entitlements Description Get all entitlements for a given set of parameters Resource Path /entitlements-all HTTP Method POST Request/Response Format <p>application/json</p> <p>application/xml</p> Authentication Basic Username admin Password admin Parameters Name Located In Description Required Schema Accept header Request Media Type Yes string Auth_Type header Authentication Type Yes string Authorization header Add HTTP Basic Authorization Yes string Content-type header Response Media Type Yes string body body All Entitlements Model Yes <pre><code>AllEntitlementsRequestModel {\n    identifier:string\n    givenAttributes:[\n        AttributeDTO {\n            attributeValue:string\n            attributeDataType:string\n            attributeId:string\n            category:string\n        }\n    ]\n}</code></pre> Response Code Description Schema 200 All entitlements response <pre><code>AllEntitlementsResponseModel {\n    entitledResultSetDTO:EntitledResultSetDTO {\n        entitledAttributesDTOs:[\n            EntitledAttributesDTO {\n                resourceName:string\n                action:string\n                environment:string\n                allActions:boolean\n                allResources:boolean\n                attributeDTOs:[\n                    AttributeDTO {\n                        attributeValue:string\n                        attributeDataType:string\n                        attributeId:string\n                        category:string\n                    }\n                ]\n            }\n        ]\n        advanceResult:boolean\n        message:string\n        messageType:string\n    }\n}</code></pre> 40010 Error in response <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre> 40020 Request parse exception <pre><code>ExceptionBean {\n    code:integer\n    message:string\n}</code></pre>"},{"location":"apis/fido-rest-api/","title":"FIDO API","text":""},{"location":"apis/governance-connectors/","title":"Governance Connectors Management API Definition","text":"<p>This is the RESTful API for managing identity governance configurations in WSO2 Identity Server. These configurations are grouped into five main categories. Each category has subcategories which are called connectors, and properties of connectors as mentioned below. </p> Password Policies<p>Password History</p> Property display name Property name Purpose Validate password history passwordHistory.enable User will not be allowed to use previously used passwords. Password history validation count passwordHistory.count Restrict reusing this number of previously used passwords during a password update. <p>Password Patterns</p> Property display name Property name Purpose Validate passwords based on a policy pattern passwordPolicy.enable Validate user passwords against a policy. Minimum number of characters passwordPolicy.min.length This denotes the minimum number of characters in the password. Maximum number of characters passwordPolicy.max.length This denotes the maximum number of characters in the password. Password pattern regex passwordPolicy.pattern The regular expression pattern to validate the password. Error message on pattern violation passwordPolicy.errorMsg The error message that will be displayed when a pattern violation is detected in the password. User Onboarding<p>Self Registration</p> Property display name Property name Purpose User self registration SelfRegistration.Enable Users are allowed to self register to the system. Lock user account on creation SelfRegistration.LockOnCreation Lock self-registered user account until e-mail verification. Manage notifications sending internally SelfRegistration.Notification.InternallyManage This property should be disabled if the client application handles notification sending. Prompt reCaptcha SelfRegistration.ReCaptcha This denotes whether reCaptcha verification is required during self registration. User self registration verification link expiry time SelfRegistration.VerificationCode.ExpiryTime This denotes the expiry time in minutes for the verification link. User self registration SMS OTP expiry time SelfRegistration.VerificationCode.SMSOTP.ExpiryTime This denotes the expiry time in minutes for the SMS OTP. User self registration callback URL regex SelfRegistration.CallbackRegex This prefix will be used to validate the callback URL. Manage Self-Sign-Up purposes _url_listPurposeSelfSignUp Manage Self-Sign-Up purposes Send sign up confirmation email SelfRegistration.NotifyAccountConfirmation This enable sending notification for self signup confirmation. Prompt reCaptcha on re-send confirmation SelfRegistration.ResendConfirmationReCaptcha This prompts reCaptcha verification for resend confirmation. Enable Auto Login After Account Confirmation SelfRegistration.AutoLogin.Enable User will be logged in automatically after the account confirmation. Alias of the key used to sign to cookie SelfRegistration.AutoLogin.AliasName This is the alias of the key used to sign to cookie. The public key has to be imported to the keystore. <p>Lite User Registration</p> Property display name Property name Purpose Lite user registration LiteRegistration.Enable Users are allowed to self register to the system without a password. Lock user account on creation LiteRegistration.LockOnCreation The self-registered user account will be locked until e-mail verification. Manage notifications sending internally LiteRegistration.Notification.InternallyManage This property should be disabled if the client application handles notification sending. Prompt reCaptcha LiteRegistration.ReCaptcha The reCaptcha verification will be prompted during self registration. Lite user registration verification link expiry time LiteRegistration.VerificationCode.ExpiryTime Specify the expiry time in minutes for the verification link. Lite user registration SMS OTP expiry time LiteRegistration.VerificationCode.SMSOTP.ExpiryTime Specify the expiry time in minutes for the SMS OTP. Lite user registration callback URL regex LiteRegistration.CallbackRegex This regular expression pattern will be used to validate the callback URL. Manage Lite-Sign-Up purposes _url_listPurposeSelfSignUp Manage Lite-Sign-Up purposes <p>Ask Password</p> Property display name Property name Purpose Enable user email verification EmailVerification.Enable A verification notification will be triggered during user creation. Enable account lock on creation EmailVerification.LockOnCreation The user account will be locked during user creation. Manage notifications sending internally EmailVerification.Notification.InternallyManage Disable if the client application handles notification sending. Email verification code expiry time EmailVerification.ExpiryTime Set the time span that the verification e-mail would be valid, in minutes. (For infinite validity period, set -1) Ask password code expiry time EmailVerification.AskPassword.ExpiryTime Set the time span that the ask password e-mail would be valid, in minutes. (For infinite validity period, set -1) Temporary password generation extension class EmailVerification.AskPassword.PasswordGenerator Temporary password generation extension point in ask password feature Manage JIT provisioning purposes _url_listPurposeJITProvisioning Click here to manage just in time provisioning purposes. Login Attempts Security<p>Account Lock</p> Property display name Property name Purpose Lock user accounts account.lock.handler.enable Lock user accounts on failed login attempts Maximum failed login attempts account.lock.handler.On.Failure.Max.Attempts Number of failed login attempts allowed before the account is locked. Initial account lock duration account.lock.handler.Time The time period for which an account will remain locked during the first account locking instance. Account will be automatically unlocked after this time period. Account lock duration increment factor account.lock.handler.login.fail.timeout.ratio Account lock duration will be increased by this factor. Ex: Initial duration: 5m; Increment factor: 2; Next lock duration: 5 x 2 = 10m Manage notification sending internally account.lock.handler.notification.manageInternally This property should be disabled if the client application handles notification sending. <p>reCaptcha for SSO Login</p> Property display name Property name Purpose Always prompt reCaptcha sso.login.recaptcha.enable.always Always prompt reCaptcha verification during SSO login flow. Prompt reCaptcha after max failed attempts sso.login.recaptcha.enable Prompt reCaptcha verification during SSO login flow only after the max failed attempts exceeded. Max failed attempts for reCaptcha sso.login.recaptcha.on.max.failed.attempts Number of failed attempts allowed without prompting reCaptcha verification. Other Settings<p>Consent Information Controller</p> Property display name Property name Purpose Controller Name piiController Name of the first Controller who collects the data Contact Name contact Contact name of the Controller Email Address email Contact email address of the Controller Phone Number phone Contact phone number of the Controller On Behalf onBehalf A user information (PII) Processor acting on behalf of a Controller or PII Processor Url piiControllerUrl A URL for contacting the Controller Country addressCountry Country of the Controller Locality addressLocality Locality of the Controller Region addressRegion Region of the Controller Post Office Box Number postOfficeBoxNumber Post Office Box Number of the Controller Postal Code postalCode Postal Code of the Controller Street Address streetAddress Street Address of the Controller <p>Analytics Engine Configuration</p> Property display name Property name Purpose Target Host adaptive_authentication.analytics.receiver Target Host Enable Basic Authentication adaptive_authentication.analytics.basicAuth.enabled Enable Basic Authentication User ID adaptive_authentication.analytics.basicAuth.username Target Host Secured User ID Secret __secret__adaptive_authentication.analytics.basicAuth.password Target Host Secured Secret HTTP Connection Timeout adaptive_authentication.analytics.HTTPConnectionTimeou HTTP Connection Timeout in milliseconds HTTP Read Timeout adaptive_authentication.analytics.HTTPReadTimeout HTTP Read Timeout in milliseconds HTTP Connection Request Timeout adaptive_authentication.analytics.HTTPConnectionRequestTimeout HTTP Connection Request Timeout in milliseconds Hostname verification adaptive_authentication.analytics.hostnameVerfier Hostname verification. (STRICT, ALLOW_ALL) <p>User Claim Update</p> Property display name Property name Purpose Enable user email verification on update UserClaimUpdate.Email.EnableVerification Trigger a verification notification when user's email address is updated. Email verification on update link expiry time UserClaimUpdate.Email.VerificationCode.ExpiryTime Validity time of the email confirmation link in minutes. Enable user mobile number verification on update UserClaimUpdate.MobileNumber.EnableVerification Trigger a verification SMS OTP when user's mobile number is updated. Mobile number verification on update SMS OTP expiry time UserClaimUpdate.MobileNumber.VerificationCode.ExpiryTime Validity time of the mobile number confirmation OTP in minutes. Account Management<p>Idle Account Suspend</p> Property display name Property name Purpose Suspend idle user accounts suspension.notification.enable Lock user account after a given idle period. Allowed idle time span in days suspension.notification.account.disable.delay Time period in days before locking the user account. Alert sending time periods in days suspension.notification.delays Send warning alerts to users before locking the account after each period. Comma-separated multiple values accepted. <p>Account Disable</p> Property display name Property name Purpose Enable account disabling account.disable.handler.enable Allow an administrative user to disable user accounts Manage notification sending internally account.disable.handler.notification.manageInternally This property should be disabled if the client application handles notification sending. <p>Account Recovery</p> Property display name Property name Purpose Notification based password recovery Recovery.Notification.Password.Enable This enables password recovery via email notifications. Enable reCaptcha for password recovery Recovery.ReCaptcha.Password.Enable reCaptcha is prompted during password recovery via email notifications. Security question based password recovery Recovery.Question.Password.Enable This enables password recovery via answering security questions. Number of questions required for password recovery Recovery.Question.Password.MinAnswers This defines the number of security questions that are required to be answered. Security question answer regex Recovery.Question.Password.ReCaptcha.Enable The regular expression pattern for answers provided for security questions. Enforce security question answer uniqueness Recovery.Question.Answer.Uniqueness This enforces the uniqueness of the answers provided for security questions. Enable reCaptcha for security questions based password recovery Recovery.Question.Password.ReCaptcha.Enable Prompt reCaptcha for security question-based password recovery Max failed attempts for reCaptcha Recovery.Question.Password.ReCaptcha.MaxFailedAttempts The reCaptcha will be prompted only after it exceeds this number of failed attempts. Username recovery Recovery.Notification.Username.Enable This enables the user to recover the account if the user has forgotten the username. Enable reCaptcha for username recovery Recovery.ReCaptcha.Username.Enable reCaptcha is prompted during username recovery Manage notifications sending internally Recovery.Notification.InternallyManage This property should be disabled if the client application handles notification sending. Notify when recovery success Recovery.NotifySuccess Upon a successful password reset, a success notification is sent to the user. Notify when security questions based recovery starts Recovery.Question.Password.NotifyStart A notification will be sent to the user that the security question-based recovery has started. Recovery link expiry time in Minutes Recovery.ExpiryTime The expiration time for the recovery link. SMS OTP expiry time Recovery.Notification.Password.ExpiryTime.smsOtp Expiration time of the SMS OTP code for password recovery SMS OTP regex Recovery.Notification.Password.smsOtp.Regex The regular expression pattern for SMS OTP in format [allowed characters] Enable forced security questions Recovery.Question.Password.Forced.Enable Force users to provide answers to security questions during sign-in Minimum number of forced security questions to be answered Recovery.Question.MinQuestionsToAnswer Force users to provide answers to more security questions during sign-in if the number of questions answered is lesser than this value Recovery callback URL regex Recovery.CallbackRegex This regular expression pattern will be used to validate the recovery callback URL. Enable Auto Login After Password Reset Recovery.AutoLogin.Enable User will be logged in automatically after completing the Password Reset wizard <p>Password Reset</p> Property display name Property name Purpose Enable password reset via recovery e-mail Recovery.AdminPasswordReset.RecoveryLink User gets notified with a link to reset password. Enable password reset via OTP Recovery.AdminPasswordReset.OTP User gets notified with a one-time password to try with SSO login. Enable password reset offline Recovery.AdminPasswordReset.Offline An OTP will be generated and stored in users claims. <p>The APIs can be used to retrieve the above mentioned categories, connectors of the categories, properties of the categories, and update the property values.</p>"},{"location":"apis/identity-governance-rest-api/","title":"Identity governance API","text":""},{"location":"apis/identity-provider-configurations-used-with-apis/","title":"Identity Provider Configurations used with APIs","text":"<p>This section lists out some sample configurations that can be used when configuring an Identity Provider.</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#federated-authenticator-configuration-samples","title":"Federated authenticator configuration samples","text":"<p>A federated authenticator is used to authenticate a user through an external system (e.g. Yahoo, MSN, OpenIDConnect). To write your own custom federated authenticator, see Write a Custom Federated Authenticator.</p> <p>Warning</p> <p>The <code>&lt;federatedAuthenticatorConfigs&gt;</code> and <code>&lt;defaultAuthenticatorConfig&gt;</code> tags have similar attributes. To configure a federated authenticator as the default authenticator, use the desired configuration found below with the <code>&lt;defaultAuthenticatorConfig&gt;</code> tag instead of the <code>&lt;federatedAuthenticatorConfigs&gt;</code> tag. Note that there can be only one <code>&lt;defaultAuthenticatorConfig&gt;</code> while there can be multiple <code>&lt;federatedAuthenticatorConfigs&gt;</code> .</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#saml2-web-sso-configuration","title":"SAML2 Web SSO configuration","text":"<pre><code>&lt;federatedAuthenticatorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;displayName&gt;samlsso&lt;/displayName&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;SAMLSSOAuthenticator&lt;/name&gt;\n&lt;properties&gt;\n&lt;name&gt;IdPEntityId&lt;/name&gt;\n&lt;value&gt;Identity Provider Entity Id&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;SPEntityId&lt;/name&gt;\n&lt;value&gt;Service Provider Entity Id&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;SSOUrl&lt;/name&gt;\n&lt;value&gt;https://localhost:9443/samlsso/&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;ISAuthnReqSigned&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;IsLogoutEnabled&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;LogoutReqUrl&lt;/name&gt;\n&lt;value&gt;https://example.com/logout/url&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;IsLogoutReqSigned&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;IsAuthnRespSigned&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;IsUserIdInClaims&lt;/name&gt;\n&lt;value&gt;false&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;IsAssertionEncrypted&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;isAssertionSigned&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;commonAuthQueryParams&lt;/name&gt;\n&lt;value&gt;paramName1=value1&amp;paramName2=value2&lt;/value&gt;\n&lt;/properties&gt;\n&lt;/federatedAuthenticatorConfigs&gt;\n</code></pre> <p>Property Name</p> <p>Description</p> <p>IdPEntityId</p> <p>Identity Provider Entity Id</p> <p>SPEntityId</p> <p>Service Provider Entity Id</p> <p>SSOUrl</p> <p>SSO URL</p> <p>ISAuthnReqSigned</p> <p>Enable Authentication Request Signing</p> <p>IsLogoutEnabled</p> <p>Enable Logout</p> <p>LogoutReqUrl</p> <p>Logout Url</p> <p>IsLogoutReqSigned</p> <p>Enable Logout Request Signing</p> <p>IsAuthnRespSigned</p> <p>Enable Authentication Response Signing</p> <p>IsUserIdInClaims</p> <p>SAML2 Web SSO User ID Location</p> <p>IsAssertionEncrypted</p> <p>Enable Assertion Encryption</p> <p>isAssertionSigned</p> <p>Enable Assertion Signing</p> <p>commonAuthQueryParams</p> <p>Additional Query Parameters</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#oauth2openid-connect-configuration","title":"OAuth2/OpenID Connect configuration","text":"<pre><code>&lt;federatedAuthenticatorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;displayName&gt;openidconnect&lt;/displayName&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;OpenIDConnectAuthenticator&lt;/name&gt;\n&lt;properties&gt;\n&lt;name&gt;ClientId&lt;/name&gt;\n&lt;value&gt;ClientID&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;OAuth2AuthzUrl&lt;/name&gt;\n&lt;value&gt;https://localhost:9443/oauth2/authorize/&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;OAUTH2TokenUrl&lt;/name&gt;\n&lt;value&gt;https://localhost:9443/oauth2/token/&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;confidential&gt;true&lt;/confidential&gt;\n&lt;name&gt;ClientSecret&lt;/name&gt;\n&lt;value&gt;ClientSecret&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;IsUserIdInClaims&lt;/name&gt;\n&lt;value&gt;false&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;commonAuthQueryParams&lt;/name&gt;\n&lt;value&gt;paramName1=value1&amp;paramName2=value2&lt;/value&gt;\n&lt;/properties&gt;\n&lt;/federatedAuthenticatorConfigs&gt;\n</code></pre> <p>Property Name</p> <p>Description</p> <p>ClientId</p> <p>Client Id</p> <p>OAuth2AuthzUrl</p> <p>Authorization Endpoint URL</p> <p>OAUTH2TokenUrl</p> <p>Token Endpoint URL</p> <p>ClientSecret</p> <p>Client Secret</p> <p>IsUserIdInClaims</p> <p>OpenID Connect User ID Location</p> <p>commonAuthQueryParams</p> <p>Additional Query Parameters</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#ws-federation-passive-configuration","title":"WS-Federation (Passive) configuration","text":"<pre><code>&lt;federatedAuthenticatorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;displayName&gt;passivests&lt;/displayName&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;PassiveSTSAuthenticator&lt;/name&gt;\n&lt;properties&gt;\n&lt;name&gt;RealmId&lt;/name&gt;\n&lt;value&gt;Passive STS Realm&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;PassiveSTSUrl&lt;/name&gt;\n&lt;value&gt;https://localhost:9443/passivests/&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;IsUserIdInClaims&lt;/name&gt;\n&lt;value&gt;false&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;commonAuthQueryParams&lt;/name&gt;\n&lt;value&gt;paramName1=value1&lt;/value&gt;\n&lt;/properties&gt;\n&lt;/federatedAuthenticatorConfigs&gt;\n</code></pre> Property Name Description RealmId Passive STS Realm PassiveSTSUrl Passive STS URL IsUserIdInClaims Passive STS User ID Location commonAuthQueryParams Additional Query Parameters"},{"location":"apis/identity-provider-configurations-used-with-apis/#facebook-configuration","title":"Facebook configuration","text":"<pre><code>&lt;federatedAuthenticatorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;displayName&gt;facebook&lt;/displayName&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;FacebookAuthenticator&lt;/name&gt;\n&lt;properties&gt;\n&lt;name&gt;ClientId&lt;/name&gt;\n&lt;value&gt;clientID&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;confidential&gt;true&lt;/confidential&gt;\n&lt;name&gt;ClientSecret&lt;/name&gt;\n&lt;value&gt;secret&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;UserInfoFields&lt;/name&gt;\n&lt;value&gt;id,first_name,middle_name,gender,email&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;Scope&lt;/name&gt;\n&lt;value&gt;email&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;callBackUrl&lt;/name&gt;\n&lt;value&gt;https://localhost:9443/commonauth&lt;/value&gt;\n&lt;/properties&gt;\n&lt;/federatedAuthenticatorConfigs&gt;\n</code></pre> Property Name Description ClientId This refers to the Client Id you received from the Facebook app you created. ClientSecret This refers to the Client Secret you received from the Facebook app you created. UserInfoFields These are the claims related to the user account on Facebook. WSO2 Identity Server requests these fields from Facebook when a user is authenticated with Facebook through the IS. See public_profile permission for more information about these fields. Scope Defines the permission to access particular information from a Facebook profile. See the Permissions Reference for a list of the different permission groups in Facebook APIs. callBackUrl Callback URL of the Identity Server."},{"location":"apis/identity-provider-configurations-used-with-apis/#yahoo-configuration","title":"Yahoo configuration","text":"<pre><code>&lt;federatedAuthenticatorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;displayName&gt;yahoo&lt;/displayName&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;YahooOpenIDAuthenticator&lt;/name&gt;\n&lt;/federatedAuthenticatorConfigs&gt;\n</code></pre>"},{"location":"apis/identity-provider-configurations-used-with-apis/#google-configuration","title":"Google configuration","text":"<pre><code>&lt;federatedAuthenticatorConfigs\nxmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;displayName&gt;google&lt;/displayName&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;GoogleOpenIDAuthenticator&lt;/name&gt;\n&lt;/federatedAuthenticatorConfigs&gt;\n</code></pre>"},{"location":"apis/identity-provider-configurations-used-with-apis/#microsoft-hotmailmsnlive-configuration","title":"Microsoft (Hotmail,MSN,Live) configuration","text":"<pre><code>&lt;federatedAuthenticatorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;displayName&gt;microsoft(hotmail,&lt;/displayName&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;MicrosoftWindowsLive&lt;/name&gt;\n&lt;properties&gt;\n&lt;name&gt;ClientSecret&lt;/name&gt;\n&lt;value&gt;clientsecret&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;windows-live-callback-url&lt;/name&gt;\n&lt;value&gt;https://example.com/callback/url&lt;/value&gt;\n&lt;/properties&gt;\n&lt;properties&gt;\n&lt;name&gt;ClientId&lt;/name&gt;\n&lt;value&gt;clientID&lt;/value&gt;\n&lt;/properties&gt;\n&lt;/federatedAuthenticatorConfigs&gt;\n</code></pre> <p>Property Name</p> <p>Description</p> <p>ClientSecret</p> <p>Client Secret</p> <p>windows-live-callback-url</p> <p>Callback Url</p> <p>ClientId</p> <p>Client Id</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#outbound-provisioning-connector-configuration-samples","title":"Outbound provisioning connector configuration samples","text":"<p>An outbound provisioning connector is used to provision users to external systems (e.g. Google, SalesForce).\u00a0\u00a0To write your own custom outbound provisioning connector, see Write an Outbound Provisioning Connector.</p> <p>Warning</p> <p>The <code>&lt;provisioningConnectorConfigs&gt;</code> and <code>&lt;defaultProvisioningConnectorConfig&gt;</code> tags have similar attributes. To configure an outbound provisioning connector as the default provisioning connector, use the desired configuration found below with the <code>&lt;defaultProvisioningConnectorConfig&gt;</code> tag instead of the <code>&lt;provisioningConnectorConfigs&gt;</code> tag. There can be only one <code>&lt;defaultProvisioningConnectorConfig&gt;</code> while there can be multiple <code>&lt;provisioningConnectorConfigs&gt;</code> .</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#salesforce-provisioning-configuration","title":"SalesForce provisioning configuration","text":"<pre><code>&lt;provisioningConnectorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;salesforce&lt;/name&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;sf-username&lt;/name&gt;\n&lt;value&gt;testuser&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;confidential&gt;true&lt;/confidential&gt;\n&lt;name&gt;sf-password&lt;/name&gt;\n&lt;value&gt;testpw&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;sf-clientid&lt;/name&gt;\n&lt;value&gt;clientID&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;confidential&gt;true&lt;/confidential&gt;\n&lt;name&gt;sf-client-secret&lt;/name&gt;\n&lt;value&gt;clientsecret&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;sf-api-version&lt;/name&gt;\n&lt;value&gt;1.0.0&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;sf-domain-name&lt;/name&gt;\n&lt;value&gt;example.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;/provisioningConnectorConfigs&gt;\n</code></pre> <p>Property Name</p> <p>Description</p> <p>sf-username</p> <p>Username</p> <p>sf-password</p> <p>Password</p> <p>sf-clientid</p> <p>Client ID</p> <p>sf-client-secret</p> <p>Client Secret</p> <p>sf-api-version</p> <p>API version</p> <p>sf-domain-name</p> <p>Domain Name</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#google-provisioning-configuration","title":"Google provisioning configuration","text":"<pre><code>&lt;provisioningConnectorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;googleapps&lt;/name&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;google_prov_application_name&lt;/name&gt;\n&lt;value&gt;TestApp&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;google_prov_admin_email&lt;/name&gt;\n&lt;value&gt;test@mygoogledomain.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;google_prov_service_acc_email&lt;/name&gt;\n&lt;value&gt;test@developer.gserviceaccount.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;google_prov_familyname_claim_dropdown&lt;/name&gt;\n&lt;value&gt;ClaimB&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;google_prov_givenname_claim_dropdown&lt;/name&gt;\n&lt;value&gt;ClaimB&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;google_prov_email_claim_dropdown&lt;/name&gt;\n&lt;value&gt;ClaimA&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;google_prov_domain_name&lt;/name&gt;\n&lt;value&gt;mygoogledomain.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;/provisioningConnectorConfigs&gt;\n</code></pre> <p>Property Name</p> <p>Description</p> <p>google_prov_application_name</p> <p>Application Name</p> <p>google_prov_admin_email</p> <p>Administrator's Email</p> <p>google_prov_service_acc_email</p> <p>Service Account Email</p> <p>google_prov_familyname_claim_dropdown</p> <p>Family Name</p> <p>google_prov_givenname_claim_dropdown</p> <p>Given Name</p> <p>google_prov_email_claim_dropdown</p> <p>Primary Email</p> <p>google_prov_domain_name</p> <p>Google Domain</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#scim-provisioning-configuration","title":"SCIM provisioning configuration","text":"<pre><code>&lt;provisioningConnectorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;scim&lt;/name&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;scim-username&lt;/name&gt;\n&lt;value&gt;testuser&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;confidential&gt;true&lt;/confidential&gt;\n&lt;name&gt;scim-password&lt;/name&gt;\n&lt;value&gt;testpw&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;scim-user-ep&lt;/name&gt;\n&lt;value&gt;example.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;scim-group-ep&lt;/name&gt;\n&lt;value&gt;example.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;scim-user-store-domain&lt;/name&gt;\n&lt;value&gt;example.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;/provisioningConnectorConfigs&gt;\n</code></pre> <p>Property Name</p> <p>Description</p> <p>scim-username</p> <p>Username</p> <p>scim-password</p> <p>Password</p> <p>scim-user-ep</p> <p>User Endpoint</p> <p>scim-group-ep</p> <p>Group Endpoint</p> <p>scim-user-store-domain</p> <p>User Store Domain</p>"},{"location":"apis/identity-provider-configurations-used-with-apis/#spml-provisioning-configuration","title":"SPML provisioning configuration","text":"<pre><code>&lt;provisioningConnectorConfigs xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;name&gt;spml&lt;/name&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;spml-username&lt;/name&gt;\n&lt;value&gt;testuser&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;confidential&gt;true&lt;/confidential&gt;\n&lt;name&gt;spml-password&lt;/name&gt;\n&lt;value&gt;testpw&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;spml-ep&lt;/name&gt;\n&lt;value&gt;example.com&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;provisioningProperties&gt;\n&lt;name&gt;spml-oc&lt;/name&gt;\n&lt;value&gt;spml2person&lt;/value&gt;\n&lt;/provisioningProperties&gt;\n&lt;/provisioningConnectorConfigs&gt;\n</code></pre> <p>Property Name</p> <p>Description</p> <p>spml-username</p> <p>Username</p> <p>spml-password</p> <p>Password</p> <p>spml-ep</p> <p>SPML Endpoint</p> <p>spml-oc</p> <p>SPML ObjectClass</p>"},{"location":"apis/idp-session-extender-endpoint/","title":"Identity Provider Session Extending API","text":"<p>Info</p> <p>To access this API, use the following endpoint URL. <pre><code>https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/t/&lt;TENANT_DOMAIN&gt;/identity/extend-session\n</code></pre></p> <p>This API can be used to extend the user's session at the identity provider. To identify the session that  needs to be extended, this API requires one of the following.</p> <ol> <li>Session identifier as a request parameter: This can be obtained from the ID token.</li> <li>Session identifier cookie: This is the <code>commonAuthId</code> cookie.</li> </ol> <p>Info</p> <p>Currently, the session identifier value can only be obtained via OIDC flows that have sessions involved.</p>"},{"location":"apis/idp-session-extender-endpoint/#extracting-the-session-identifier-value","title":"Extracting the session identifier value","text":"<p>If the above config has been enabled, the session identifier can be extracted from the ID token.  To do this, decode the ID token and read the value of the claim <code>isk</code>, which is the identifier of the session.</p>"},{"location":"apis/idp-session-extender-endpoint/#supported-requests","title":"Supported requests","text":"Sending session identifier as a request parameter <pre><code>curl --location --request GET 'https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/t/&lt;TENANT_DOMAIN&gt;/identity/extend-session?idpSessionKey=&lt;SESSION_IDENTIFIER&gt;'\n</code></pre> <p>Replace the <code>&lt;SESSION_IDENTIFIER&gt;</code> with the <code>isk</code> value obtained from the ID token. This method is ideal  in cases where the use of third party cookies has been blocked.</p> Sending session identifier as a cookie <pre><code>curl --location --request GET 'https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/t/&lt;TENANT_DOMAIN&gt;/identity/extend-session' \\\n--header 'Cookie: commonAuthId=&lt;COMMON_AUTH_ID_COOKIE&gt;'\n</code></pre> <p>In this case, replace the <code>&lt;COMMON_AUTH_ID_COOKIE&gt;</code> with the <code>commonAuthId</code> cookie value.</p>"},{"location":"apis/idp-session-extender-endpoint/#api-responses","title":"API responses","text":"<p>If session extension has been successful, a <code>200 OK</code> response will be returned.</p> <p>If session extension has failed, the response could be one of the following.</p> Response status code Error code Description 500 ISE-65001 Unexpected server error 400 ISE-60001 Invalid request 400 ISE-60002 Session Key param value invalid 400 ISE-60003 Session cookie invalid 400 ISE-60004 Session not available/already expired"},{"location":"apis/idp/","title":"Identity provider API","text":""},{"location":"apis/keystore-rest-api/","title":"Keystore management API","text":""},{"location":"apis/manage-claims-with-apis/","title":"Manage Claims with SOAP APIs","text":"<p>The Claim Management component of WSO2 Carbon allows you to map a set of attributes from the underlying user store to a set of defined claims.\u00a0This section guides you through invoking and working with the <code>ClaimMetadataManagementService</code> and the operations you can work within this service.</p>"},{"location":"apis/manage-claims-with-apis/#invoking-the-admin-service","title":"Invoking the admin service","text":"<p>The <code>ClaimMetadataManagementService</code> is an admin service of the WSO2 Carbon platform. As admin services are secured to prevent anonymous invocations, you cannot view the WSDL of the admin service by default. Follow the steps given below to view and invoke the admin service:</p> <ol> <li> <p>Open the <code>deployment.toml</code> file in the <code>&lt;IS_HOME&gt;/repository/conf</code> directory and set the <code>admin_service.wsdl</code> element to <code>false</code>.</p> <pre><code>[admin_service.wsdl]\nenable = false\n</code></pre> </li> <li> <p>Restart WSO2 Identity Server.</p> </li> <li> <p>If you started WSO2 Identity Server using the default configurations,\u00a0copy the following URL to your browser to see the WSDL of the admin service:     <pre><code>https://localhost:9443/services/ClaimMetadataManagementService?wsdl\n</code></pre></p> <p>Tip</p> <p>The default hostname of WSO2 Identity Server is <code>localhost</code>. If you are using a different hostname, make sure to replace <code>localhost</code> with the new hostname.</p> <p>Info</p> <p>For more information on WSO2 admin services and how to invoke an admin service using either SoapUI or any other client program, see Call Admin Services.</p> </li> </ol>"},{"location":"apis/manage-claims-with-apis/#api-operations","title":"API operations","text":"<p>The following operations are available in <code>ClaimMetadataManagementService</code>.</p>"},{"location":"apis/manage-claims-with-apis/#addclaimdialect","title":"addClaimDialect ()","text":"Description This operation adds a new claim dialect. Input Parameters <ul> <li><code>claimDialectURI</code>: This is the URI that defines the new claim dialect.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\" xmlns:xsd=\"http://api.user.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:addClaimDialect&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:claimDialect&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:claimDialectURI&gt;new dialect&lt;/xsd1:claimDialectURI&gt;\n         &lt;/xsd:claimDialect&gt;\n      &lt;/xsd:addClaimDialect&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n  &lt;ns:addClaimDialectResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n     &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n  &lt;/ns:addClaimDialectResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#getclaimdialects","title":"getClaimDialects()","text":"Description This operation lists out all the claim dialects which are used. Input Parameters None Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:getClaimDialects/&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:getClaimDialectsResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2333=\"http://base.identity.carbon.wso2.org/xsd\" xmlns:ax2336=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\" xmlns:ax2332=\"http://exception.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;http://wso2.org/claims&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;http://schemas.xmlsoap.org/ws/2005/05/identity&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;urn:scim:schemas:core:1.0&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;urn:ietf:params:scim:schemas:core:2.0:User&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;http://wso2.org/oidc/claim&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;urn:ietf:params:scim:schemas:core:2.0&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;http://schema.openid.net/2007/05/claims&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;http://axschema.org&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;urn:ietf:params:scim:schemas:extension:enterprise:2.0:User&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2336:ClaimDialectDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:claimDialectURI&gt;http://abc.org/claims&lt;/ax2336:claimDialectURI&gt;\n       &lt;/ns:return&gt;\n    &lt;/ns:getClaimDialectsResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#addexternalclaim","title":"addExternalClaim()","text":"Description This operation adds a new external claim. Input Parameters <ul> <li><code>externalClaimDialectURI</code>: This is the URI that defines the external claim dialect.</li> <li><code>externalClaimUR</code>: This is the URI of the external claim.</li> <li><code>mappedLocalClaimURI</code>: This is the URI of the mapped claim.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:addExternalClaim&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:externalClaim&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:externalClaimDialectURI&gt;external cliam dialect&lt;/xsd1:externalClaimDialectURI&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:externalClaimURI&gt;external claim uri&lt;/xsd1:externalClaimURI&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:mappedLocalClaimURI&gt;mapped local claim&lt;/xsd1:mappedLocalClaimURI&gt;\n       &lt;/xsd:externalClaim&gt;\n    &lt;/xsd:addExternalClaim&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:addExternalClaimResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:addExternalClaimResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#addlocalclaim","title":"addLocalClaim()","text":"Description This operation adds a new local claim. Input Parameters <ul> <li><code>attributeName</code>: This is the attribute name.</li> <li><code>userStoreDomain</code>: This is the user-store domain of the attribute.</li> <li><code>propertyName</code>: This is the name of the property.</li> <li><code>propertyValue</code>: This is the value of the property.</li> <li><code>localClaimURI</code>: This is the URI of the local claim.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:addLocalClaim&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:localClaim&gt;\n          &lt;!--Zero or more repetitions:--&gt;\n          &lt;xsd1:attributeMappings&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:attributeName&gt;email&lt;/xsd1:attributeName&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:userStoreDomain&gt;primary&lt;/xsd1:userStoreDomain&gt;\n          &lt;/xsd1:attributeMappings&gt;\n          &lt;!--Zero or more repetitions:--&gt;\n          &lt;xsd1:claimProperties&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:propertyName&gt;email&lt;/xsd1:propertyName&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:propertyValue&gt;www.sample@email.com&lt;/xsd1:propertyValue&gt;\n          &lt;/xsd1:claimProperties&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:localClaimURI&gt;http://abc.org/email&lt;/xsd1:localClaimURI&gt;\n       &lt;/xsd:localClaim&gt;\n    &lt;/xsd:addLocalClaim&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:addLocalClaimResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:addLocalClaimResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#getexternalclaims","title":"getExternalClaims()","text":"Description This operation returns all the external claims. Input Parameters <ul> <li><code>externalClaimDialectURI</code>: This is the URI that defines the external claim dialect.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:getExternalClaims&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:externalClaimDialectURI&gt;external claim dialect uri&lt;/xsd:externalClaimDialectURI&gt;\n    &lt;/xsd:getExternalClaims&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:getExternalClaimsResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2333=\"http://base.identity.carbon.wso2.org/xsd\" xmlns:ax2336=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\" xmlns:ax2332=\"http://exception.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"/&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#getlocalclaims","title":"getLocalClaims()","text":"Description This operation returns all the local claims available.   Input Parameters None      Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:getLocalClaims/&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:getLocalClaimsResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2333=\"http://base.identity.carbon.wso2.org/xsd\" xmlns:ax2336=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\" xmlns:ax2332=\"http://exception.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n       &lt;ns:return xsi:type=\"ax2336:LocalClaimDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:attributeMappings xsi:type=\"ax2336:AttributeMappingDTO\"&gt;\n             &lt;ax2336:attributeName&gt;unlockTime&lt;/ax2336:attributeName&gt;\n             &lt;ax2336:userStoreDomain&gt;PRIMARY&lt;/ax2336:userStoreDomain&gt;\n          &lt;/ax2336:attributeMappings&gt;\n          &lt;ax2336:claimProperties xsi:type=\"ax2336:ClaimPropertyDTO\"&gt;\n             &lt;ax2336:propertyName&gt;Description&lt;/ax2336:propertyName&gt;\n             &lt;ax2336:propertyValue&gt;Unlock Time&lt;/ax2336:propertyValue&gt;\n          &lt;/ax2336:claimProperties&gt;\n          &lt;ax2336:claimProperties xsi:type=\"ax2336:ClaimPropertyDTO\"&gt;\n             &lt;ax2336:propertyName&amp;&gt;gt;DisplayName&lt;/ax2336:propertyName&gt;\n             &lt;ax2336:propertyValue&gt;Unlock Time&lt;/ax2336:propertyValue&gt;\n          &lt;/ax2336:claimProperties&gt;\n          &lt;ax2336:localClaimURI&gt;http://wso2.org/claims/identity/unlockTime&lt;/ax2336:localClaimURI&gt;\n       &lt;/ns:return&gt;\n......\n       &lt;ns:return xsi:type=\"ax2336:LocalClaimDTO\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2336:attributeMappings xsi:type=\"ax2336:AttributeMappingDTO\"&gt;\n             &lt;ax2336:attributeName&gt;email&lt;/ax2336:attributeName&gt;\n             &lt;ax2336:userStoreDomain&gt;PRIMARY&lt;/ax2336:userStoreDomain&gt;\n          &lt;/ax2336:attributeMappings&gt;\n          &lt;ax2336:claimProperties xsi:type=\"ax2336:ClaimPropertyDTO\"&gt;\n             &lt;ax2336:propertyName&gt;email&lt;/ax2336:propertyName&gt;\n             &lt;ax2336:propertyValue&gt;www.sample@email.com&lt;/ax2336:propertyValue&gt;\n          &lt;/ax2336:claimProperties&gt;\n          &lt;ax2336:localClaimURI&gt;&gt;http://abc.org/email&lt;ax2336:localClaimURI&gt;\n       &lt;/ns:return&gt;\n    &lt;/ns:getLocalClaimsResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#removeclaimdialect","title":"removeClaimDialect()","text":"Description This operation removes an existing claim dialect. Input Parameters <ul> <li><code>claimDialectURI</code>: This is the URI that defines the deleting claim dialect.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:removeClaimDialect&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:claimDialect&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:claimDialectURI&gt;claim dialect uri&lt;/xsd1:claimDialectURI&gt;\n       &lt;/xsd:claimDialect&gt;\n    &lt;/xsd:removeClaimDialect&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:removeClaimDialectResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:removeClaimDialectResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#removeexternalclaim","title":"removeExternalClaim()","text":"Description This operation removes an existing external claim. Input Parameters <ul> <li><code>externalClaimDialectURI</code>: This is the URI that defines the external claim which need to be deleted.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:removeExternalClaim&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:externalClaimDialectURI&gt;http://abc.org/email&lt;/xsd:externalClaimDialectURI&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:externalClaimURI&gt;sample@email.com&lt;/xsd:externalClaimURI&gt;\n    &lt;/xsd:removeExternalClaim&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:removeExternalClaimResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:removeExternalClaimResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#removelocalclaim","title":"removeLocalClaim()","text":"Description This operation removes an existing local claim. Input Parameters <ul> <li><code>localClaimURI</code>: This is the URI that defines the local claim.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:removeLocalClaim&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:localClaimURI&gt;local claim uri&lt;/xsd:localClaimURI&gt;\n    &lt;/xsd:removeLocalClaim&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:removeLocalClaimResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:removeLocalClaimResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#renameclaimdialect","title":"renameClaimDialect()","text":"Description This operation renames an existing claim dialect. Input Parameters <ul> <li><code>claimDialectURI</code>: This is the URI that defines the claim dialect.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:renameClaimDialect&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:oldClaimDialect&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:claimDialectURI&gt;old claim dialect uri&lt;/xsd1:claimDialectURI&gt;\n       &lt;/xsd:oldClaimDialect&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:newClaimDialect&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:claimDialectURI&gt;new claim dialect uri&lt;/xsd1:claimDialectURI&gt;\n       &lt;/xsd:newClaimDialect&gt;\n    &lt;/xsd:renameClaimDialect&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:renameClaimDialectResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:renameClaimDialectResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#updateexternalclaim","title":"updateExternalClaim()","text":"Description This operation updates an external claim. Input Parameters <ul> <li><code>externalClaimDialectURI</code>: This is the URI that defines the external claim dialect.</li> <li><code>externalClaimURI</code>: This is the URI that defines the external claim.</li> <li><code>mappedLocalClaimURI</code>: This is the URI which defines the mapped local claim.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:updateExternalClaim&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:externalClaim&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:externalClaimDialectURI&gt;external claim dialect&lt;/xsd1:externalClaimDialectURI&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:externalClaimURI&gt;external claim uri&lt;/xsd1:externalClaimURI&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:mappedLocalClaimURI&gt;mapped local claim value&lt;/xsd1:mappedLocalClaimURI&gt;\n       &lt;/xsd:externalClaim&gt;\n    &lt;/xsd:updateExternalClaim&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:updateExternalClaimResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:updateExternalClaimResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-claims-with-apis/#updatelocalclaim","title":"updateLocalClaim()","text":"Description This operation updates a local claim. Input Parameters <ul> <li><code>attributeName</code>: This is the attribute name.</li> <li><code>userStoreDomain</code>: This is the user-store domain.</li> <li><code>propertyName</code>: This is the property name.</li> <li><code>propertyValue</code>: This is the property value.</li> <li><code>localClaimURI</code>: This is The URI which defines the local claim.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.mgt.metadata.claim.identity.carbon.wso2.org/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:updateLocalClaim&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:localClaim&gt;\n          &lt;!--Zero or more repetitions:--&gt;\n          &lt;xsd1:attributeMappings&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:attributeName&gt;attribute name&lt;/xsd1:attributeName&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:userStoreDomain&gt;userstore domain&lt;/xsd1:userStoreDomain&gt;\n          &lt;/xsd1:attributeMappings&gt;\n          &lt;!--Zero or more repetitions:--&gt;\n          &lt;xsd1:claimProperties&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:propertyName&gt;property name&lt;/xsd1:propertyName&gt;\n             &lt;!--Optional:--&gt;\n             &lt;xsd1:propertyValue&gt;property value&lt;/xsd1:propertyValue&gt;\n          &lt;/xsd1:claimProperties&gt;\n          &lt;!--Optional:--&gt;\n          &lt;xsd1:localClaimURI&gt;local claim uri&lt;/xsd1:localClaimURI&gt;\n       &lt;/xsd:localClaim&gt;\n    &lt;/xsd:updateLocalClaim&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:updateLocalClaimResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:rupdateLocalClaimResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-permissions-with-apis/","title":"Manage Permissions with SOAP APIs","text":"<p>The following section describes the RemoteAuthorizationManagerService and the operations that come with it.</p>"},{"location":"apis/manage-permissions-with-apis/#invoking-the-admin-service","title":"Invoking the admin service","text":"<p><code>RemoteAuthorizationManagerService</code> is an admin service of the WSO2 Carbon platform. As admin services are secured to prevent anonymous invocations, you cannot view the WSDL of the admin service by default. Follow the steps below to view and invoke it:</p> <ol> <li> <p>Set the configuration given below in     <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[admin_service.wsdl]\nenable = true\n</code></pre> </li> <li> <p>Restart the Identity Server.</p> </li> <li>If you have started the server with the default configurations,\u00a0use the     following URL in your browser to see the WSDL of the admin service:     https://localhost:9443/services/RemoteAuthorizationManagerService?wsdl</li> </ol> <p>For more information on WSO2 admin services and how to invoke an admin service using either SoapUI or any other client program, see Call Admin Services.</p>"},{"location":"apis/manage-permissions-with-apis/#about-permissions","title":"About permissions","text":"<ul> <li>A permission is an authorization to perform a specific action on a resource. For instance, a user role can have permission (authorization) to add and delete (actions) service providers (resource). </li> <li>The following set of actions can be performed on a resource.       <ul> <li>get</li> <li>add</li> <li>delete</li> <li>edit</li> <li>login</li> </ul> <ul> <li>man_config</li> <li>man_lc_config</li> <li>man_sec</li> <li>up_serv</li> <li>man_serv</li> <li>man_media</li> </ul> <ul> <li>mon_sys</li> <li>del_id</li> <li>authorize</li> <li>inv_ser</li> <li>ui_execute</li> </ul> <ul> <li>subscribe</li> <li>publish</li> <li>consume</li> <li>change_permission</li> <li>browse</li> </ul> <ul> <li>sqs_send_message</li> <li>sqs_receive_message</li> <li>sqs_delete_message</li> <li>sqs_change_message_visibility</li> <li>sqs_get_queue_attributes</li> </ul> </li> <li>Permissions can be assigned to user roles. </li> </ul> <p>The following operations are available in this API.</p>"},{"location":"apis/manage-permissions-with-apis/#api-operations","title":"API operations","text":""},{"location":"apis/manage-permissions-with-apis/#authorizerole","title":"authorizeRole","text":"Description This operation authorizes the given role to perform the specified action on the given resource. Input Parameters <ul> <li><code>roleName</code>: This is the name of the role, e.g. <code>role1</code>.</li> <li><code>resourceId</code>: This is the resource path, e.g., <code>/permission/admin/login</code>.</li> <li><code>action</code>: This is the name of the action to be performed on the resource, e.g., <code>ui.execute</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:authorizeRole&gt;\n &lt;!\u00ad\u00ad--Optional:\u00ad\u00ad--&gt;\n &lt;ser:roleName&gt;role1&lt;/ser:roleName&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:resourceId&gt;/permission/admin/login&lt;/ser:resourceId&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:action&gt;ui.execute&lt;/ser:action&gt;\n&lt;/ser:authorizeRole&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response No response on success Error Codes <ul> <li>Invalid data provided</li> <li>Error in connection rollback</li> <li>Error! DB error occurred while checking is existing system role for : <code>roleName</code> &amp; tenant id : <code>tenantId</code></li> <li>Error! Error occurred while getting UI permission ID for resource id : <code>resourceId</code> &amp; action : <code>action</code> </li> <li>Error! Error occurred while adding UI permission ID for resource id : <code>resourceId</code> &amp; action : <code>action</code></li> <li>Error! Using sql : <code>sqlStmt</code></li> <li>Error! Error while authorizing role: roleName in permission tree for resource id: <code>resourceId</code> for action: <code>action</code></li> <li>Error! Error while denying role: roleName in permission tree for resource id: <code>resourceId</code> for action: <code>action</code></li> </ul>"},{"location":"apis/manage-permissions-with-apis/#clearallroleauthorization","title":"clearAllRoleAuthorization","text":"Description This operation clears all authorizations of the role. Input Parameters <ul> <li><code>roleName</code>: This is the name of the role, e.g., <code>role1</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n  &lt;ser:clearAllRoleAuthorization&gt;\n   &lt;!\u00ad\u00ad--Optional:\u00ad\u00ad--&gt;\n   &lt;ser:roleName&gt;role1&lt;/ser:roleName&gt;\n  &lt;/ser:clearAllRoleAuthorization&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response No response on success Error Codes <ul> <li>Error occurred while clearing role authorizations for role : <code>roleName</code></li> </ul>"},{"location":"apis/manage-permissions-with-apis/#clearresourceauthorizations","title":"clearResourceAuthorizations","text":"Description This operation clears all the authorizations for the given resource. Input Parameters <ul> <li><code>resourceId</code>: This is the resource path, e.g., <code>/permission/admin/login</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:clearResourceAuthorizations&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:resourceId&gt;/permission/admin/login&lt;/ser:resourceId&gt;\n&lt;/ser:clearResourceAuthorizations&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response No response on success Error Codes <ul> <li>Error occurred while clearing resource authorizations for resource id : <code>resourceId</code></li> </ul>"},{"location":"apis/manage-permissions-with-apis/#clearroleactiononallresources","title":"clearRoleActionOnAllResources","text":"Description This operation removes the authorization from the role to perform the specified action on all the resources. Input Parameters <ul> <li><code>action</code>: This is the action name of the action to be performed on the resource, e.g., <code>ui.execute</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:clearRoleActionOnAllResources&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:action&gt;ui.execute&lt;/ser:action&gt;\n&lt;/ser:clearRoleActionOnAllResources&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response No response on success Error Codes <ul> <li>Error occurred while clearing role action on all resources for role : <code>roleName</code> &amp; action : <code>action</code></li> </ul>"},{"location":"apis/manage-permissions-with-apis/#clearroleauthorization","title":"clearRoleAuthorization","text":"Description This operation clears the authorization of the specified role to perform the given action on the resource. Input Parameters <ul> <li><code>roleName  </code>: This is the name of the role, e.g., <code>role1</code>.</li> <li><code>resourceId</code>: This is the resource path e.g., <code>/permission/admin/login</code>.</li> <li><code>action</code>: This is the action name of the action to be performed on the resource, e.g., <code>ui.execute</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:clearRoleAuthorization&gt;\n &lt;!\u00ad\u00ad--Optional:\u00ad\u00ad--&gt;\n &lt;ser:roleName&gt;role1&lt;/ser:roleName&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:resourceId&gt;/permission/admin/login&lt;/ser:resourceId&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:action&gt;ui.execute&lt;/ser:action&gt;\n&lt;/ser:clearRoleAuthorization&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response No response on success Error Codes <ul> <li>Error occurred while clearing role authorizations for role : <code>roleName</code> + &amp; resource id : <code>resourceId</code> &amp; action : <code>action</code></li> </ul>"},{"location":"apis/manage-permissions-with-apis/#denyrole","title":"denyRole","text":"Description This operation removes the authorization of the role to perform the given action on the specified resource. Input Parameters <ul> <li><code>roleName  </code>: This is the name of the role, e.g., <code>role1</code>.</li> <li><code>resourceId</code>: This is the resource path, e.g., <code>/permission/admin/login</code>.</li> <li><code>action</code>: This is the action name of the action to be performed on the resource, e.g., <code>ui.execute</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:denyRole&gt;\n &lt;!\u00ad\u00ad--Optional:\u00ad\u00ad--&gt;\n &lt;ser:roleName&gt;role1&lt;/ser:roleName&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:resourceId&gt;/permission/admin/login&lt;/ser:resourceId&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:action&gt;ui.execute&lt;/ser:action&gt;\n&lt;/ser:denyRole&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response No response on success Error Codes <ul> <li>Invalid data provided</li> </ul>"},{"location":"apis/manage-permissions-with-apis/#getallowedrolesforresource","title":"getAllowedRolesForResource","text":"Description This operation retrieves the list of authorized roles to perform the given action on the specified resource. Input Parameters <ul> <li><code>resourceId</code>: This is the resource path, e.g., <code>/permission/admin/login</code>.</li> <li><code>action</code>: This is the action name of the action to be performed on the resource, e.g., <code>ui.execute</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getAllowedRolesForResource&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:resourceId&gt;/permission/admin/login&lt;/ser:resourceId&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:action&gt;ui.execute&lt;/ser:action&gt;\n&lt;/ser:getAllowedRolesForResource&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:getAllowedRolesForResourceResponse xmlns:ns=\"http://service.ws.um.carbon.wso2.org\"\nxmlns:ax2599=\"http://core.user.carbon.wso2.org/xsd\"\nxmlns:ax2600=\"http://api.user.carbon.wso2.org/xsd\"&gt;\n &lt;ns:return&gt;admin&lt;/ns:return&gt;\n &lt;ns:return&gt;myrole&lt;/ns:return&gt;\n&lt;/ns:getAllowedRolesForResourceResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Error Codes <ul> <li>Error loading authorizations. Please check the database. Error message is + <code>errorMessage</code></li> <li>Error! Error while authorizing role: <code>roleName</code> in permission tree for resource id: <code>resourceId</code> for action: <code>action</code></li> <li>Error! Error while denying role: <code>roleName</code> in permission tree for resource id: resourceId for action: <code>action</code></li> </ul>"},{"location":"apis/manage-permissions-with-apis/#getalloweduiresourcesforuser","title":"getAllowedUIResourcesForUser","text":"Description This operation retrieves the list of UI resources in the specified root path for which the user has authorization. Input Parameters <ul> <li><code>userName</code>: This is the username of the specific user, e.g., <code>admin</code>.</li> <li><code>permissionRootPath</code>: This is the permission root path.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getAllowedUIResourcesForUser&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:userName&gt;admin&lt;/ser:userName&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:permissionRootPath&gt;/&lt;/ser:permissionRootPath&gt;\n&lt;/ser:getAllowedUIResourcesForUser&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:getAllowedUIResourcesForUserResponse xmlns:ns=\"http://service.ws.um.carbon.wso2.org\"\nxmlns:ax2599=\"http://core.user.carbon.wso2.org/xsd\"\nxmlns:ax2600=\"http://api.user.carbon.wso2.org/xsd\"&gt;\n &lt;ns:return&gt;/permission&lt;/ns:return&gt;\n &lt;ns:return&gt;/permission/admin/configure/&lt;/ns:return&gt;\n &lt;ns:return&gt;/permission/admin/login/&lt;/ns:return&gt;\n &lt;ns:return&gt;/permission/admin/manage/&lt;/ns:return&gt;\n &lt;ns:return&gt;/permission/admin/monitor/&lt;/ns:return&gt;\n &lt;ns:return&gt;/permission/protected/&lt;/ns:return&gt;\n &lt;ns:return&gt;/permission/testlogin/&lt;/ns:return&gt;\n&lt;/ns:getAllowedRolesForResourceResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Error Codes <ul> <li>Invalid Permission root path provided</li> <li>Error loading authorizations. Please check the database. Error message is <code>message</code></li> </ul>"},{"location":"apis/manage-permissions-with-apis/#getalloweduiresourcesforrole","title":"getAllowedUIResourcesForRole","text":"Description This function retrieves the list of UI resources in the specified root path for a given role.  Input Parameters <ul> <li><code>roleName</code>: The name of the specific role, e.g., <code>admin</code>.</li> <li><code>permissionRootPath</code>: The permission root path.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n      &lt;soapenv:Header/&gt;\n      &lt;soapenv:Body&gt;\n          &lt;ser:getAllowedUIResourcesForRole&gt;\n            &lt;ser:roleName&gt;admin&lt;/ser:roleName&gt;\n            &lt;ser:permissionRootPath&gt;/&lt;/ser:permissionRootPath&gt;\n          &lt;/ser:getAllowedUIResourcesForRole&gt;\n      &lt;/soapenv:Body&gt;\n    &lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getAllowedUIResourcesForRoleResponse xmlns:ns=\"http://service.ws.um.carbon.wso2.org\" xmlns:ax2716=\"http://core.user.carbon.wso2.org/xsd\" xmlns:ax2717=\"http://api.user.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return&gt;/permission&lt;/ns:return&gt;\n         &lt;ns:return&gt;/permission/admin/configure/security/usermgt&lt;/ns:return&gt;\n         &lt;ns:return&gt;/permission/admin/login&lt;/ns:return&gt;\n         &lt;ns:return&gt;/permission/admin/manage/identity/applicationmgt&lt;/ns:return&gt;\n      &lt;/ns:getAllowedUIResourcesForRoleResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-permissions-with-apis/#isroleauthorized","title":"isRoleAuthorized","text":"Description This operation checks whether the given role is authorized to perform the action on the specified resource. Input Parameters <ul> <li><code>roleName</code>: This is the name of the role, e.g., <code>role1</code>.</li> <li><code>resourceId</code>: This is the resource path, e.g., <code>/permission/admin/login</code>.</li> <li><code>action</code>: This is the action name of the action to be performed on the resource, e.g., <code>ui.execute</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:isRoleAuthorized&gt;\n &lt;!\u00ad\u00ad--Optional:\u00ad\u00ad--&gt;\n &lt;ser:roleName&gt;role1&lt;/ser:roleName&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:resourceId&gt;/permission/admin/login&lt;/ser:resourceId&gt;\n &lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n &lt;ser:action&gt;ui.execute&lt;/ser:action&gt;\n&lt;/ser:isRoleAuthorized&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:isRoleAuthorized xmlns:ns=\"http://service.ws.um.carbon.wso2.org\"&gt;\n &lt;ns:return&gt;false&lt;/ns:return&gt;\n&lt;/ns:isRoleAuthorized&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Error Codes <ul> <li>Error loading authorizations. Please check the database. Error message is + <code>errorMessage</code></li> </ul>"},{"location":"apis/manage-tenants-with-apis/","title":"Manage Tenants with SOAP APIs","text":"<p>This section guides you through invoking and working with the Tenant ManagementService and the operations you can work within this service.</p>"},{"location":"apis/manage-tenants-with-apis/#invoke-the-admin-service","title":"Invoke the admin service","text":"<p><code>TenantMgtAdminService</code> is an admin service of the WSO2 Carbon platform. As admin services are secured to prevent anonymous invocations, you cannot view the WSDL of the admin service by default. Follow the steps below to view and invoke it:</p> <ol> <li> <p>Set the  bellow configuration in         <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[admin_service.wsdl]\nenable = true\n</code></pre> </li> <li> <p>Restart the Identity Server.</p> </li> <li>If you have started the server in default configurations,\u00a0use the     following URL in your browser to see the WSDL of the admin service:     https://localhost:9443/services/TenantMgtAdminService?wsdl.</li> </ol> <p>For more information on WSO2 admin services and how to invoke an admin service using either SoapUI or any other client program, see Call Admin Services.</p>"},{"location":"apis/manage-tenants-with-apis/#operations-included-in-the-api","title":"Operations included in the API","text":"<p>The following operations are available in the TenantManagement Service :</p>"},{"location":"apis/manage-tenants-with-apis/#addtenant","title":"addTenant()","text":"Description Adds a new tenant. Permission Level /permission/protected/manage/monitor/tenants Input Parameters Parameter Type Description tenantInfoBean TenantInfoBean Contains tenant related data tenantInfoBean.tenantDomain String The domain name of the tenant tenantInfoBean.active Boolean <p>True - activate the tenant</p> <p>False- deactivate the tenant</p> tenantInfoBean.admin String The admin username tenantInfoBean.adminPassword String The admin password tenantInfoBean.createdDate DateTime The date and time that the tenant was created tenantInfoBean.email String The email address of the tenant tenantInfoBean.firstname String The first name of the tenant tenantInfoBean.lastname String The last name of the tenant tenantInfoBean.originatedService String - tenantInfoBean.successKey String - tenantInfoBean.tenantDomain String The tenant domain tenantInfoBean.tenantId Int The tenant ID tenantInfoBean.usagePlan String - Request  Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\" xmlns:xsd=\"http://beans.common.stratos.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:addTenant&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:tenantInfoBean&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:active&gt;true&lt;/xsd:active&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:admin&gt;testuser&lt;/xsd:admin&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:adminPassword&gt;testpw&lt;/xsd:adminPassword&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:createdDate&gt;&lt;/xsd:createdDate&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:email&gt;testuser@example.com&lt;/xsd:email&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:firstname&gt;First&lt;/xsd:firstname&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:lastname&gt;Last&lt;/xsd:lastname&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:originatedService&gt;&lt;/xsd:originatedService&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:successKey&gt;&lt;/xsd:successKey&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:tenantDomain&gt;example.com&lt;/xsd:tenantDomain&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:tenantId&gt;&lt;/xsd:tenantId&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:usagePlan&gt;&lt;/xsd:usagePlan&gt;\n&lt;/ser:tenantInfoBean&gt;\n&lt;/ser:addTenant&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;             </code></pre> Response <p>None</p>"},{"location":"apis/manage-tenants-with-apis/#addskeletontenant","title":"addSkeletonTenant()","text":"Description Adds a new tenant without userstore operations. The tenant will not be persisted in user store level and can be used to trigger post-tenant listeners without actually creating the tenant.  Permission Level /permission/protected/manage/monitor/tenants Input Parameters Parameter Type Description tenantInfoBean TenantInfoBean Contains tenant related data tenantInfoBean.tenantDomain String The domain name of the tenant tenantInfoBean.active Boolean <p>True - activate the tenant</p> <p>False- deactivate the tenant</p> tenantInfoBean.admin String The admin username tenantInfoBean.adminPassword String The admin password tenantInfoBean.createdDate DateTime The date and time that the tenant was created tenantInfoBean.email String The email address of the tenant tenantInfoBean.firstname String The first name of the tenant tenantInfoBean.lastname String The last name of the tenant tenantInfoBean.originatedService String - tenantInfoBean.successKey String - tenantInfoBean.tenantDomain String The tenant domain tenantInfoBean.tenantId Int The tenant ID tenantInfoBean.usagePlan String - Request  Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\" xmlns:xsd=\"http://beans.common.stratos.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:addSkeletonTenant&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:tenantInfoBean&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:active&gt;true&lt;/xsd:active&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:admin&gt;testuser&lt;/xsd:admin&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:adminPassword&gt;testpw&lt;/xsd:adminPassword&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:createdDate&gt;&lt;/xsd:createdDate&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:email&gt;testuser@example.com&lt;/xsd:email&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:firstname&gt;First&lt;/xsd:firstname&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:lastname&gt;Last&lt;/xsd:lastname&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:originatedService&gt;&lt;/xsd:originatedService&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:successKey&gt;&lt;/xsd:successKey&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:tenantDomain&gt;example.com&lt;/xsd:tenantDomain&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:tenantId&gt;&lt;/xsd:tenantId&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:usagePlan&gt;&lt;/xsd:usagePlan&gt;\n&lt;/ser:tenantInfoBean&gt;\n&lt;/ser:addSkeletonTenant&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;             </code></pre> Response <p>None</p>"},{"location":"apis/manage-tenants-with-apis/#activatetenant","title":"activateTenant()","text":"Description Activates an existing tenant. Permission Level /permission/protected/manage/modify/tenants Input Parameters Parameter Type Description tenantDomain String The domain name of the tenant Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\u00a0xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:activateTenant&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:tenantDomain&gt;example.com&lt;/ser:tenantDomain&gt;\n&lt;/ser:activateTenant&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;              </code></pre> <p> Response  Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:activateTenantResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\" /&gt;\n&lt;/ns:activateTenantResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-tenants-with-apis/#deactivatetenant","title":"deactivateTenant()","text":"Description Deactivates an existing tenant. Permission Level /permission/protected/manage/modify/tenants Input Parameters Parameter Type Description tenantDomain String The domain name of the tenant Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\u00a0xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:deactivateTenant&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:tenantDomain&gt;example.com&lt;/ser:tenantDomain&gt;\n&lt;/ser:deactivateTenant&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;               </code></pre> Response Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:deactivateTenantResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\" /&gt;\n&lt;/ns:deactivateTenantResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-tenants-with-apis/#gettenant","title":"getTenant()","text":"Description Retrieves tenant details by domain name. Permission Level /permission/protected/manage/monitor/tenants Input Parameters Parameter Type Description tenantInfoBean.tenantDomain String The domain name of the tenant Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\u00a0xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getTenant&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:tenantDomain&gt;example.com&lt;/ser:tenantDomain&gt;\n&lt;/ser:getTenant&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;              </code></pre> Response Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:getTenantResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;ns:return xsi:type=\"ax2582:TenantInfoBean\" xmlns:ax2584=\"http://beans.mgt.tenant.carbon.wso2.org/xsd\" xmlns:ax2582=\"http://beans.common.stratos.carbon.wso2.org/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\"&gt;\n&lt;ax2582:active&gt;true&lt;/ax2582:active&gt;\n&lt;ax2582:admin&gt;test&lt;/ax2582:admin&gt;\n&lt;ax2582:adminPassword xsi:nil=\"true\" /&gt;\n&lt;ax2582:createdDate&gt;2015\u00ad02\u00ad13T07:27:17.543+05:30&lt;/ax2582:createdDate&gt;\n&lt;ax2582:email&gt;test@example.com&lt;/ax2582:email&gt;\n&lt;ax2582:firstname&gt;Test&lt;/ax2582:firstname&gt;\n&lt;ax2582:lastname&gt;User&lt;/ax2582:lastname&gt;\n&lt;ax2582:originatedService xsi:nil=\"true\" /&gt;\n&lt;ax2582:successKey xsi:nil=\"true\" /&gt;\n&lt;ax2582:tenantDomain&gt;example.com&lt;/ax2582:tenantDomain&gt;\n&lt;ax2582:tenantId&gt;1&lt;/ax2582:tenantId&gt;\n&lt;ax2582:usagePlan/&gt;\n&lt;/ns:return&gt;\n&lt;/ns:getTenantResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-tenants-with-apis/#retrievepaginatedpartialsearchtenants","title":"retrievePaginatedPartialSearchTenants()","text":"Description Retrieves the tenant information based on the partial search. Permission Level /permission/protected/manage/monitor/tenants Input Parameters Parameter Type Description tenant String Partial tenant domain name pageNumber Int Page number Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:retrievePaginatedPartialSearchTenants&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:domain&gt;.com&lt;/ser:domain&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:pageNumber&gt;1&lt;/ser:pageNumber&gt;\n&lt;/ser:retrievePaginatedPartialSearchTenants&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;             </code></pre> Response Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:retrievePaginatedPartialSearchTenantsResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;ns:return xsi:type=\"ax2584:PaginatedTenantInfoBean\" xmlns:ax2584=\"http://beans.mgt.tenant.carbon.wso2.org/xsd\" xmlns:ax2582=\"http://beans.common.stratos.carbon.wso2.org/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\"&gt;\n&lt;ax2584:numberOfPages&gt;1&lt;/ax2584:numberOfPages&gt;\n&lt;ax2584:tenantInfoBeans xsi:type=\"ax2582:TenantInfoBean\"&gt;\n&lt;ax2582:active&gt;true&lt;/ax2582:active&gt;\n&lt;ax2582:admin xsi:nil=\"true\" /&gt;\n&lt;ax2582:adminPassword xsi:nil=\"true\" /&gt;\n&lt;ax2582:createdDate&gt;2015\u00ad02\u00ad13T07:27:17.543+05:30&lt;/ax2582:createdDate&gt;\n&lt;ax2582:email&gt;test@example.com&lt;/ax2582:email&gt;\n&lt;ax2582:firstname xsi:nil=\"true\" /&gt;\n&lt;ax2582:lastname xsi:nil=\"true\" /&gt;\n&lt;ax2582:originatedService xsi:nil=\"true\" /&gt;\n&lt;ax2582:successKey xsi:nil=\"true\" /&gt;\n&lt;ax2582:tenantDomain&gt;example.com&lt;/ax2582:tenantDomain&gt;\n&lt;ax2582:tenantId&gt;1&lt;/ax2582:tenantId&gt;\n&lt;ax2582:usagePlan xsi:nil=\"true\" /&gt;\n&lt;/ax2584:tenantInfoBeans&gt;\n&lt;/ns:return&gt;\n&lt;/ns:retrievePaginatedPartialSearchTenantsResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-tenants-with-apis/#retrievepaginatedtenants","title":"retrievePaginatedTenants()","text":"Description Activates an existing tenant. Permission Level /permission/protected/manage/monitor/tenants Input Parameters Parameter Type Description pageNumber Int Page number Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\u00a0xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:retrievePaginatedTenants&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:pageNumber&gt;1&lt;/ser:pageNumber&gt;\n&lt;/ser:retrievePaginatedTenants&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;          </code></pre> Response Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:retrievePaginatedTenantsResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;ns:return xsi:type=\"ax2584:PaginatedTenantInfoBean\" xmlns:ax2584=\"http://beans.mgt.tenant.carbon.wso2.org/xsd\" xmlns:ax2582=\"http://beans.common.stratos.carbon.wso2.org/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\"&gt;\n&lt;ax2584:numberOfPages&gt;1&lt;/ax2584:numberOfPages&gt;\n&lt;ax2584:tenantInfoBeans xsi:type=\"ax2582:TenantInfoBean\"&gt;\n&lt;ax2582:active&gt;true&lt;/ax2582:active&gt;\n&lt;ax2582:admin xsi:nil=\"true\" /&gt;\n&lt;ax2582:adminPassword xsi:nil=\"true\" /&gt;\n&lt;ax2582:createdDate&gt;2015\u00ad02\u00ad13T07:27:17.543+05:30&lt;/ax2582:createdDate&gt;\n&lt;ax2582:email&gt;test@example.com&lt;/ax2582:email&gt;\n&lt;ax2582:firstname xsi:nil=\"true\" /&gt;\n&lt;ax2582:lastname xsi:nil=\"true\" /&gt;\n&lt;ax2582:originatedService xsi:nil=\"true\" /&gt;\n&lt;ax2582:successKey xsi:nil=\"true\" /&gt;\n&lt;ax2582:tenantDomain&gt;example.com&lt;/ax2582:tenantDomain&gt;\n&lt;ax2582:tenantId&gt;1&lt;/ax2582:tenantId&gt;\n&lt;ax2582:usagePlan xsi:nil=\"true\" /&gt;\n&lt;/ax2584:tenantInfoBeans&gt;\n&lt;/ns:return&gt;\n&lt;/ns:retrievePaginatedTenantsResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-tenants-with-apis/#retrievepartialsearchtenants","title":"retrievePartialSearchTenants()","text":"Description Retrieves all tenants that contain the specified part of the domain name (e.g., All tenant domains with \u2018.com\u2019) Permission Level /permission/protected/manage/monitor/tenants Input Parameters Parameter Type Description domain String Partial tenant domain name Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:retrievePartialSearchTenants&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:domain&gt;.com&lt;/ser:domain&gt;\n&lt;/ser:retrievePartialSearchTenants&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;             </code></pre> Response Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:retrievePartialSearchTenantsResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\" xmlns:ax2584=\"http://beans.mgt.tenant.carbon.wso2.org/xsd\" xmlns:ax2582=\"http://beans.common.stratos.carbon.wso2.org/xsd\"&gt;\n&lt;ns:return xsi:type=\"ax2582:TenantInfoBean\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\"&gt;\n&lt;ax2582:active&gt;true&lt;/ax2582:active&gt;\n&lt;ax2582:admin xsi:nil=\"true\" /&gt;\n&lt;ax2582:adminPassword xsi:nil=\"true\" /&gt;\n&lt;ax2582:createdDate&gt;2015\u00ad02\u00ad13T07:27:17.543+05:30&lt;/ax2582:createdDate&gt;\n&lt;ax2582:email&gt;test@example.com&lt;/ax2582:email&gt;\n&lt;ax2582:firstname xsi:nil=\"true\" /&gt;\n&lt;ax2582:lastname xsi:nil=\"true\" /&gt;\n&lt;ax2582:originatedService xsi:nil=\"true\" /&gt;\n&lt;ax2582:successKey xsi:nil=\"true\" /&gt;\n&lt;ax2582:tenantDomain&gt;example.com&lt;/ax2582:tenantDomain&gt;\n&lt;ax2582:tenantId&gt;1&lt;/ax2582:tenantId&gt;\n&lt;ax2582:usagePlan xsi:nil=\"true\" /&gt;\n&lt;/ns:return&gt;\n&lt;/ns:retrievePartialSearchTenantsResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-tenants-with-apis/#retrievetenants","title":"retrieveTenants()","text":"Description Retrieves all tenants. Permission Level /permission/protected/manage/monitor/tenants Input Parameters <p>None</p> Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\u00a0xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:retrieveTenants/&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;             </code></pre> Response Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:retrieveTenantsResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\" xmlns:ax2584=\"http://beans.mgt.tenant.carbon.wso2.org/xsd\" xmlns:ax2582=\"http://beans.common.stratos.carbon.wso2.org/xsd\"&gt;\n&lt;ns:return xsi:type=\"ax2582:TenantInfoBean\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\"&gt;\n&lt;ax2582:active&gt;true&lt;/ax2582:active&gt;\n&lt;ax2582:admin xsi:nil=\"true\" /&gt;\n&lt;ax2582:adminPassword xsi:nil=\"true\" /&gt;\n&lt;ax2582:createdDate&gt;2015\u00ad02\u00ad13T07:27:17.543+05:30&lt;/ax2582:createdDate&gt;\n&lt;ax2582:email&gt;test@example.com&lt;/ax2582:email&gt;\n&lt;ax2582:firstname xsi:nil=\"true\" /&gt;\n&lt;ax2582:lastname xsi:nil=\"true\" /&gt;\n&lt;ax2582:originatedService xsi:nil=\"true\" /&gt;\n&lt;ax2582:successKey xsi:nil=\"true\" /&gt;\n&lt;ax2582:tenantDomain&gt;example.com&lt;/ax2582:tenantDomain&gt;\n&lt;ax2582:tenantId&gt;1&lt;/ax2582:tenantId&gt;\n&lt;ax2582:usagePlan xsi:nil=\"true\" /&gt;\n&lt;/ns:return&gt;\n&lt;/ns:retrieveTenantsResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-tenants-with-apis/#updatetenant","title":"updateTenant()","text":"Description Updates the tenant details based on the specified tenantId. To update the password, the respective admin name should be included. Permission Level /permission/protected/manage/modify/tenants Input Parameters Parameter Type Description tenantInfoBean TenantInfoBean Contains tenant related data tenantInfoBean.tenantDomain String The domain name of the tenant tenantInfoBean.active Boolean <p>True - activate the tenant</p> <p>False- deactivate the tenant</p> tenantInfoBean.admin String The admin username tenantInfoBean.adminPassword String The admin password tenantInfoBean.createdDate DateTime The date and time that the tenant was created tenantInfoBean.email String The email address of the tenant tenantInfoBean.firstname String The first name of the tenant tenantInfoBean.lastname String The last name of the tenant tenantInfoBean.originatedService String - tenantInfoBean.successKey String - tenantInfoBean.tenantDomain String The tenant domain tenantInfoBean.tenantId Int The tenant ID tenantInfoBean.usagePlan String - Request Click here to see the request <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\u00a0xmlns:ser=\"http://services.mgt.tenant.carbon.wso2.org\" xmlns:xsd=\"http://beans.common.stratos.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:updateTenant&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;ser:tenantInfoBean&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:active&gt;true&lt;/xsd:active&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:admin&gt;test&lt;/xsd:admin&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:adminPassword&gt;testpw&lt;/xsd:adminPassword&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:createdDate&gt;&lt;/xsd:createdDate&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:email&gt;testuser@example.com&lt;/xsd:email&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:firstname&gt;test&lt;/xsd:firstname&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:lastname&gt;user&lt;/xsd:lastname&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:originatedService&gt;&lt;/xsd:originatedService&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:successKey&gt;&lt;/xsd:successKey&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:tenantDomain&gt;example.com&lt;/xsd:tenantDomain&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:tenantId&gt;1&lt;/xsd:tenantId&gt;\n&lt;!--\u00ad\u00adOptional:\u00ad\u00ad--&gt;\n&lt;xsd:usagePlan&gt;&lt;/xsd:usagePlan&gt;\n&lt;/ser:tenantInfoBean&gt;\n&lt;/ser:updateTenant&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;            </code></pre> Response Click here to see the response <p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:updateTenantResponse xmlns:ns=\"http://services.mgt.tenant.carbon.wso2.org\"&gt;\n&lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\" /&gt;\n&lt;/ns:updateTenantResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/manage-user-stores-with-apis/","title":"Manage Userstores with SOAP APIs","text":"<p>The <code>UserStoreConfigAdminService</code> allows you to add, retrieve, edit, and delete userstores within WSO2 Identity Server. </p> <p>This section guides you through invoking and working with the <code>UserStoreConfigAdminService</code> and the operations you can work within this service.</p>"},{"location":"apis/manage-user-stores-with-apis/#invoke-the-admin-service","title":"Invoke the admin service","text":"<p><code>UserStoreConfigAdminService</code> is an admin service of WSO2 Identity Server. As admin services are secured to prevent anonymous invocations, you cannot view the WSDL of the admin service by default. Follow the steps below to view and invoke it:</p> <ol> <li> <p>Open the <code>deployment.toml</code> file in the <code>&lt;IS_HOME&gt;/repository/conf</code> directory and set the <code>admin_service.wsdl</code> element to <code>true</code>.</p> <pre><code>[admin_service.wsdl]\nenable = \"true\"\n</code></pre> </li> <li> <p>Restart WSO2 Identity Server.</p> </li> <li> <p>If you have started WSO2 Identity Server in default configurations,\u00a0use the following URL in your browser to see the WSDL of the admin service:     https://localhost:9443/services/UserStoreConfigAdminService?wsdl</p> <p>Info</p> <p>For more information on WSO2 admin services and how to invoke an admin service using either SoapUI or any other client program, see Call Admin Services.</p> </li> </ol>"},{"location":"apis/manage-user-stores-with-apis/#api-operations","title":"API operations","text":"<p>The following operations are available in UserStoreConfigAdminService.</p>"},{"location":"apis/manage-user-stores-with-apis/#adduserstore","title":"addUserStore()","text":"Description This operation adds a secondary userstore. Permission Level /permission/admin Input Parameters <p> <ul> <li><code>className</code> <code>[string]</code>: This is the userstore manager class name. A list of available class names can be obtained using the getAvailableUserStoreClasses function.</li> <li><code>description</code><code>[string]</code> : This is the description of the userstore.</li> <li><code>disabled</code><code>[boolean]</code> : To disable, mark as <code>true</code>. To enable, mark as <code>false</code>.</li> <li><code>domainID</code><code>[string]</code> : This is the domain name of the userstore. This is a unique name that identifies the userstore.</li> <li><code>properties</code><code>[property]</code> : These are various properties related to the userstore such as connection URL and connection password.</li> <li><code>properties.name</code><code>[string]</code> : This is the name of the property.</li> <li><code>properties.value</code><code>[string]</code> : This is the value of the property.</li> </ul> </p> <p> <p>Tip</p> <p>For a full list of possible input parameters including optional parameters, see the relevant topic from the following list depending on the type of userstore you are creating:</p> <ul> <li>Properties used in JDBC userstore manager</li> <li>Properties used in Read-write Active Directory userstore manager</li> <li>Properties used in Read-only LDAP userstore manager</li> <li>Properties used in Read-write LDAP userstore manager</li> <li>Properties used in Carbon Remote userstore manager</li> </ul> <p>Note that some of these parameters such as connection URL, username, password, and driver name are mandatory when creating a secondary keystore. See the relevant sample request in the code block below.</p> </p> Requests See below Click to view requests<p>``` xml tab=\"JDBC\"  org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager false JDBC-SECONDARY url jdbc:mysql://192.168.48.154:3306/test userName root password root driverName com.mysql.jdbc.Driver maxActive 50 maxWait 60000 validationQuery SELECT 1 PasswordJavaScriptRegEx ^[\\S]{5,30}&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;UsernameJavaScriptRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30} RoleNameJavaScriptRegEx ^[\\S]{5,30}&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;PasswordJavaRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30}&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;PasswordJavaRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30} <pre><code>``` xml tab=\"Active Directory\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://dto.configuration.store.user.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:addUserStore&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:userStoreDTO&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:className&gt;org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager&lt;/xsd1:className&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:disabled&gt;false&lt;/xsd1:disabled&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:domainId&gt;AD-SECONDARY&lt;/xsd1:domainId&gt;\n                &lt;!--Zero or more repetitions:--&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;url&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;jdbc:mysql://192.168.48.154:3306/test&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;userName&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;password&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;driverName&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;com.mysql.jdbc.Driver&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;maxActive&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;50&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;maxWait&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;60000&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;validationQuery&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;SELECT 1&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;PasswordJavaScriptRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;UsernameJavaScriptRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;RoleNameJavaScriptRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;PasswordJavaRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n            &lt;/xsd:userStoreDTO&gt;\n        &lt;/xsd:addUserStore&gt;\n    &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre> <p>``` xml tab=\"Read Only LDAP\"  org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager false ReadOnly-LDAP-SECONDARY url jdbc:mysql://192.168.48.154:3306/test userName root password root driverName com.mysql.jdbc.Driver maxActive 50 maxWait 60000 validationQuery SELECT 1 PasswordJavaScriptRegEx ^[\\S]{5,30}&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;UsernameJavaScriptRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30}&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;UsernameJavaScriptRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30} RoleNameJavaScriptRegEx ^[\\S]{5,30}&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;PasswordJavaRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30}&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;PasswordJavaRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30} <pre><code>``` xml tab=\"Read Write LDAP\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://dto.configuration.store.user.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:addUserStore&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:userStoreDTO&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:className&gt;org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager&lt;/xsd1:className&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:disabled&gt;false&lt;/xsd1:disabled&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:domainId&gt;Read-write-LDAP-SECONDARY&lt;/xsd1:domainId&gt;\n                &lt;!--Zero or more repetitions:--&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;url&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;jdbc:mysql://192.168.48.154:3306/test&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;userName&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;password&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;driverName&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;com.mysql.jdbc.Driver&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;maxActive&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;50&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;maxWait&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;60000&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;validationQuery&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:value&gt;SELECT 1&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;PasswordJavaScriptRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;UsernameJavaScriptRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;RoleNameJavaScriptRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n                &lt;xsd1:properties&gt;\n                    &lt;xsd1:name&gt;PasswordJavaRegEx&lt;/xsd1:name&gt;\n                    &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;\n                &lt;/xsd1:properties&gt;\n            &lt;/xsd:userStoreDTO&gt;\n        &lt;/xsd:addUserStore&gt;\n    &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre> <p><code>xml tab=\"Carbon Reomte\" &lt;soapenv:Envelope     xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"     xmlns:xsd=\"http://org.apache.axis2/xsd\"     xmlns:xsd1=\"http://dto.configuration.store.user.identity.carbon.wso2.org/xsd\"&gt;     &lt;soapenv:Header/&gt;     &lt;soapenv:Body&gt;         &lt;xsd:addUserStore&gt;             &lt;!--Optional:--&gt;             &lt;xsd:userStoreDTO&gt;                 &lt;!--Optional:--&gt;                 &lt;xsd1:className&gt;org.wso2.carbon.identity.user.store.remote.CarbonRemoteUserStoreManger&lt;/xsd1:className&gt;                 &lt;!--Optional:--&gt;                 &lt;xsd1:description&gt;&lt;/xsd1:description&gt;                 &lt;!--Optional:--&gt;                 &lt;xsd1:disabled&gt;false&lt;/xsd1:disabled&gt;                 &lt;!--Optional:--&gt;                 &lt;xsd1:domainId&gt;CARBON-REMOTE-SECONDARY&lt;/xsd1:domainId&gt;                 &lt;!--Zero or more repetitions:--&gt;                 &lt;xsd1:properties&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:name&gt;url&lt;/xsd1:name&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:value&gt;jdbc:mysql://192.168.48.154:3306/test&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:name&gt;userName&lt;/xsd1:name&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:name&gt;password&lt;/xsd1:name&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:name&gt;driverName&lt;/xsd1:name&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:value&gt;com.mysql.jdbc.Driver&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:name&gt;maxActive&lt;/xsd1:name&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:value&gt;50&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:name&gt;maxWait&lt;/xsd1:name&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:value&gt;60000&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:name&gt;validationQuery&lt;/xsd1:name&gt;                     &lt;!--Optional:--&gt;                     &lt;xsd1:value&gt;SELECT 1&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;PasswordJavaScriptRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;UsernameJavaScriptRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;RoleNameJavaScriptRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;                 &lt;xsd1:properties&gt;                     &lt;xsd1:name&gt;PasswordJavaRegEx&lt;/xsd1:name&gt;                     &lt;xsd1:value&gt;^[\\S]{5,30}$&lt;/xsd1:value&gt;                 &lt;/xsd1:properties&gt;             &lt;/xsd:userStoreDTO&gt;         &lt;/xsd:addUserStore&gt;     &lt;/soap:Body&gt; &lt;/soap:Envelope&gt;</code></p>"},{"location":"apis/manage-user-stores-with-apis/#changeuserstorestate","title":"changeUserStoreState()","text":"Description This enables or disables the userstore. Permission Level /permission/admin Input Parameters <ul> <li><code>domain</code> <code>[string]</code>: This domain name of the userstore.</li> <li><code>isDisable</code> <code>[string]</code>: To disable, mark as <code>true</code>. To enable, mark as <code>false</code>.</li> </ul> Output Parameters A boolean parameter indicating if the userstore is read only or not Request See below Click to view request<p><code>xml tab=\"Request\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;    &lt;soapenv:Header/&gt;    &lt;soapenv:Body&gt;       &lt;xsd:changeUserStoreState&gt;          &lt;!--Optional:--&gt;          &lt;xsd:domain&gt;CARBON-REMOTE-SECONDARY&lt;/xsd:domain&gt;          &lt;!--Optional:--&gt;          &lt;xsd:isDisable&gt;true&lt;/xsd:isDisable&gt;       &lt;/xsd:changeUserStoreState&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p>"},{"location":"apis/manage-user-stores-with-apis/#deleteuserstore","title":"deleteUserStore()","text":"Description This operation deletes a userstore. Permission Level /permission/admin Input Parameters <ul> <li><code>domainName</code> <code>[string]</code>: This is the domain name of the userstore. This is a unique name that identifies the userstore.</li> </ul> Request See below Click to view request<p><code>xml tab=\"Request\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;    &lt;soapenv:Header/&gt;    &lt;soapenv:Body&gt;       &lt;xsd:deleteUserStore&gt;          &lt;!--Optional:--&gt;          &lt;xsd:domainName&gt;CARBON-REMOTE-SECONDARY&lt;/xsd:domainName&gt;       &lt;/xsd:deleteUserStore&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p>"},{"location":"apis/manage-user-stores-with-apis/#deleteuserstoresset","title":"deleteUserStoresSet()","text":"Description This operation deletes multiple userstores. Permission Level /permission/admin Input Parameters <ul> <li><code>domains</code> <code>[string]</code>: This is array of domain names of the userstores that are to be deleted.</li> </ul> Request See below Click to view request<p><code>xml tab=\"Request\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;    &lt;soapenv:Header/&gt;    &lt;soapenv:Body&gt;       &lt;xsd:deleteUserStoresSet&gt;          &lt;!--Zero or more repetitions:--&gt;          &lt;xsd:domains&gt;ADSECONDARY,JDBCSECONDARY&lt;/xsd:domains&gt;       &lt;/xsd:deleteUserStoresSet&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p>"},{"location":"apis/manage-user-stores-with-apis/#edituserstore","title":"editUserStore()","text":"Description This is operation edits a userstore. Permission Level /permission/admin Input Parameters <p> <ul> <li><code>className</code> <code>[string]</code>: This is the userstore manager class name. A list of available class names can be obtained using the getAvailableUserStoreClasses function.</li> <li><code>description</code><code>[string]</code> : This is the description of the userstore.</li> <li><code>disabled</code><code>[boolean]</code> : To disable, mark as <code>true</code>. To enable, mark as <code>false</code>.</li> <li><code>domainID</code><code>[string]</code> : This is the domain name of the userstore. This is a unique name that identifies the userstore.</li> <li><code>properties</code><code>[property]</code> : These are various properties related to the userstore such as connection URL and connection password.</li> <li><code>properties.name</code><code>[string]</code> : This is the name of the property.</li> <li><code>properties.value</code><code>[string]</code> : This is the value of the property.</li> </ul> </p> <p> <p>Tip</p> <p>To use this operation, do the following:</p> <ol> <li>Use the getSecondaryRealmConfigurations operation to retrieve the unique ID of the userstore.</li> <li>Include the Unique ID as a property when sending the <code>editUserStore()</code> request as seen in the sample request below.</li> <pre><code>&lt;!--Optional:--&gt;\n    &lt;xsd1:name&gt;UniqueID&lt;/xsd1:name&gt;\n    &lt;!--Optional:--&gt;\n    &lt;xsd1:value&gt;467eebo-3f96-4cad-9578-7ae3fe450yhe&lt;/xsd1:value&gt;\n                                </code></pre> </ol> </p> Request See below Click to view request<p><code>xml tab=\"Request\" soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.configuration.store.user.identity.carbon.wso2.org/xsd\"&gt;    &lt;soapenv:Header/&gt;    &lt;soapenv:Body&gt;       &lt;xsd:editUserStore&gt;          &lt;!--Optional:--&gt;          &lt;xsd:userStoreDTO&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:className&gt;?&lt;/xsd1:className&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:description&gt;?&lt;/xsd1:description&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:disabled&gt;?&lt;/xsd1:disabled&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:domainId&gt;?&lt;/xsd1:domainId&gt;             &lt;!--Zero or more repetitions:--&gt;             &lt;xsd1:properties&gt;                &lt;!--Optional:--&gt;                &lt;xsd1:name&gt;UniqueID&lt;/xsd1:name&gt;                &lt;!--Optional:--&gt;                &lt;xsd1:value&gt;?&lt;/xsd1:value&gt;             &lt;/xsd1:properties&gt;          &lt;/xsd:userStoreDTO&gt;       &lt;/xsd:editUserStore&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p>"},{"location":"apis/manage-user-stores-with-apis/#edituserstorewithdomainname","title":"editUserStoreWithDomainName()","text":"Description This operation edits a userstore and changes its domain name. Permission Level /permission/admin Input Parameters <ul> <li><code>className</code> <code>[string]</code>: This is the userstore manager class name. A list of available class names can be obtained using the getAvailableUserStoreClasses function.</li> <li><code>description</code><code>[string]</code> : This is the description of the userstore.</li> <li><code>disabled</code><code>[boolean]</code> : To disable, mark as <code>true</code>. To enable, mark as <code>false</code>.</li> <li><code>domainID</code><code>[string]</code> : This is the domain name of the userstore. This is a unique name that identifies the userstore.</li> <li><code>properties</code><code>[property]</code> : These are various properties related to the userstore such as connection URL and connection password.</li> <li><code>properties.name</code><code>[string]</code> : This is the name of the property.</li> <li><code>properties.value</code><code>[string]</code> : This is the value of the property.</li> </ul> Request See below Click to view request<p><code>xml tab=\"Request\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.configuration.store.user.identity.carbon.wso2.org/xsd\"&gt;    &lt;soapenv:Header/&gt;    &lt;soapenv:Body&gt;       &lt;xsd:editUserStoreWithDomainName&gt;          &lt;!--Optional:--&gt;          &lt;xsd:previousDomainName&gt;?&lt;/xsd:previousDomainName&gt;          &lt;!--Optional:--&gt;          &lt;xsd:userStoreDTO&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:className&gt;?&lt;/xsd1:className&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:description&gt;?&lt;/xsd1:description&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:disabled&gt;?&lt;/xsd1:disabled&gt;             &lt;!--Optional:--&gt;             &lt;xsd1:domainId&gt;?&lt;/xsd1:domainId&gt;             &lt;!--Zero or more repetitions:--&gt;             &lt;xsd1:properties&gt;                &lt;!--Optional:--&gt;                &lt;xsd1:name&gt;?&lt;/xsd1:name&gt;                &lt;!--Optional:--&gt;                &lt;xsd1:value&gt;?&lt;/xsd1:value&gt;             &lt;/xsd1:properties&gt;          &lt;/xsd:userStoreDTO&gt;       &lt;/xsd:editUserStoreWithDomainName&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p>"},{"location":"apis/manage-user-stores-with-apis/#getavailableuserstoreclasses","title":"getAvailableUserStoreClasses()","text":"Description This operation retrieves the available userstore classes. Permission Level /permission/admin Input Parameters None Request See below Response See below Click to view request and response<p>``` xml tab=\"Request\"  <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getAvailableUserStoreClassesResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2466=\"http://api.user.carbon.wso2.org/xsd\" xmlns:ax2462=\"http://utils.configuration.store.user.identity.carbon.wso2.org/xsd\" xmlns:ax2464=\"http://dto.configuration.store.user.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return&gt;org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager&lt;/ns:return&gt;\n         &lt;ns:return&gt;org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager&lt;/ns:return&gt;\n         &lt;ns:return&gt;org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager&lt;/ns:return&gt;\n         &lt;ns:return&gt;org.wso2.carbon.identity.user.store.remote.CarbonRemoteUserStoreManger&lt;/ns:return&gt;\n         &lt;ns:return&gt;org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager&lt;/ns:return&gt;\n      &lt;/ns:getAvailableUserStoreClassesResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/manage-user-stores-with-apis/#getsecondaryrealmconfigurations","title":"getSecondaryRealmConfigurations()","text":"Description This operation retrieves the configurations of secondary userstores. Permission Level /permission/admin Input Parameters None Request See below Response See below Click to view request and response<p>``` xml tab=\"Request\"  <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getSecondaryRealmConfigurationsResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n      &lt;/ns:getSecondaryRealmConfigurationsResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/manage-user-stores-with-apis/#getuserstoremanagerproperties","title":"getUserStoreManagerProperties()","text":"Description This operation retrieves the properties of secondary userstores. Permission Level /permission/admin Input Parameters None Request See below Response See below Click to view request and response<p>``` xml tab=\"Request\"  org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n    &lt;soapenv:Body&gt;\n        &lt;ns:getUserStoreManagerPropertiesResponse\n            xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n            &lt;ns:return xsi:type=\"ax2384:Properties\"\n                xmlns:ax2384=\"http://api.user.carbon.wso2.org/xsd\"\n                xmlns:ax2386=\"http://dto.configuration.store.user.identity.carbon.wso2.org/xsd\"\n                xmlns:ax2388=\"http://common.ndatasource.carbon.wso2.org/xsd\"\n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema\u00adinstance\"&gt;\n                &lt;ax2384:advancedProperties xsi:nil=\"true\"/&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Connection Name#This should be the DN (Distinguish Name) of the admin user in LDAP&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;ConnectionName&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;CN=,DC=&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Connection URL#Connection URL for the user store&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;ConnectionURL&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;ldaps://&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Connection Password#Password of the admin user&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;ConnectionPassword&lt;/ax2384:name&gt;\n                    &lt;ax2384:value/&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;User Search Base#DN of the context under which user entries are stored in LDAP&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserSearchBase&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;CN=Users,DC=WSO2,DC=Com&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Diabled#Whether user store is disabled&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;Disabled&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;false&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;User Object Class#Filtering criteria for listing all the user entries in LDAP&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserNameListFilter&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;(objectClass=person)&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Username Attribute#Attribute used for uniquely identifying a user entry. Users can be authenticated using their email                                   address, uid and\netc&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserNameAttribute&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;cn&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;User Search Filter#Filtering criteria for searching a particular user entry&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserNameSearchFilter&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;(&amp;amp\u037eamp\u037e(objectClass=user)(cn=?))&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:mandatoryProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;User Entry Object Class#Object Class used to construct user entries&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserEntryObjectClass&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;user&lt;/ax2384:value&gt;\n                &lt;/ax2384:mandatoryProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Group Entry Object Class#Object Class used to construct group entries&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;GroupEntryObjectClass&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;group&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Maximum User List Length#Maximum number of users retrieved at once&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;MaxUserNameListLength&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;100&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Maximum Role List Length#Maximum number of roles retrieved at once&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;MaxRoleNameListLength&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;100&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Enable User Role Cache#This is to indicate whether to cache the role list of a user&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserRolesCacheEnabled&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;true&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:childProperties xsi:type=\"ax2384:Property\"&gt;\n                        &lt;ax2384:description&gt;Group Search Base#DN of the context under which user entries are stored in LDAP&lt;/ax2384:description&gt;\n                        &lt;ax2384:name&gt;GroupSearchBase&lt;/ax2384:name&gt;\n                        &lt;ax2384:value&gt;CN=Users,DC=WSO2,DC=Com&lt;/ax2384:value&gt;\n                    &lt;/ax2384:childProperties&gt;\n                    &lt;ax2384:childProperties xsi:type=\"ax2384:Property\"&gt;\n                        &lt;ax2384:description&gt;Group Filter#Filtering criteria for listing all the group entries in LDAP&lt;/ax2384:description&gt;\n                        &lt;ax2384:name&gt;GroupNameListFilter&lt;/ax2384:name&gt;\n                        &lt;ax2384:value&gt;(objectcategory=group)&lt;/ax2384:value&gt;\n                    &lt;/ax2384:childProperties&gt;\n                    &lt;ax2384:childProperties xsi:type=\"ax2384:Property\"&gt;\n                        &lt;ax2384:description&gt;Group Name Attribute#Attribute used for uniquely identifying a user entry&lt;/ax2384:description&gt;\n                        &lt;ax2384:name&gt;GroupNameAttribute&lt;/ax2384:name&gt;\n                        &lt;ax2384:value&gt;cn&lt;/ax2384:value&gt;\n                    &lt;/ax2384:childProperties&gt;\n                    &lt;ax2384:childProperties xsi:type=\"ax2384:Property\"&gt;\n                        &lt;ax2384:description&gt;Membership Attribute#Attribute used to define members of LDAP groups&lt;/ax2384:description&gt;\n                        &lt;ax2384:name&gt;MembershipAttribute&lt;/ax2384:name&gt;\n                        &lt;ax2384:value&gt;member&lt;/ax2384:value&gt;\n                    &lt;/ax2384:childProperties&gt;\n                    &lt;ax2384:childProperties xsi:type=\"ax2384:Property\"&gt;\n                        &lt;ax2384:description&gt;Group Search Filter#Filtering criteria for searching a particular group entry&lt;/ax2384:description&gt;\n                        &lt;ax2384:name&gt;GroupNameSearchFilter&lt;/ax2384:name&gt;\n                        &lt;ax2384:value&gt;(&amp;amp\u037eamp\u037e(objectClass=group)(cn=?))&lt;/ax2384:value&gt;\n                    &lt;/ax2384:childProperties&gt;\n                    &lt;ax2384:description&gt;Read Groups#Specifies whether groups should be read from LDAP&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;ReadGroups&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;true&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Group Search Base#DN of the context under which user entries are stored in LDAP&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;GroupSearchBase&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;CN=Users,DC=WSO2,DC=Com&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Group Object Class#Filtering criteria for listing all the group entries in LDAP&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;GroupNameListFilter&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;(objectcategory=group)&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Group Name Attribute#Attribute used for uniquely identifying a user entry&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;GroupNameAttribute&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;cn&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Membership Attribute#Attribute used to define members of LDAP groups&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;MembershipAttribute&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;member&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Member Of Attribute#MemberOfAttribute&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;MemberOfAttribute&lt;/ax2384:name&gt;\n                    &lt;ax2384:value/&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Group Search Filter#Filtering criteria for searching a particular group entry&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;GroupNameSearchFilter&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;(&amp;amp\u037eamp\u037e(objectClass=group)(cn=?))&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Password Hashing Algorithm#Password Hash method to use when storing user entries&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;PasswordHashMethod&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;PLAIN_TEXT&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Password RegEx (Javascript)#Policy that defines the password format&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;PasswordJavaScriptRegEx&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;^[\\S]{5,30}$&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Username RegEx (Javascript)#The regular expression used by the front\u00adend components for username validation&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserNameJavaScriptRegEx&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;^[\\S]{3,30}$&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Username RegEx (Java)#A regular expression to validate user names&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserNameJavaRegEx&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;[a\u00adzA\u00adZ0\u00ad9._\u00ad|//]{3,30}$&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Role Name RegEx (Javascript)#The regular expression used by the front\u00adend components for role name validation&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;RoleNameJavaScriptRegEx&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;^[\\S]{3,30}$&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Role Name RegEx (Java)#A regular expression to validate role names&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;RoleNameJavaRegEx&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;[a\u00adzA\u00adZ0\u00ad9._\u00ad|//]{3,30}$&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Enable Write Groups#Indicate whether write groups enabled&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;WriteGroups&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;true&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;User DN Pattern#The patten for user's DN. It can be defined to improve the LDAP search&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;UserDNPattern&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;uid={0},ou=Users,dc=wso2,dc=org&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Allow Empty Roles#Specifies whether the underlying user store allows empty roles to be added&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;EmptyRolesAllowed&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;true&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Default Realm Name#Default name for the realm&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;defaultRealmName&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;WSO2.ORG&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Enable KDC#Whether key distribution center enabled&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;kdcEnabled&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;false&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Display Name Attribute#The display name which usually is the combination of the users first name, middle initial, and last name&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;DisplayNameAttribute&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;cn&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Is ADLDS Role#Whether an Active Directory Lightweight Directory Services role&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;isADLDSRole&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;false&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;User Account Control#Flags that control the behavior of the user account&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;userAccountControl&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;512&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Referral#Guides the requests to a domain controller in the correct domain&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;Referral&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;follow&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n                &lt;ax2384:optionalProperties xsi:type=\"ax2384:Property\"&gt;\n                    &lt;ax2384:description&gt;Enable Back Links# Whether to allow attributes to be result from references to the object from other objects&lt;/ax2384:description&gt;\n                    &lt;ax2384:name&gt;BackLinksEnabled&lt;/ax2384:name&gt;\n                    &lt;ax2384:value&gt;true&lt;/ax2384:value&gt;\n                &lt;/ax2384:optionalProperties&gt;\n            &lt;/ns:return&gt;\n        &lt;/ns:getUserStoreManagerPropertiesResponse&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/manage-user-stores-with-apis/#testrdbmsconnection","title":"testRDBMSConnection()","text":"Description This operation tests the connection to the datasource used by a JDBC userstore manager. Permission Level /permission/admin Input Parameters None Request See below Response See below Click to view request and response<p>``` xml tab=\"Request\"  JDBCSECONDARY com.mysql.jdbc.Driver jdbc:mysql://192.168.48.154:3306/test root root <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n    &lt;soapenv:Body&gt;\n        &lt;ns:testRDBMSConnectionResponse\n            xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n            &lt;ns:return&gt;true&lt;/ns:return&gt;\n        &lt;/ns:testRDBMSConnectionResponse&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/manage-users-and-roles-with-apis/","title":"Manage Users and Roles with SOAP APIs","text":"<p>Warning</p> <p>From 5.4.0 onwards, SCIM 2.0 REST APIs are supported out-of-the-box with WSO2 Identity Server and is recommended for user store management. For more information on using the SCIM 2.0 REST APIs instead of the SOAP service given below, see SCIM 2.0 REST APIs.</p> <p>This section guides you through invoking and working with the RemoteUserStoreManagerService and the operations you can work with in this service.</p>"},{"location":"apis/manage-users-and-roles-with-apis/#invoking-the-admin-service","title":"Invoking the admin service","text":"<p><code>RemoteUserStoreManagerService</code> is an admin service of the WSO2 Carbon platform. As admin services are secured to prevent anonymous invocations, you cannot view the WSDL of the admin service by default. Follow the steps below to view and invoke it:</p> <ol> <li> <p>Set the  below configuration in     <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[admin_service.wsdl]\nenable = true\n</code></pre> </li> <li> <p>Restart the Identity Server.</p> </li> <li>If you have started the server in default configurations,\u00a0use the     following URL in your browser to see the WSDL of the admin service:     https://localhost:9443/services/RemoteUserStoreManagerService?wsdl</li> </ol> <p>For more information on WSO2 admin services and how to invoke an admin service using either SoapUI or any other client program, see Call Admin Services.</p>"},{"location":"apis/manage-users-and-roles-with-apis/#operations-included-in-the-api-and-sample-requests","title":"Operations included in the API and sample requests","text":"<p>The following operations are available in the RemoteUserStoreManagerService.</p> <p>Note</p> <p>For the methods that have profile name as an input parameter, you can also pass null for the parameter so the default profile will then be considered instead.</p>"},{"location":"apis/manage-users-and-roles-with-apis/#authenticate","title":"authenticate()","text":"Method authenticate Description Authenticate users against the user store Input Parameters Parameter Type Description Username string Provide the relevant user's username Credential string Provide the relevant user's password Output Parameters A boolean parameter indicating if the user has been authenticated or not <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:authenticate&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nilasini&lt;/ser:userName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:credential&gt;admin&lt;/ser:credential&gt;\n&lt;/ser:authenticate&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#isreadonly","title":"isReadOnly()","text":"Method isReadOnly Description Check whether the user store is read only Input Parameters None Output Parameters A boolean parameter indicating if the user store is read only or not <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:isReadOnly/&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getuserclaimvalue","title":"getUserClaimValue()","text":"Method getUserClaimValue Description Retrieve the value of the user property from the user profile Input Parameters Parameter Type Description Username String Username Claim String Name of the claim Profile Name String Name of the user profile Output Parameters Value of the claim as a string <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getUserClaimValue&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:claim&gt;http://wso2.org/claims/lastname&lt;/ser:claim&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profileName&gt;?&lt;/ser:profileName&gt;\n&lt;/ser:getUserClaimValue&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getuserlist","title":"getUserList()","text":"Method getUserList Description Retrieve a list of all users Input Parameters Parameter Type Description Claim URI String The Claim URI of the claim Claim Value String The value of the claim Profile Name String Name of the user profile Output Parameters List of users with the specified claim. <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getUserList&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:claimUri&gt;http://wso2.org/claims/country&lt;/ser:claimUri&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:claimValue&gt;srilanka&lt;/ser:claimValue&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profile&gt;default&lt;/ser:profile&gt;\n&lt;/ser:getUserList&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getuserlistofrole","title":"getUserListOfRole()","text":"Method getUserListOfRole Description Retrieve a list of all users belonging to a role Input Parameters Parameter Type Description Role Name String Name of the role Output Parameters List of usernames as a string array <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getUserListOfRole&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:roleName&gt;Engineer&lt;/ser:roleName&gt;\n&lt;/ser:getUserListOfRole&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre> <p>Note</p> <p>This operation retrieves a list of all the users. The users assigned to the specified role will be indicated in the list. Users belonging to the role are shown as selected = true and users not belonging to the role are shown as selected = false.</p>"},{"location":"apis/manage-users-and-roles-with-apis/#updatecredential","title":"updateCredential()","text":"Method updateCredential Description This operation can be used by the user itself to update his/her own password Input Parameters Parameter Type Description Username String Username New Credential String The new password Old Credential String The old password Output Parameters None <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:updateCredential&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com &lt;/ser:userName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:newCredential&gt;admin&lt;/ser:newCredential&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:oldCredential&gt;nilasini&lt;/ser:oldCredential&gt;\n&lt;/ser:updateCredential&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getuserclaimvaluesforclaims","title":"getUserClaimValuesForClaims()","text":"Method getUserClaimValuesForClaims Description Retrieve the claim values of a user when given a set of claims and a user profile Input Parameters Parameter Type Description Username String Username Set of Claims String Name of the claim Profile Name String Name of the user profile Output Parameters Array of objects of type ClaimValue which contains the claim mapping between claim URI and claim value <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getUserClaimValuesForClaims&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com &lt;/ser:userName&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:claims&gt;country&lt;/ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profileName&gt;nila@wso2support.com &lt;/ser:profileName&gt;\n&lt;/ser:getUserClaimValuesForClaims&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#deleteuserclaimvalue","title":"deleteUserClaimValue()","text":"Method deleteUserClaimValue Description Delete a single user claim value Input Parameters Parameter Type Description Username String Username Profile Name String Name of the user profile Claim URI String The claim URI of the claim Output Parameters None <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:deleteUserClaimValue&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:claimURI&gt;http://wso2.org/claims/lastname&lt;/ser:claimURI&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profileName&gt;nila@wso2support.com&lt;/ser:profileName&gt;\n&lt;/ser:deleteUserClaimValue&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#isexistinguser","title":"isExistingUser()","text":"Method isExistingUser Description Check whether a given user name exists in the system Input Parameters Parameter Type Description Username String Username Output Parameters A Boolean parameter indicating whether the user exists or not <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:isExistingUser&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;/ser:isExistingUser&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#deleteuserclaimvalues","title":"deleteUserClaimValues()","text":"Method deleteUserClaimValues Description Delete many user claim values Input Parameters Parameter Type Description Username String Username Profile Name String Name of the user profile Claims String Array The claims to be deleted Output Parameters None <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:deleteUserClaimValues&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:claims&gt;http://wso2.org/claims/organization&lt;/ser:claims&gt;\n&lt;ser:claims&gt;http://wso2.org/claims/country&lt;/ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profileName&gt;default&lt;/ser:profileName&gt;\n&lt;/ser:deleteUserClaimValues&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#updatecredentialbyadmin","title":"updateCredentialByAdmin()","text":"Method updateCredentialByAdmin Description This operation can be used by the admin to update a user's password Input Parameters Parameter Type Description Username String Username New Credential String The new password Output Parameters None <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:updateCredentialByAdmin&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:newCredential&gt;admin&lt;/ser:newCredential&gt;\n&lt;/ser:updateCredentialByAdmin&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getrolenames","title":"getRoleNames()","text":"Method getRoleNames Description Get a list of all the roles created in the system Input Parameters None Output Parameters A string array of all the role names <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:getRoleNames/&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getallprofilenames","title":"getAllProfileNames()","text":"Method getAllProfileNames Description Get a list of all the profile names created in the system Input Parameters None Output Parameters A string array of all the profile names <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:getAllProfileNames/&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#listusers","title":"listUsers()","text":"Method listUsers Description Retrieves a list of user names upto a particular maximum limit Input Parameters Parameter Type Description Filter String A filter to filter out any users Max Item Limit Integer <p>The max limit to the number of users returned in the list</p> <ul> <li>If the value given is below 0, it will be disregarded and the system configured limit will be taken instead.</li> <li>If the value given is greater than the system configured limit, it will be disregarded and the system configured limit will be taken instead.</li> </ul> Output Parameters A filtered string array of all the user names <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:listUsers&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:filter&gt;*@wso2support.com&lt;/ser:filter&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:maxItemLimit&gt;10&lt;/ser:maxItemLimit&gt;\n&lt;/ser:listUsers&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#deleterole","title":"deleteRole()","text":"Method deleteRole Description Delete a given role name Input Parameters Parameter Type Description Role Name String Name of the role Output Parameters None <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:deleteRole&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:roleName&gt;Engineer&lt;/ser:roleName&gt;\n&lt;/ser:deleteRole&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#deleteuser","title":"deleteUser()","text":"Method deleteUser Description Delete a user Input Parameters Parameter Type Description Username String Username of the user Output Parameters None <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:deleteUser&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;/ser:deleteUser&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getrolelistofuser","title":"getRoleListOfUser()","text":"Method getRoleListOfUser Description Get the list of roles that a particular user belongs to Input Parameters Parameter Type Description Username String Username of the user Output Parameters A string array of the role names <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:getRoleListOfUser&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nilasini@wso2support.com&lt;/ser:userName&gt;\n&lt;/ser:getRoleListOfUser&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#updaterolename","title":"updateRoleName()","text":"Method updateRoleName Description Change the name of a particular role Input Parameters Parameter Type Description Role Name String Existing name of the role New Role Name String New name for the role Output Parameters None <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:updateRoleName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:roleName&gt;Doctor&lt;/ser:roleName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:newRoleName&gt;Teacher&lt;/ser:newRoleName&gt;\n&lt;/ser:updateRoleName&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#isexistingrole","title":"isExistingRole()","text":"Method isExistingRole Description Check whether a given role exists Input Parameters Parameter Type Description Role Name String Name of the role Output Parameters A Boolean parameter indicating whether the role exists or not <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:isExistingRole&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:roleName&gt;Teacher&lt;/ser:roleName&gt;\n&lt;/ser:isExistingRole&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#updaterolelistofuser","title":"updateRoleListOfUser()","text":"Method updateRoleListOfUser Description Change the list of roles that a user belongs to Input Parameters Parameter Type Description Username String Username of User Deleted Roles String Array List of roles that are to be removed New Roles String Array List of roles that are to be added Output Parameters None <pre><code>&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:updateRoleListOfUser&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:deletedRoles&gt;Teacher&lt;/ser:deletedRoles&gt;\n&lt;ser:deletedRoles&gt;lecturer&lt;/ser:deletedRoles&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:newRoles&gt;doctor&lt;/ser:newRoles&gt;\n&lt;ser:newRoles&gt;carpenter&lt;/ser:newRoles&gt;\n&lt;/ser:updateRoleListOfUser&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#gethybridroles","title":"getHybridRoles()","text":"Method getHybridRoles Description Get the list of roles stored in the internal <code>UserMgt</code> database irrespective of the user store Input Parameters None Output Parameters A string array of all the roles <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getHybridRoles/&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getuserclaimvalues","title":"getUserClaimValues()","text":"Method getUserClaimValues Description Get a list of all claim information for a given user name and profile name Input Parameters Parameter Type Description Username String Username of User Profile Name String Name of the profile Output Parameters Array of objects of type 'claim' which includes all the information of the claims <pre><code>soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n   &lt;soap:Header/&gt;\n&lt;soap:Body&gt;\n&lt;ser:getUserClaimValues&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profileName&gt;default&lt;/ser:profileName&gt;\n&lt;/ser:getUserClaimValues&gt;\n&lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#adduser","title":"addUser()","text":"Method addUser Description Add a user to the user store Input Parameters Parameter Type Description Username String Username of the new user Credential String Password for the new user Role List String Array List of roles that the user should be assigned to Claims Claims Objects Array Properties of the user (claim mapping) as a mapping Profile Name String Name of the profile Output Parameters None <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\" xmlns:xsd=\"http://common.mgt.user.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:addUser&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nilasini&lt;/ser:userName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:credential&gt;admin&lt;/ser:credential&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:roleList&gt;teacher&lt;/ser:roleList&gt;\n&lt;ser:roleList&gt;Doctor&lt;/ser:roleList&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:claimURI&gt;http://wso2.org/claims/country&lt;/xsd:claimURI&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:value&gt;England&lt;/xsd:value&gt;\n&lt;/ser:claims&gt;\n&lt;ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:claimURI&gt;http://wso2.org/claims/organization&lt;/xsd:claimURI&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:value&gt;Intuit&lt;/xsd:value&gt;\n&lt;/ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profileName&gt;default&lt;/ser:profileName&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:requirePasswordChange&gt;false&lt;/ser:requirePasswordChange&gt;\n&lt;/ser:addUser&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#addrole","title":"addRole()","text":"Method addRole Description Add a role to the system Input Parameters Parameter Type Description Role Name String Name of the new role User List String List of users to be included to the role Permissions Permission Objects Array Permissions to be assigned to the role Output Parameters None <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\" xmlns:xsd=\"http://dao.service.ws.um.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:addRole&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:roleName&gt;hrManager&lt;/ser:roleName&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:userList&gt;nila@wso2support.com&lt;/ser:userList&gt;\n&lt;ser:userList&gt;venilope&lt;/ser:userList&gt;\n&lt;ser:userList&gt;pav@wso2support.com&lt;/ser:userList&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:permissions&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:resourceId&gt;/permission/admin/manage/identity&lt;/xsd:resourceId&gt;\n&lt;/ser:permissions&gt;\n&lt;/ser:addRole&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#updateuserlistofrole","title":"updateUserListOfRole()","text":"Method updateUserListOfRole Description Add/remove users that belong to a particular role Input Parameters Parameter Type Description Role Name String Name of the new role Deleted Users String Array List of users to be deleted from the role New Users String Array List of users to be added to the role Output Parameters None <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:updateRoleListOfUser&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:deletedRoles&gt;teacher&lt;/ser:deletedRoles&gt;\n&lt;ser:deletedRoles&gt;Doctor&lt;/ser:deletedRoles&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:newRoles&gt;lecturer&lt;/ser:newRoles&gt;\n&lt;ser:newRoles&gt;carpenter&lt;/ser:newRoles&gt;\n&lt;/ser:updateRoleListOfUser&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#setuserclaimvalues","title":"setUserClaimValues()","text":"Method setUserClaimValues Description Update the claim values of a given user Input Parameters Parameter Type Description Username String Username Claims String Array Map of claim URIs and values Profile Name String Name of the profile Output Parameters None <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\" xmlns:xsd=\"http://common.mgt.user.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:setUserClaimValues&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:claimURI&gt;http://wso2.org/claims/organization&lt;/xsd:claimURI&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:value&gt;wso2&lt;/xsd:value&gt;\n&lt;/ser:claims&gt;\n&lt;ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:claimURI&gt;http://wso2.org/claims/country&lt;/xsd:claimURI&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:value&gt;srilanka&lt;/xsd:value&gt;\n&lt;/ser:claims&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:profileName&gt;default&lt;/ser:profileName&gt;\n&lt;/ser:setUserClaimValues&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#gettenantidofuser","title":"getTenantIdOfUser()","text":"Method <p>getTenantIdOfUser</p> Description Get the tenant ID of the tenant that a particular user belongs to Input Parameters Parameter Type Description Username String Username Output Parameters The tenant ID as an integer <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getTenantIdofUser&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:username&gt;nila@wso2support.com&lt;/ser:username&gt;\n&lt;/ser:getTenantIdofUser&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/manage-users-and-roles-with-apis/#getprofilenames","title":"getProfileNames()","text":"Method <p>getProfileNames</p> Description Get all profile names of a user Input Parameters Parameter Type Description Username String Username Output Parameters The profile names as a string array <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.ws.um.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;ser:getProfileNames&gt;\n&lt;!--Optional:--&gt;\n&lt;ser:userName&gt;nila@wso2support.com&lt;/ser:userName&gt;\n&lt;/ser:getProfileNames&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre>"},{"location":"apis/notification-sender-rest-api/","title":"Notification sender API","text":""},{"location":"apis/notification-sender/","title":"Notification Senders configurations","text":"<p>The RESTful API for managing notification sender configurations in WSO2 Identity Server supports Email and SMS as the notification channels.</p> <p>The following section provides the instructions to contruct requests for each notification sender type.</p> <p>Important</p> <ul> <li> <p>This API is not supported for notification sender configuration for carbon.super tenant.</p> <p>If you want to configure event publishers in carbon.super tenant, add or modify event publishers in  <code>IS_HOME/repository/deployment/server/eventpublishers</code>. For more information on writing an event publisher, see Event Publisher Types.</p> </li> <li> <p>The following properties are used for internal operations. Therefore, avoid using these properties when configuring notification senders.</p> Property Purpose streamName The name of the event stream where events are picked for notification sending version The version of the event stream type Type of the notification sender (email/sms) </li> </ul> Email Sender Configuration<ul> <li>If you want to add properties related to email adaptor configurations (eg: SMTP configurations), define property keys with the exact names given in the Email Event Publisher documentation. </li> </ul> SMS Sender Configuration<ol> <li>Some SMS providers\u2019 SMS sending API payloads are templated in the  <code>IS_HOME/repository/conf/sms/sms-providers-api-body-templates.xml</code> file.</li> <li>You can add new SMS providers\u2019 payloads, or modify the existing SMS provider payloads by adding new attributes.</li> <li> <p>Attribute values that need to be replaced by the POST /notification-senders/sms API\u2019s input should be templated with  a prefix, \u201c$\u201d. For example,</p> <pre><code>$sender will be replaced by the input value of the \u201csender\u201d attribute.\n$body.routingGroup will be replaced by the input value of the property defined with key - \u201cbody.routingGroup\u201d.\n</code></pre> </li> </ol> <p>Properties in POST /notification-senders/sms request</p> <ol> <li>Properties that need to be included in SMS provider API\u2019s body should be defined with the prefix, \u201dbody.\u201d.</li> <li>If the property named \u201cbody\u201d is present, the corresponding value will be used as the SMS provider API\u2019s body.</li> <li> <p>If you want to add properties related to HTTPOutputEventAdaptor, define keys with the exact names defined in the  HTTP Event Publisher documentation.</p> <p>Example:</p> <ul> <li> <p>Let's assume you change the <code>Bulksms</code> template as follows. <pre><code>    &lt;configuration provider=\"Bulksms\"&gt;\n        &lt;body&gt;\n            [{ \"from\": $sender, \"to\": {{mobile}}, \"body\": {{body}}, \"routingGroup\": $body.routingGroup}]\n        &lt;/body&gt;\n    &lt;/configuration&gt;\n</code></pre></p> </li> <li> <p>The POST /notification-senders/sms request should have a property with a key named \u201cbody.routingGroup\u201d. <pre><code>    {\n        \"provider\": \"Bulksms\",\n        \"providerURL\": \"https://webhook.site/9b79bebd-445a-4dec-ad5e-622b856fa184\",\n        \"key\": \"123\",\n        \"secret\": \"1234\",\n        \"sender\": \"073923902\",\n        \"properties\": [\n            {\n                \"key\": \"body.routingGroup\",\n                \"value\": \"ECONOMY\"\n            }\n        ]\n    }\n</code></pre></p> </li> </ul> </li> </ol>"},{"location":"apis/oauth2-scope-management-rest-apis/","title":"OAuth 2.0 scope management API","text":""},{"location":"apis/oidc-scope-management-rest-apis/","title":"OpenID Connect scope management API","text":""},{"location":"apis/permission-management-rest-api/","title":"Permission management API","text":""},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/","title":"Retrieve Tenant Resources Based on Search Parameters","text":"<p>This section guides you through using the <code>/search</code> endpoint of the Configuration Management REST API to search for tenant resources.  </p>"},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/#search-endpoint","title":"/search endpoint","text":"<p>The <code>/search</code> endpoint of the Configuration Management REST API allows you to perform cross-tenant search for resources.</p> <p>The search context URL should be as follows:</p> <p><code>https://{host}:{port}/t/{tenant-domain}/api/identity/config-mgt/v1.0/search?$filter={search-query}</code></p> <p>Here, the value of <code>{search-query}</code> should be in the form of a configuration management search query. For information on how to write a search condition that is in the form of a\u00a0configuration management search query, see Write a configuration management search query.</p>"},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/#write-a-configuration-management-search-query","title":"Write a configuration management search query","text":"<p>Configuration management search query is a Open Data Protocol based search query supported via Apache CXF.</p> <p>The configuration management search query is a search condition that is built using primitive configuration management search conditions in the form of a string. The following topics describe the configuration management search conditions that you can use to write a configuration management search query.</p>"},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/#configuration-management-primitive-search-condition","title":"Configuration management primitive search condition","text":"<p>A primitive search condition is a string in the following form: <code>{RESOURCE_SEARCH_PARAMETER} {PRIMITIVE_CONDITION_OPERATOR} '{VALUE}'</code></p> <p>Following are the parameters of a resource supported in a primitive search condition and the corresponding values to replace the <code>{RESOURCE_SEARCH_PARAMETER}</code> placeholder :</p> Resource parameter Value to replace <code>             {RESOURCE_SEARCH_PARAMETER}            </code> Tenant domain <code>             tenantDomain            </code> ID value of the resource type <code>             resourceTypeId            </code> Name of the resource type <code>             resourceTypeName            </code> ID value of the resource <code>             resourceId            </code> Name of the resource <code>             resourceName            </code> A key of the attribute <code>             attributeKey            </code> Value of the attribute <code>             attributeValue            </code> <p>Following are the operators supported in a primitive condition and the corresponding values to replace the <code>{PRIMITIVE_CONDITION_OPERATOR}</code> placeholder :</p> Primitive condition operator Value to replace <code>             {PRIMITIVE_CONDITION_OPERATOR}            </code> Equal <code>             eq            </code> Not equal <code>             ne            </code> Less than <code>             lt            </code> Less or equal <code>             le            </code> Greater than <code>             gt            </code> Greater or equal <code>             ge            </code>"},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/#configuration-management-complex-search-condition","title":"Configuration management complex search condition","text":"<p>A complex search condition is generally built by combining primitive search conditions. The simplest form of a complex search condition string is as follows:</p> <p><code>{PRIMITIVE_SEARCH_CONDITION_1} {COMPLEX_CONDITION_OPERATOR} {PRIMITIVE_SEARCH_CONDITION_2}</code></p> <p>Two complex search condition created as mentioned above can also be joined as follows to form another complex search condition:</p> <p><code>{COMPLEX_SEARCH_CONDITION_1} {COMPLEX_CONDITION_OPERATOR} {COMPLEX_SEARCH_CONDITION_2}</code></p> <p>Tip</p> <p>For better readability, it is recommended to use parentheses to group complex search conditions when you join conditions using a <code>COMPLEX_CONDITION_OPERATOR</code>.</p> <p>Following are the operators supported to build a complex search condition and the\u00a0corresponding values to replace the <code>{COMPLEX_CONDITION_OPERATOR}</code> placeholder :</p> Complex condition operator Value to replace <code>             {COMPLEX_CONDITION_OPERATOR}            </code> AND <code>             and            </code> OR <code>             or            </code> <p>Info</p> <p>When you join complex search conditions together with complex condition operators, the result is always another complex condition. Therefore, any required search condition can be built as a configuration management complex search condition in this manner.</p>"},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/#search-scenarios","title":"Search scenarios","text":"<p>This section demonstrates the different ways of searching for resources (i.e. different search scenarios). In the scenarios given below, an HTTP GET request is sent to the following location with the\u00a0{search-query}\u00a0placeholder value replaced accordingly and encoded for a URL. When you are trying out these scenarios, fill the\u00a0{host}, {port}\u00a0and the\u00a0{tenant-domain} placeholders\u00a0with the relevant values.</p> <p>Reference</p> <p>Super tenant:</p> <pre><code>https://{host}:{port}/api/identity/config-mgt/v1.0/search?$filter={search-query}</code></pre> <p>Tenant:</p> <pre><code>https://{host}:{port}/t/{tenant-domain}/api/identity/config-mgt/v1.0/search?$filter={search-query}</code></pre> <p>Sample GET request for the super tenant</p> <pre><code>https://localhost:9443/t/carbon.super/api/identity/config-mgt/v1.0/search?$filter=tenantDomain eq \u2018carbon.super\u2019</code></pre> <p>Sample CURL command for a tenant</p> <pre><code>curl -k -v --user admin:admin GET 'https://localhost:9443/api/identity/config-mgt/v1.0/search?$filter=%28tenantDomain%20eq%20%27carbon.super%27%29'</code></pre> <p>Assume you have the following resources in your database.</p> Name Resource JSON resource_1 <pre><code>{\n\"name\": \"resource_1\",\n\"attributes\": [\n    {\n\"key\": \"from\",\n\"value\": \"abc.com\"\n    },\n    {\n\"key\": \"to\",\n\"value\": \"123.com\"\n    }\n  ]\n}</code></pre> resource_2 <pre><code>{\n\"name\": \"resource_2\",\n\"attributes\": [\n    {\n\"key\": \"from\",\n\"value\": \"abc.com\"\n    },\n    {\n\"key\": \"to\",\n\"value\": \"wso2.com\"\n    }\n  ]\n}</code></pre> resource_3 <pre><code>{\n\"name\": \"resource_3\",\n\"attributes\": [\n    {\n\"key\": \"from\",\n\"value\": \"xyz.com\"\n    },\n    {\n\"key\": \"to\",\n\"value\": \"wso2.com\"\n    }\n  ]\n}</code></pre> resource_4 <pre><code>{\n\"name\": \"resource_4\",\n\"attributes\": [\n    {\n\"key\": \"to\",\n\"value\": \"wso2.com\"\n    },\n    {\n\"key\": \"server\",\n\"value\": \"smtp.com\"\n    }\n  ]\n}</code></pre> <p>There are two approaches to search or filter the resources in your database:</p> <ul> <li>Meta-data based search</li> <li>Attribute-based search</li> </ul>"},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/#meta-data-based-search","title":"Meta-data based search","text":"<p>Use the following meta-data parameters to search for resources.</p> Search Parameter of the Resource {RESOURCE_SEARCH_PARAMETER} Tenant domain <code>tenantDomain</code> ID value of the resource type <code>resourceTypeId</code> Name of the resource type <code>resourceTypeName</code> ID value of the resource <code>resourceId</code> Name of the resource <code>resourceName</code> <p>Search for resources in a specific tenant domain</p> <p>The table below shows a sample search query that is used to search for resources that are created in the super tenant domain.</p> <p>{search-query}</p> <p>Response JSON</p> <p>tenantDomain eq 'carbon.super'</p> click to see the sample response <p> <pre><code>{\n\"resources\": [\n        {\n            \"resourceId\": \"29bd5f2d-54b4-4169-8cac-aa2e9cf5c1ba\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_2\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:59\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"aea8665f-d6d7-4ec3-9449-b6423ed9fddf\"\n                },\n                {\n                    \"key\": \"to\",\n                    \"value\": \"wso2.com\",\n                    \"attributeId\": \"22f4f25a-3f79-4db3-b805-e53946110fa8\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"aa70ca2e-bd52-4a97-97b6-a3cd3f261a8a\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_4\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 06:08:30\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"server\",\n                    \"value\": \"smtp.com\",\n                    \"attributeId\": \"f4cd7255-a011-4bbb-ae3c-bbb3f860f553\"\n                },\n                {\n                    \"key\": \"to\",\n                    \"value\": \"wso2.com\",\n                    \"attributeId\": \"de0b80e0-66c0-4168-b884-184c38cd6301\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"c9b8913f-3ae4-43f5-9552-a8676fd19646\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_1\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:48\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"28092ab2-594f-421f-8c7e-9e8d4fbe1a5c\"\n                },\n                {\n                    \"key\": \"to\",\n                    \"value\": \"123.com\",\n                    \"attributeId\": \"3633269a-cab9-4e14-a264-dddb1a6001ed\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"7982a6e0-512a-4ebe-8c14-16f1819967c9\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_3\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:26:47\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"xyz.com\",\n                    \"attributeId\": \"589f8423-bf57-4906-bf34-2d821358ed13\"\n                },\n                {\n                    \"key\": \"to\",\n                    \"value\": \"wso2.com\",\n                    \"attributeId\": \"ffe5acee-d59f-4918-9bfb-85c282490691\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        }\n    ]\n}\n</code></pre> </p> <p> Search for resources in a specific tenant domain using the resource name</p> <p>The table below shows a sample search query that is used to search for resources named \"resource_1\" and \"resource_2\" in the super tenant domain using the resource name.   </p> <p>{search-query}</p> <p>Response JSON</p> <p>(tenantDomain eq 'carbon.super') and \u00a0((resourceName eq 'resource_1') or (resourceName eq 'resource_2'))</p> Click to see the sample response. <p> <pre><code>{\n    \"resources\": [\n        {\n            \"resourceId\": \"29bd5f2d-54b4-4169-8cac-aa2e9cf5c1ba\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_2\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:59\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"aea8665f-d6d7-4ec3-9449-b6423ed9fddf\"\n                },\n                {\n                    \"key\": \"to\",\n                    \"value\": \"wso2.com\",\n                    \"attributeId\": \"22f4f25a-3f79-4db3-b805-e53946110fa8\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"c9b8913f-3ae4-43f5-9552-a8676fd19646\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_1\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:48\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"28092ab2-594f-421f-8c7e-9e8d4fbe1a5c\"\n                },\n                {\n                    \"key\": \"to\",\n                    \"value\": \"123.com\",\n                    \"attributeId\": \"3633269a-cab9-4e14-a264-dddb1a6001ed\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        }\n    ]\n}\n</code></pre> </p>"},{"location":"apis/retrieve-tenant-resources-based-on-search-parameters/#attribute-based-search","title":"Attribute-based search","text":"<p>There are two parameters in any attribute; a key, and a value. The search queries given below are used to search for a resource using a combination of its attribute parameters.</p> <p>Note</p> <p>The configuration management search query does not support a resource search parameter that has multiple primitive search conditions joined by the complex operator \u2018and\u2019. For more information, see the section below.</p> <p>Search for resources using an attribute key, value pair</p> <p>The table below shows a sample search query used to search for a resource with an attribute, where the key is equal to \"from\" and the value is equal to \"abc.com\".</p> <p>{search-query}</p> <p>Response JSON</p> <p>(attributeKey eq 'from') and (attributeValue eq ' abc.com ')</p> <p> Click to see the sample response. <p> <pre><code>{\n    \"resources\": [\n        {\n            \"resourceId\": \"29bd5f2d-54b4-4169-8cac-aa2e9cf5c1ba\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_2\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:59\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"aea8665f-d6d7-4ec3-9449-b6423ed9fddf\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"c9b8913f-3ae4-43f5-9552-a8676fd19646\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_1\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:48\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"28092ab2-594f-421f-8c7e-9e8d4fbe1a5c\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        }\n    ]\n}\n</code></pre> </p> <p>Note</p> <p>Although both <code>resource_1</code> and <code>resource_2</code> have another attribute where the key is equal to \"to\", the returned search response only contains the requested attribute \"from\". To retrieve all available attributes for a resource using search, you need to search for the resource using the resource ID as given below. For example, to retrieve resource_1 using the resource ID, use the following search query: </p> Click to see the search query<p> {search-query} Response JSON resourceId eq 'c9b8913f-3ae4-43f5-9552-a8676fd19646' Click to see the sample response. <p> <pre><code>            {\n    \"resources\": [\n        {\n            \"resourceId\": \"c9b8913f-3ae4-43f5-9552-a8676fd19646\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_1\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:48\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"28092ab2-594f-421f-8c7e-9e8d4fbe1a5c\"\n                },\n                {\n                    \"key\": \"to\",\n                    \"value\": \"123.com\",\n                    \"attributeId\": \"3633269a-cab9-4e14-a264-dddb1a6001ed\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        }\n    ]\n}\n</code></pre> </p> </p> <p>Search for resources using an attribute key</p> <p>The table below shows a sample search query used to search for a resource with an attribute where the key is equal to \"from\". In this case, the value for the attribute can be any value.</p> <p>{search-query}</p> <p>Response JSON</p> <p>attributeKey eq 'from'</p> Click to see the sample response <p> <pre><code>{\n\"resources\": [\n    {\n        \"resourceId\": \"29bd5f2d-54b4-4169-8cac-aa2e9cf5c1ba\",\n        \"tenantDomain\": \"carbon.super\",\n        \"resourceName\": \"resource_2\",\n        \"resourceType\": \"e-mail\",\n        \"lastModified\": \"2019-01-14 03:16:59\",\n        \"files\": [],\n        \"attributes\": [\n            {\n                \"key\": \"from\",\n                \"value\": \"abc.com\",\n                \"attributeId\": \"aea8665f-d6d7-4ec3-9449-b6423ed9fddf\"\n            }\n        ],\n        \"hasFile\": false,\n        \"hasAttribute\": false\n    },\n    {\n        \"resourceId\": \"c9b8913f-3ae4-43f5-9552-a8676fd19646\",\n        \"tenantDomain\": \"carbon.super\",\n        \"resourceName\": \"resource_1\",\n        \"resourceType\": \"e-mail\",\n        \"lastModified\": \"2019-01-14 03:16:48\",\n        \"files\": [],\n        \"attributes\": [\n            {\n                \"key\": \"from\",\n                \"value\": \"abc.com\",\n                \"attributeId\": \"28092ab2-594f-421f-8c7e-9e8d4fbe1a5c\"\n            }\n        ],\n        \"hasFile\": false,\n        \"hasAttribute\": false\n    },\n    {\n        \"resourceId\": \"7982a6e0-512a-4ebe-8c14-16f1819967c9\",\n        \"tenantDomain\": \"carbon.super\",\n        \"resourceName\": \"resource_3\",\n        \"resourceType\": \"e-mail\",\n        \"lastModified\": \"2019-01-14 03:26:47\",\n        \"files\": [],\n        \"attributes\": [\n            {\n                \"key\": \"from\",\n                \"value\": \"xyz.com\",\n                \"attributeId\": \"589f8423-bf57-4906-bf34-2d821358ed13\"\n            }\n        ],\n        \"hasFile\": false,\n        \"hasAttribute\": false\n    }\n    ]\n}\n</code></pre> </p> <p>Search for resources with multiple attributes using the keys</p> <p>The table below shows a sample search query for a resource that satisfies the following conditions:</p> <ul> <li> <p>Has an Attribute where the key is equal to \u201cfrom\u201d.</p> </li> <li> <p>Has an Attribute where the key is equal to \u201cto\u201d.</p> </li> </ul> <p>Note</p> <p>Building the configuration management search query for this scenario will create the following search query: <code>attributeKey eq 'from' and attributeKey eq 'to'.</code></p> <p>However,\u00a0the Search API does not allow multiple search conditions joined by the 'and' complex operator for the same Resource search parameter. Therefore, this requirement cannot be achieved using a single search and has to be done in two steps. See the instructions given below for sample search queries.</p> <ol> <li> <p>Retrieve all the resources with an attribute where the key is equal     to \"from\".</p> <p> <p>{search-query}</p> <p>Response JSON</p> <p>attributeKey eq</p> <p>'from''</p> Click to see the sample response. <p> <pre><code>{\n    \"resources\": [\n        {\n            \"resourceId\": \"29bd5f2d-54b4-4169-8cac-aa2e9cf5c1ba\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_2\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:59\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"aea8665f-d6d7-4ec3-9449-b6423ed9fddf\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"c9b8913f-3ae4-43f5-9552-a8676fd19646\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_1\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:48\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"abc.com\",\n                    \"attributeId\": \"28092ab2-594f-421f-8c7e-9e8d4fbe1a5c\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"7982a6e0-512a-4ebe-8c14-16f1819967c9\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_3\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:26:47\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"from\",\n                    \"value\": \"xyz.com\",\n                    \"attributeId\": \"589f8423-bf57-4906-bf34-2d821358ed13\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        }\n    ]\n}\n</code></pre> </p> </p> </li> <li> <p>Search within the results received above for resources with an     attribute where the key is equal to \"to\". This will retrieve search     results that satisfies both conditions (i.e. resources with an     attribute where the key is equal to \"from\" and an attribute where     the key is equal to \"to\").</p> <p> <p>{search-query}</p> <p>Response JSON</p> <p>attributeKey eq 'to' and (resourceId eq '29bd5f2d-54b4-4169-8cac-aa2e9cf5c1ba' or resourceId eq 'c9b8913f-3ae4-43f5-9552-a8676fd19646' or resourceId eq '7982a6e0-512a-4ebe-8c14-16f1819967c9')</p> <p> </p> Click to see the sample response. <p> <pre><code>                {\n    \"resources\": [\n        {\n            \"resourceId\": \"29bd5f2d-54b4-4169-8cac-aa2e9cf5c1ba\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_2\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:59\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"to\",\n                    \"value\": \"wso2.com\",\n                    \"attributeId\": \"22f4f25a-3f79-4db3-b805-e53946110fa8\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"c9b8913f-3ae4-43f5-9552-a8676fd19646\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_1\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:16:48\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"to\",\n                    \"value\": \"123.com\",\n                    \"attributeId\": \"3633269a-cab9-4e14-a264-dddb1a6001ed\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        },\n        {\n            \"resourceId\": \"7982a6e0-512a-4ebe-8c14-16f1819967c9\",\n            \"tenantDomain\": \"carbon.super\",\n            \"resourceName\": \"resource_3\",\n            \"resourceType\": \"e-mail\",\n            \"lastModified\": \"2019-01-14 03:26:47\",\n            \"files\": [],\n            \"attributes\": [\n                {\n                    \"key\": \"to\",\n                    \"value\": \"wso2.com\",\n                    \"attributeId\": \"ffe5acee-d59f-4918-9bfb-85c282490691\"\n                }\n            ],\n            \"hasFile\": false,\n            \"hasAttribute\": false\n        }\n    ]\n}\n</code></pre> </p> </p> </li> </ol>"},{"location":"apis/scim-1.1-apis/","title":"SCIM 1.1 APIs","text":"<p>Warning</p> <p>WSO2 recommends using SCIM 2.0 APIs because of the following reasons:</p> <ul> <li>SCIM 2.0 APIs provide additional methods that are not available with     SCIM 1.1 APIs (e.g., additional search filters for filtering users).</li> <li>The SCIM 2.0 schema supports more fine-grained requirements.  </li> <li>There is more focus on feature development for SCIM 2.0 APIs.</li> </ul> <p>The SCIM API is used in to perform various tasks in the WSO2 Identity Server. For simplicity, cURL commands are used in this example to send CRUD requests to the REST endpoints of Identity Server.</p> <p>To execute these commands, you need to Download the WSO2 Identity Server, unzip it and run it.</p> <ul> <li> <p>Navigate to the SCIM User Endpoint at the following URL:     https://localhost:9443/wso2/scim/Users .</p> <p>You can use the following SCIM User Endpoint to specifically return data of the currently logged-in user: <code>https://localhost:9443/wso2/scim/Users/me</code> (You can use this endpoint for commands that refer to a single user, such as GetUser, UpdateUser etc.)</p> </li> <li> <p>Navigate to the SCIM Group Endpoint at the following URL:     <code>https://localhost:9443/wso2/scim/Groups</code></p> </li> </ul> <p>These endpoints are exposed over HTTPS since sensitive information is exchanged and also protected with Basic Auth Authentication.</p> <p>Warning</p> <p>The following requests use Basic Auth authentication to demonstrate sending requests to the REST endpoints of WSO2 Identity Server as a quick start. In a production environment, we recommend that you use OAuth Authentication instead. For instructions, see Setting Up Service Provider for Inbound Provisioning.</p> <ul> <li> <p>Create User : The following command can be used to create a     user. In this request, authentication is done using Basic Auth and the payload is sent in JSON format adhering to the SCIM 1.1 specification. You receive a response with 201 CREATED status and the payload response as follows:</p> <p>```curl tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD} --data '{\"schemas\":[],\"name\":{\"familyName\":\"{FAMILY_NAME}\",\"givenName\":\"{FIRST_NAME}\"},\"userName\":\"{USERNAME}\",\"password\":\"{PASSWORD}\",\"emails\":[{\"primary\":true,\"value\":\"{HOME_EMAIL}\",\"type\":\"home\"},{\"value\":\"{WORK_EMAIL}\",\"type\":\"work\"}]}' --header \"Content-Type:application/json\" https://{IS_IP}:{IS_PORT}/wso2/scim/Users <pre><code>```curl tab=\"Sample Request\"\ncurl -v -k --user admin:admin --data '{\"schemas\":[],\"name\":{\"familyName\":\"gunasinghe\",\"givenName\":\"hasinitg\"},\"userName\":\"hasinitg\",\"password\":\"hasinitg\",\"emails\":[{\"primary\":true,\"value\":\"hasini_home.com\",\"type\":\"home\"},{\"value\":\"hasini_work.com\",\"type\":\"work\"}]}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users\n</code></pre></p> <p><code>json tab=\"Response\" {\"id\":\"0032fd29-55a9-4fb9-be82-b1c97c073f02\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"name\":{\"familyName\":\"gunasinghe\",\"givenName\":\"hasinitg\"},\"userName\":\"hasinitg\",\"emails\":[{\"value\":\"hasini_home.com\",\"type\":\"home\"},{\"value\":\"hasini_work.com\",\"type\":\"work\"}],\"meta\":{\"lastModified\":\"2016-01-26T16:46:53\",\"location\":\"https://localhost:9443/wso2/scim/Users/0032fd29-55a9-4fb9-be82-b1c97c073f02\",\"created\":\"2016-01-26T16:46:53\"}}</code></p> <p>Some additional attributes such as, <code>unique_id</code>, <code>created</code>, <code>lastModified</code> and <code>location</code> are READ ONLY attributes and are set by the service provider.</p> <p>Do the following to test this.</p> <ul> <li>Log in to the WSO2 Identity Server management     console using     admin credentials (admin/admin).</li> <li>Click List under the Users and Roles section on the     Main tab and then select Users. You will see that     the user created above is listed.</li> <li>Click on User Profile to view the user profile of the user     you created. You will see that only the user's first and last     names have been set properly but the other fields remain empty.     This is because the Carbon platform uses a different set of     attributes in LDAP than the SCIM specific dialect. However,     those attributes are stored in the underlying user store. You     can verify this using a GET request on the particular user.</li> </ul> </li> </ul> <ul> <li> <p>GET User : You can retrieve a particular user resource using its     unique id (You can get this id in the response to the     <code>create user</code> request):</p> <p>```curl tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD} https://{IS_IP}:{IS_PORT}/wso2/scim/Users/{SCIM_USER_ID} <pre><code>``` curl tab=\"Sample Request\"\ncurl -v -k --user admin:admin https://localhost:9443/wso2/scim/Users/0032fd29-55a9-4fb9-be82-b1c97c073f02\n</code></pre></p> <p>The response consists of all attributes that were sent.</p> <p>Alternatively, you can log in as a user and use the <code>Users/me</code> SCIM endpoint to retrieve data of the currently logged-in user:</p> <pre><code>curl -v -k --user hasinitg:hasinitg https://localhost:9443/wso2/scim/Users/me\n</code></pre> <p>For this command, the user credentials of the user created above (hasinitg) is used as an example. Also note that to run this command, the user must have a role that includes admin privileges.</p> </li> </ul> <ul> <li> <p>List Users : Now create some users through the WSO2 Identity     Server management console and fill in their profile details. The     following code snippets show the response received after a new user     called \"pulasthim\" was created and the user profile was updated. The following is the response you would receive.</p> <p>```curl tab=\"Sample Request\" curl -v -k --user admin:admin https://localhost:9443/wso2/scim/Users <pre><code>```json tab=\"Response\"\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"totalResults\":2,\"Resources\":[{\"id\":\"0032fd29-55a9-4fb9-be82-b1c97c073f02\",\"userName\":\"hasinitg\",\"meta\":{\"lastModified\":\"2016-01-26T16:46:53\",\"created\":\"2016-01-26T16:46:53\",\"location\":\"https://localhost:9443/wso2/scim/Users/0032fd29-55a9-4fb9-be82-b1c97c073f02\"}},{\"id\":\"b228b59d-db19-4064-b637-d33c31209fae\",\"userName\":\"pulasthim\",\"meta\":{\"lastModified\":\"2016-01-26T17:00:33\",\"created\":\"2016-01-26T17:00:33\",\"location\":\"https://localhost:9443/wso2/scim/Users/b228b59d-db19-4064-b637-d33c31209fae\"}}]}\n</code></pre></p> <p>You can see the representation of the three users with attributes in JSON format adhering to SCIM Schema.</p> </li> </ul> <ul> <li> <p>Update User : Update the work and home email fields of the user     \"hasinitg\" through the following cURL command:</p> <p>Note</p> <p>You have to use the correct SCIM ID by taking it either from the \"create user\" response or from the \"list user\" response.</p> <p>```curl tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD}  -X PUT -d '{\"schemas\":[],\"name\":{\"familyName\":\"{LAST_NAME}\",\"givenName\":\"{FIRST_NAME\"},\"userName\":\"{USERNAME\",\"emails\": \"{EMAIL\"}' --header \"Content-Type:application/json\" https://{IS_IP}:{IS_PORT}/wso2/scim/Users/{SCIM_USER_ID} <pre><code>```curl tab=\"Sample Request\"\ncurl -v -k --user admin:admin -X PUT -d '{\"schemas\":[],\"name\":{\"familyName\":\"gunasinghe\",\"givenName\":\"hasinitg\"},\"userName\":\"hasinitg\",\"emails\":[{\"value\":\"hasini@wso2.com\",\"type\":\"work\"},{\"value\":\"hasi7786@gmail.com\",\"type\":\"home\"}]}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users/0032fd29-55a9-4fb9-be82-b1c97c073f02\n</code></pre></p> <p>You receive a 200 OK response and a payload containing the updated user representation.</p> <p>Alternatively, you can use the <code>Users/me</code> SCIM endpoint to update the user profile of the currently logged-in user:</p> <pre><code>curl -v -k --user hasinitg:hasinitg -X PUT -d '{\"schemas\":[],\"name\":{\"familyName\":\"gunasinghe\",\"givenName\":\"hasinitg\"},\"userName\":\"hasinitg\",\"emails\":[{\"value\":\"hasini@wso2.com\",\"type\":\"work\"},{\"value\":\"hasi7786@gmail.com\",\"type\":\"home\"}]}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users/me\n</code></pre> <p>For this command, the user credentials of the user created above (hasinitg)was used as an example.</p> <p>Updating a resource using PATCH request</p> <p>You can also update a resource using a PATCH request. Unlike the PUT request (which completely replaces or overwrites the attributes), the PATCH modifies only the existing resource. The sample cURL command for a PATCH request is given below:</p> <p>```curl tab=\"Sample Request\" curl -v -k --user admin:admin -X PATCH -d '{\"schemas\": [\"urn:scim:schemas:core:1.0\"],\"name\": {\"familyName\": \"Tester\"},\"userName\": \"hasinitg\",\"meta\": {\"attributes\": []}}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users/15722a71-3bd1-4864-8460-1e63a2dace65 <pre><code>```json tab=\"Sample Response\"\n200 OK\n{\"emails\":[\n{\"type\":\"home\",\"value\":\"hasini_home.com\"},\n{\"type\":\"work\",\"value\":\"hasini_work.com\"}],\"meta\":\n{\"created\":\"2017-08-16T10:07:36\",\"location\":\"https://localhost:9443/wso2/scim/Users/15722a71-3bd1-4864-8460-1e63a2dace65\",\"lastModified\":\"2017-08-16T12:17:11\"},\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"name\":\n{\"familyName\":\"Tester\",\"givenName\":\"hasinitg\"},\"id\":\"15722a71-3bd1-4864-8460-1e63a2dace65\",\"userName\":\"hasinitg\"}\n</code></pre></p> </li> <li> <p>Delete User : Delete the user with username 'pulasthim' that was     created through the WSO2 Identity Server management console.</p> <p>```curl tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD} -X DELETE https://{IS_IP}:{IS_PORT}/wso2/scim/Users/{SCIM_USER_ID} -H \"Accept: application/json\" <pre><code>```curl tab=\"Sample Request\"\ncurl -v -k --user admin:admin -X DELETE https://localhost:9443/wso2/scim/Users/b228b59d-db19-4064-b637-d33c31209fae -H \"Accept: application/json\"\n</code></pre></p> <p>You receive a response with status 200 OK and the user will be deleted from the user store. Similarly, you can manage groups by performing CRUD operations on the Group resource endpoint.</p> </li> <li> <p>Filter User : Since CRUD operations have to be performed using     SCIM ID which is unique to the service provider, the user REST     endpoint also supports the filter operation. You can filter users     based on their username, which is considered the unique user     attribute in Carbon servers. You can use the following cURL command.     WSO2 Identity Server currently supports only equal operation in     filtering.</p> <p>```curl tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD} https://{IS_IP}:{IS_PORT}/wso2/scim/Users?filter={VALUE_TO_BE_CHECKED}+Eq+%22{VALUE_TO_BE_EQUAL}%22 <pre><code>```curl tab=\"Sample Request\"\ncurl -v -k --user admin:admin https://localhost:9443/wso2/scim/Users?filter=userName+Eq+%22hasinitg%22\n</code></pre></p> <p><code>json tab=\"Response\" {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"totalResults\":1,\"Resources\":[{\"id\":\"0032fd29-55a9-4fb9-be82-b1c97c073f02\",\"userName\":\"hasinitg\",\"meta\":{\"lastModified\":\"2016-01-26T18:26:04\",\"created\":\"2016-01-26T16:46:53\",\"location\":\"https://localhost:9443/wso2/scim/Users/0032fd29-55a9-4fb9-be82-b1c97c073f02\"}}]}</code></p> </li> <li> <p>Create Group : You can create groups either with or without     members. The following command creates a group with a user.</p> <p>Note</p> <p>When creating a group with users, you need to have that user already existing in the user store and provide its unique id. Create a new group named: 'engineer' with the user 'hasinitg' as a member. The attributes you have to include in the cURL command are the userID, username:password.</p> <p>You receive a response with the payload as indicated below and a response status 201 CREATED:</p> <p>```curl tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD} --data '{\"displayName\": {GROUP_NAME},\"members\": {MEMBERS_OF_THE_GROUP}}' --header \"Content-Type:application/json\" https://{IS_IP}:{IS_PORT}/wso2/scim/Groups <pre><code>```curl tab=\"Sample Request\"\ncurl -v -k --user admin:admin --data '{\"displayName\": \"engineer\",\"members\": [{\"value\":\"316214c0-dd7e-4dc3-bed8-e91227d32597\",\"display\": \"hasinitg\"}]}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Groups\n</code></pre></p> <p><code>json tab=\"Sample Response\" {\"id\":\"b4f9bccf-4f79-4288-be21-78e0d4500714\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"displayName\":\"PRIMARY/engineer\",\"members\":[{\"value\":\"0032fd29-55a9-4fb9-be82-b1c97c073f02\",\"display\":\"hasinitg\"}],\"meta\":{\"lastModified\":\"2016-01-26T18:31:57\",\"created\":\"2016-01-26T18:31:57\",\"location\":\"https://localhost:9443/wso2/scim/Groups/b4f9bccf-4f79-4288-be21-78e0d4500714\"}}</code></p> <p>You can observe in the management console of IS, that the new group is listed under roles and user 'adam' is listed under users of that group.</p> </li> <li> <p>List Groups: Now create another role through the Identity Server     Management Console and list all the groups. Create a group named:     'manager' without any users added to it. The following command lists     the groups. When you list the groups, you can see both groups are listed.</p> <p>```java tab=\"Sample Request\" curl -v -k --user admin:admin https://localhost:9443/wso2/scim/Groups <pre><code>```java tab=\"Response\"\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"totalResults\":2,\"Resources\":[{\"id\":\"b4f9bccf-4f79-4288-be21-78e0d4500714\",\"displayName\":\"PRIMARY/engineer\",\"meta\":{\"lastModified\":\"2016-01-26T18:31:57\",\"created\":\"2016-01-26T18:31:57\",\"location\":\"https://localhost:9443/wso2/scim/Groups/b4f9bccf-4f79-4288-be21-78e0d4500714\"}},{\"id\":\"484cdc26-9136-427b-ad9e-96ea3082e1f5\",\"displayName\":\"PRIMARY/manager\",\"meta\":{\"lastModified\":\"2016-01-26T18:33:33\",\"created\":\"2016-01-26T18:33:33\",\"location\":\"https://localhost:9443/wso2/scim/Groups/484cdc26-9136-427b-ad9e-96ea3082e1f5\"}}]}\n</code></pre></p> </li> <li> <p>Update Group : Rename the group \"manager\" to \"executive\":</p> <p>```java tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD} -X PATCH -d '{\"displayName\": {GROUP_NAME}}' --header \"Content-Type:application/json\" https://{IS_IP}:{IS_PORT}/wso2/scim/Groups/{SCIM_GROUP_ID} <pre><code>```java tab=\"Sample Request\"\ncurl -v -k --user admin:admin -X PATCH -d '{\"displayName\": \"executive\"}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Groups/484cdc26-9136-427b-ad9e-96ea3082e1f5\n</code></pre></p> <p>You receive a response with <code>200 OK</code> status and full JSON representation of the updated group.</p> </li> <li> <p>Delete Group : You can delete the group using the unique SCIM Id     of the group. The following command deletes the group: 'executive'.</p> <p>```java tab=\"Request\" curl -v -k --user {IS_USERNAME}:{IS_PASSWORD} -X DELETE https://{IS_IP}:{IS_PORT}/wso2/scim/Groups/{SCIM_GROUP_ID} -H \"Accept: application/json\" <pre><code>```java tab=\"Sample Request\"\ncurl -v -k --user admin:admin -X DELETE https://localhost:9443/wso2/scim/Groups/484cdc26-9136-427b-ad9e-96ea3082e1f5 -H \"Accept: application/json\"\n</code></pre></p> </li> <li> <p>Filter Group : You can filter groups with the group display name     using one of the following commands. These commands filter the group     with display name: 'engineer'. You can use one of the two curl commands given below to test this. </p> <p>```java tab=\"Sample Request\" curl -v -k --user admin:admin https://localhost:9443/wso2/scim/Groups?filter=displayName+Eq+%22engineer%22 <pre><code>```java tab=\"Sample Request\"\ncurl -v -k --user admin:admin https://localhost:9443/wso2/scim/Groups?filter=displayNameEqengineer\n</code></pre></p> <p><code>java tab=\"Reponse\" {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"totalResults\":1,\"Resources\":[{\"id\":\"b4f9bccf-4f79-4288-be21-78e0d4500714\",\"displayName\":\"PRIMARY/engineer\",\"meta\":{\"lastModified\":\"2016-01-26T18:31:57\",\"created\":\"2016-01-26T18:31:57\",\"location\":\"https://localhost:9443/wso2/scim/Groups/b4f9bccf-4f79-4288-be21-78e0d4500714\"}}]}</code></p> <p>Now, you can use the above commands or similar in a sample scenario.</p> </li> </ul> <p>You can also filter group names using wild card character \"*\". WSO2 IS now supports filters like: <code>https://localhost:9443/wso2/scim/Groups?filter=displayName                    Eq *a*</code></p>"},{"location":"apis/scim-1.1-apis/#using-the-scim-api","title":"Using the SCIM API","text":"<p>This sample scenario is to add users and groups to a super tenant and a normal tenant so that the users are unique to their domains.</p> <p>For the super tenant:</p> <ul> <li> <p>Create group AMRSNGHE/ngioletGR - This will create a group     in a given user store domain.</p> <p>```java tab=\"Request\" curl -k --user {IS_USERNAME}:{IS_PASSWORD} --data '{\"displayName\": \"{USER_STORE_DOMAIN}/{GROUP_NAME}\"}' --header \"Content-Type:application/json\" https://{IS_IP}:{IS_PORT}/wso2/scim/Groups <pre><code>```java tab=\"Request Sample\"\ncurl -k --user admin:admin --data '{\"displayName\": \"AMRSNGHE/ngioletGR\"}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Groups\n</code></pre></p> <p><code>java tab=\"Response\" {\"id\":\"8ee9253e-4fe1-4863-9641-80d807611707\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"displayName\":\"AMRSNGHE/ngioletGR\",\"meta\":{\"lastModified\":\"2015-04-30T10:18:33\",\"created\":\"2015-04-30T10:18:33\",\"location\":\"https://localhost:9443/wso2/scim/Groups/8ee9253e-4fe1-4863-9641-80d807611707\"}}</code></p> </li> <li> <p>Create user AMRSNGHE/groupUSR001 - This will create a user in a given user store domain.</p> <p>```java tab=\"Request\" curl -k --user {IS_USERNAME}:{IS_PASSWORD} --data '{\"schemas\":[],\"name\":{\"familyName\": \"{LAST_NAME}\",\"givenName\":\"{FIRST_NAME\"},\"userName\":\"{USER_STORE_DOMAIN}/{USERNAME}\",\"password\":\"{PASSWORD\"}' --header \"Content-Type:application/json\" https://{IS_IP}:{IS_PORT}/wso2/scim/Users <pre><code>```java tab=\"Sample Request\"\ncurl -k --user admin:admin --data '{\"schemas\":[],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR001\",\"password\":\"testPwd123\"}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users\n</code></pre></p> <p><code>java tab=\"Response\" {\"id\":\"bbda8f2f-fea7-4a9c-9128-f1e0c3aad475\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR001\",\"meta\":{\"lastModified\":\"2015-04-30T10:19:05\",\"location\":\"https://localhost:9443/wso2/scim/Users/bbda8f2f-fea7-4a9c-9128-f1e0c3aad475\",\"created\":\"2015-04-30T10:19:05\"}}</code></p> </li> <li> <p>Create user AMRSNGHE/groupUSR002</p> <p>```java tab=\"Request\" curl -k --user admin:admin --data '{\"schemas\":[],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR002\",\"password\":\"testPwd123\"}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users <pre><code>``` java tab=\"Response\"\n{\"id\":\"e04e20ca-6321-4c75-88b9-cfa5a600e356\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR002\",\"meta\":{\"lastModified\":\"2015-04-30T10:19:14\",\"location\":\"https://localhost:9443/wso2/scim/Users/e04e20ca-6321-4c75-88b9-cfa5a600e356\",\"created\":\"2015-04-30T10:19:14\"}}\n</code></pre></p> </li> <li> <p>Add user AMRSNGHE/groupUSR001 to group AMRSNGHE/ngioletGR -     This will add the user to the group.</p> <p><code>java tab=\"Request\" curl -k --user {IS_USERNAME}:{IS_PASSWORD} -X PATCH -d '{\"displayName\": \"AMRSNGHE/ngioletGR\",\"members\": [{\"value\":\"{id returned in the response when creating the AMRSNGHE/groupUSR001}\",\"display\": \"AMRSNGHE/groupUSR001\"}]}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Groups/{id returned in the response when creating the group AMRSNGHE/ngioletGR}</code></p> </li> <li> <p>Add user AMRSNGHE/groupUSR002 to group AMRSNGHE/ngioletGR</p> <p><code>java tab=\"Request\" curl -k --user {IS_USERNAME}:{IS_PASSWORD} -X PATCH -d \"{\"displayName\": \"AMRSNGHE/ngioletGR\",\"members\": [{\"value\":\"{id returned in the response when creating the AMRSNGHE/groupUSR002}\",\"display\": \"AMRSNGHE/groupUSR002\"}]}\" --header \"Content-Type:application/json\" https://{IS_IP}:{IS_PORT}/wso2/scim/Groups/{id returned in the response when creating the group AMRSNGHE/ngioletGR}</code></p> </li> <li> <p>List the group members - This will list all the members in     the group.</p> <p><code>java tab=\"Request\" curl -k --user {IS_USERNAME}:{IS_PASSWORD}  https://{IS_IP}:{IS_PORT}/wso2/scim/Groups/{id returned in the response when creating the group AMRSNGHE/ngioletGR}</code></p> </li> </ul> <p>For a tenant amrsnghe.org:</p> <ul> <li> <p>Create group AMRSNGHE/ngioletGR</p> <p>``` java tab=\"Sample Request\" curl -k --user gayashan@amrsnghe.org:adming --data '{\"displayName\": \"AMRSNGHE/ngioletGR\"}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Groups <pre><code>``` java tab=\"Response\"\n{\"id\":\"8ee9253e-4fe1-4863-9641-80d807611707\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"displayName\":\"AMRSNGHE/ngioletGR\",\"meta\":{\"lastModified\":\"2015-04-30T10:18:33\",\"created\":\"2015-04-30T10:18:33\",\"location\":\"https://localhost:9443/wso2/scim/Groups/8ee9253e-4fe1-4863-9641-80d807611707\"}}\n</code></pre></p> </li> <li> <p>Create user AMRSNGHE/groupUSR001</p> <p>``` java tab=\"Sample Request\" curl -k --user gayashan@amrsnghe.org:adming --data '{\"schemas\":[],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR001\",\"password\":\"testPwd123\"}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users <pre><code>``` java tab=\"Response\"\n{\"id\":\"bbda8f2f-fea7-4a9c-9128-f1e0c3aad475\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR001\",\"meta\":{\"lastModified\":\"2015-04-30T10:19:05\",\"location\":\"https://localhost:9443/wso2/scim/Users/bbda8f2f-fea7-4a9c-9128-f1e0c3aad475\",\"created\":\"2015-04-30T10:19:05\"}}\n</code></pre></p> </li> <li> <p>Create user AMRSNGHE/groupUSR002</p> <p>``` java tab=\"Request\" curl -k --user gayashan@amrsnghe.org:adming --data '{\"schemas\":[],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR002\",\"password\":\"testPwd123\"}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Users <pre><code>``` java tab=\"Response\"\n{\"id\":\"e04e20ca-6321-4c75-88b9-cfa5a600e356\",\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"name\":{\"familyName\":\"John\",\"givenName\":\"Doe\"},\"userName\":\"AMRSNGHE/groupUSR002\",\"meta\":{\"lastModified\":\"2015-04-30T10:19:14\",\"location\":\"https://localhost:9443/wso2/scim/Users/e04e20ca-6321-4c75-88b9-cfa5a600e356\",\"created\":\"2015-04-30T10:19:14\"}}\n</code></pre></p> </li> <li> <p>Add user AMRSNGHE/groupUSR001 to group AMRSNGHE/ngioletGR</p> <pre><code>curl -k --user gayashan@amrsnghe.org:adming -X PATCH -d '{\"displayName\": \"AMRSNGHE/ngioletGR\",\"members\": [{\"value\":\"&lt;id returned in the response when creating the AMRSNGHE/groupUSR001&gt;\",\"display\": \"AMRSNGHE/groupUSR001\"}]}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Groups/&lt;id returned in the response when creating the group AMRSNGHE/ngioletGR&gt;\n</code></pre> </li> <li> <p>Add user AMRSNGHE/groupUSR002 to group AMRSNGHE/ngioletGR</p> <pre><code>curl -k --user gayashan@amrsnghe.org:adming -X PATCH -d '{\"displayName\": \"AMRSNGHE/ngioletGR\",\"members\": [{\"value\":\"&lt;id returned in the response when creating the AMRSNGHE/groupUSR002&gt;\",\"display\": \"AMRSNGHE/groupUSR002\"}]}' --header \"Content-Type:application/json\" https://localhost:9443/wso2/scim/Groups/&lt;id returned in the response when creating the group AMRSNGHE/ngioletGR&gt;\n</code></pre> </li> <li> <p>List the group members</p> <pre><code>curl -k --user gayashan@amrsnghe.org:adminghttps://localhost:9443/wso2/scim/Groups/&lt;id returned in the response when creating the group AMRSNGHE/ngioletGR&gt;\n</code></pre> </li> </ul>"},{"location":"apis/scim-1.1-apis/#scim-bulk-operations","title":"SCIM bulk operations","text":"<p>The WSO2 Identity Server exposes SCIM endpoint /Bulk to do bulk operations using SCIM.</p> <ul> <li> <p>Create Users: This creates a bulk of users at the same time.</p> <p>```java tab=\"Sample Request\" curl -v -k --user admin:admin -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d \"{\\\"failOnErrors\\\":2,\\\"schemas\\\":[\\\"urn:scim:schemas:core:1.0\\\"],\\\"Operations\\\":[{\\\"data\\\":{\\\"schemas\\\":[\\\"urn:scim:schemas:core:1.0\\\"],\\\"path\\\":\\\"/Users\\\",\\\"userName\\\":\\\"hasini\\\",\\\"method\\\":\\\"POST\\\",\\\"emails\\\":[{\\\"value\\\":\\\"hasini@gmail.com\\\"},{\\\"value\\\":\\\"hasinig@yahoo.com\\\"}],\\\"phoneNumbers\\\":[{\\\"value\\\":\\\"0772508354\\\"}],\\\"displayName\\\":\\\"Hasini\\\",\\\"externalId\\\":\\\"hasini@wso2.com\\\",\\\"password\\\":\\\"dummyPW1\\\",\\\"preferredLanguage\\\":\\\"Sinhala\\\",\\\"bulkId\\\":\\\"bulkIDUser1\\\"},\\\"path\\\":\\\"/Users\\\",\\\"method\\\":\\\"POST\\\",\\\"bulkId\\\":\\\"bulkIDUser1\\\"},{\\\"data\\\":{\\\"schemas\\\":[\\\"urn:scim:schemas:core:1.0\\\"],\\\"path\\\":\\\"/Users\\\",\\\"userName\\\":\\\"dinuka\\\",\\\"method\\\":\\\"POST\\\",\\\"emails\\\":[{\\\"value\\\":\\\"dinuka.malalanayake@gmail.com\\\"},{\\\"value\\\":\\\"dinuka_malalanayake@yahoo.com\\\"}],\\\"phoneNumbers\\\":[{\\\"value\\\":\\\"0772508354\\\"}],\\\"displayName\\\":\\\"Dinuka\\\",\\\"externalId\\\":\\\"dinukam@wso2.com\\\",\\\"password\\\":\\\"myPassword\\\",\\\"preferredLanguage\\\":\\\"Sinhala\\\",\\\"bulkId\\\":\\\"bulkIDUser2\\\"},\\\"path\\\":\\\"/Users\\\",\\\"method\\\":\\\"POST\\\",\\\"bulkId\\\":\\\"bulkIDUser2\\\"}]}\" https://localhost:9443/wso2/scim/Bulk <pre><code>```java tab=\"Sample Response\"\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"Operations\":[{\"status\":{\"code\":\"201\"},\"location\":\"https://localhost:9443/wso2/scim/Users/bcbc6fed-6519-4eeb-a1ff-9b643fdab1b5\",\"method\":\"POST\",\"bulkId\":\"bulkIDUser1\"},{\"status\":{\"code\":\"201\"},\"location\":\"https://localhost:9443/wso2/scim/Users/ce6cf606-c4de-4260-bfdf-a751161eeae0\",\"method\":\"POST\",\"bulkId\":\"bulkIDUser2\"}]}\n</code></pre></p> </li> <li> <p>Create Groups : This creates a bulk of groups at the same time.  </p> <p>```java tab=\"Sample Request\" curl -v -k --user admin:admin -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d \"{\\\"failOnErrors\\\":2,\\\"schemas\\\":[\\\"urn:scim:schemas:core:1.0\\\"],\\\"Operations\\\":[{\\\"data\\\":{\\\"schemas\\\":[\\\"urn:scim:schemas:core:1.0\\\"],\\\"path\\\":\\\"/Groups\\\",\\\"method\\\":\\\"POST\\\",\\\"displayName\\\":\\\"engineer\\\",\\\"externalId\\\":\\\"engineer\\\",\\\"members\\\":[{\\\"value\\\":\\\"b1b03cf2-470f-4a73-b517-ae4faed8e61b\\\"},{\\\"value\\\":\\\"8e2c7178-e5bf-4013-b526-1193e0611d9a\\\"}],\\\"bulkId\\\":\\\"bulkGroup1\\\"},\\\"path\\\":\\\"/Groups\\\",\\\"method\\\":\\\"POST\\\",\\\"bulkId\\\":\\\"bulkGroup1\\\"},{\\\"data\\\":{\\\"schemas\\\":[\\\"urn:scim:schemas:core:1.0\\\"],\\\"path\\\":\\\"/Groups\\\",\\\"method\\\":\\\"POST\\\",\\\"displayName\\\":\\\"doctor\\\",\\\"externalId\\\":\\\"doctor\\\",\\\"members\\\":[{\\\"value\\\":\\\"8e2c7178-e5bf-4013-b526-1193e0611d9a\\\"},{\\\"value\\\":\\\"b1b03cf2-470f-4a73-b517-ae4faed8e61b\\\"}],\\\"bulkId\\\":\\\"bulkGroup2\\\"},\\\"path\\\":\\\"/Groups\\\",\\\"method\\\":\\\"POST\\\",\\\"bulkId\\\":\\\"bulkGroup2\\\"}]}\" https://localhost:9443/wso2/scim/Bulk <pre><code>```java tab=\"Response\"\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"Operations\":[{\"status\":{\"code\":\"201\"},\"location\":\"https://localhost:9443/wso2/scim/Groups/6f008b6c-e990-4f67-9048-0fbcb3b52d5c\",\"method\":\"POST\",\"bulkId\":\"bulkGroup1\"},{\"status\":{\"code\":\"201\"},\"location\":\"https://localhost:9443/wso2/scim/Groups/1b7c44a8-26b8-4e81-9961-26d90fe68ac5\",\"method\":\"POST\",\"bulkId\":\"bulkGroup2\"}]}\n</code></pre></p> </li> </ul>"},{"location":"apis/scim2-batch-operations/","title":"SCIM2 Bulk Operations","text":"<p>Follow the topics given below to understand how Bulk operations can be used when you manage resources in the SCIM2 API.</p> <p>The SCIM2 API allows you to send multiple resource operations in a single request. That is, you can add new records (POST data), replace an existing record (PUT data), update elements of an existing record (PATCH data), and delete records (DELETE data) in bulk. These bulk operations are supported for managing users and groups with the SCIM API in WSO2 Identity Server.</p>"},{"location":"apis/scim2-batch-operations/#manage-users-in-bulk","title":"Manage users in bulk","text":"<p>You can use the bulk operations to add, remove, update, and replace users in bulk.</p> <p>Info</p> <p>The examples given below show individual resource operations (POST, PATCH, PUT, or DELETE) handled in a single request. However, note that a single request can execute a combination of operation types simultaneously.</p>"},{"location":"apis/scim2-batch-operations/#add-users","title":"Add users","text":"<p>Given below is an example request payload to manage users in bulk. This request includes an array of operations that adds multiple new users.</p> <pre><code>{\n\"failOnErrors\":1,\n\"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n\"Operations\": [\n{\n\"method\": \"POST\",\n\"path\": \"/Users\",\n\"bulkId\": \"qwerty\",\n\"data\": {\n\"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n\"userName\": \"Kim\",\n\"password\":\"kim123\",\n\"name\": {\n\"givenName\": \"Kim\",\n\"familyName\": \"Berry\"\n}\n}\n},\n{\n\"method\": \"POST\",\n\"path\": \"/Users\",\n\"bulkId\": \"ytrewq\",\n\"data\": {\n\"schemas\": [\n\"urn:ietf:params:scim:schemas:core:2.0:User\",\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n],\n\"name\": {\n\"givenName\": \"Smith\",\n\"familyName\": \"Berry\"\n},\n\"userName\": \"smith\",\n\"password\": \"smith123\",\n\"emails\": [\n{\n\"type\": \"home\",\n\"value\": \"smith@gmail.com\",\n\"primary\": true\n},\n{\n\"type\": \"work\",\n\"value\": \"smith@wso2.com\"\n}\n],\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n\"employeeNumber\": \"1234A\",\n\"manager\": {\n\"value\": \"Taylor\"\n}\n}\n}\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of operations. To add multiple new users, add an array of POST operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible value:<code>POST</code>.         <code>path</code> Required             Add this path to specify that a new user is being added. Possible value:<code>/Users</code>.         <code>bulkid</code> Required             A unique identifier for the bulk operation. The bulkid is required for POST operations. Possible value: An integer value.         <code>data</code> Required             Specify the details of the new user that should be added. The parameters that can be used for this \u201cdata\u201d object are explained below.         </p> </li> <li> <p>Data parameters</p> <p> Parameter Required/Optional Description <code>schemas</code> Required             Specify the list of SCIM2 user schemas to which the new user should be linked. Possible values: <ul> <li><code>urn:ietf:params:scim:schemas:core:2.0:User</code></li> <li><code>urn:ietf:params:scim:schemas:enterprise:2.0:User</code></li> <li><code>urn:scim:wso2:schema</code></li> </ul> <code>{attribute_name}</code> Required             The name of the attribute that will be updated. Possible values: User attributes as per the SCIM protocol.         </p> </li> </ul>"},{"location":"apis/scim2-batch-operations/#update-users","title":"Update users","text":"<p>Given below is an example request payload to update users in bulk. This request includes an array of operations that updates multiple details of multiple users.</p> <pre><code>{\n\"failOnErrors\":1,\n\"schemas\":[\n\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\n],\n\"Operations\":[\n{\n\"method\":\"PATCH\",\n\"path\":\"/Users/e67906fb-308f-4b15-89bd-0ab6e3d996e5\",\n\"data\":{\n\"Operations\":[\n{\n\"op\":\"replace\",\n\"path\":\"name\",\n\"value\":{\n\"givenName\":\"john\",\n\"familyName\":\"Anderson\"\n}\n},\n{\n\"op\":\"add\",\n\"path\":\"nickName\",\n\"value\":\"shaggy\"\n}\n]\n}\n},\n{\n\"method\":\"PATCH\",\n\"path\":\"/Users/b1781d25-bde5-460a-a58a-8fe8dbfd8487\",\n\"data\":{\n\"Operations\":[\n{\n\"op\":\"remove\",\n\"path\":\"emails[type eq home]\"\n}\n]\n}\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of operations. To update multiple users, add an array of PATCH operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible Value:<code>PATCH</code>.         <code>path</code> Required if <code>op</code> is <code>remove</code>.        Optional if <code>op</code> is <code>add</code> or <code>replace</code>.                     Add this path to specify the new user that is being updated. Possible Value:<code>/Users/{user_id}</code>.         <code>bulkid</code> Optional             A unique identifier for the bulk operation. The bulkid is required for POST operations. Possible Value: An integer value.         <code>data</code> Required             Specify the details of the new user that should be updated. The parameters that can be used for this \u201cdata\u201d object are explained below.         </p> </li> <li> <p>Data parameters</p> <p> Parameter Required/Optional Description <code>op</code> Required             The operation that should be applied to the existing user\u2019s data. Possible Values: <ul> <li><code>add</code></li> <li><code>replace</code></li> <li><code>remove</code></li> </ul>            See SCIM2 Patch Operations for details on how to define patch operations.          <code>path</code> Required if <code>op</code> is <code>remove</code>.             Optional if <code>op</code> is <code>add</code> or <code>replace</code>             The path to the resource (user attribute) that should be updated.            For example, if the name of the user is to be updated, the path should be \u201cname\u201d.         <code>value</code> Required if <code>op</code> is <code>remove</code>.             Optional if <code>op</code> is <code>add</code> or <code>replace</code>.                     The value of the parameter specified by the <code>path</code>.            <p>For example, if the path is \u201cname\u201d, the value should be the actual name.</p>            See SCIM2 Patch Operations for details on how to define values for the patch operations.         </p> </li> </ul>"},{"location":"apis/scim2-batch-operations/#replace-users","title":"Replace users","text":"<p>Given below is an example request payload to replace existing users in bulk. This request includes an array of operations that replace multiple users.</p> <pre><code>{\n\"failOnErrors\":1,\n\"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n\"Operations\":[\n{\n\"method\": \"PUT\",\n\"path\": \"/Users/e67906fb-308f-4b15-89bd-0ab6e3d996e5\",\n\"bulkId\": \"qwerty\",\n\"data\":{\n\"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n\"userName\": \"Kim\",\n\"name\": {\n\"givenName\": \"John\",\n\"familyName\": \"Berry\"\n},\n\"emails\": [\n{\n\"type\": \"home\",\n\"value\": \"john@gmail.com\"\n}\n]\n}\n},\n{\n\"method\": \"PUT\",\n\"path\": \"/Users/b1781d25-bde5-460a-a58a-8fe8dbfd8487\",\n\"bulkId\":\"ytrewq\",\n\"data\":{\n\"schemas\":[\n\"urn:ietf:params:scim:schemas:core:2.0:User\",\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n],\n\"userName\":\"smith\",\n\"name\": {\n\"givenName\": \"Smith\",\n\"familyName\": \"Berry\"\n},\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\":{\n\"employeeNumber\": \"12345\"\n}\n}\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of operations. To replace multiple users, add an array of PUT operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible value:<code>PUT</code>.         <code>path</code> Required             Add this path to specify the existing user that should be replaced by the new user information that is added. Possible value:<code>/Users/{user_id}</code>.         <code>bulkid</code> Optional             A unique identifier for the bulk operation. The bulkid is required for POST operations. Possible value: An integer value.         <code>data</code> Required             Specify the new user details that should be used to replace the existing user specified in the path. The parameters that can be used for this \u201cdata\" object are explained below.         </p> </li> <li> <p>Data parameters</p> <p> Parameter Required/Optional Description <code>schemas</code> Required             Specify the list of SCIM2 user schemas where the new user details should replace the existing user specified by the path. Possible values: <ul> <li><code>urn:ietf:params:scim:schemas:core:2.0:User</code></li> <li><code>urn:ietf:params:scim:schemas:enterprise:2.0:User</code></li> <li><code>urn:scim:wso2:schema</code></li> </ul> <code>{attribute_name}</code> Required             The name of the attribute that will be replaced. Possible values: User attributes as per the SCIM protocol.         </p> </li> </ul>"},{"location":"apis/scim2-batch-operations/#delete-users","title":"Delete users","text":"<p>Given below is an example request payload to delete existing users in bulk. This request includes an array of operations that delete multiple users.</p> <pre><code>{\n\"failOnErrors\":1,\n\"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n\"Operations\":[\n{\n\"method\": \"DELETE\",\n\"path\": \"/Users/e67906fb-308f-4b15-89bd-0ab6e3d996e5\" },\n{\n\"method\": \"DELETE\",\n\"path\": \"/Users/b1781d25-bde5-460a-a58a-8fe8dbfd8487\"\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of  operations. To delete multiple users, add an array of DELETE operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible value:<code>DELETE</code>.         <code>path</code> Required             Add this path to specify the existing user that should be deleted. Possible value:<code>/Users/{user_id}</code>.         </p> </li> </ul>"},{"location":"apis/scim2-batch-operations/#manage-user-groups-in-bulk","title":"Manage user groups in bulk","text":"<p>You can use bulk operations to add, update, replace, and delete user groups in bulk.</p> <p>Info</p> <p>The examples given below show individual resource operations (POST, PATCH, PUT, or DELETE) handled in a single request. However, note that a single request can execute a combination of operation types simultaneously.</p>"},{"location":"apis/scim2-batch-operations/#add-user-groups","title":"Add user groups","text":"<p>Given below is an example request payload to add user groups in bulk. This request includes an array of operations that adds multiple new user groups.</p> <pre><code>{\n\"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n\"Operations\": [\n{\n\"method\": \"POST\",\n\"path\": \"/Groups\",\n\"bulkId\": \"ytrewq\",\n\"data\": {\n\"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n\"displayName\": \"TourGuides\",\n\"members\": [\n{\n\"type\": \"User\",\n\"value\": \"3633c988-69bf-48fc-978a-83dfde12695f\"\n}\n]\n}\n},\n{\n\"method\": \"POST\",\n\"path\": \"/Groups\",\n\"bulkId\": \"ytrewq\",\n\"data\": {\n\"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n\"displayName\": \"SLTourGuides\",\n\"members\": [\n{\n\"type\": \"User\",\n\"value\": \"3633c988-69bf-48fc-978a-83dfde12695f\"\n},\n{\n\"type\": \"User\",\n\"value\": \"40390b19-54c9-4e77-b223-fe31d55e59e0\"\n}\n]\n}\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of operations. To add multiple new user groups, add an array of POST operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible Value:<code>POST</code>.         <code>path</code> Required             Add this path to specify that a new user group that should be added. Possible Value:<code>/Group</code>.         <code>bulkid</code> Optional             A unique identifier for the bulk operation. The bulkid is required for POST operations. Possible Value: An integer value.         <code>data</code> Required             Specify the details of the new user group that should be added. The parameters that can be used for this \u201cdata\u201d object are explained below.         </p> </li> <li> <p>Data parameters</p> <p> Parameter Required/Optional Description <code>displayName</code> Required             The display name of the user group. <code>members</code> Optional             An array of member users. <code>display</code> Required if <code>members</code> is used.             The display name of a user assigned to the group. Possible values: The username.         <code>value</code> Required if <code>members</code> is used.             The ID of the user. Possible values: The user ID.         </p> </li> </ul>"},{"location":"apis/scim2-batch-operations/#update-groups","title":"Update groups","text":"<p>Given below is an example request payload to update user groups in bulk. This request includes an array of operations that update multiple details in multiple user groups.</p> <pre><code>{\n\"schemas\":[\n\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\n],\n\"Operations\":[\n{\n\"method\":\"PATCH\",\n\"path\":\"/Groups/46887262-2ba1-4cee-b3ef-64549423e0b0\",\n\"data\":{\n\"Operations\":[\n{\n\"op\":\"replace\",\n\"path\":\"members\",\n\"value\":[\n{\n\"display\":\"smith\",\n\"value\":\"ba1db5ff-8062-415b-bc78-5f79738d00ea\"\n}\n]\n}\n]\n}\n},\n{\n\"method\":\"PATCH\",\n\"path\":\"/Groups/18d04a36-0894-4f71-bdc4-2610fcc6ae42\",\n\"data\":{\n\"Operations\":[\n{\n\"op\":\"add\",\n\"path\":\"members\",\n\"value\":[\n{\n\"display\":\"smith\",\n\"value\":\"ba1db5ff-8062-415b-bc78-5f79738d00ea\"\n}\n]\n},\n{\n\"op\":\"remove\",\n\"path\":\"members[value eq \\\"3633c988-69bf-48fc-978a-83dfde12695f\\\"]\"\n}\n]\n}\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of operations. To update multiple user groups, add an array of PATCH operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible Value:<code>PATCH</code>.         <code>path</code> Required             Add this path to specify the user group that should be updated. Possible Value:<code>/Group/{group_id}</code>.         <code>bulkid</code> Optional             A unique identifier for the bulk operation. The bulkid is required for POST operations. Possible Value: An integer value.         <code>data</code> Required             Specify the details that should be updated for the user group specified in the path. The parameters that can be used for this \u201cdata\u201d object are explained below.         </p> </li> <li> <p>Data parameters</p> <p> Parameter Required/Optional Description <code>op</code> Required             The operation that should be applied to the existing user group. Possible values: <ul> <li><code>add</code></li> <li><code>replace</code></li> <li><code>remove</code></li> </ul>             See SCIM2 Patch Operations for details on how to define patch operations.         <code>path</code> Required if <code>op</code> is <code>remove</code>.            Optional if <code>op</code> is <code>add</code> or <code>replace</code>.                      Specify \u201cmembers\u201d as the path. Possible values: <code>members</code> <code>value</code> Required if <code>op</code> is <code>add</code> or <code>replace</code>.             An array of users that belong to the group.         </p> </li> <li> <p>Data operation value parameters</p> <p> <code>display</code> Required if <code>path is set to <code>members</code>.             The display name of the user, who is a member. Possible values: The username.         <code>value</code> Required if <code>path is set to <code>members</code>.             The user ID of the member user. Possible values: The user ID."},{"location":"apis/scim2-batch-operations/#replace-groups","title":"Replace groups","text":"<p>Given below is an example request payload to replace existing user groups in bulk. This request includes an array of operations that replace multiple user groups.</p> <pre><code>{\n\"failOnErrors\":1,\n\"schemas\":[\n\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\n],\n\"Operations\":[\n{\n\"method\":\"PUT\",\n\"path\":\"/Groups/46887262-2ba1-4cee-b3ef-64549423e0b0\",\n\"data\":{\n\"displayName\":\"TourGuides\",\n\"members\":[\n{\n\"display\":\"Alice\",\n\"value\":\"3633c988-69bf-48fc-978a-83dfde12695f\"\n}\n]\n}\n},\n{\n\"method\":\"PUT\",\n\"path\":\"/Groups/18d04a36-0894-4f71-bdc4-2610fcc6ae42\",\n\"data\":{\n\"displayName\":\"SLTourGuides\",\n\"members\":[\n{\n\"display\":\"Alice\",\n\"value\":\"3633c988-69bf-48fc-978a-83dfde12695f\"\n}\n]\n}\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of operations. To replace multiple user groups, add an array of PUT operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible value:<code>PUT</code>.         <code>path</code> Required             Add this path to specify the existing user group that should be replaced by the new information that is added. Possible value:<code>/Groups/{group_id}</code>.         <code>bulkid</code> Optional             A unique identifier for the bulk operation. The bulkid is required for POST operations. Possible value: An integer value.         <code>data</code> Required             Specify the new group details that should be used to replace the existing user group specified in the path. The parameters that can be used for this \u201cdata\" object are explained below.         </p> </li> <li> <p>Data parameters</p> <p> Parameter Required/Optional Description <code>displayName</code> Required             The display name of the user group. <code>members</code> Required             Array of member users. <code>display</code> Required             The display name of a user assigned to the group. Possible values: The username.         <code>value</code> Required             The ID of the user. Possible values: The user ID.         </p> </li> </ul>"},{"location":"apis/scim2-batch-operations/#delete-users_1","title":"Delete users","text":"<p>Given below is an example request payload to delete existing user groups in bulk. This request includes an array of operations that delete multiple user groups.</p> <pre><code>{\n\"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n\"Operations\":[\n{\n\"method\": \"DELETE\",\n\"path\": \"/Groups/46887262-2ba1-4cee-b3ef-64549423e0b0\" },\n{\n\"method\": \"DELETE\",\n\"path\": \"/Groups/18d04a36-0894-4f71-bdc4-2610fcc6ae42\"\n}\n]\n}\n</code></pre> <p>The parameters in the request body are explained below.</p> <ul> <li> <p>Main parameters</p> <p> Parameter Required/Optional Description <code>failOnErrors</code> Optional The number of errors that will be accepted by WSO2 IS before returning the response. Possible values: An integer.         <code>schemas</code> Required This is the schema that is required for sending bulk requests: <code>urn:ietf:params:scim:api:messages:2.0:BulkRequest</code>.         <code>operations</code> Required Array of  operations. To delete multiple user groups, add an array of PUT operations. You can include any number of operations in one bulk request.        The parameters that can be used for the operation are explained below.         </p> </li> <li> <p>Operation parameters</p> <p> Parameter Required/Optional Description <code>method</code> Required             The method that should be used in the operation. Possible value:<code>DELETE</code>.         <code>path</code> Required             Add this path to specify the existing user group that should be deleted. Possible value:<code>/Groups/{group_id}</code>.         </p> </li> </ul>"},{"location":"apis/scim2-patch-operations/","title":"SCIM2 Patch Operations","text":"<p>Follow the topics given below to understand how Patch operations can be used when you invoke the SCIM2 API.</p>"},{"location":"apis/scim2-patch-operations/#introduction","title":"Introduction","text":"<p>WSO2 Identity Server supports SCIM Patch, which can be used to update one or more attributes of a SCIM resource. </p> <p>When you create your request payload to update attributes in a SCIM resource, you need to first determine the following two factors: </p> <ul> <li>Type of attribute that should be updated</li> <li>Type of update operation that should be used</li> </ul>"},{"location":"apis/scim2-patch-operations/#types-of-attributes","title":"Types of attributes","text":"Singular attribute A resource attribute that contains a single value. For example, the <code>displayName</code> attribute can only have one unique value.          Multi-valued attribute A resource attribute that contains multiple values. For example, the <code>emails</code> attribute may have multiple email addresses as values.          Complex attribute A singular or multi-valued attribute, which has a value that is a composition of one or more simple attributes. For example, the <code>addresses</code> attribute has the sub-attributes <code>streetAddress</code>, <code>locality</code>, <code>postalCode</code>, and <code>country</code>.          Simple attribute A singular or multi-valued attribute, which has a value that is a primitive. A simple attribute must not contain sub-attributes."},{"location":"apis/scim2-patch-operations/#types-of-update-operations","title":"Types of update operations","text":"add Add a new value for the attribute. replace Replace the existing value of an attribute. remove Delete the existing value of an attribute."},{"location":"apis/scim2-patch-operations/#patch-request-payload","title":"Patch request payload","text":"<p>The structure of a patch request payload is as follows:</p> <pre><code>{\n\"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n\"operations\":[\n{\n\"op\": \"add|replace|remove\",\n\"path\": \"attribute_path|value_path|sub_attribute_path\"\n\"value\": {},\n},\n...\n]\n}\n</code></pre> <p>The main parameters in the above payload are explained below.</p> Parameter Required/Optional Description <code>schemas</code> Required Specify the following schema when sending patch requests: <code>urn:ietf:params:scim:api:messages:2.0:PatchOp</code>.          <code>operations</code> Required Specify the array of <code>add</code>, <code>remove</code>, <code>replace</code> operations that should be used to update the information. You can include any number of operations in one request. <p>The parameters per operation in the above payload are explained below.</p> Parameter Required/Optional Description <code>op</code> Required The method that should be used in the operation. Possible values: <ul> <li><code>add</code></li> <li><code>remove</code></li> <li><code>replace</code></li> </ul> <code>path</code> Required if <code>op</code> is <code>remove</code>.         Optional if <code>op</code> is <code>add</code> or <code>replace</code>.          Add the path to specify the attribute/sub-attribute that should be updated.          Since <code>path</code> is an optional parameter for <code>add</code> and <code>replace</code> operations, there are two ways to define the operation in a payload: with or without the <code>path</code> parameter.          <code>value</code> Required if <code>op</code> is <code>add</code> or <code>replace</code>. The value that should be updated."},{"location":"apis/scim2-patch-operations/#patch-users","title":"Patch users","text":"<p>You can use the patch operations to add/remove/replace attributes of users in a specific SCIM2 schema. Consider the following SCIM2 schemas that you will update:</p> <ul> <li>User Core schema</li> <li>Enterprise schema</li> <li>Custom schemas</li> </ul> <p>Note</p> <p>If you are adding or replacing user attributes from a user in the Core user schema, it is not necessary to specify the schema in the request payload. See the examples given below.</p>"},{"location":"apis/scim2-patch-operations/#add-user-attributes","title":"Add user attributes","text":"<p>Let's create patch request payloads to <code>add</code> user attributes of different types.</p> <p>Simple singular attributes</p> <p>Consider the <code>nickname</code> attribute in the Core user schema and the <code>country</code> attribute in the Enterprise user schema (<code>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User</code>). These are simple singular attributes.</p> <ul> <li> <p>Example 1: Add the <code>nickName</code> attribute in the Core user schema (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"nickName\": \"shaggy\"\n}\n}\n</code></pre> </li> <li> <p>Example 2: Add the <code>nickName</code> attribute in the Core user schema (using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"nickName\",\n\"value\": \"Tomy\"\n}\n</code></pre> </li> <li> <p>Example 3: Add the <code>country</code> attribute in the Enterprise user schema (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n\"country\": \"Sri Lanka\"\n}\n}\n}\n</code></pre> </li> <li> <p>Example 4: Add the <code>country</code> attribute in the Enterprise user schema (using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:country\",\n\"value\": \"India\"\n}\n</code></pre> </li> </ul> <p>Complex singular attributes</p> <p>Consider the <code>name</code> attribute in the Core user schema, which has sub-attributes such as <code>givenName</code>, <code>familyName</code>, etc. and the <code>manager</code> attribute in the Enterprise user schema (<code>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User</code>), which has <code>displayName</code>, <code>value</code>, <code>ref</code>, etc. as sub-attributes. </p> <p>These a complex singular attributes because there are multiple sub-attributes.</p> <ul> <li> <p>Example 1: Add the <code>name</code> attribute in the Core user schema (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"name\": {\n\"givenName\": \"John\",\n\"familyName\": \"Doe\"\n}\n}\n}\n</code></pre> </li> <li> <p>Example 2: Add the <code>name</code> attribute in the Core user schema (using the path param):</p> <p>Note</p> <p>There are two ways to define the <code>path</code> paratmeter. </p> <p>In the first method, you need only one operation to add the sub-attributes as shown below.</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"name\",\n\"value\": {\n\"givenName\": \"John\",\n\"familyName\": \"John\"\n}\n},\n</code></pre> <p>In the second method, you need two separate operations to add the sub-attributes as shown below.</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"name.givenName\",\n\"value\": \"John\"\n},\n{\n\"op\": \"add\",\n\"path\": \"name.familyName\",\n\"value\": \"Doe\"\n}\n</code></pre> </li> <li> <p>Example 3: Add the <code>manager</code> attribute in the Enterprise user schema (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n\"manager\": {\n\"displayName\": \"Manager1\",\n\"value\": \"Joe\"\n}\n}\n}\n}\n</code></pre> </li> <li> <p>Example 4: Add the <code>manager</code> attribute in the Enterprise user schema (using the path param):</p> <pre><code>    {\n\"op\": \"add\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager\",\n\"value\": {\n\"displayName\": \"Manager2\"\n}\n}\n</code></pre> </li> </ul> <p>Simple multi-valued attributes</p> <p>Attributes of this type are not found in the core schemas of the SCIM specification. However, you can add simple multi-valued attributes to custom schemas as shown below. </p> <p>Let's consider a custom schema with an attribute called <code>devices</code>, which can have multiple attributes.</p> <ul> <li> <p>Example 1: Add the <code>devices</code> attribute to a custom user schema (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"urn:scim:wso2:schema\": {\n\"devices\": [\n\"D1\",\n\"D2\",\n\"D3\"\n]\n}\n}\n}\n</code></pre> </li> <li> <p>Example 2: Add the <code>devices</code> attribute to a custom user schema (using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"urn:scim:wso2:schema:devices\",\n\"value\": [\"D4\", \"D5\"]\n}\n</code></pre> </li> </ul> <p>Complex multi-valued attributes</p> <p>Consider the <code>emails</code> attribute in the Core user schema, which can have multiple emails types such as <code>home</code>, <code>work</code>, etc. Each email attribute has sub-attributes such as <code>value</code>, <code>type</code>, and <code>primary</code>.</p> <ul> <li> <p>Example 1: Add the <code>emails</code> complex attribute to a Core user schema (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"emails\": [\n{\n\"value\": \"abc@gmail.com\",\n\"type\": \"home\"\n},\n{\n\"value\": \"xyz@gmail.com\",\n\"type\": \"work\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Add the <code>emails</code> complex attribute to a Core user schema (using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"emails\",\n\"value\": [\n{\n\"value\": \"abc@gmail.com\",\n\"type\": \"home\"\n},\n{\n\"value\": \"xyz@gmail.com\",\n\"type\": \"work\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#replace-user-attributes","title":"Replace user attributes","text":"<p>Let's create patch request payloads to <code>replace</code> user attributes of different types.</p> <p>Simple singular attributes</p> <p>Consider the <code>nickname</code> attribute in the Core user schema and the <code>country</code> attribute in the Enterprise user schema (<code>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User</code>). These are simple singular attributes.</p> <ul> <li> <p>Example 1: Replace the <code>nickName</code> attribute in the Core user schema (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"nickName\": \"Blinki\"\n}\n}\n</code></pre> </li> <li> <p>Example 2: Replace the <code>nickName</code> attribute in the Core user schema (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"nickName\",\n\"value\": \"Shaini\"\n}\n</code></pre> </li> <li> <p>Example 3: Replace the <code>country</code> attribute in the Enterprise user schema (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n\"country\": \"USA\"\n}\n}\n}\n</code></pre> </li> <li> <p>Example 4: Replace the <code>country</code> attribute in the Enterprise user schema (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:country\",\n\"value\": \"UK\"\n}\n</code></pre> </li> </ul> <p>Complex singular attributes</p> <p>Consider the <code>name</code> attribute in Core user schema, which has sub-attributes such as <code>givenName</code>, <code>familyName</code>, etc. and the <code>manager</code> attribute in the Enterprise user schema (<code>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User</code>), which has <code>displayName</code>, <code>value</code>, <code>ref</code>, etc. as sub-attributes. </p> <ul> <li> <p>Example 1: Replace the <code>name</code> attribute in the Core user schema (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"name\": {\n\"givenName\": \"Peterson\"\n}\n}\n}\n</code></pre> </li> <li> <p>Example 2: Replace the <code>name</code> attribute in the Core user schema (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"name\",\n\"value\": {\n\"givenName\": \"Martin\",\n\"familyName\": \"Freeman\"\n}\n},\n{\n\"op\": \"replace\",\n\"path\": \"name.familyName\",\n\"value\": \"Jackson\"\n}\n</code></pre> </li> <li> <p>Example 3: Replace the <code>manager</code> attribute in the Enterprise user schema (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n\"manager\": {\n\"displayName\": \"Manager3\",\n\"value\": \"Tom\"\n}\n}\n}\n}\n</code></pre> </li> <li> <p>Example 4: Replace the <code>manager</code> attribute in the Enterprise user schema (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager\",\n\"value\": {\n\"displayName\": \"Manager4\"\n}\n},\n{\n\"op\": \"replace\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager.value\",\n\"value\": \"Jem\"\n}\n</code></pre> </li> </ul> <p>Simple multi-valued attributes</p> <p>This type of attribute is not found in the core schemas of the SCIM specification. However, there is a capability to add simple multi-valued attributes to our extended schemas (custom schemas). </p> <p>Let's consider a custom schema with an attribute called devices.</p> <ul> <li> <p>Example 1: Replace the <code>devices</code> attribue in a Custom user schema (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"urn:scim:wso2:schema\": {\n\"devices\": [\"M1\", \"M2\"]\n}\n}\n}\n</code></pre> </li> <li> <p>Example 2: Replace the <code>devices</code> attribue in a custom user schema (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"urn:scim:wso2:schema:devices\",\n\"value\": [\n\"M6\",\n\"M7\"\n]\n}\n</code></pre> </li> </ul> <p>Complex multi-valued attributes</p> <p>Consider the <code>emails</code> attribute in the Core user schema, which can have multiple emails types such as <code>home</code>, <code>work</code>, etc. Each email attribute has sub-attributes such as <code>value</code>, <code>type</code>, and <code>primary</code>.</p> <ul> <li> <p>Example 1: Replace the <code>emails</code> attribute in a Core user schema (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"emails\": [\n{\n\"value\": \"abcd@gmail.com\",\n\"type\": \"home\"\n},\n{\n\"value\": \"wxyz@gmail.com\",\n\"type\": \"work\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Replace the <code>emails</code> attribute in a Core user schema (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"emails\",\n\"value\": [\n{\n\"value\": \"abcde@gmail.com\",\n\"type\": \"home\"\n},\n{\n\"value\": \"vwxyz@gmail.com\",\n\"type\": \"work\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#remove-user-attributes","title":"Remove user attributes","text":"<p>Let's create patch request payloads to <code>remove</code> user attributes of different types.</p> <p>Simple singular attributes</p> <p>Consider the <code>nickname</code> attribute in the Core user schema and the <code>country</code> attribute in the Enterprise user schema (<code>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User</code>). These are simple singular attributes.</p> <ul> <li> <p>Example 1: Remove the <code>nickName</code> attribute of a user in the Core user schema.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"nickName\"\n}\n</code></pre> </li> <li> <p>Example 2: Remove the <code>country</code> attribute of a user in the Enterprise user schema.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:country\"\n}\n</code></pre> </li> </ul> <p>Complex singular attributes</p> <p>Consider the <code>name</code> attribute in Core user schema, which has sub-attributes such as <code>givenName</code>, <code>familyName</code>, etc. and the <code>manager</code> attribute in the Enterprise user schema (<code>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User</code>), which has <code>displayName</code>, <code>value</code>, <code>ref</code>, etc. as sub-attributes. </p> <p>Note</p> <ul> <li>If the path contains the complex attribute, all sub-attribute values are removed. </li> <li>There is a special case for the <code>name</code> attribute. Even though <code>\u201cpath\u201d: \u201cname\u201d</code> is specified, the <code>familyName</code> attribute is not removed. This is only applicable when an LDAP user store is used.</li> <li>If you just want to delete a sub-attribute of a complex attribute, use the <code>attribute.subattribute</code> format as shown below.</li> </ul> <ul> <li> <p>Example 1: Remove a sub-attribute of the <code>name</code> attribute in the Core user schema:</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"name.givenName\"\n}\n</code></pre> </li> <li> <p>Example 2: Remove the manager's <code>value</code> attribute and whole <code>manager</code> object in the Enterprise user schema:</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager.value\"\n},\n{\n\"op\": \"remove\",\n\"path\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager\"\n}\n</code></pre> </li> </ul> <p>Simple multi-valued attributes</p> <p>This type of attribute is not found in the core schemas of the SCIM specification. However, there is a capability to add simple multi-valued attributes to our extended schemas (custom schemas). </p> <p>Let's consider a custom schema with an attribute called devices.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"urn:scim:wso2:schema:devices[value eq \\\"M7\\\"]\"\n},\n{\n\"op\": \"remove\",\n\"path\": \"urn:scim:wso2:schema:devices\"\n}\n</code></pre> <p>Complex multi-valued attributes</p> <p>Consider the <code>emails</code> attribute in the Core user schema, which can have multiple emails types such as <code>home</code>, <code>work</code>, etc. Each email attribute has sub-attributes such as <code>value</code>, <code>type</code>, and <code>primary</code>.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"emails[type eq home]\"\n},\n{\n\"op\": \"remove\",\n\"path\": \"emails\"\n}\n</code></pre>"},{"location":"apis/scim2-patch-operations/#patch-groups","title":"Patch groups","text":"<p>You can use the patch operations to add/remove/replace users (members) in a user group. You can also rename the a user group by using the <code>replace</code> operation.</p>"},{"location":"apis/scim2-patch-operations/#add-members","title":"Add members","text":"<p>Let's create patch request payloads to <code>add</code> members to a user group.</p> <ul> <li> <p>Example 1: Add a member to a group (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"members\": [\n{\n\"display\": \"alex\",\n\"value\": \"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Add a member to a group (using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"members\",\n\"value\": [\n{\n\"display\": \"alex\",\n\"value\": \"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#replace-members","title":"Replace members","text":"<p>Let's create patch request payloads to <code>replace</code> members in a user group.</p> <ul> <li> <p>Example 1: Replace members in a group (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"members\": [\n{\n\"display\": \"alex\",\n\"value\": \"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Replace members in a group (using the path param):</p> <pre><code>{\n\"op\":\"replace\",\n\"path\":\"members\",\n\"value\":[\n{\n\"display\":\"alex\",\n\"value\":\"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#remove-members","title":"Remove members","text":"<p>Let's create patch request payloads to <code>remove</code> members from a user group.</p> <ul> <li> <p>Example 1: Specify the member (by user ID) who needs to be removed.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"members[value eq 0565f472-28fe-4d93-83ad-096c66ed4a47]\"\n}\n</code></pre> </li> <li> <p>Example 2: Specify the member (by username) who needs to be removed.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"members[display eq alex]\"\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#rename-user-group","title":"Rename user group","text":"<p>Let's create a patch request payload to rename an existing user group.</p> <ul> <li> <p>Example 1: Rename a user group (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"displayName\": \"new_group_name\"\n}\n}\n</code></pre> </li> <li> <p>Example 1: Rename a user group (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"displayName\",\n\"value\": \"new_group_name\"\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#patch-roles","title":"Patch roles","text":"<p>You can use the patch operations to add/remove/replace users and user groups for a role.</p>"},{"location":"apis/scim2-patch-operations/#assign-users","title":"Assign users","text":"<p>Let's create patch request payloads to <code>add</code> users to a user role.</p> <ul> <li> <p>Example 1: Assign users to a role (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"users\": [\n{\n\"display\": \"alex\",\n\"value\": \"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Assign users to a role (using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"users\",\n\"value\": [\n{\n\"display\": \"alex\",\n\"value\": \"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#replace-users","title":"Replace users","text":"<p>Let's create patch request payloads to <code>replace</code> users assigned to a user role.</p> <ul> <li> <p>Example 1: Replace users in a role (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"users\": [\n{\n\"display\": \"alex\",\n\"value\": \"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Replace users in a role (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"users\",\n\"value\": [\n{\n\"display\": \"alex\",\n\"value\": \"0565f472-28fe-4d93-83ad-096c66ed4a47\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#remove-users","title":"Remove users","text":"<p>Let's create patch request payloads to <code>remove</code> users from a user role.</p> <ul> <li> <p>Example 1: Specify the user (by user ID) who needs to be removed.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"users[value eq 0565f472-28fe-4d93-83ad-096c66ed4a47]\"\n}\n</code></pre> </li> <li> <p>Example 2: Specify the user (by username) who needs to be removed.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"members[users eq alex]\"\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#assign-user-groups","title":"Assign user groups","text":"<p>Let's create patch request payloads to <code>add</code> user groups to a user role.</p> <ul> <li> <p>Example 1: Assign user groups to a role (without using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"value\": {\n\"groups\": [\n{\n\"value\": \"78144fd9-48e7-4fc9-95b5-cd3883f5ce4a\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Assign user groups to a role (using the path param):</p> <pre><code>{\n\"op\": \"add\",\n\"path\": \"groups\",\n\"value\": [\n{\n\"value\": \"78144fd9-48e7-4fc9-95b5-cd3883f5ce4a\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#replace-user-groups","title":"Replace user groups","text":"<p>Let's create patch request payloads to <code>replace</code> user groups assigned to a user role.</p> <ul> <li> <p>Example 1: Replace user groups in a role (without using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"value\": {\n\"groups\": [\n{\n\"value\": \"78144fd9-48e7-4fc9-95b5-cd3883f5ce4a\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Example 2: Replace user groups in a role (using the path param):</p> <pre><code>{\n\"op\": \"replace\",\n\"path\": \"groups\",\n\"value\": [\n{\n\"value\": \"78144fd9-48e7-4fc9-95b5-cd3883f5ce4a\"\n}\n]\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-patch-operations/#remove-user-groups","title":"Remove user groups","text":"<p>Let's create patch request payloads to <code>remove</code> user groups assigned to a user role.</p> <ul> <li> <p>Example 1: Specify the group (by group ID) that needs to be removed.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"groups[value eq 78144fd9-48e7-4fc9-95b5-cd3883f5ce4a]\"\n}\n</code></pre> </li> <li> <p>Example 2: Specify the group (by group name) that needs to be removed.</p> <pre><code>{\n\"op\": \"remove\",\n\"path\": \"groups[display eq PRIMARY/ABCD]\"\n}\n</code></pre> </li> </ul>"},{"location":"apis/scim2-rest-apis/","title":"SCIM 2.0 API Definition","text":""},{"location":"apis/script-library-rest-api/","title":"Script Library management API","text":""},{"location":"apis/service-provider-configurations-used-with-apis/","title":"Service Provider Configurations used with APIs","text":"<p>This section guides you through the configurations you can include in a service provider application.\u00a0See Call Admin Services to enable the admin service.</p>"},{"location":"apis/service-provider-configurations-used-with-apis/#configure-saml2-web-sso","title":"Configure SAML2 web SSO","text":"Description To add a Service Provider with SAML2 Web SSO capability, you have to first add SAML2 Web SSO configuration. This is done through the <code>IdentitySAMLSSOConfigService</code> that is exposed at <code>https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/services/IdentitySAMLSSOConfigService?wsdl</code>.\u00a0Replace the tag <code>&lt;IS_HOST&gt;:&lt;IS_PORT&gt;</code> with the relevant host and port number, for example, <code>https://localhost:9443/services/IdentitySAMLSSOConfigService?wsdl</code>. Permissions /permission/admin/manage Input Parameters <ul> <li>issuer <code>[String]</code> This specifies the issuer. This is the <code>             &lt;saml:Issuer&gt;            </code> element that contains the unique identifier of the service provider. This is also the issuer value specified in the SAML Authentication Request issued by the service provider.\u00a0When configuring single-sign-on across Carbon servers, ensure that this value is equal to the <code>ServiceProviderID</code> value mentioned in the <code>             &lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file of the relying party's WSO2 Identity Server.</li> <li>issuerQualifier <code>[String]</code> <p>This value is needed only if you have to configure multiple SAML SSO inbound authentication configurations for the same Issuer value. When registering a SAML service provider in WSO2 Identity Server, the service provider qualifier that is defined here will be appended to the issuer internally to identify a service provider uniquely at runtime.</p> <p>You can configure a number of SAML SPs with the same Issuer and different Service Provider Qualifiers.</p> <p>When a service provider qualifier is defined, the issuer that is defined in the configuration, e.g., \"travelocity.com\" is the issuer of the SAML SSO authentication request. The service provider qualifier should be sent as the query parameter spQualifier along with the HTTP request.</p> </li> <li>assertionConsumerUrls <code>[String]</code> This specifies the assertion Consumer URLs that the browser should be redirected to after the authentication is successful. This is the Assertion Consumer Service (ACS) URL of the service provider. The identity provider redirects the SAML2 response to this ACS URL. However, if the SAML2 request is signed and SAML2 request contains the ACS URL, the Identity Server will honor the ACS URL of the SAML2 request.\u00a0It should have this format: <code>https://&lt;host-name&gt;:&lt;port&gt;/acs</code>.\u00a0You can add multiple assertion consumer URLs by repeating assertionConsumerUrls element.</li> <li>defaultAssertionConsumerUrl   <code>[String]</code> <p>As there can be multiple assertion consumer URLs, you must define a Default Assertion Consumer URL in case you are unable to retrieve it from the authentication request.</p> <p>Tip</p> <p> <p>In a service provider initiated single sign-on setup, the following needs to be considered.</p> <ul> <li>If no ACS URL is given in the <code>&lt;AuthnRequest&gt;</code>, the Identity Server sends the response to the default ACS URL of the service provider (whether the request is signed or not).</li> <li>If the ACS URL in <code>&lt;AuthnRequest&gt;</code> matches with one of the registered URLs, the Identity Server sends the response to the matched one.</li> <li>If the ACS URL in <code>&lt;AuthnRequest&gt;</code> does not match any of the registered ACS URLs and if the request is signed, the Identity Server sends the response to the ACS URL in the request only if the signature is valid. Alternatively, the <code>&lt;AuthnRequest&gt;</code> is rejected.</li> </ul> </p> <p>In an identity provider initiated single sign-on setup, the following needs to be considered.</p> <ul> <li>If the \u201cacs\u201d query parameter is not present in the request, the Identity Server sends the response to default ACS URL of the service provider.</li> <li>If the \"acs\u201d parameter is present and the value of that parameter matches with any of the registered ACS URLs of the service provider, then the Identity Server sends the response to the matched one.</li> </ul> </li> <li>nameIDFormat <code>[String]</code> <p>This defines the name identifier formats that are supported by the identity provider. The\u00a0service provider and identity provider usually communicate with each other regarding a specific subject. That subject should be identified through a Name-Identifier (NameID), which should be in some format so that It is easy for the other party to identify it based on the format.\u00a0Name identifiers are used to provide information regarding a user.</p> Click to learn about NameID formats <p> <p>For SSO interactions, you can use the following types of NameID formats:</p> <ul> <li><code>                                   urn:oasis:names:tc:SAML:2.0:nameid-format:persistent                                 </code></li> <li><code>                                   urn:oasis:names:tc:SAML:2.0:nameid-format:transient                                 </code></li> <li><code>                                   urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress                                 </code></li> <li><code>                                   urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified                                 </code></li> <li><code>                                   urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName                                 </code></li> <li><code>                                   urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName                                 </code></li> <li><code>                                   urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos                                 </code></li> <li><code>                                   urn:oasis:names:tc:SAML:2.0:nameid-format:entity                                 </code></li> </ul> </p> <p>Following is the default format used by the identity provider.</p> <ul> <li><code>                                   urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress                                 </code></li> </ul> </li> <li>certAlias <code>[String]</code> This is used to validate the signature of SAML2 requests and is used to generate encryption. Basically, the service provider\u2019s certificate must be mentioned here. Note that this can also be the Identity Server tenant's public certificate in a scenario where you are doing a tenant-specific configuration.</li> <li>signingAlgorithmURI <code>[String]</code> <p>This specifies the <code>SignatureMethod</code> algorithm to be used in the <code>Signature</code> element in POST binding. The default value can be configured in the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file, in the <code>SSOService</code> element with <code>SAMLDefaultSigningAlgorithmURI</code> tag. If it is not provided the default algorithm is RSA\u00adSHA 1 - '<code>http://www.w3.org/2000/09/xmldsig#rsa\u00adsha1</code>\u2019.</p> <p>The following table provides the list of signature algorithms available and their respective URI.</p> Signature algorithm name Signature algorithm URI DSA with SHA1 http://www.w3.org/2000/09/xmldsig#dsasha1 ECDSA with SHA1 http://www.w3.org/2001/04/xmldsigmore#ecdsasha1 ECDSA with SHA256 http://www.w3.org/2001/04/xmldsigmore#ecdsasha256 ECDSA with SHA384 http://www.w3.org/2001/04/xmldsigmore#ecdsasha384 ECDSA with SHA512 http://www.w3.org/2001/04/xmldsigmore#ecdsasha512 RSA with MD5 http://www.w3.org/2001/04/xmldsigmore#rsamd5 RSA with RIPEMD160 http://www.w3.org/2001/04/xmldsigmore#rsaripemd160 RSA with SHA1 http://www.w3.org/2000/09/xmldsig#rsasha1 RSA with SHA256 http://www.w3.org/2001/04/xmldsigmore#rsasha256 RSA with SHA384 http://www.w3.org/2001/04/xmldsigmore#rsasha384 RSA with SHA512 http://www.w3.org/2001/04/xmldsigmore#rsasha512 </li> <li>doSignResponse <code>[Boolean]</code> This is set to <code>true</code> to sign the SAML2 responses that is returned after the authentication process.</li> <li>doValidateSignatureInRequests <code>[Boolean]</code> This is set to <code>true</code> to specify whether the identity provider must validate the signature of the SAML2 authentication request and the SAML2 logout request that is sent by the service provider.</li> <li>doValidateSignatureInRequests <code>[Boolean]</code> This is set to <code>true</code> to specify whether the identity provider must validate the signature of the SAML2 authentication request and the SAML2 logout request that is sent by the service provider.</li> <li>doEnableEncryptedAssertion <code>[Boolean]</code> This is set to <code>true</code> if you wish to encrypt the assertion.</li> <li>doSignAssertions <code>[Boolean]</code> This is set to <code>true</code> or kept empty as a valid assertion should be signed.</li> <li>doSingleLogout <code>[Boolean]</code> This is set to <code>true</code> if you want to terminate all sessions once the user signs out from one service provider. If single logout is enabled, the identity provider sends logout requests to all service providers. Basically, the identity provider acts according to the single logout profile. If the service provider supports a different URL for logout, you need to specify them using <code>sloResponseURL</code> and <code>sloRequestURL</code> parameters. These URLs indicate where the request and response should go to. If you do not specify this URL, the identity provider uses the Assertion Consumer Service (ACS) URL.</li> <li>enableAttributeProfile <code>[Boolean]</code> The Identity Server provides support for a basic attribute profile where the identity provider can include the user\u2019s attributes in the SAML Assertions as part of the attribute statement. Set true to enable this profile. If you set true to <code>enableAttributesByDefault</code> parameter, the identity provider always includes the attribute values related to the requested claims in the SAML attribute statement.</li> <li>requestedAudiences <code>[String]</code> This specifies the audiences.</li> <li>requestedRecipients <code>[String]</code> This specifies the recipients.</li> <li>idPInitSSOEnabled <code>[Boolean]</code> This is set <code>true</code> to enable IdP initiated SSO profile for the service provider.</li> <li>idPInitSLOEnabled <code>[Boolean]</code> This is set <code>true</code> to enable IdP initiated SLO profile for the service provider.</li> <li>assertionQueryRequestProfileEnabled <code>[Boolean]</code> This is set <code>true</code> to enable Assertion Query Request Profile to query assertions that are persisted to the database when you log in to the service provider application. For more information, see Query SAML2 Assertions.</li> <li>idpEntityIDAlias<code>[String]</code> This value can override identity provider entity Id that is specified under SAML SSO inbound authentication configuration of the resident identity provider. The Identity Provider Entity Id is used as the issuer of the SAML response that is generated by WSO2 Identity Server. By default, all the SAML responses that are issued by WSO2 Identity Server contain an issuer value that is similar to the identity provider entity Id of the resident identity provider's SAML SSO inbound authentication configuration. To make this value unique within a SAML service provider configuration, specify the value here causing the identity provider entity Id to be overridden by the identity provider Id alias.</li> </ul>"},{"location":"apis/service-provider-configurations-used-with-apis/#sample-request-and-response","title":"Sample request and response","text":"Click to view the request and response formats<p>``` xml tab=\"Request Format\"  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.saml.sso.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:addRPServiceProvider&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:spDto&gt;\n            &lt;!--Zero or more repetitions:--&gt;\n            &lt;xsd1:assertionConsumerUrls&gt;http://localhost:8080/travelocity.com/home.jsp&lt;/xsd1:assertionConsumerUrls&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:assertionQueryRequestProfileEnabled&gt;false&lt;/xsd1:assertionQueryRequestProfileEnabled&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:attributeConsumingServiceIndex&gt;1223160755&lt;/xsd1:attributeConsumingServiceIndex&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:certAlias&gt;wso2carbon&lt;/xsd1:certAlias&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:defaultAssertionConsumerUrl&gt;http://localhost:8080/travelocity.com/home.jsp&lt;/xsd1:defaultAssertionConsumerUrl&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:digestAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#sha1&lt;/xsd1:digestAlgorithmURI&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:doEnableEncryptedAssertion&gt;true&lt;/xsd1:doEnableEncryptedAssertion&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:doSignAssertions&gt;true&lt;/xsd1:doSignAssertions&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:doSignResponse&gt;true&lt;/xsd1:doSignResponse&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:doSingleLogout&gt;true&lt;/xsd1:doSingleLogout&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:doValidateSignatureInRequests&gt;true&lt;/xsd1:doValidateSignatureInRequests&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:enableAttributeProfile&gt;true&lt;/xsd1:enableAttributeProfile&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:enableAttributesByDefault&gt;true&lt;/xsd1:enableAttributesByDefault&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:idPInitSLOEnabled&gt;true&lt;/xsd1:idPInitSLOEnabled&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:idPInitSSOEnabled&gt;true&lt;/xsd1:idPInitSSOEnabled&gt;\n            &lt;!--Zero or more repetitions:--&gt;\n            &lt;xsd1:idpInitSLOReturnToURLs&gt;http://localhost:8090/travelocity.com/home.jsp&lt;/xsd1:idpInitSLOReturnToURLs&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:issuer&gt;travelocity.com&lt;/xsd1:issuer&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:nameIDFormat&gt;urn/oasis/names/tc/SAML/1.1/nameid-format/emailAddress&lt;/xsd1:nameIDFormat&gt;\n            &lt;!--Zero or more repetitions:--&gt;\n            &lt;xsd1:requestedAudiences&gt;https://localhost:9443/oauth2/token&lt;/xsd1:requestedAudiences&gt;\n            &lt;!--Zero or more repetitions:--&gt;\n            &lt;xsd1:requestedRecipients&gt;https://localhost:9443/oauth2/token&lt;/xsd1:requestedRecipients&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:signingAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#rsa-sha1&lt;/xsd1:signingAlgorithmURI&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:sloRequestURL&gt;&lt;/xsd1:sloRequestURL&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:sloResponseURL&gt;&lt;/xsd1:sloResponseURL&gt;\n         &lt;/xsd:spDto&gt;\n      &lt;/xsd:addRPServiceProvider&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p><code>xml tab=\"Response\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;    &lt;soapenv:Body&gt;       &lt;ns:createApplicationResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;          &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;       &lt;/ns:createApplicationResponse&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p> <p>Note</p> <p>Once the SAML SSO configuration is added, the issuer details need to be included in inbound authentication configurations of the service provider.</p> Parameter Type Description inboundAuthKey String Specify the issuer here, which is the unique identifier of the service provider. This is also the issuer value specified in the SAML Authentication Request issued by the service provider. inboundAuthType String For SAML 2.0, authentication type should be \u2018samlsso\u2019 Property Name Property Value attrConsumServiceIndex This is the consumer service index. \u00a0The service provider should send this in the SAML request to get attributes of the authenticated subject. <pre><code>&lt;xsd1:inboundAuthenticationConfig&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthKey&gt;travelocity.com&lt;/xsd1:inboundAuthKey&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd1:properties&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:value&gt;202240762&lt;/xsd1:value&gt;\n&lt;/xsd1:properties&gt;\n&lt;/xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;/xsd1:inboundAuthenticationConfig&gt;\n</code></pre>"},{"location":"apis/service-provider-configurations-used-with-apis/#configure-oauthopenid-connect","title":"Configure OAuth/OpenID connect","text":"Description To add a Service Provider with OAuth capability, add an OAuth application through the  OAuthAdminService  exposed at <code>https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/services/OAuthAdminService?wsdl</code>. Replace the tag <code>&lt;IS_HOST&gt;:&lt;IS_PORT&gt;</code> with the relevant host and port number, e.g., <code>https://localhost:9443/services/OAuthAdminService?wsdl</code>.  Permissions /admin/manage/identity Input Parameters <ul> <li>OAuthVersion <code>[String]</code> This specifies the Oauth version. Accepted values are <code>OAuth-1.0a</code> and <code>OAuth-2.0</code>. If you set OAuth Version as  <code>OAuth-1.0a</code>,  there is no need to fill the <code>grantTypes</code> parameter. This is because this version of OAuth does not support grant types.</li> <li>applicationName <code>[String]</code> This is the service provider name.</li> <li>applicationAccessTokenExpiryTime <code>[String]</code> This specifies the time the application access token needs to expire. The value needs to be specified in milliseconds.</li> <li> callbackUrl This is the exact location in the service provider's application where an access token would be sent. This is a required field and it is important to configure, as it is imperative that the service provider receives the access token. This is necessary for security purposes to ensure that the token is not compromised.                      <p>Configure multiple callback URLs</p> <p>From WSO2 Identity Server 5.2.0 onwards, regex-based consumer URLs are supported when defining the callback URL. This enables you to configure multiple callback URLs for one application.</p> <p>For example, if you have two service providers that use the same application, you can now define a regex pattern that will work for both callback URLs instead of having to configure two different applications for the two service providers. Assume the two callback URLs for your two service providers are as follows:</p> <ul> <li>https://myapp.com/callback</li> <li>https://testapp:8000/callback</li> </ul> <p>To configure the callback URL to work for both of these URLs, set it using a regex pattern as follows: <code>regexp=(https://((myapp\\.com)|(testapp:8000))(/callback))</code> <p>Make sure to set the prefix 'regexp=' before your regex pattern. To define a normal URL, you can specify the callback URL without this prefix.</p> </p> </li> <li>grantTypes <code>[String]</code> <p>Following are the grant types that are used to get the access token:</p> <ul> <li>Code: Entering the username and password required at the service provider will result in a code being generated. This code can be used to obtain the access token. For more information on this grant type, see the Authorization Code specification.</li> <li>Implicit: This is similar to the code grant type, but instead of generating a code, this directly provides the access token. For more information on this grant type, see the Implicit Grant specification.</li> <li>Password: This authenticates the user using the password provided and the access token is provided. For more information on this grant type, see the Resource Owner Password Credentials Grant specification.</li> <li>Client Credential: This is the grant type for the client key and client secret. If these two items are provided correctly by the service provider, the access token is sent. For more information on this grant type, see the Client Credentials specification.</li> <li>Refresh Token: This will enable the user to obtain an access token by using the refresh token once the originally provided access token is used up. For more information on this grant type, see the Refresh Token specification.</li> <li>SAML: This uses SAML assertion to obtain the access token. For more information on this grant type, see the SAML2 Bearer specification.</li> <li>IWA-NTLM : This is similar to the password grant type, but it is specific to Microsoft Windows users.</li> <li>urn:ietf:params:oauth: grant-type:jwt-bearer: This is a custom grant type. It uses a JWT token to obtain the access token. For more information about this grant type, see the JWT specification.</li> </ul> </li> <li>oauthConsumerKey <code>[String]</code> This the consumer key of the OAuth application. If you keep this empty, Identity server will generate a consumer key.</li> <li>oauthConsumerSecret <code>[String]</code> This the consumer secret of the OAuth application. If you keep this empty, Identity server will generate a consumer secret.</li> <li>pkceMandatory <code>[Boolean]</code> This is set to <code>true</code> if you are using the <code>Code</code> grant type. PKCE is a recommended security measure used to mitigate a code interception attack. For more information, see Mitigate Authorization Code Interception Attacks.</li> <li>pkceSupportPlain <code>[Boolean]</code> This is set <code>true</code> if you are using PKCE.</li> <li>refreshTokenExpiryTime <code>[String]</code> This specifies the time the refresh token needs to expire. The value needs to be specified in milliseconds. </li> <li>userAccessTokenExpiryTime <code>[String]</code> This specifies the time the user's access token needs to expire. The value needs to be specified in milliseconds.</li> </ul> Request See below Response See below"},{"location":"apis/service-provider-configurations-used-with-apis/#sample-request-and-response_1","title":"Sample request and response","text":"Click to view request and response formats<p>``` xml tab=\"Request Format\"  ? ? ? ? ? ? ? ? ? ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://dto.oauth.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:registerOAuthApplicationData&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:application&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:OAuthVersion&gt;OAuth-2.0&lt;/xsd1:OAuthVersion&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationAccessTokenExpiryTime&gt;3600&lt;/xsd1:applicationAccessTokenExpiryTime&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationName&gt;playground&lt;/xsd1:applicationName&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:callbackUrl&gt;http://localhost:8080/playground2/oauth2client&lt;/xsd1:callbackUrl&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:grantTypes&gt;refresh_token urn:ietf:params:oauth:grant-type:saml2-bearer implicit password client_credentials iwa:ntlm authorization_code&lt;/xsd1:grantTypes&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:pkceMandatory&gt;false&lt;/xsd1:pkceMandatory&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:pkceSupportPlain&gt;true&lt;/xsd1:pkceSupportPlain&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:refreshTokenExpiryTime&gt;84000&lt;/xsd1:refreshTokenExpiryTime&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:userAccessTokenExpiryTime&gt;3600&lt;/xsd1:userAccessTokenExpiryTime&gt;\n         &lt;/xsd:application&gt;\n      &lt;/xsd:registerOAuthApplicationData&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p><code>xml tab=\"Response Format\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;    &lt;soapenv:Body&gt;       &lt;ns:registerOAuthApplicationDataResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;          &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;       &lt;/ns:registerOAuthApplicationDataResponse&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p> <p>Note</p> <p>Once OAuth application is created, you can retrieve the\u00a0OAuth consumer key and OAuth consumer secret by calling <code>getOAuthApplicationDataByAppName</code> service method.</p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;xsd:getOAuthApplicationDataByAppName&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:appName&gt;playground&lt;/xsd:appName&gt;\n&lt;/xsd:getOAuthApplicationDataByAppName&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre> <p>Once the OAuth configuration is added, the OAuth consumer key/secret details need to\u00a0be included in inbound authentication configurations of the service provider. </p> Parameter Type Description inboundAuthKey String OAuth Client Key inboundAuthType String For OAuth, authentication type should be \u2018oauth2' Property Name Property Value oauthConsumerSecret OAuth client secret <pre><code>&lt;xsd1:inboundAuthenticationConfig&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthKey&gt;li6JMbjW6WDMKTWsRnGcjp5zcGhi&lt;/xsd1:inboundAuthKey&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthType&gt;oauth2&lt;/xsd1:inboundAuthType&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd1:properties&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:name&gt;oauthConsumerSecret&lt;/xsd1:name&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:value&gt;NMB3EAfxh4YvSTqbb3iMkongAHjW&lt;/xsd1:value&gt;\n&lt;/xsd1:properties&gt;\n&lt;/xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;/xsd1:inboundAuthenticationConfig&gt;\n</code></pre>"},{"location":"apis/service-provider-configurations-used-with-apis/#configure-ws-trust-security-token-service","title":"Configure WS-Trust security token service","text":"Description To configure a service provider with the WS-Trust Security Token Service (STS), add a trusted service through the STSAdminService exposed at <code>https://:/services/STSAdminService?wsdl. Replace the tag <code>: with the relevant host and port number, for example, https://localhost:9443/services/STSAdminService?wsdl. Permissions /admin/manage/identity Input Parameters <ul> <li>serviceAddress <code>[String]</code> This specifies the endpoint address or the trusted relying party.</li> <li>certAlias <code>[String]</code> This specifies the certificate alias of the imported public certificate of the trusted relying party.</li> </ul> Request See below Response See below"},{"location":"apis/service-provider-configurations-used-with-apis/#sample-request-and-response_2","title":"Sample request and response","text":"Click to view request and response formats<p>``` xml tab=\"Request Format\"  ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://service.sts.security.carbon.wso2.org\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ser:addTrustedService&gt;\n         &lt;!--Optional:--&gt;\n         &lt;ser:serviceAddress&gt;https://www.example.com/sts&lt;/ser:serviceAddress&gt;\n         &lt;!--Optional:--&gt;\n         &lt;ser:certAlias&gt;wso2carbon&lt;/ser:certAlias&gt;\n      &lt;/ser:addTrustedService&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p><code>xml tab=\"Response Format\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;    &lt;soapenv:Body&gt;       &lt;ns:addTrustedServiceResponse xmlns:ns=\"http://service.sts.security.carbon.wso2.org\"&gt;          &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;       &lt;/ns:addTrustedServiceResponse&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p> <p>Note</p> <p>Once\u00a0the trusted service is registered, the service address needs to be included in inbound authentication configurations of the service provider.       </p> Parameter Type Description inboundAuthKey String The endpoint address of the trusted relying party. inboundAuthType String For WS-Trust Security Token Service, the authentication type should be \u2018wstrust\u2019 <pre><code>&lt;xsd1:inboundAuthenticationConfig&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthKey&gt;https://www.example.com/sts&lt;/xsd1:inboundAuthKey&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthType&gt;wstrust&lt;/xsd1:inboundAuthType&gt;\n&lt;/xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;/xsd1:inboundAuthenticationConfig&gt;\n</code></pre>"},{"location":"apis/service-provider-configurations-used-with-apis/#configure-ws-federation-passive","title":"Configure WS-Federation (passive)","text":"Description To configure a service provider with the WS-Federation (passive), you only need to include following parameters in inbound authentication configurations of the service provider. Input Parameters <ul> <li>inboundAuthKey <code>[String]</code> This is the passive STS realm identifier.</li> <li>inboundAuthType <code>[String]</code> For passive STS configuration, the authentication type should be <code>passivests</code>.</li> <li>passiveSTSWReply <code>[String]</code> This is the web app URL, e.g., <code>https://localhost:8080/PassiveSTSSampleApp/index.jsp</code>.</li> </ul> <pre><code>&lt;xsd1:inboundAuthenticationConfig&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthKey&gt;TestSP&lt;/xsd1:inboundAuthKey&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;\n&lt;xsd1:properties&gt;\n&lt;xsd1:name&gt;passiveSTSWReply&lt;/name&gt;\n&lt;xsd1:value&gt;{url}&lt;/value&gt;\n&lt;/xsd1:properties&gt;\n&lt;/xsd1:inboundAuthenticationRequestConfigs&gt;\n&lt;/xsd1:inboundAuthenticationConfig&gt;\n</code></pre> <p>Related topics</p> <ul> <li>For\u00a0key APIs relevant for developers, see Using APIs. </li> <li>For a list of the operations that can be performed with different permission levels, see Permissions Required to Invoke Admin Services. </li> <li>The following article guides you through\u00a0transforming existing SOAP-based services into REST services in WSO2 Identity Server:     Exposing WSO2 Identity Server Admin Services the REST Way.</li> </ul>"},{"location":"apis/session-mgt-rest-api/","title":"Session management API","text":""},{"location":"apis/tenant-management-rest-api/","title":"Tenant management API","text":""},{"location":"apis/totp-rest-api/","title":"TOTP API","text":""},{"location":"apis/use-apis/","title":"Use APIs","text":"<p>The following sections list out key APIs relevant for Developers: </p> <ul> <li>Call Admin Services</li> <li>REST APIs</li> <li>SOAP APIs </li> </ul>"},{"location":"apis/use-the-account-recovery-rest-apis/","title":"Account recovery API","text":""},{"location":"apis/use-the-authentication-rest-apis/","title":"Authentication API","text":""},{"location":"apis/use-the-configuration-management-rest-apis/","title":"Configuration Management REST APIs","text":"<p>The configuration management APIs in WSO2 Identity Server manages configurations that are required to be stored as tenant-wise key-pair values. These stored configuration values are not changed frequently and are consumed at runtime. Some examples of such values are:</p> <ul> <li>SMTP configurations of an email server</li> <li>A server configuration where analytics data is published</li> </ul> <p>Configurations for the above scenarios can be stored using the configuration management APIs. A detailed example is included in the try-it-out section below.</p>"},{"location":"apis/use-the-configuration-management-rest-apis/#prerequisites","title":"Prerequisites","text":"<p>The configuration management API sometimes uses dynamic query build for its database CRUD operations; especially in the <code>/search</code> endpoint (for more information, see Retrieving Tenant Resources Based on Search Parameters). However, a query that is too long can lead to errors. To prevent this, an upper limit to the dynamic query size is applied by default (the default value is the maximum packet size for MySQL 5.7 in bytes). To configure this upper limit value, do the following:</p> <p>Add the following configuration to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[configuration.store.query_length]\nmax=\"4194304\"\n</code></pre>"},{"location":"apis/use-the-configuration-management-rest-apis/#configuration-management-architecture","title":"Configuration management architecture","text":"<p>The configuration manager exposed with the configuration management REST APIs manages configurations as Resources.</p> <p></p> <p>What is a resource?</p> <ul> <li>A Resource belongs to a Resource Type and a tenant domain.</li> <li>Each Resource has a set of Attributes.</li> <li>Each Attribute has a key and a respective value.</li> </ul> <p>The section below describes each concept in more detail.</p>"},{"location":"apis/use-the-configuration-management-rest-apis/#configuration-management-concepts","title":"Configuration management concepts","text":"<ul> <li> <p>Resource -      A resource contains one or more attributes which will be used to     store resource data. A resource is created in the tenant domain and     it belongs to the authenticated user who creates the resource. When     creating the resource, it is mandatory to assign a resource type.  </p> </li> <li> <p>Resource Type -     A resource type is shared among the tenants. Each resource created     in a tenant domain, belongs to an already created resource type.     Deleting a resource type will also delete its resources.</p> <p>Note</p> <p>Since the resource type is shared among tenants, deleting a resource type can affect resources in different tenant domains.</p> </li> <li> <p>Attribute -     An attribute is the element that stores the data for its resource.     \u00a0An attribute is created for an already existing resource. It     contains a key and a value.</p> </li> <li> <p>File -     A file with configurations that are required for identity server functionality.     Eg: Publisher Files, Email Templates.  </p> </li> </ul>"},{"location":"apis/use-the-configuration-management-rest-apis/#apis-and-supported-operations","title":"APIs and supported operations","text":"<p>Note</p> <p>For information on the REST APIs, supported operations and sample requests/responses, see Configuration Management APIs Documentation.</p> <p>For information on how to use the /search endpoint of the Configuration Management APIs, see Retrieving Tenant Resources Based on Search Parameters.</p>"},{"location":"apis/use-the-configuration-management-rest-apis/#try-it-out","title":"Try it out","text":"<p>This section guides you through a sample scenario using the WSO2 IS configuration manager.</p> <p>Sample scenario - Consider a scenario where you need to store the SMTP email configurations. Assume that the simple SMTP configuration has only one property.</p> Property Value Description From \"admin@wso2.com\" This email address is used by the WSO2 IS instance to send an email. <p>To store the SMTP email configuration, follow the steps given below:</p> <ol> <li>Access the WSO2 Identity Server Management Console (<code>https://&lt;IS_HOST&gt;:&lt;PORT&gt;/carbon</code>) You can sign in using     <code>admin</code> as the username and password.</li> <li> <p>Open a terminal window and run the following commands.</p> <ol> <li> <p>Create a resource type named \"email\" using the Create resource     type     API.</p> <p>Sample request <pre><code>curl -k -X POST https://localhost:9443/api/identity/config-mgt/v1.0/resource-type -H \"accept: application/json\" -H 'Content-Type: application/json' -H 'Authorization: Basic YWRtaW46YWRtaW4=' -d '{\"name\": \"e-mail\", \"description\": \"This is the resource type for email resources.\"}'\n</code></pre></p> <p>Sample response <pre><code>{\n    \"name\":\"e-mail\",\n    \"id\":\"0adbdfad-5f4f-4c11-af75-9ed3e93647b9\",\n    \"description\":\"This is the resource type for email resources.\"\n}\n</code></pre></p> </li> <li> <p>Create a resource named \"smtp\" in the super tenant domain under     the \"email\" resource type using the Create     resource     API.\u00a0 Note that the \"from\" attribute is defined within this     sample request. Therefore when the new resource is created a new     attribute named \"from\" will be created under the \"smtp\" resource     as well.</p> <p>Sample request <pre><code>curl -k -X POST https://localhost:9443/api/identity/config-mgt/v1.0/resource/e-mail -H \"accept: application/json\" -H 'Content-Type: application/json' -H 'Authorization: Basic YWRtaW46YWRtaW4=' -d '{\"name\": \"smtp\",\"attributes\": [{\"key\": \"from\",\"value\": \"admin@wso2.com\"}]}'\n</code></pre></p> <p>Sample response <pre><code>{\n    \"resourceId\":\"6e45c661-7671-4ee9-805c-8d3d1df46cbc\",\n    \"tenantDomain\":\"carbon.super\",\"\n    resourceName\":\"smtp\",\n    \"resourceType\":\"e-mail\",\n    \"lastModified\":\"2019-02-07T09:30:12.963Z\",\n    \"created\":\"2019-02-07T09:30:12.963Z\",\n    \"attributes\":[{\"key\":\"from\",\"value\":\"admin@wso2.com\"}],\n    \"files\":[]\n}\n</code></pre></p> </li> <li> <p>Create a file named <code>EmailPublisher</code> under resource <code>smtp</code> and resource type <code>email</code> by using following curl      command.</p> <p>Sample request <pre><code>curl -X POST \"https://localhost:9443/t/{tenant-domain}/api/identity/config-mgt/v1.0/resource/Publisher/EmailPublisher/file\" -H 'Authorization: Basic YWRtaW46YWRtaW4='  -H \"accept: application/json\" -H \"Content-Type: multipart/form-data\" -F \"resourceFile=@EmailPublisher.xml;type=text/xml\" -F \"file-name=EmailPublisher\"\n</code></pre></p> <p>Sample response</p> Header Value location <code>https://localhost:9443/api/identity/config-mgt/v1.0/resource/email/smtp/file/dbcf0a4f-9b27-4b5b-8d16-330752d0d905</code> </li> </ol> </li> <li> <p>Next, assume that you now need to add an additional attribute named     \"to\" to the \"smtp\" email configuration. To do this, create a new     attribute named \"to\" using the Create     attribute     API by running the following command on the terminal.</p> <p>Sample request <pre><code>curl -k -X POST https://localhost:9443/api/identity/config-mgt/v1.0/resource/e-mail/smtp -H \"accept: application/json\" -H 'Content-Type: application/json' -H 'Authorization: Basic YWRtaW46YWRtaW4=' -d '{\"key\": \"to\", \"value\": \"abc.com\"}'\n</code></pre></p> <p>Sample response <pre><code>{\"key\":\"to\",\"value\":\"abc.com\"}\n</code></pre></p> </li> <li> <p>Once these steps are completed, the WSO2 IS instance calls the     configuration manager to retrieve the SMTP email address using the     following path:</p> <pre><code>(Resource Type = \u2018e-mail\u2019) -&gt; (Resource = \u2018smtp\u2019) -&gt;  (Attribute key = \u2018from\u2019)\n</code></pre> <p>Run the following curl command to retrieve the 'smtp' resource that you created above.</p> <p>Sample request <pre><code>curl -k -X GET https://localhost:9443/api/identity/config-mgt/v1.0/resource/e-mail/smtp -H \"accept: application/json\" -H 'Content-Type: application/json' -H 'Authorization: Basic YWRtaW46YWRtaW4='\n</code></pre></p> <p>Sample response <pre><code>{\n    \"resourceId\":\"6e45c661-7671-4ee9-805c-8d3d1df46cbc\",\n    \"tenantDomain\":\"carbon.super\",\n    \"resourceName\":\"smtp\",\n    \"resourceType\":\"e-mail\",\n    \"lastModified\":\"2019-02-07T09:31:21.564Z\",\n    \"created\":\"2019-02-07T09:30:12.963Z\",\n    \"attributes\":[\n        {\"key\":\"from\",\"value\":\"admin@wso2.com\"},\n        {\"key\":\"to\",\"value\":\"abc.com\"}\n    ],\n    \"files\":[]\n}\n</code></pre></p> </li> </ol>"},{"location":"apis/use-the-consent-management-rest-apis/","title":"Consent Management REST APIs","text":"<p>The consent management APIs in WSO2 Identity Server collect and manage end user consents when user information is shared with external parties. The following sections guide you through the consent management concepts and the APIs you can invoke.</p>"},{"location":"apis/use-the-consent-management-rest-apis/#definitions-for-consent-management","title":"Definitions for consent management","text":"<p>This section defines and explains commonly used terms in consent management.</p> <ul> <li>Personally Identifiable Information (PII): Any information that can be used to identify the PII Principal to whom the information relates to.</li> <li>PII Principal: The natural person to whom the personally identifiable information (PII) relates to.</li> <li>Consent: A Personally identifiable information (PII) Principal's freely     given, specific and informed agreement to the processing of their     PII.</li> <li>Purpose: The business, operational or regulatory requirement for the     collection, use and/or disclosure of a PII Principal's data. In     other words, it is the reason personal information is collected by     the entity.</li> <li>Consent Receipt: A record of a consent interaction (or consent record summary     linked to the record of consent) provided by a PII Principal to a     PII Controller to collect, use and disclose the PII Principal's PII     in accordance to an agreed set of terms.</li> <li> <p>PII Controller: A private stakeholder that determines the purposes and means for     processing personally identifiable information (PII) other  than the     natural persons who use data for personal purposes. Add the following configuration to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <p>Info</p> <p>For more information on how to extend or customize this, see Extension points.</p> <pre><code>[authentication.pii_controller]\nname = \"Kim\"\ncontact = \"Kim\"\nemail = \"kim@abc.com\"\nphone = \"01433444333\"\non_behalf = \"false\"\nurl = \"https://sample.piicontroller.url\"\ncountry =\"USA\"\nlocality = \"Mountain View\"\nregion = \"CA\"\npo_box  = \"233\"\npostal_code  = \"94043\"\nstreet_address = \"1600\"\n</code></pre> Property Type Required/Optional Description <code>name</code> string Required Name of the first PII controller who collects the data. <code>contact</code> string Required Contact name of the PII controller. <code>email</code> string Required Contact email address of the PII Controller. The direct email to contact the PII Controller regarding the consent or privacy contract. <code>phone</code> string Required Contact phone number of the PII Controller. The business phone number to contact the PII Controller regarding the consent. <code>on_behalf</code> boolean Optional A PII Processor acting on behalf of a PII Controller or PII Processor. <code>url</code> string Optional A URL for contacting the PII Controller. <code>country</code> string Required Country of the PII controller. <code>locality</code> string Required Locality of the PII controller. <code>region</code> string Required Region of the PII controller. <code>po_box</code> string Required Post office box number of the PII controller. <code>postal_code</code> string Required Postal code of the PII controller. <code>street_address</code> string Required Street address of the PII controller. </li> <li> <p>PII Processor: A private stakeholder that processes personally identifiable     information (PII) on behalf of and in accordance with the     instructions of a PII controller.</p> </li> </ul>"},{"location":"apis/use-the-consent-management-rest-apis/#extension-points","title":"Extension points","text":"<p>You can customize the REST APIs using the following extension points:</p> <ul> <li>PIIController connector extension -     A sample implementation that demonstrates\u00a0registering a PII     controller and providing PII controller information for consent     receipts.  </li> <li>Interceptor extension -     A sample implementation that demonstrates registering a consent     management interceptor and intercepting consent management related     operations.</li> </ul>"},{"location":"apis/use-the-identity-provider-api/","title":"Identity Provider SOAP API","text":"<p>An Identity Provider (IdP) is responsible for issuing identification information for users looking to interact with a system.\u00a0We can add and configure such identity providers and link them with the Identity Server through the Identity Provider Management Service API.</p> <p>This is exposed as a web service and the following operations are available.</p> <p>The service contract of this admin service can be found at <code>https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/services/IdentityProviderMgtService?wsdl</code>. Replace the tag <code>&lt;IS_HOST</code>:<code>&lt;IS_PORT&gt;</code> with the relevant host and port number, for example: <code>https://localhost:9443/services/IdentityProviderMgtService?wsdl</code></p> <p>Note</p> <p>Prior to calling any of these admin services, you need to make them discoverable. See Call Admin Services for information on how to do this.</p>"},{"location":"apis/use-the-identity-provider-api/#addidp","title":"addIdp","text":"<p>To add an Identity Provider, you should add some basic Identity Provider information and configuring claims, roles, federated authenticators, just-in-time provisioning information, and outbound provisioning connectors as seen in the request below.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>Request:</p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mgt=\"http://mgt.idp.carbon.wso2.org\" xmlns:xsd=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;mgt:addIdP&gt;\n&lt;!--Optional:--&gt;\n&lt;mgt:identityProvider&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:alias&gt;?&lt;/xsd:alias&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:certificate&gt;?&lt;/xsd:certificate&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:claimConfig&gt;\n...\n            &lt;/xsd:claimConfig&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:defaultAuthenticatorConfig&gt;\n...\n            &lt;/xsd:defaultAuthenticatorConfig&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:defaultProvisioningConnectorConfig&gt;\n...\n            &lt;/xsd:defaultProvisioningConnectorConfig&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:displayName&gt;?&lt;/xsd:displayName&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:enable&gt;?&lt;/xsd:enable&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd:federatedAuthenticatorConfigs&gt;\n...\n            &lt;/xsd:federatedAuthenticatorConfigs&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:federationHub&gt;?&lt;/xsd:federationHub&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:homeRealmId&gt;?&lt;/xsd:homeRealmId&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:identityProviderDescription&gt;?&lt;/xsd:identityProviderDescription&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:identityProviderName&gt;?&lt;/xsd:identityProviderName&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd:idpProperties&gt;\n...\n            &lt;/xsd:idpProperties&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:justInTimeProvisioningConfig&gt;\n...\n            &lt;/xsd:justInTimeProvisioningConfig&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:permissionAndRoleConfig&gt;\n...\n            &lt;/xsd:permissionAndRoleConfig&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:primary&gt;?&lt;/xsd:primary&gt;\n&lt;!--Zero or more repetitions:--&gt;\n&lt;xsd:provisioningConnectorConfigs&gt;\n...\n            &lt;/xsd:provisioningConnectorConfigs&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:provisioningRole&gt;?&lt;/xsd:provisioningRole&gt;\n&lt;/mgt:identityProvider&gt;\n&lt;/mgt:addIdP&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre> Sample Request with Minimum Configuration<pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mgt=\"http://mgt.idp.carbon.wso2.org\" xmlns:xsd=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n&lt;mgt:addIdP&gt;\n&lt;!--Optional:--&gt;\n&lt;mgt:identityProvider&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:alias&gt;https://localhost:9443/oauth2/token&lt;/xsd:alias&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:certificate&gt;MIICBTCCAW6gAwIBAgIEHJSJhDANBgkqhkiG9w0BAQQFADBHMREwDwYDVQQDEwh3\nc28yLmNvbTENMAsGA1UECxMETm9uZTEUMBIGA1UEChMLTm9uZSBMPU5vbmUxDTAL\nBgNVBAYTBE5vbmUwHhcNMTcxMDA5MDM0ODI1WhcNMjcxMTA2MDM0ODI1WjBHMREw\nDwYDVQQDEwh3c28yLmNvbTENMAsGA1UECxMETm9uZTEUMBIGA1UEChMLTm9uZSBM\nPU5vbmUxDTALBgNVBAYTBE5vbmUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGB\nAJ3FIXGHktsreizN3khqeFw/F8xb/V2lon3QyNfpwgieTFZovqrBG0SpaYT/v5yR\nGBSIcPfl6BaZ7seVjYWgXUPscNNu0v0z4Nyx5UOkUIRE6uQ0F7szHVuPgEmNDvFJ\nMLryopQ32x9ctG4N7sHruWGfiCs5ksdqz1aidViOS1bNAgMBAAEwDQYJKoZIhvcN\nAQEEBQADgYEAe0FdpjY9JLISt/ctSwwilV0zF6q8ID6NRcxAGNtCCFcunVirdxGK\neyyFZDWGwkh2URpKHXdjU320zLS37MdB8wJR02DRGtx1/Dq5Xs+XWJqrr3F46iRK\n4hPfXwFXkRWBiIku/Ne9z2TW0Kh7z2z6rfzgZ2KazJwzmJ95bGrqc0g=&lt;/xsd:certificate&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:displayName&gt;My IdP&lt;/xsd:displayName&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:enable&gt;true&lt;/xsd:enable&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:federationHub&gt;false&lt;/xsd:federationHub&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:homeRealmId&gt;MyIdP&lt;/xsd:homeRealmId&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:identityProviderDescription&gt;Sample IdP&lt;/xsd:identityProviderDescription&gt;\n&lt;!--Optional:--&gt;\n&lt;xsd:identityProviderName&gt;MyIdP&lt;/xsd:identityProviderName&gt;\n&lt;/mgt:identityProvider&gt;\n&lt;/mgt:addIdP&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre> <p>Response:</p> <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n&lt;soapenv:Body&gt;\n&lt;ns:addIdPResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\"&gt;\n&lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n&lt;/ns:addIdPResponse&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre> <p>In addition to the basic details for the IdP, it is also possible to include claims configuration, role configuration, federated authenticators, just-in-time provisioning information, and outbound provisioning connectors details to the addIdp request body. Properties related to those configurations are listed below. However, even without these details, an IdP can be added and updated later on.</p>"},{"location":"apis/use-the-identity-provider-api/#claim-configuration","title":"Claim configuration","text":"<pre><code>&lt;xsd:claimConfig&gt;\n&lt;localClaimDialect&gt;true&lt;/localClaimDialect&gt;\n&lt;roleClaimURI&gt;http://wso2.org/claims/role&lt;/roleClaimURI&gt;\n&lt;userClaimURI&gt;http://wso2.org/claims/organization&lt;/userClaimURI&gt;\n&lt;/xsd:claimConfig&gt;\n</code></pre> <p>When configuring advance claims to the custom claim dialect, the following parameters can be added to the <code>&lt;claimMappings&gt;</code> element.\u00a0A sample <code>&lt;claimMappings&gt;</code> element\u00a0configured with advance claim configurations is similar to the following: <pre><code>&lt;xsd:claimConfig&gt;\n&lt;localClaimDialect&gt;true&lt;/localClaimDialect&gt;\n&lt;roleClaimURI&gt;http://wso2.org/claims/role&lt;/roleClaimURI&gt;\n&lt;userClaimURI&gt;http://wso2.org/claims/organization&lt;/userClaimURI&gt;\n&lt;claimMappings&gt;\n&lt;defaultValue&gt;defaultVal&lt;/defaultValue&gt;\n&lt;localClaim&gt;\n&lt;claimUri&gt;http://wso2.org/claims/title&lt;/claimUri&gt;\n&lt;/localClaim&gt;\n&lt;remoteClaim&gt;\n&lt;claimUri&gt;Role&lt;/claimUri&gt;\n&lt;/remoteClaim&gt;\n&lt;requested&gt;true&lt;/requested&gt;\n&lt;/claimMappings&gt;\n&lt;claimMappings&gt;\n&lt;defaultValue&gt;defaultVal&lt;/defaultValue&gt;\n&lt;localClaim&gt;\n&lt;claimUri&gt;http://wso2.org/claims/emailaddress&lt;/claimUri&gt;\n&lt;/localClaim&gt;\n&lt;remoteClaim&gt;\n&lt;claimUri&gt;EmailID&lt;/claimUri&gt;\n&lt;/remoteClaim&gt;\n&lt;requested&gt;true&lt;/requested&gt;\n&lt;/claimMappings&gt;\n&lt;/xsd:claimConfig&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#just-in-time-jit-provisioning","title":"Just-in-time (JIT) provisioning","text":"<p>With just-in-time provisioning, you can create users on the fly without having to create user accounts in advance. To configure JIT provisioning, add the following snippet\u00a0to the <code>addIdp</code> request body.</p> <pre><code>&lt;xsd:justInTimeProvisioningConfig&gt;\n&lt;xsd:provisioningEnabled&gt;true&lt;/xsd:provisioningEnabled&gt;\n&lt;xsd:provisioningUserStore&gt;PRIMARY&lt;/xsd:provisioningUserStore&gt;\n&lt;xsd:userStoreClaimUri&gt;?&lt;/xsd:userStoreClaimUri&gt;\n&lt;/xsd:justInTimeProvisioningConfig&gt;\n</code></pre>"},{"location":"apis/use-the-identity-provider-api/#role-configuration","title":"Role configuration","text":"<pre><code>&lt;permissionAndRoleConfig xmlns=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n&lt;idpRoles&gt;IDPRole&lt;/idpRoles&gt;\n&lt;roleMappings&gt;\n&lt;localRole&gt;\n&lt;localRoleName&gt;Role1&lt;/localRoleName&gt;\n&lt;/localRole&gt;\n&lt;remoteRole&gt;IDPRole&lt;/remoteRole&gt;\n&lt;/roleMappings&gt;\n&lt;/permissionAndRoleConfig&gt;\n</code></pre> <p>Federated authenticator</p> <p>The <code>&lt;federatedAuthenticatorConfigs&gt;</code> parameter can be used to configure zero or more federated authenticators. For sample federated authenticator configurations, see Federated Authenticator Configuration Samples.</p> <p>Outbound provisioning connectors</p> <p>The <code>&lt;provisioningConnectorConfigs&gt;</code> parameter can be used\u00a0to configure zero or more outbound provisioning connectors. For sample outbound provisioning connector configurations, see Outbound Provisioning Connectors Configuration Samples.</p> <p>Parameter</p> <p>Type</p> <p>Description</p> <p>enabled</p> <p>boolean</p> <p>Set 'true' to enable the provisioning connector.</p> <p>name</p> <p>String</p> <p>Name of the connector.</p> <p>provisioningProperties</p> <p>Property</p> <p>Zero or more properties related to the connector.</p> <p>Attributes of the property are similar to properties mentioned in Federated Authenticators Configuration.</p> <p>Contains: confidential, defaultValue, description, displayName, name, required, type value.</p>"},{"location":"apis/use-the-identity-provider-api/#deleteidp","title":"deleteIdp","text":"<p>To delete an identity provider, call the <code>deleteIdp()</code> operation. The IdP name should be included in the request.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>``` xml tab=\"Request\"  TestIDP <pre><code>``` xml tab=\"Response\"\nNone\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#getallfederatedauthenticators","title":"getAllFederatedAuthenticators","text":"<p>The <code>getAllFederatedAuthenticators()</code> operation returns a detailed list of available federated authenticators in WSO2 Identity Server.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>``` xml tab=\"Request\"  <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getAllFederatedAuthenticatorsResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\" xmlns:ax2392=\"http://model.common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2390=\"http://common.application.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return xsi:type=\"ax2392:FederatedAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:displayName&gt;facebook&lt;/ax2392:displayName&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;FacebookAuthenticator&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:FederatedAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:displayName&gt;openidconnect&lt;/ax2392:displayName&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;OpenIDConnectAuthenticator&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:FederatedAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:displayName&gt;microsoft(hotmail, msn, live)&lt;/ax2392:displayName&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;MicrosoftWindowsLive&lt;/ax2392:name&gt;\n            &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n               &lt;ax2392:confidential&gt;true&lt;/ax2392:confidential&gt;\n               &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n               &lt;ax2392:description&gt;Enter Microsoft Live client secret value&lt;/ax2392:description&gt;\n               &lt;ax2392:displayName&gt;Client Secret&lt;/ax2392:displayName&gt;\n               &lt;ax2392:name&gt;ClientSecret&lt;/ax2392:name&gt;\n               &lt;ax2392:required&gt;true&lt;/ax2392:required&gt;\n               &lt;ax2392:type xsi:nil=\"true\"/&gt;\n               &lt;ax2392:value xsi:nil=\"true\"/&gt;\n            &lt;/ax2392:properties&gt;\n            &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n               &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n               &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n               &lt;ax2392:description&gt;Enter value corresponding to callback url.&lt;/ax2392:description&gt;\n               &lt;ax2392:displayName&gt;Callback Url&lt;/ax2392:displayName&gt;\n               &lt;ax2392:name&gt;windows-live-callback-url&lt;/ax2392:name&gt;\n               &lt;ax2392:required&gt;true&lt;/ax2392:required&gt;\n               &lt;ax2392:type xsi:nil=\"true\"/&gt;\n               &lt;ax2392:value xsi:nil=\"true\"/&gt;\n            &lt;/ax2392:properties&gt;\n            &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n               &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n               &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n               &lt;ax2392:description&gt;Enter Microsoft Live client identifier value&lt;/ax2392:description&gt;\n               &lt;ax2392:displayName&gt;Client Id&lt;/ax2392:displayName&gt;\n               &lt;ax2392:name&gt;ClientId&lt;/ax2392:name&gt;\n               &lt;ax2392:required&gt;true&lt;/ax2392:required&gt;\n               &lt;ax2392:type xsi:nil=\"true\"/&gt;\n               &lt;ax2392:value xsi:nil=\"true\"/&gt;\n            &lt;/ax2392:properties&gt;\n            &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:FederatedAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:displayName&gt;openid&lt;/ax2392:displayName&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;OpenIDAuthenticator&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:FederatedAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:displayName&gt;google&lt;/ax2392:displayName&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;GoogleOpenIDAuthenticator&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:FederatedAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:displayName&gt;yahoo&lt;/ax2392:displayName&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;YahooOpenIDAuthenticator&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:FederatedAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:displayName&gt;samlsso&lt;/ax2392:displayName&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;SAMLSSOAuthenticator&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getAllFederatedAuthenticatorsResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#getallidps","title":"getAllIdPs","text":"<p>Use the <code>getAlIdPs()</code> operation to obtain a detailed list of Identity Providers registered in WSO2 Identity Server.</p> <p>Permission Level: <code>/permission/admin/login</code></p> <p>``` xml tab=\"Request\"  <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getAllIdPsResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\" xmlns:ax2392=\"http://model.common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2390=\"http://common.application.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return xsi:type=\"ax2392:IdentityProvider\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:alias xsi:nil=\"true\"/&gt;\n            &lt;ax2392:certificate xsi:nil=\"true\"/&gt;\n            &lt;ax2392:claimConfig xsi:type=\"ax2392:ClaimConfig\"&gt;\n               &lt;ax2392:alwaysSendMappedLocalSubjectId&gt;false&lt;/ax2392:alwaysSendMappedLocalSubjectId&gt;\n               &lt;ax2392:localClaimDialect&gt;true&lt;/ax2392:localClaimDialect&gt;\n               &lt;ax2392:roleClaimURI xsi:nil=\"true\"/&gt;\n               &lt;ax2392:userClaimURI xsi:nil=\"true\"/&gt;\n            &lt;/ax2392:claimConfig&gt;\n            &lt;ax2392:defaultAuthenticatorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:defaultProvisioningConnectorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n            &lt;ax2392:enable&gt;true&lt;/ax2392:enable&gt;\n            &lt;ax2392:federationHub&gt;false&lt;/ax2392:federationHub&gt;\n            &lt;ax2392:homeRealmId xsi:nil=\"true\"/&gt;\n            &lt;ax2392:identityProviderDescription xsi:nil=\"true\"/&gt;\n            &lt;ax2392:identityProviderName&gt;TestIdP&lt;/ax2392:identityProviderName&gt;\n            &lt;ax2392:justInTimeProvisioningConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:permissionAndRoleConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:primary&gt;false&lt;/ax2392:primary&gt;\n            &lt;ax2392:provisioningRole xsi:nil=\"true\"/&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getAllIdPsResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#getalllocalclaimuris","title":"getAllLocalClaimURIs","text":"<p>Use the <code>getAlILocalClaimUris()</code> operation to obtain a list of local claim URIs available in IS.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>``` xml tab=\"Request\"  <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getAllLocalClaimUrisResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\" xmlns:ax2392=\"http://model.common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2390=\"http://common.application.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/otherphone&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/dob&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/primaryChallengeQuestion&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/role&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/challengeQuestion1&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/telephone&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/mobile&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/country&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/challengeQuestionUris&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/postalcode&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/challengeQuestion2&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/identity/accountLocked&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/nickname&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/streetaddress&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/url&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/givenname&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/emailaddress&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/oneTimePassword&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/region&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/gender&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/fullname&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/passwordTimestamp&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/title&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/locality&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/stateorprovince&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/im&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/organization&lt;/ns:return&gt;\n         &lt;ns:return&gt;http://wso2.org/claims/lastname&lt;/ns:return&gt;\n      &lt;/ns:getAllLocalClaimUrisResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#getallprovisioningconnectors","title":"getAllProvisioningConnectors","text":"<p>Use the <code>getAlIProvisioningConnectors()</code> operation to obtain a detailed list of Outbound Provisioning Connectors available in WSO2 Identity Server.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>``` xml tab=\"Request\"  <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getAllProvisioningConnectorsResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\" xmlns:ax2392=\"http://model.common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2390=\"http://common.application.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return xsi:type=\"ax2392:ProvisioningConnectorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:blocking&gt;false&lt;/ax2392:blocking&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;googleapps&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;false&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:ProvisioningConnectorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:blocking&gt;false&lt;/ax2392:blocking&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;salesforce&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;false&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:ProvisioningConnectorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:blocking&gt;false&lt;/ax2392:blocking&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;scim&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;false&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n         &lt;ns:return xsi:type=\"ax2392:ProvisioningConnectorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:blocking&gt;false&lt;/ax2392:blocking&gt;\n            &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n            &lt;ax2392:name&gt;spml&lt;/ax2392:name&gt;\n            &lt;ax2392:valid&gt;false&lt;/ax2392:valid&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getAllProvisioningConnectorsResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#getenabledallidps","title":"getEnabledAllIdPs","text":"<p>Use the <code>getEnabledAllIdPs()</code> operation to obtain a detailed list of IdPs which are enabled in WSO2 Identity Server.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>```xml tab=\"Request\"  <pre><code>```xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getEnabledAllIdPsResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\" xmlns:ax2392=\"http://model.common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2390=\"http://common.application.identity.carbon.wso2.org/xsd\"&gt;\n         &lt;ns:return xsi:type=\"ax2392:IdentityProvider\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:alias xsi:nil=\"true\"/&gt;\n            &lt;ax2392:certificate xsi:nil=\"true\"/&gt;\n            &lt;ax2392:claimConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:defaultAuthenticatorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:defaultProvisioningConnectorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n            &lt;ax2392:enable&gt;true&lt;/ax2392:enable&gt;\n            &lt;ax2392:federationHub&gt;false&lt;/ax2392:federationHub&gt;\n            &lt;ax2392:homeRealmId xsi:nil=\"true\"/&gt;\n            &lt;ax2392:identityProviderDescription xsi:nil=\"true\"/&gt;\n            &lt;ax2392:identityProviderName&gt;TestIdP&lt;/ax2392:identityProviderName&gt;\n            &lt;ax2392:justInTimeProvisioningConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:permissionAndRoleConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:primary&gt;false&lt;/ax2392:primary&gt;\n            &lt;ax2392:provisioningRole xsi:nil=\"true\"/&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getEnabledAllIdPsResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#getidpbyname","title":"getIdPByName","text":"<p>Use the <code>getIdPByName</code> operation to retrieve an identity provider by including the IdP name in the request.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>``` xml tab=\"Request\"  TestIdP <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getIdPByNameResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\"&gt;\n         &lt;ns:return xsi:type=\"ax2392:IdentityProvider\" xmlns:ax2392=\"http://model.common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2390=\"http://common.application.identity.carbon.wso2.org/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:alias&gt;https://localhost:9443/oauth2/token/&lt;/ax2392:alias&gt;\n            &lt;ax2392:certificate xsi:nil=\"true\"/&gt;\n            &lt;ax2392:claimConfig xsi:type=\"ax2392:ClaimConfig\"&gt;\n               &lt;ax2392:alwaysSendMappedLocalSubjectId&gt;false&lt;/ax2392:alwaysSendMappedLocalSubjectId&gt;\n               &lt;ax2392:localClaimDialect&gt;true&lt;/ax2392:localClaimDialect&gt;\n               &lt;ax2392:roleClaimURI&gt;http://wso2.org/claims/role&lt;/ax2392:roleClaimURI&gt;\n               &lt;ax2392:userClaimURI&gt;http://wso2.org/claims/organization&lt;/ax2392:userClaimURI&gt;\n            &lt;/ax2392:claimConfig&gt;\n            &lt;ax2392:defaultAuthenticatorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:defaultProvisioningConnectorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n            &lt;ax2392:enable&gt;true&lt;/ax2392:enable&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName&gt;yahoo&lt;/ax2392:displayName&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;YahooOpenIDAuthenticator&lt;/ax2392:name&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName&gt;openid&lt;/ax2392:displayName&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;OpenIDAuthenticator&lt;/ax2392:name&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;commonAuthQueryParams&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value xsi:nil=\"true\"/&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;IsUserIdInClaims&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;false&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;RealmId&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value xsi:nil=\"true\"/&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;OpenIdUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/openid/&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName&gt;passivests&lt;/ax2392:displayName&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;PassiveSTSAuthenticator&lt;/ax2392:name&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;commonAuthQueryParams&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value xsi:nil=\"true\"/&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;IsUserIdInClaims&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;false&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;RealmId&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value xsi:nil=\"true\"/&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;PassiveSTSUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/passivests/&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName&gt;google&lt;/ax2392:displayName&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;GoogleOpenIDAuthenticator&lt;/ax2392:name&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName&gt;microsoft(hotmail,&lt;/ax2392:displayName&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;MicrosoftWindowsLive&lt;/ax2392:name&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;ClientSecret&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value/&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;windows-live-callback-url&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value/&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;ClientId&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value/&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federationHub&gt;false&lt;/ax2392:federationHub&gt;\n            &lt;ax2392:homeRealmId xsi:nil=\"true\"/&gt;\n            &lt;ax2392:identityProviderDescription xsi:nil=\"true\"/&gt;\n            &lt;ax2392:identityProviderName&gt;TestIdP&lt;/ax2392:identityProviderName&gt;\n            &lt;ax2392:justInTimeProvisioningConfig xsi:type=\"ax2392:JustInTimeProvisioningConfig\"&gt;\n               &lt;ax2392:provisioningEnabled&gt;false&lt;/ax2392:provisioningEnabled&gt;\n               &lt;ax2392:provisioningUserStore xsi:nil=\"true\"/&gt;\n               &lt;ax2392:userStoreClaimUri xsi:nil=\"true\"/&gt;\n            &lt;/ax2392:justInTimeProvisioningConfig&gt;\n            &lt;ax2392:permissionAndRoleConfig xsi:type=\"ax2392:PermissionsAndRoleConfig\"&gt;\n               &lt;ax2392:idpRoles&gt;IDPRole1&lt;/ax2392:idpRoles&gt;\n               &lt;ax2392:roleMappings xsi:type=\"ax2392:RoleMapping\"&gt;\n                  &lt;ax2392:localRole xsi:type=\"ax2392:LocalRole\"&gt;\n                     &lt;ax2392:localRoleName&gt;Role1&lt;/ax2392:localRoleName&gt;\n                     &lt;ax2392:userStoreId xsi:nil=\"true\"/&gt;\n                  &lt;/ax2392:localRole&gt;\n                  &lt;ax2392:remoteRole&gt;IDPRole1&lt;/ax2392:remoteRole&gt;\n               &lt;/ax2392:roleMappings&gt;\n            &lt;/ax2392:permissionAndRoleConfig&gt;\n            &lt;ax2392:primary&gt;false&lt;/ax2392:primary&gt;\n            &lt;ax2392:provisioningRole&gt;IDPRole1, IDPRole2&lt;/ax2392:provisioningRole&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getIdPByNameResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#getresidentidp","title":"getResidentIdP","text":"<p>Permission Level: <code>/permission/admin/manage</code></p> <p>``` xml tab=\"Request\"  <pre><code>``` xml tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:getResidentIdPResponse xmlns:ns=\"http://mgt.idp.carbon.wso2.org\"&gt;\n         &lt;ns:return xsi:type=\"ax2392:IdentityProvider\" xmlns:ax2392=\"http://model.common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2390=\"http://common.application.identity.carbon.wso2.org/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;ax2392:alias xsi:nil=\"true\"/&gt;\n            &lt;ax2392:certificate&gt;MIICNTCCAZ6gAwIBAgIES343gjANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFjAUBgNVBAcMDU1vdW50YWluIFZpZXcxDTALBgNVBAoMBFdTTzIxEjAQBgNVBAMMCWxvY2FsaG9zdDAeFw0xMDAyMTkwNzAyMjZaFw0zNTAyMTMwNzAyMjZaMFUxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzENMAsGA1UECgwEV1NPMjESMBAGA1UEAwwJbG9jYWxob3N0MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCUp/oV1vWc8/TkQSiAvTousMzOM4asB2iltr2QKozni5aVFu818MpOLZIr8LMnTzWllJvvaA5RAAdpbECb+48FjbBe0hseUdN5HpwvnH/DW8ZccGvk53I6Orq7hLCv1ZHtuOCokghz/ATrhyPq+QktMfXnRS4HrKGJTzxaCcU7OQIDAQABoxIwEDAOBgNVHQ8BAf8EBAMCBPAwDQYJKoZIhvcNAQEFBQADgYEAW5wPR7cr1LAdq+IrR44iQlRG5ITCZXY9hI0PygLP2rHANh+PYfTmxbuOnykNGyhM6FjFLbW2uZHQTY1jMrPprjOrmyK5sjJRO4d1DeGHT/YnIjs9JogRKv4XHECwLtIVdAbIdWHEtVZJyMSktcyysFcvuhPQK8Qc/E/Wq8uHSCo=&lt;/ax2392:certificate&gt;\n            &lt;ax2392:claimConfig xsi:type=\"ax2392:ClaimConfig\"&gt;\n               &lt;ax2392:alwaysSendMappedLocalSubjectId&gt;false&lt;/ax2392:alwaysSendMappedLocalSubjectId&gt;\n               &lt;ax2392:localClaimDialect&gt;false&lt;/ax2392:localClaimDialect&gt;\n               &lt;ax2392:roleClaimURI xsi:nil=\"true\"/&gt;\n               &lt;ax2392:userClaimURI xsi:nil=\"true\"/&gt;\n            &lt;/ax2392:claimConfig&gt;\n            &lt;ax2392:defaultAuthenticatorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:defaultProvisioningConnectorConfig xsi:nil=\"true\"/&gt;\n            &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n            &lt;ax2392:enable&gt;true&lt;/ax2392:enable&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;openidconnect&lt;/ax2392:name&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;OAUTH2TokenUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/oauth2/token&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;UserInfoUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/oauth2/userinfo&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;OAuth2AuthzUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/oauth2/authz&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n               &lt;ax2392:enabled&gt;true&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;samlsso&lt;/ax2392:name&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;LogoutReqUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/samlsso&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;IdPEntityId&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;localhost&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;SSOUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/samlsso&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;openid&lt;/ax2392:name&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;OpenIdUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/openid&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federatedAuthenticatorConfigs xsi:type=\"ax2392:FederatedAuthenticatorConfig\"&gt;\n               &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;passivests&lt;/ax2392:name&gt;\n               &lt;ax2392:properties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;PassiveSTSUrl&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/services/wso2carbon-sts&lt;/ax2392:value&gt;\n               &lt;/ax2392:properties&gt;\n               &lt;ax2392:valid&gt;true&lt;/ax2392:valid&gt;\n            &lt;/ax2392:federatedAuthenticatorConfigs&gt;\n            &lt;ax2392:federationHub&gt;false&lt;/ax2392:federationHub&gt;\n            &lt;ax2392:homeRealmId&gt;localhost&lt;/ax2392:homeRealmId&gt;\n            &lt;ax2392:identityProviderDescription xsi:nil=\"true\"/&gt;\n            &lt;ax2392:identityProviderName&gt;LOCAL&lt;/ax2392:identityProviderName&gt;\n            &lt;ax2392:justInTimeProvisioningConfig xsi:type=\"ax2392:JustInTimeProvisioningConfig\"&gt;\n               &lt;ax2392:provisioningEnabled&gt;false&lt;/ax2392:provisioningEnabled&gt;\n               &lt;ax2392:provisioningUserStore xsi:nil=\"true\"/&gt;\n               &lt;ax2392:userStoreClaimUri xsi:nil=\"true\"/&gt;\n            &lt;/ax2392:justInTimeProvisioningConfig&gt;\n            &lt;ax2392:permissionAndRoleConfig xsi:type=\"ax2392:PermissionsAndRoleConfig\"/&gt;\n            &lt;ax2392:primary&gt;false&lt;/ax2392:primary&gt;\n            &lt;ax2392:provisioningConnectorConfigs xsi:type=\"ax2392:ProvisioningConnectorConfig\"&gt;\n               &lt;ax2392:blocking&gt;false&lt;/ax2392:blocking&gt;\n               &lt;ax2392:enabled&gt;false&lt;/ax2392:enabled&gt;\n               &lt;ax2392:name&gt;scim&lt;/ax2392:name&gt;\n               &lt;ax2392:provisioningProperties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;scimUserEndpoint&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/wso2/scim/Users&lt;/ax2392:value&gt;\n               &lt;/ax2392:provisioningProperties&gt;\n               &lt;ax2392:provisioningProperties xsi:type=\"ax2392:Property\"&gt;\n                  &lt;ax2392:confidential&gt;false&lt;/ax2392:confidential&gt;\n                  &lt;ax2392:defaultValue xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:description xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:displayName xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:name&gt;scimGroupEndpoint&lt;/ax2392:name&gt;\n                  &lt;ax2392:required&gt;false&lt;/ax2392:required&gt;\n                  &lt;ax2392:type xsi:nil=\"true\"/&gt;\n                  &lt;ax2392:value&gt;https://localhost:9443/wso2/scim/Groups&lt;/ax2392:value&gt;\n               &lt;/ax2392:provisioningProperties&gt;\n               &lt;ax2392:valid&gt;false&lt;/ax2392:valid&gt;\n            &lt;/ax2392:provisioningConnectorConfigs&gt;\n            &lt;ax2392:provisioningRole xsi:nil=\"true\"/&gt;\n         &lt;/ns:return&gt;\n      &lt;/ns:getResidentIdPResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#updateidp","title":"updateIdP","text":"<p>The <code>updateIdP()</code> operation can be used to update an existing identity provider. The <code>&lt;oldIdPName&gt;</code> element is mandatory in the updateIdP request. All the other parameters in updateIdP request is similar to the parameters in addIdP request.</p> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>``` xml tab=\"Request\"  ? ? ? ... ... ...              ? ? ... ? ? ? ? ... ... ? ... ? <pre><code>``` xml tab=\"Response\"\nNone\n</code></pre></p>"},{"location":"apis/use-the-identity-provider-api/#updateresidentidp","title":"updateResidentIdP","text":"<p>The <code>updateResidentIdP()</code> operation can be used to alter certain parameters of the resident identity provider. These parameters are:</p> <ul> <li>Home Realm Identifier</li> <li>SAML2 Web SSO Configuration Entity ID</li> </ul> <p>Permission Level: <code>/permission/admin/manage</code></p> <p>The following request show how to update the above parameters.</p> <p>``` xml tab=\"Request\"  ? ? ... ... ...             <pre><code>        &lt;xsd:displayName&gt;?&lt;/xsd:displayName&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:enable&gt;?&lt;/xsd:enable&gt;\n        &lt;!--Zero or more repetitions:--&gt;\n        &lt;xsd:federatedAuthenticatorConfigs&gt;...&lt;/xsd:federatedAuthenticatorConfigs&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:federationHub&gt;?&lt;/xsd:federationHub&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:homeRealmId&gt;?&lt;/xsd:homeRealmId&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:identityProviderDescription&gt;?&lt;/xsd:identityProviderDescription&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:identityProviderName&gt;?&lt;/xsd:identityProviderName&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:justInTimeProvisioningConfig&gt;...&lt;/xsd:justInTimeProvisioningConfig&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:permissionAndRoleConfig&gt;...&lt;/xsd:permissionAndRoleConfig&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:primary&gt;?&lt;/xsd:primary&gt;\n        &lt;!--Zero or more repetitions:--&gt;\n        &lt;xsd:provisioningConnectorConfigs&gt;...&lt;/xsd:provisioningConnectorConfigs&gt;\n        &lt;!--Optional:--&gt;\n        &lt;xsd:provisioningRole&gt;?&lt;/xsd:provisioningRole&gt;\n     &lt;/mgt:identityProvider&gt;\n  &lt;/mgt:updateResidentIdP&gt;\n</code></pre> <p> <code></code> xml tab=\"Response\" None ```</p>"},{"location":"apis/use-the-openid-connect-dynamic-client-registration-rest-apis/","title":"OIDC Dynamic Client Registration API","text":""},{"location":"apis/use-the-self-sign-up-rest-apis/","title":"Self Sign-Up API","text":""},{"location":"apis/use-the-service-provider-api/","title":"Service Provider SOAP API","text":"<p>This section guides you through using the Identity Application Management API and its operations.</p>"},{"location":"apis/use-the-service-provider-api/#about-identity-application-management-api","title":"About Identity Application Management API","text":"<p>The Identity Application Management API enables creating a service provider, updating it, deleting it, and the different operations you can use to work with it. \u00a0</p>"},{"location":"apis/use-the-service-provider-api/#api-operations","title":"API operations","text":"<p>Before you begin</p> <ul> <li> <p>The service contract of this admin service can be found at the following URL:</p> <p>``` tab=\"Format\" https://:/services/IdentityApplicationManagementService?wsdl <pre><code>``` tab=\"Example\"    \nhttps://localhost:9443/services/IdentityApplicationManagementService?wsdl\n</code></pre> <li> <p>To enable the admin service, follow the instructions given in Call Admin Services.  </p> </li> <p>About creating applications</p> <p>Creating an application via the Identity Application Management Service is a two-step process.</p> <ol> <li> <p>Create a service provider for the given application name and the description using the <code>createApplication</code> operation. It returns a <code>200 OK</code> response.  </p> <p>The service provider's application ID is required to use the <code>updateApplication</code> operation. You can include an application ID for the new service provider within the same SOAP request when calling the <code>createApplication</code> operation. If you do not include an application ID in the request, you can retrieve the auto-generated application ID value by calling the <code>getApplication</code> service method with the application name.</p> </li> <li> <p>Update the service provider with other configurations using the <code>updateApplication</code> operation. The service provider's application ID is required for this request.</p> </li> </ol>"},{"location":"apis/use-the-service-provider-api/#createapplication","title":"createApplication","text":"Description <p>Creating an application via the Identity Application Management Service is a two-step process.</p> <ol> <li>Create a service provider for the given application name and the description using the <code>createApplication</code> operation. It returns a <code>200 OK</code> response. The service provider's application ID is required to use the <code>updateApplication</code> operation. You can include an application ID for the new service provider within the same SOAP request when calling the <code>createApplication</code> operation. If you do not include an application ID in the request, you can retrieve the auto-generated application ID value by calling the <code>getApplication</code> service method with the application name.</li> <li>Update the service provider with other configurations using the <code>updateApplication</code> operation. The service provider's application ID is required for this request.</li> </ol> Permission Level /permission/admin/manage Input Parameters <ul> <li><code>applicationID</code> <code>[Integer]</code>: This uniquely identifies the service provider application. This is an optional parameter, if you have not included this value in the SOAP request, WSO2 Identity Server assigns a unique application Id.</li> <li> <p><code>applicationName </code> <code>[String]</code>: This is the desired service provider name.</p> <p> <p>Note</p> <p>Adding a service provider creates an internal application role for the given application name in the following format: <code>Internal/. Therefore, creating another service provider for the same application name is not possible and will throw an <code>IdentityApplicationManagementException</code>. <li><code>description</code> <code>[String]</code>: This is a brief text description of the service provider.</li> Request See below Response See below Click to view the request and response<p>``` xml tab=\"Request Format\"  ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:createApplication&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:serviceProvider&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n         &lt;/xsd:serviceProvider&gt;\n      &lt;/xsd:createApplication&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p><code>xml tab=\"Response\" &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;    &lt;soapenv:Body&gt;       &lt;ns:createApplicationResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;          &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;       &lt;/ns:createApplicationResponse&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;</code></p>"},{"location":"apis/use-the-service-provider-api/#updateapplication","title":"updateApplication","text":"Description <p>After creating the service provider, it can be configured and updated with the following configurations:</p> <ul> <li>Claim configuration</li> <li>Role/Permission configuration</li> <li>Inbound and Outbound authentication configuration</li> <li>Inbound and Outbound provisioning configuration</li> <li>Get application ID: The service provider is updated based on its application Id. If you have not provided an application ID when creating the service provider, you can use the getApplication operation to retrieve the application Id value from WSO2 Identity Server.</li> <li> <p>Get certificate reference ID: The certificate of the service provider is updated based on its certificate reference Id. Use the getApplication operation to retrieve the certificate reference Id value from WSO2 Identity Server and include it in the <code>updateApplication</code> SOAP request to update the same certificate. The code block below shows the certificate reference ID value included in the <code>getApplication</code> response.</p> <p> <pre><code>&lt;ax2140:spProperties xsi:type=\"ax2140:ServiceProviderProperty\"&gt;\n          &lt;ax2140:displayName&gt;CERTIFICATE&lt;/ax2140:displayName&gt;\n          &lt;ax2140:name&gt;CERTIFICATE&lt;/ax2140:name&gt;\n          &lt;ax2140:value&gt;2&lt;/ax2140:value&gt;\n        &lt;/ax2140:spProperties&gt;</code></pre> </p> <p>To update the same certificate, include the certificate reference ID you retrieved in the <code>updateApplication</code> SOAP request as follows.</p> <p> <pre><code>&lt;xsd1:spProperties&gt;\n      &lt;!--Optional:--&gt;\n      &lt;xsd1:displayName&gt;CERTIFICATE&lt;/xsd1:displayName&gt;\n      &lt;!--Optional:--&gt;\n      &lt;xsd1:name&gt;CERTIFICATE&lt;/xsd1:name&gt;\n      &lt;!--Optional:--&gt;\n      &lt;xsd1:value&gt;2&lt;/xsd1:value&gt;\n    &lt;/xsd1:spProperties&gt;</code></pre> </p> Permission Level /permission/admin/manage Input Parameters <p>Service provider level parameters:</p> <ul> <li><code>applicationID</code> <code>[Integer]</code>: This is the Application ID of the service provider. This is mandatory when updating the SP.</li> <li><code>applicationName</code> <code>[String]</code>: This is the Service provider name.</li> <li><code>claimConfig</code> <code>[ClaimConfig]</code>: These are Claims that are related configurations.</li> <li><code>description</code> <code>[String]</code>: This is the description of the SP.</li> <li><code>inboundAuthenticationConfig</code> <code>[InboundAuthenticationConfig]</code>: This is an inbound authentication related configurations.</li> <li><code>inboundProvisioningConfig</code> <code>[InboundProvisioningConfig]</code>: This is an inbound provisioning related configurations.</li> <li><code>localAndOutBoundAuthenticationConfig</code> <code>[LocalAndOutboundAuthenticationConfig]</code>: This is for local and outbound authentication.</li> <li><code>outboundProvisioningConfig</code> <code>[OutboundProvisioningConfig]</code>: This is for outbound provisioning related configurations.</li> <li><code>owner</code> <code>[User]</code>: This is the application owner.</li> <li><code>permissionAndRoleConfig</code> <code>[PermissionsAndRoleConfig]</code>: These are permission and role related configurations.</li> <li><code>requestPathAuthenticatorConfigs</code> <code>[RequestPathAuthenticatorConfig]</code>: These are request path authenticator related configurations.</li> <li><code>saasApp</code>: This is optional. This parameter allows you to determine whether the service provider is a SaaS application (<code>true</code>) or not (<code>false</code>).If no value is passed for this parameter, the service provider is marked as SaaS disabled by default. Thus, the web application is not shared among tenants so only users in the current tenant (the one you are logged in when creating the service provider) are allowed to log into the web application. Alternatively, if you enabled SaaS application, that means this web application is shared among tenants so users from any tenant are allowed to log into the web application.</li> </ul> Request See below Response See below Click to view request and response formats<p>``` xml tab=\"Request Format\"  ? ? ? ? ... ... ... ... ... ... ... ? CERTIFICATE CERTIFICATE 2 <pre><code>``` xml tab=\"For SAML\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:updateApplication&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:serviceProvider&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:claimConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n            &lt;/xsd1:claimConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundProvisioningConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n            &lt;/xsd1:inboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:authenticationStepForAttributes&gt;&lt;/xsd1:authenticationStepForAttributes&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:authenticationStepForSubject&gt;&lt;/xsd1:authenticationStepForSubject&gt;\n               &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:outboundProvisioningConfig&gt;\n               &lt;!--Zero or more repetitions:--&gt;\n               &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n            &lt;/xsd1:outboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n         &lt;/xsd:serviceProvider&gt;\n      &lt;/xsd:updateApplication&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p>``` xml tab=\"For OAuth\"  5 SampleApplication false true oauth application CLIENT_ID oauth2 false false oauthConsumerSecret false CLIENT_SECRET false PRIMARY false default http://wso2.org/claims/fullname false <pre><code>``` java tab=\"Response\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ns:updateApplicationResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n         &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n      &lt;/ns:updateApplicationResponse&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Claims <p>The <code>&lt;claimConfig&gt;</code> element \u00a0defines all claim configuration level inputs. This element can have zero or more <code>&lt;claimMappings&gt;</code> elements that specify claims referred by this service provider. A <code>&lt;claimMappings&gt;</code> element includes two elements; <code>&lt;localClaim&gt;</code> and <code>&lt;remoteClaim&gt;</code> where each is represented by a claimId and a claimURI. \u00a0The <code>&lt;localClaim&gt;</code> denotes a standard claim which is local to the WSO2 Identity Server and the <code>&lt;remoteClaim&gt;</code> denotes some remote claim value that maps to the local claim under the same claim mapping. Remote claims are specifically used with identity federation scenarios to map claims received from the federated Identity Provider to local claims.   </p> <p>Parameter</p> <p>Type</p> <p>Description</p> <p>alwaysSendMappedLocalSubjectId</p> <p>Boolean</p> This configuration specifies whether the subject attribute that returns to the service provider is taken from the locally mapped user or from the federated user. <p>localClaimDialect</p> <p>Boolean</p> <p>This is a boolean that specifies whether this service provider is using the local claim dialect or a custom claim dialect.</p> <p>true - using the local claim dialect</p> <p>false - using the custom claim dialect</p> <p>If it is using the custom claim dialect, the local claim should map with a remote claim in each claim mapping otherwise, both the local claim URI and the remote claim URI should be the same (i.e. a URI defined under a dialect local to the WSO2 Identity Server).</p> <p>claimMappings.localClaim.claimId</p> <p>claimMappings.remoteClaim.claimId</p> <p>Integer</p> <p>Integer value that identifies the claim. Applies to both <code>                 localClaim                </code> and <code>                 remoteClaim                </code> elements.</p> <p>claimMappings.localClaim.claimUri</p> <p>claimMappings.remoteClaim.claimUri</p> <p>String</p> <p>URI specific to the claim. It applies to both <code>                 localClaim                </code> and <code>                 remoteClaim                </code> elements. When defined under <code>                 localClaim                </code>, this is a URI defined under the dialect specific to the claim. If defined under the <code>                 remoteClaim                </code>, this is a remote claim URI which maps with the local claim defined under the same parent claimMappings element. If only the local claim dialect is used, the same claimURI in localClaim should be used with claimURI in <code>                 remoteClaim                </code>, since there are no explicit local to remote claim mappings.</p> <p>claimMappings.requested</p> <p>Boolean</p> <p>This is a boolean that marks a mapped claim as a requested claim which ensures that the service provider definitely sends this claim to the Identity Server.</p> <p>true - mark as requested</p> <p>false - mark as not requested</p> <p>roleClaimURI</p> <p>String</p> <p>Role claim URI is used to identify the claim that equates to the role of the user. This is linked to the permissions that you can apply for specific user roles. This is a remote claim URI mapped via claim mappings.</p> <p>userClaimURI</p> <p>String</p> <p>User claim URI is also referred to as Subject claim URI in the management console. It is the claim that is used to uniquely identiy a user. For example, mapping the claims to the users email or ID attribute.</p> Click to view request<p>``` xml tab=\"Request Format\"  ? ? ? ? ? ? ? ? ? ? ? ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:updateApplication&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:serviceProvider&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:claimConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n               &lt;!--Zero or more repetitions:--&gt;\n               &lt;xsd1:claimMappings&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:localClaim&gt;\n                     &lt;!--Optional:--&gt;\n                     &lt;xsd1:claimUri&gt;http://wso2.org/claims/givenname&lt;/xsd1:claimUri&gt;\n                  &lt;/xsd1:localClaim&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:mandatory&gt;true&lt;/xsd1:mandatory&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:remoteClaim&gt;\n                     &lt;!--Optional:--&gt;\n                     &lt;xsd1:claimUri&gt;name&lt;/xsd1:claimUri&gt;\n                  &lt;/xsd1:remoteClaim&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:requested&gt;true&lt;/xsd1:requested&gt;\n               &lt;/xsd1:claimMappings&gt;\n               &lt;xsd1:claimMappings&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:localClaim&gt;\n                     &lt;!--Optional:--&gt;\n                     &lt;xsd1:claimUri&gt;http://wso2.org/claims/role&lt;/xsd1:claimUri&gt;\n                  &lt;/xsd1:localClaim&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:mandatory&gt;true&lt;/xsd1:mandatory&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:remoteClaim&gt;\n                     &lt;!--Optional:--&gt;\n                     &lt;xsd1:claimUri&gt;role&lt;/xsd1:claimUri&gt;\n                  &lt;/xsd1:remoteClaim&gt;\n                  &lt;!--Optional:--&gt;\n                  &lt;xsd1:requested&gt;true&lt;/xsd1:requested&gt;\n               &lt;/xsd1:claimMappings&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:localClaimDialect&gt;false&lt;/xsd1:localClaimDialect&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:roleClaimURI&gt;role&lt;/xsd1:roleClaimURI&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:userClaimURI&gt;user&lt;/xsd1:userClaimURI&gt;\n            &lt;/xsd1:claimConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundProvisioningConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n            &lt;/xsd1:inboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:authenticationStepForAttributes&gt;&lt;/xsd1:authenticationStepForAttributes&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:authenticationStepForSubject&gt;&lt;/xsd1:authenticationStepForSubject&gt;\n               &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:subjectClaimUri&gt;name&lt;/xsd1:subjectClaimUri&gt;\n            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:outboundProvisioningConfig&gt;\n               &lt;!--Zero or more repetitions:--&gt;\n               &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n            &lt;/xsd1:outboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n         &lt;/xsd:serviceProvider&gt;\n      &lt;/xsd:updateApplication&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Roles and permissions <p>The <code>&lt;permissionAndRoleConfig&gt;</code> element defines all permission and role configuration level inputs. Under this element, specific permissions can be specified via zero or more <code>&lt;permissions&gt;</code> blocks.</p> Parameter Type Description permissions.value String A string value that defines a service provider specific permission. This permission is added under <code>/permission/applications/&lt;service-provider-name&gt;/&lt;given-permission-name&gt;</code> and is available when adding roles. <p>Once the permissions are specified, the roles specific to the service provider can be mapped to local roles defined in the Identity Server via zero or more <code>&lt;roleMappings&gt;</code> blocks. A <code>&lt;roleMappings&gt;</code> block includes a <code>&lt;localRole&gt;</code> element and a <code>&lt;remoteRole&gt;</code> element. The <code>&lt;localRole&gt;</code> represents a local role defined in the identity server and the <code>&lt;remoteRole&gt;</code> represents the service provider specific role that you want to map to the local role.   </p> <p>Parameter</p> <p>Type</p> <p>Description</p> <p>localRole.localRoleName</p> <p>String</p> <p>This is the name of the local role which is defined in Identity Server.</p> <p>localRole.userStoreId</p> <p>String</p> <p>This is the key of the userstore used by Identity Server. </p> <p>remoteRole</p> <p>String</p> <p>Role specific to the service provider</p> Click to view request<p>``` xml tab=\"Request Format\"  ? ? ? ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:updateApplication&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:serviceProvider&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:claimConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n                &lt;/xsd1:claimConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundProvisioningConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n                &lt;/xsd1:inboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForAttributes&gt;&lt;/xsd1:authenticationStepForAttributes&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForSubject&gt;&lt;/xsd1:authenticationStepForSubject&gt;\n                    &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n                &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:outboundProvisioningConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n                &lt;/xsd1:outboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:permissionAndRoleConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:permissions&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:value&gt;/sample/permission&lt;/xsd1:value&gt;\n                    &lt;/xsd1:permissions&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:roleMappings&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:localRole&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:localRoleName&gt;tester&lt;/xsd1:localRoleName&gt;\n                        &lt;/xsd1:localRole&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:remoteRole&gt;app-tester&lt;/xsd1:remoteRole&gt;\n                    &lt;/xsd1:roleMappings&gt;\n                &lt;/xsd1:permissionAndRoleConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n            &lt;/xsd:serviceProvider&gt;\n        &lt;/xsd:updateApplication&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Inbound authentication <p>Inbound Authentication Configuration defines the protocol that the service provider and the Identity Server uses to communicate. You can add a common set of configurations for the service provider for any protocol\u00a0such as SAML 2.0, OpenID Connect, OAuth 2.0, and WS-Federation (passive) that is\u00a0supported by WSO2 Identity Server.</p> <p>The <code>&lt;inboundAuthenticationConfig&gt;</code> element consists of zero or more <code>&lt;inboundAuthenticationRequestConfigs\\&gt;</code> elements.\u00a0The <code>&lt;inboundAuthenticationRequestConfigs\\&gt;</code>\u00a0element has following elements (Note: Only the required element are mentioned).</p> <p>Important</p> <p>You need to create inbound authenticator configurations accessing the appropriate services (Eg: OAuthAdminService, IdentitySAMLSSOConfigService, etc.), before updating service provider with inbound authenticator configurations.</p> Parameter Type Description inboundAuthKey String Specify an identifier for the service provider as the authentication key. inboundAuthType String Specify the authentication type. ex: samlsso, oauth2, wstrust, passivests, properties Property Inbound authentication request properties properties.name String Specify the property name properties.value String Specify the property value Click to view request<p>``` xml tab=\"Request Format\"  ? ? ? ? ? ? ? ? ? ? ? ? ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:updateApplication&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:serviceProvider&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:claimConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n                &lt;/xsd1:claimConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundAuthenticationConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:inboundAuthenticationRequestConfigs&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:inboundAuthKey&gt;li6JMbjW6WDMKTWsRnGcjp5zcGhi&lt;/xsd1:inboundAuthKey&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:inboundAuthType&gt;oauth2&lt;/xsd1:inboundAuthType&gt;\n                        &lt;!--Zero or more repetitions:--&gt;\n                        &lt;xsd1:properties&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:name&gt;oauthConsumerSecret&lt;/xsd1:name&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:value&gt;NMB3EAfxh4YvSTqbb3iMkongAHjW&lt;/xsd1:value&gt;\n                        &lt;/xsd1:properties&gt;\n                    &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;\n                    &lt;xsd1:inboundAuthenticationRequestConfigs&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:inboundAuthKey&gt;travelocity.com&lt;/xsd1:inboundAuthKey&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;\n                        &lt;!--Zero or more repetitions:--&gt;\n                        &lt;xsd1:properties&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:value&gt;202240762&lt;/xsd1:value&gt;\n                        &lt;/xsd1:properties&gt;\n                    &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;\n                &lt;/xsd1:inboundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundProvisioningConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n                &lt;/xsd1:inboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForAttributes&gt;&lt;/xsd1:authenticationStepForAttributes&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForSubject&gt;&lt;/xsd1:authenticationStepForSubject&gt;\n                    &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n                &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:outboundProvisioningConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n                &lt;/xsd1:outboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n            &lt;/xsd:serviceProvider&gt;\n        &lt;/xsd:updateApplication&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Inbound provisioning <p>The inbound provisioning of the service provider can be configured.   </p> Parameter Type Description provisioningEnabled Boolean Specify whether inbound provisioning is enabled provisioningUserStore String User store domain name Click to view request<p>``` xml tab=\"Reuest Format\"  ? ? ? <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:updateApplication&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:serviceProvider&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:claimConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n            &lt;/xsd1:claimConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundProvisioningConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningEnabled&gt;true&lt;/xsd1:provisioningEnabled&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n            &lt;/xsd1:inboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:authenticationStepForAttributes&gt;&lt;/xsd1:authenticationStepForAttributes&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:authenticationStepForSubject&gt;&lt;/xsd1:authenticationStepForSubject&gt;\n               &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:outboundProvisioningConfig&gt;\n               &lt;!--Zero or more repetitions:--&gt;\n               &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n            &lt;/xsd1:outboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n         &lt;/xsd:serviceProvider&gt;\n      &lt;/xsd:updateApplication&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Local and outbound authentication <p>Parameter</p> <p>Type</p> <p>Description</p> <p>alwaysSendBackAuthenticatedListOfIdPs</p> <p>boolean</p> <p>Always send back the authenticated list of identity providers.</p> <p><code>true</code> - send authenticated list of IdPs</p> <p><code>false</code> - do not send authenticated list of IdPs</p> <p>authenticationSteps</p> <p>AuthenticationStep</p> <p>Zero or more authentication steps. This can be used for subjects and attributes as well.</p> <p>authenticationSteps.attributeStep</p> <p>boolean</p> <p>true - Use attributes from the current step</p> <p>authenticationSteps.federatedIdentityProviders</p> <p>IdentityProvider</p> <p>To configure federated IdPs, there should\u00a0be one or more registered IdPs with at least one federated authenticator enabled.</p> <p>With the request, it is necessary to include the IdP name and the federated authenticator name.</p> <p>The federated authenticator should be enabled in the IdP. If a federated authenticator is not mentioned, the default federated authenticator for the IdP will be used.</p> <p>authenticationSteps.localAuthenticatorConfigs</p> <p>LocalAuthenticatorConfigs</p> <p>Local authentication related configs for the authentication step. For example, you can specify whether to use a basic or an IWA authenticator.</p> <p>To use basic, localAuthenticatorConfigs.name should be 'BasicAuthenticator' while 'IWAAuthenticator' for iwa.</p> <p>authenticationSteps.stepOrder</p> <p>int</p> <p>Execution order of the step</p> <p>authenticationSteps.subjectStep</p> <p>boolean</p> <p>true - Use subject identifier from this step</p> <p>authenticationType</p> <p>String</p> <p>Depending on the requirement, the authentication type can be specified. The available types are <code>default</code>, <code>local</code>, and <code>federated</code></p> <p>Refer the sample requests below on each authentication type configuration.</p> <p>subjectClaimUri</p> <p>String</p> <p>Subject claim URI</p> Click to view default request<p>``` xml tab=\"Request format\"  false default http://wso2.org/claims/fullname <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\" xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;xsd:updateApplication&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:serviceProvider&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:claimConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n            &lt;/xsd1:claimConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:inboundProvisioningConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n            &lt;/xsd1:inboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n               &lt;!--Optional:--&gt;\n               &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:outboundProvisioningConfig&gt;\n               &lt;!--Zero or more repetitions:--&gt;\n               &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n            &lt;/xsd1:outboundProvisioningConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n         &lt;/xsd:serviceProvider&gt;\n      &lt;/xsd:updateApplication&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Click to view local request<p>As there is only one <code>&lt;authenticationSteps&gt;</code> element configured here, there is no need to set the <code>authenticationSteps.stepOrder</code>, <code>authenticationSteps.subjectStep, authenticationSteps.attributeStep</code> attributes.</p> <p>``` xml tab=\"Request Format\"  basic BasicAuthenticator true 1 false local http://wso2.org/claims/fullname <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:updateApplication&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:serviceProvider&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:claimConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n                &lt;/xsd1:claimConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundProvisioningConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n                &lt;/xsd1:inboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:authenticationSteps&gt;\n                        &lt;!--Zero or more repetitions:--&gt;\n                        &lt;xsd1:localAuthenticatorConfigs&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:displayName&gt;basic&lt;/xsd1:displayName&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:name&gt;BasicAuthenticator&lt;/xsd1:name&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;\n                            &lt;!--Zero or more repetitions:--&gt;\n                        &lt;/xsd1:localAuthenticatorConfigs&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:stepOrder&gt;1&lt;/xsd1:stepOrder&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:subjectStep&gt;false&lt;/xsd1:subjectStep&gt;\n                        &lt;!--Optional:--&gt;\n                    &lt;/xsd1:authenticationSteps&gt;\n                    &lt;xsd1:authenticationType&gt;local&lt;/xsd1:authenticationType&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n                &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:outboundProvisioningConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n                &lt;/xsd1:outboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n            &lt;/xsd:serviceProvider&gt;\n        &lt;/xsd:updateApplication&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Click to view federated request<p>As there is only one <code>&lt;authenticationSteps&gt;</code> configured here, there is no need to set the <code>authenticationSteps.stepOrder, authenticationSteps.subjectStep, authenticationSteps.attributeStep</code> attributes.</p> <p>``` xml tab=\"Request Format\"  samlsso SAMLSSOAuthenticator true TrustedIdP 1 false federated http://wso2.org/claims/fullname <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:updateApplication&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:serviceProvider&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:claimConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n                &lt;/xsd1:claimConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundProvisioningConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n                &lt;/xsd1:inboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:authenticationSteps&gt;\n                        &lt;!--Zero or more repetitions:--&gt;\n                        &lt;xsd1:federatedIdentityProviders&gt;\n                            &lt;!--Zero or more repetitions:--&gt;\n                            &lt;xsd1:federatedAuthenticatorConfigs&gt;\n                                &lt;!--Optional:--&gt;\n                                &lt;xsd1:displayName&gt;samlsso&lt;/xsd1:displayName&gt;\n                                &lt;!--Optional:--&gt;\n                                &lt;xsd1:name&gt;SAMLSSOAuthenticator&lt;/xsd1:name&gt;\n                                &lt;!--Optional:--&gt;\n                                &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;\n                            &lt;/xsd1:federatedAuthenticatorConfigs&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:identityProviderName&gt;TrustedIdP&lt;/xsd1:identityProviderName&gt;\n                        &lt;/xsd1:federatedIdentityProviders&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:stepOrder&gt;1&lt;/xsd1:stepOrder&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:subjectStep&gt;false&lt;/xsd1:subjectStep&gt;\n                        &lt;!--Optional:--&gt;\n                    &lt;/xsd1:authenticationSteps&gt;\n                    &lt;xsd1:authenticationType&gt;federated&lt;/xsd1:authenticationType&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n                &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:outboundProvisioningConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n                &lt;/xsd1:outboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n            &lt;/xsd:serviceProvider&gt;\n        &lt;/xsd:updateApplication&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> Click to view the advanced format<p>Multiple <code>&lt;authenticationSteps&gt;</code> can be configured here. Therefore, in each <code>&lt;authenticationSteps&gt;</code>, the stepOrder and whether the subject identifiers and attributes should be used from that particular step.   </p> <p>``` xml tab=\"Request Format\"  samlsso SAMLSSOAuthenticator true TrustedIdP basic BasicAuthenticator true 1 false flow http://wso2.org/cla <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:updateApplication&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:serviceProvider&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:claimConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n                &lt;/xsd1:claimConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundProvisioningConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n                &lt;/xsd1:inboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:authenticationSteps&gt;\n                        &lt;!--Zero or more repetitions:--&gt;\n                        &lt;xsd1:federatedIdentityProviders&gt;\n                            &lt;!--Zero or more repetitions:--&gt;\n                            &lt;xsd1:federatedAuthenticatorConfigs&gt;\n                                &lt;!--Optional:--&gt;\n                                &lt;xsd1:displayName&gt;samlsso&lt;/xsd1:displayName&gt;\n                                &lt;!--Optional:--&gt;\n                                &lt;xsd1:name&gt;SAMLSSOAuthenticator&lt;/xsd1:name&gt;\n                                &lt;!--Optional:--&gt;\n                                &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;\n                            &lt;/xsd1:federatedAuthenticatorConfigs&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:identityProviderName&gt;TrustedIdP&lt;/xsd1:identityProviderName&gt;\n                        &lt;/xsd1:federatedIdentityProviders&gt;\n                        &lt;!--Zero or more repetitions:--&gt;\n                        &lt;xsd1:localAuthenticatorConfigs&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:displayName&gt;basic&lt;/xsd1:displayName&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:name&gt;BasicAuthenticator&lt;/xsd1:name&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;\n                            &lt;!--Zero or more repetitions:--&gt;\n                        &lt;/xsd1:localAuthenticatorConfigs&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:stepOrder&gt;1&lt;/xsd1:stepOrder&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:subjectStep&gt;false&lt;/xsd1:subjectStep&gt;\n                        &lt;!--Optional:--&gt;\n                    &lt;/xsd1:authenticationSteps&gt;\n                    &lt;xsd1:authenticationType&gt;flow&lt;/xsd1:authenticationType&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n                &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:outboundProvisioningConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n                &lt;/xsd1:outboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n            &lt;/xsd:serviceProvider&gt;\n        &lt;/xsd:updateApplication&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;            \n</code></pre> Request path authenticator <p>Specify configurations related to zero or more request path authenticators.   </p> <p>Parameter</p> <p>Type</p> <p>Description</p> <p>displayName</p> <p>String</p> <p>The name that displays</p> <p>enabled</p> <p>Boolean</p> <p>true - enable</p> <p>false - disable</p> <p>name</p> <p>String</p> <p>OAuthRequestPathAuthenticator</p> <p>BasicAuthRequestPathAuthenticator</p> <p>valid</p> <p>boolean</p> <p>true - valid</p> <p>false - invalid</p> <p>properties</p> <p>Property</p> <p>List of properties in an array</p> Click to view request<p>``` xml tab=\"Request Format\"  BasicAuthRequestPathAuthenticator true OAuthRequestPathAuthenticator true <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:updateApplication&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:serviceProvider&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:claimConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;\n                &lt;/xsd1:claimConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundProvisioningConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n                &lt;/xsd1:inboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForAttributes&gt;&lt;/xsd1:authenticationStepForAttributes&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForSubject&gt;&lt;/xsd1:authenticationStepForSubject&gt;\n                    &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:subjectClaimUri&gt;http://wso2.org/claims/fullname&lt;/xsd1:subjectClaimUri&gt;\n                &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:outboundProvisioningConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n                &lt;/xsd1:outboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n                &lt;!--Zero or more repetitions:--&gt;\n                &lt;xsd1:requestPathAuthenticatorConfigs&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;\n                &lt;/xsd1:requestPathAuthenticatorConfigs&gt;\n                &lt;xsd1:requestPathAuthenticatorConfigs&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:name&gt;OAuthRequestPathAuthenticator&lt;/xsd1:name&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;\n                &lt;/xsd1:requestPathAuthenticatorConfigs&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n            &lt;/xsd:serviceProvider&gt;\n        &lt;/xsd:updateApplication&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;      \n</code></pre></p> Outbound provisioning <p>To configure the outbound provisioning of the service provider, use the following parameters.    </p> <p>Parameter</p> <p>Type</p> <p>Description</p> <p>provisionByRoleList</p> <p>String</p> <p>-</p> <p>provisioningIdentityProviders</p> <p>IdentityProvider</p> <p>To configure provisioning IdPs, there should be one or more registered IdPs, with at least one outbound provisioning connector enabled.</p> <p>Include the IdP name and provisioning connector name and specify whether to enable JiT provisioning with the request.</p> Click to view request<p>``` xml tab=\"Request Format\"  false false scim TrustedIdP false true <pre><code>``` xml tab=\"Sample Request\"\n&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsd=\"http://org.apache.axis2/xsd\"\n    xmlns:xsd1=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n    &lt;soapenv:Header/&gt;\n    &lt;soapenv:Body&gt;\n        &lt;xsd:updateApplication&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:serviceProvider&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationID&gt;2&lt;/xsd1:applicationID&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:applicationName&gt;travelocity.com&lt;/xsd1:applicationName&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:claimConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;false&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:claimMappings&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:localClaim&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:claimUri&gt;http://wso2.org/claims/givenname&lt;/xsd1:claimUri&gt;\n                        &lt;/xsd1:localClaim&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:mandatory&gt;true&lt;/xsd1:mandatory&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:remoteClaim&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:claimUri&gt;name&lt;/xsd1:claimUri&gt;\n                        &lt;/xsd1:remoteClaim&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:requested&gt;true&lt;/xsd1:requested&gt;\n                    &lt;/xsd1:claimMappings&gt;\n                    &lt;xsd1:claimMappings&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:localClaim&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:claimUri&gt;http://wso2.org/claims/role&lt;/xsd1:claimUri&gt;\n                        &lt;/xsd1:localClaim&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:mandatory&gt;true&lt;/xsd1:mandatory&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:remoteClaim&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:claimUri&gt;role&lt;/xsd1:claimUri&gt;\n                        &lt;/xsd1:remoteClaim&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:requested&gt;true&lt;/xsd1:requested&gt;\n                    &lt;/xsd1:claimMappings&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:localClaimDialect&gt;false&lt;/xsd1:localClaimDialect&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:roleClaimURI&gt;role&lt;/xsd1:roleClaimURI&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:userClaimURI&gt;user&lt;/xsd1:userClaimURI&gt;\n                &lt;/xsd1:claimConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:description&gt;sample service provider&lt;/xsd1:description&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundAuthenticationConfig&gt;&lt;/xsd1:inboundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:inboundProvisioningConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:provisioningUserStore&gt;PRIMARY&lt;/xsd1:provisioningUserStore&gt;\n                &lt;/xsd1:inboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForAttributes&gt;&lt;/xsd1:authenticationStepForAttributes&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:authenticationStepForSubject&gt;&lt;/xsd1:authenticationStepForSubject&gt;\n                    &lt;xsd1:authenticationType&gt;default&lt;/xsd1:authenticationType&gt;\n                    &lt;!--Optional:--&gt;\n                    &lt;xsd1:subjectClaimUri&gt;name&lt;/xsd1:subjectClaimUri&gt;\n                &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:outboundProvisioningConfig&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisionByRoleList&gt;&lt;/xsd1:provisionByRoleList&gt;\n                    &lt;!--Zero or more repetitions:--&gt;\n                    &lt;xsd1:provisioningIdentityProviders&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:defaultProvisioningConnectorConfig&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:blocking&gt;false&lt;/xsd1:blocking&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:enabled&gt;false&lt;/xsd1:enabled&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:name&gt;scim&lt;/xsd1:name&gt;\n                            &lt;!--Optional:--&gt;\n                        &lt;/xsd1:defaultProvisioningConnectorConfig&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:identityProviderName&gt;TrustedIdP&lt;/xsd1:identityProviderName&gt;\n                        &lt;!--Optional:--&gt;\n                        &lt;xsd1:justInTimeProvisioningConfig&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:dumbMode&gt;false&lt;/xsd1:dumbMode&gt;\n                            &lt;!--Optional:--&gt;\n                            &lt;xsd1:provisioningEnabled&gt;true&lt;/xsd1:provisioningEnabled&gt;\n                        &lt;/xsd1:justInTimeProvisioningConfig&gt;\n                    &lt;/xsd1:provisioningIdentityProviders&gt;\n                &lt;/xsd1:outboundProvisioningConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:permissionAndRoleConfig&gt;&lt;/xsd1:permissionAndRoleConfig&gt;\n                &lt;!--Optional:--&gt;\n                &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt;\n            &lt;/xsd:serviceProvider&gt;\n        &lt;/xsd:updateApplication&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p>"},{"location":"apis/use-the-service-provider-api/#deleteapplication","title":"deleteApplication","text":"Description A service provider is deleted based on the application name. The input parameters and the format of the request should be as follows. Permission Level /permission/admin/manage Input Parameters <ul> <li><code>applicationName</code> <code>[String]</code>: This is the application name.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:deleteApplication&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:applicationName&gt;TestSP&lt;/xsd:applicationName&gt;\n    &lt;/xsd:deleteApplication&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:deleteApplicationResponse xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n       &lt;ns:return xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/&gt;\n    &lt;/ns:deleteApplicationResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/use-the-service-provider-api/#getallapplicationbasicinfo","title":"getAllApplicationBasicInfo","text":"Description This operation can be used to get all available service provider names and their descriptions. Permission Level /permission/admin/manage Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:getAllApplicationBasicInfo/&gt;\n &lt;/soapenv:Body&gt;\n&lt;&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:getAllApplicationBasicInfoResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2115=\"http://core.carbon.wso2.org/xsd\" xmlns:ax2114=\"http://mgt.application.identity.carbon.wso2.org/xsd\" xmlns:ax2120=\"http://common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2117=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n &lt;ns:return xsi:type=\"ax2117:ApplicationBasicInfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2117:applicationName&gt;TestSP1&lt;/ax2117:applicationName&gt;\n          &lt;ax2117:description&gt;Test Service Provider-1&lt;/ax2117:description&gt;\n       &lt;/ns:return&gt;\n    &lt;/ns:getAllApplicationBasicInfoResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/use-the-service-provider-api/#getallidentityproviders","title":"getAllIdentityProviders","text":"Description This operation retrieves the available identity providers. Permission Level /permission/admin/manage Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:getAllIdentityProviders/&gt;\n &lt;&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n  &lt;soapenv:Body&gt;\n      &lt;ns:getAllIdentityProvidersResponse\n          xmlns:ns=\"http://org.apache.axis2/xsd\"\n          xmlns:ax2115=\"http://core.carbon.wso2.org/xsd\"\n          xmlns:ax2114=\"http://mgt.application.identity.carbon.wso2.org/xsd\"\n          xmlns:ax2120=\"http://common.application.identity.carbon.wso2.org/xsd\"\n          xmlns:ax2117=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n          &lt;ns:return xsi:type=\"ax2117:IdentityProvider\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n              &lt;ax2117:alias xsi:nil=\"true\"/&gt;\n              &lt;ax2117:certificate xsi:nil=\"true\"/&gt;\n              &lt;ax2117:claimConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:defaultAuthenticatorConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:defaultProvisioningConnectorConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:displayName xsi:nil=\"true\"/&gt;\n              &lt;ax2117:enable&gt;true&lt;/ax2117:enable&gt;\n              &lt;ax2117:federatedAuthenticatorConfigs xsi:type=\"ax2117:FederatedAuthenticatorConfig\"&gt;\n          ...&lt;/ax2117:federatedAuthenticatorConfigs&gt;\n  &lt;&lt;ax2117:federationHub&gt;false&lt;/ax2117:federationHub&gt;\n              &lt;ax2117:homeRealmId xsi:nil=\"true\"/&gt;\n              &lt;ax2117:identityProviderDescription xsi:nil=\"true\"/&gt;\n              &lt;ax2117:identityProviderName&gt;TestIdP&lt;/ax2117:identityProviderName&gt;\n              &lt;ax2117:justInTimeProvisioningConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:permissionAndRoleConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:primary&gt;false&lt;/ax2117:primary&gt;\n              &lt;ax2117:provisioningConnectorConfigs xsi:type=\"ax2117:ProvisioningConnectorConfig\"&gt;...\n          &lt;/ax2117:provisioningConnectorConfigs&gt;\n              &lt;ax2117:provisioningRole xsi:nil=\"true\"/&gt;\n          &lt;/ns:return&gt;\n      &lt;/ns:getAllIdentityProvidersResponse&gt;\n  &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/use-the-service-provider-api/#getalllocalauthenticators","title":"getAllLocalAuthenticators","text":"Description This operation retrieves the available local authenticators. Permission Level /permission/admin/manage Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;&lt;soapenv:Body&gt;\n    &lt;xsd:getAllLocalAuthenticators/&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:getAllLocalAuthenticatorsResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2115=\"http://core.carbon.wso2.org/xsd\" xmlns:ax2114=\"http://mgt.application.identity.carbon.wso2.org/xsd\" xmlns:ax2120=\"http://common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2117=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n       &lt;ns:return xsi:type=\"ax2117:LocalAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2117:displayName&gt;basic&lt;/ax2117:displayName&gt;\n          &lt;ax2117:enabled&gt;false&lt;/ax2117:enabled&gt;\n          &lt;ax2117:name&gt;BasicAuthenticator&lt;/ax2117:name&gt;\n          &lt;ax2117:valid&gt;true&lt;/ax2117:valid&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2117:LocalAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2117:displayName&gt;iwa&lt;/ax2117:displayName&gt;\n          &lt;ax2117:enabled&gt;false&lt;/ax2117:enabled&gt;\n          &lt;ax2117:name&gt;IWAAuthenticator&lt;/ax2117:name&gt;\n          &lt;ax2117:valid&gt;true&lt;/ax2117:valid&gt;\n       &lt;/ns:return&gt;\n    &lt;/ns:getAllLocalAuthenticatorsResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/use-the-service-provider-api/#getalllocalclaimuris","title":"getAllLocalClaimUris","text":"Description This operation retrieves the available claim URI values that are in <code>http://wso2.org/claims</code> dialect. Permission Level /permission/admin/manage Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;&lt;soapenv:Body&gt;\n    &lt;xsd:getAllLocalClaimUris/&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:getAllLocalClaimUrisResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2115=\"http://core.carbon.wso2.org/xsd\" xmlns:ax2114=\"http://mgt.application.identity.carbon.wso2.org/xsd\" xmlns:ax2120=\"http://common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2117=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/otherphone&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/dob&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/primaryChallengeQuestion&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/role&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/challengeQuestion1&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/telephone&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/mobile&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/country&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/challengeQuestionUris&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/postalcode&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/challengeQuestion2&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/identity/accountLocked&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/nickname&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/streetaddress&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/url&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/givenname&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/emailaddress&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/oneTimePassword&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/region&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/gender&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/fullname&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/passwordTimestamp&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/title&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/locality&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/stateorprovince&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/im&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/organization&lt;/ns:return&gt;\n       &lt;ns:return&gt;http://wso2.org/claims/lastname&lt;/ns:return&gt;\n    &lt;/ns:getAllLocalClaimUrisResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/use-the-service-provider-api/#getallrequestpathauthenticators","title":"getAllRequestPathAuthenticators","text":"Description This operation retrieves the available request path authenticators. Permission Level /permission/admin/manage Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:getAllRequestPathAuthenticators/&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n &lt;soapenv:Body&gt;\n    &lt;ns:getAllRequestPathAuthenticatorsResponse xmlns:ns=\"http://org.apache.axis2/xsd\" xmlns:ax2115=\"http://core.carbon.wso2.org/xsd\" xmlns:ax2114=\"http://mgt.application.identity.carbon.wso2.org/xsd\" xmlns:ax2120=\"http://common.application.identity.carbon.wso2.org/xsd\" xmlns:ax2117=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n       &lt;ns:return xsi:type=\"ax2117:RequestPathAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2117:displayName&gt;Basic Auth&lt;/ax2117:displayName&gt;\n          &lt;ax2117:enabled&gt;false&lt;/ax2117:enabled&gt;\n          &lt;ax2117:name&gt;BasicAuthRequestPathAuthenticator&lt;/ax2117:name&gt;\n          &lt;ax2117:valid&gt;true&lt;/ax2117:valid&gt;\n       &lt;/ns:return&gt;\n       &lt;ns:return xsi:type=\"ax2117:RequestPathAuthenticatorConfig\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n          &lt;ax2117:displayName&gt;OAuth Bearer&lt;/ax2117:displayName&gt;\n          &lt;ax2117:enabled&gt;false&lt;/ax2117:enabled&gt;\n          &lt;ax2117:name&gt;OAuthRequestPathAuthenticator&lt;/ax2117:name&gt;\n          &lt;ax2117:valid&gt;true&lt;/ax2117:valid&gt;\n       &lt;/ns:return&gt;\n    &lt;/ns:getAllRequestPathAuthenticatorsResponse&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/use-the-service-provider-api/#getapplication","title":"getApplication","text":"Description This operation retrieves the the service provider information while passing the application name. Permission Level /permission/admin/manage Input Parameters <ul> <li><code>applicationName</code> <code>[String]</code>: This is the application name.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:getApplication&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:applicationName&gt;TestSP&lt;/xsd:applicationName&gt;\n    &lt;/xsd:getApplication&gt;\n &lt;&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n    &lt;soapenv:Body&gt;\n        &lt;ns:getApplicationResponse\n            xmlns:ns=\"http://org.apache.axis2/xsd\"&gt;\n            &lt;ns:return xsi:type=\"ax2117:ServiceProvider\"\n                xmlns:ax2115=\"http://core.carbon.wso2.org/xsd\"\n                xmlns:ax2114=\"http://mgt.application.identity.carbon.wso2.org/xsd\"\n                xmlns:ax2120=\"http://common.application.identity.carbon.wso2.org/xsd\"\n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xmlns:ax2117=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n                &lt;ax2117:applicationID&gt;4&lt;/ax2117:applicationID&gt;\n                &lt;ax2117:applicationName&gt;TestSP&lt;/ax2117:applicationName&gt;\n                &lt;ax2117:claimConfig xsi:type=\"ax2117:ClaimConfig\"&gt;...\n            &lt;/ax2117:claimConfig&gt;\n                &lt;ax2117:description&gt;Description&lt;/ax2117:description&gt;\n                &lt;ax2117:inboundAuthenticationConfig xsi:type=\"ax2117:InboundAuthenticationConfig\"&gt;\n            ...\n            &lt;/ax2117:inboundAuthenticationConfig&gt;\n                &lt;ax2117:localAndOutBoundAuthenticationConfig xsi:type=\"ax2117:LocalAndOutboundAuthenticationConfig\"&gt;\n            ...&lt;/ax2117:localAndOutBoundAuthenticationConfig&gt;\n                &lt;ax2117:outboundProvisioningConfig xsi:type=\"ax2117:OutboundProvisioningConfig\"&gt;\n            ..    \n            &lt;/ax2117:outboundProvisioningConfig&gt;\n                &lt;ax2117:owner xsi:type=\"ax2117:User\"&gt;\n                ...\n            &lt;/ax2117:owner&gt;\n                &lt;ax2117:permissionAndRoleConfig xsi:type=\"ax2117:PermissionsAndRoleConfig\"/&gt;\n                &lt;ax2117:saasApp&gt;true&lt;/ax2117:saasApp&gt;\n            &lt;/ns:return&gt;\n        &lt;/ns:getApplicationResponse&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/use-the-service-provider-api/#getidentityprovider","title":"getIdentityProvider","text":"Description This operation retrieves the identity provider information while passing the identity provider name. Permission Level /permission/admin/manage Input Parameters <ul> <li><code>federatedIdPName</code> <code>[String]</code>: This is the identity provider name.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://org.apache.axis2/xsd\"&gt;\n &lt;soapenv:Header/&gt;\n &lt;soapenv:Body&gt;\n    &lt;xsd:getIdentityProvider&gt;\n       &lt;!--Optional:--&gt;\n       &lt;xsd:federatedIdPName&gt;TestIdP&lt;/xsd:federatedIdPName&gt;\n    &lt;/xsd:getIdentityProvider&gt;\n &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response <pre><code>&lt;soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n  &lt;soapenv:Body&gt;\n      &lt;ns:getIdentityProvidersResponse\n          xmlns:ns=\"http://org.apache.axis2/xsd\"\n          xmlns:ax2115=\"http://core.carbon.wso2.org/xsd\"\n          xmlns:ax2114=\"http://mgt.application.identity.carbon.wso2.org/xsd\"\n          xmlns:ax2120=\"http://common.application.identity.carbon.wso2.org/xsd\"\n          xmlns:ax2117=\"http://model.common.application.identity.carbon.wso2.org/xsd\"&gt;\n          &lt;ns:return xsi:type=\"ax2117:IdentityProvider\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n              &lt;ax2117:alias xsi:nil=\"true\"/&gt;\n              &lt;ax2117:certificate xsi:nil=\"true\"/&gt;\n              &lt;ax2117:claimConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:defaultAuthenticatorConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:defaultProvisioningConnectorConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:displayName xsi:nil=\"true\"/&gt;\n              &lt;ax2117:enable&gt;true&lt;/ax2117:enable&gt;\n              &lt;ax2117:federatedAuthenticatorConfigs xsi:type=\"ax2117:FederatedAuthenticatorConfig\"&gt;\n          ...&lt;/ax2117:federatedAuthenticatorConfigs&gt;\n              &lt;ax2117:federationHub&gt;false&lt;/ax2117:federationHub&gt;\n              &lt;ax2117:homeRealmId xsi:nil=\"true\"/&gt;\n              &lt;ax2117:identityProviderDescription xsi:nil=\"true\"/&gt;\n              &lt;ax2117:identityProviderName&gt;TestIdP&lt;/ax2117:identityProviderName&gt;\n              &lt;ax2117:justInTimeProvisioningConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:permissionAndRoleConfig xsi:nil=\"true\"/&gt;\n              &lt;ax2117:primary&gt;false&lt;/ax2117:primary&gt;\n              &lt;ax2117:provisioningConnectorConfigs xsi:type=\"ax2117:ProvisioningConnectorConfig\"&gt;...\n          &lt;/ax2117:provisioningConnectorConfigs&gt;\n              &lt;ax2117:provisioningRole xsi:nil=\"true\"/&gt;\n          &lt;/ns:return&gt;\n      &lt;/ns:getIdentityProvidersResponse&gt;\n  &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-discoverable-applications/","title":"User discoverable application API","text":""},{"location":"apis/user-functionality-mgt-rest-api/","title":"User Functionality management API","text":""},{"location":"apis/user-information-recovery-service/","title":"User Information Recovery","text":"<p>Warning</p> <p>The functionalities enabled by this SOAP API are available with the Account Recovery REST APIs  with better performance. Note that it is recommended to use REST APIs wherever possible.</p> <p>The User Information Recovery API enables recovering user information during user authentication through various features such as captcha and challenge questions. This section lists out and describes the operations that are available in the User Information Recovery API. </p>"},{"location":"apis/user-information-recovery-service/#invoke-the-admin-service","title":"Invoke the admin service","text":"<p><code>UserInformationRecoveryService</code> is an admin service of the WSO2 Carbon platform. As admin services are secured to prevent anonymous invocations, you cannot view the WSDL of the admin service by default. Follow the steps below to view and invoke it:</p> <ol> <li> <p>Set the  bellow configuration in         <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[admin_service.wsdl]\nenable = true\n</code></pre> </li> <li> <p>Restart the Identity Server.</p> </li> <li>If you have started the server in default configurations,\u00a0use the     following URL in your browser to see the WSDL of the admin service:     https://localhost:9443/services/UserInformationRecoveryService?wsdl.</li> </ol> <p>For more information on WSO2 admin services and how to invoke an admin service using either SoapUI or any other client program, see Call Admin Services.</p>"},{"location":"apis/user-information-recovery-service/#api-operations","title":"API operations","text":""},{"location":"apis/user-information-recovery-service/#confirmuserselfregistration","title":"confirmUserSelfRegistration","text":"Description This operation confirms the self registered user account and unlocks it. Permission Level /permission/admin/login Input Parameters <li><code>userName</code> <code>[String]</code>: This the username of the user.</li> <li><code>code</code> <code>[String]</code>: This is the confirmation code send to the user.</li> <li><code>captcha</code> <code>[Captcha]</code>: This the captcha code. It uncludes <code>imagePath</code>, <code>secretKey</code>, and <code>UserAnswer</code>.</li> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\" xmlns:xsd=\"http://beans.mgt.captcha.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:confirmUserSelfRegistration&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:username&gt;&lt;/ser:username&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:code&gt;?&lt;/ser:code&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:captcha&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:imagePath&gt;&lt;/xsd:imagePath&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:secretKey&gt;&lt;/xsd:secretKey&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:userAnswer&gt;&gt;&lt;/xsd:userAnswer&gt;\n      &lt;/ser:captcha&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:tenantDomain&gt;&lt;/ser:tenantDomain&gt;\n   &lt;/ser:confirmUserSelfRegistration&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#getallchallengequestions","title":"getAllChallengeQuestions","text":"Description This operation retrieves all the challenge questions. Permission Level /permission/admin/login Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:getAllChallengeQuestions/&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#getcaptcha","title":"getCaptcha","text":"Description This operation retrieves the captcha code. Permission Level /permission/admin/login Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:getCaptcha/&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#getuserchallengequestion","title":"getUserChallengeQuestion","text":"Description This operation retrieves the challenge question for the user. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username of the user.</li> <li><code>confirmation</code> <code>[String]</code>: This is the confirmation code that is sent to the user.</li> <li><code>questionId</code> <code>[String]</code>: This is the question Id.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:getUserChallengeQuestion&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:userName&gt;&lt;/ser:userName&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:confirmation&gt;&lt;/ser:confirmation&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:questionI&gt;&lt;/ser:questionId&gt;\n   &lt;/ser:getUserChallengeQuestion&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#getuserchallengequestionids","title":"getUserChallengeQuestionIds","text":"Description This operation retrieves the challenge question Ids. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username of the user.</li> <li><code>confirmation</code> <code>[String]</code>: This is the confirmation code send to the user.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:getUserChallengeQuestionIds&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:username&gt;&lt;/ser:username&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:confirmation&gt;?&lt;/ser:confirmation&gt;\n   &lt;/ser:getUserChallengeQuestionIds&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#getuseridentitysupportedclaims","title":"getUserIdentitySupportedClaims","text":"Description This operation retrieves the the user-supported claims. Permission Level /permission/admin/login Input Parameters <ul> <li><code>dialect</code> <code>[String]</code>: This is the claim dialect.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:getUserIdentitySupportedClaims&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:dialect&gt;&lt;/ser:dialect&gt;\n   &lt;/ser:getUserIdentitySupportedClaims&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#registeruser","title":"registerUser","text":"Description This operation registers a user in the system. The account will be locked if the <code>Authentication.Policy.Account.Lock.On.Creation</code> property is set to <code>true</code>, otherwise the user will be able to login after registration. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username of the user.</li> <li><code>password</code> <code>[String]</code>: This is the user password.</li> <li><code>claims</code> <code>[UserIdentityClaim[]]</code>: These are user claims. Includes <code>claimUri</code> and <code>claimValue</code>.</li> <li><code>profileName</code> <code>[String]</code>: This is the user profile name.</li> <li><code>tenantDomain</code> <code>[String]</code>: This is the user's tenant domain.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\" xmlns:xsd=\"http://dto.mgt.identity.carbon.wso2.org/xsd\"&gt;\n   &lt;soapenv:Header/&gt;\n   &lt;soapenv:Body&gt;\n      &lt;ser:registerUser&gt;\n         &lt;!--Optional:--&gt;\n         &lt;ser:userName&gt;&lt;/ser:userName&gt;\n         &lt;!--Optional:--&gt;\n         &lt;ser:password&gt;&lt;/ser:password&gt;\n         &lt;!--Zero or more repetitions:--&gt;\n         &lt;ser:claims&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:claimUri&gt;&lt;/xsd:claimUri&gt;\n            &lt;!--Optional:--&gt;\n            &lt;xsd:claimValue&gt;&lt;/xsd:claimValue&gt;&gt;\n         &lt;/ser:claims&gt;\n         &lt;!--Optional:--&gt;\n         &lt;ser:profileName&gt;&lt;/ser:profileName&gt;\n         &lt;!--Optional:--&gt;\n         &lt;ser:tenantDomain&gt;&lt;/ser:tenantDomain&gt;\n      &lt;/ser:registerUser&gt;\n   &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#resendsignupconfirmationcode","title":"resendSignUpConfirmationCode","text":"Description This operation resend the self sign up confirmation code when the user has not received the email properly. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username.</li> <li><code>code</code> <code>[String]</code>: This is the confirmation code that is sent to the user.</li> <li><code>tenantDomain</code> <code>[String]</code>: This is user's tenant domain.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:resendSignUpConfirmationCode&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:userName&gt;&lt;/ser:userName&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:code&gt;?&lt;/ser:code&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:profileName&gt;&lt;/ser:profileName&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:tenantDomain&gt;&lt;/ser:tenantDomain&gt;\n   &lt;/ser:resendSignUpConfirmationCode&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#sendrecoverynotification","title":"sendRecoveryNotification","text":"Description This operation sends the recovery notification. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username.</li> <li><code>key</code> <code>[String]</code>: This is the confirmation key that is sent to the user.</li> <li><code>notificationType</code> <code>[String]</code>: This is the notification type.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:sendRecoveryNotification&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:username&gt;&lt;/ser:username&gt;\n      &lt;!--Optional:--&gt;&gt;\n      &lt;ser:key&gt;?&lt;/ser:key&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:notificationType&gt;&lt;/ser:notificationType&gt;\n   &lt;/ser:sendRecoveryNotification&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#updatepassword","title":"updatePassword","text":"Description This operation updates the password in the system for password recovery process. Before calling this method, the caller needs to call the <code>verifyConfirmationCode()</code> method and get the newly generated confirmation code. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username.</li> <li><code>confirmationCode</code> <code>[String]</code>: This is the confirmation code that is sent to the user.</li> <li><code>newPassword</code> <code>[String]</code>: This is the user's new password.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:updatePassword&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:username&gt;&lt;/ser:username&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:confirmationCode&gt;&lt;/ser:confirmationCode&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:newPassword&gt;&lt;/ser:newPassword&gt;\n   &lt;/ser:updatePassword&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#verifyaccount","title":"verifyAccount","text":"Description This operation verifies the user against the provided claims and captcha information. Permission Level /permission/admin/login Input Parameters <ul> <li><code>claims</code> <code>[UserIdentityClaim[] ]</code>: These are user claims. Includes <code>claimUri</code> and <code>claimValue</code>.</li> <li><code>captcha</code> <code>[Captcha]</code>: This is the captcha code. Includes <code>imagePath</code>, <code>secretKey</code>, and <code>UserAnswer</code>.</li> <li><code>tenantDomain</code> <code>[String]</code>: This is the user's tenant domain.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\" xmlns:xsd=\"http://dto.mgt.identity.carbon.wso2.org/xsd\" xmlns:xsd1=\"http://beans.mgt.captcha.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:verifyAccount&gt;\n      &lt;!--Zero or more repetitions:--&gt;\n      &lt;ser:claims&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:claimUri&gt;&lt;/xsd:claimUri&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:claimValue&gt;&lt;/xsd:claimValue&gt;\n      &lt;/ser:claims&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:captcha&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd1:imagePath&gt;&lt;/xsd1:imagePath&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd1:secretKey&gt;&lt;/xsd1:secretKey&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd1:userAnswer&gt;&lt;/xsd1:userAnswer&gt;\n      &lt;/ser:captcha&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:tenantDomain&gt;&lt;/ser:tenantDomain&gt;\n   &lt;/ser:verifyAccount&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#verifyconfirmationcode","title":"verifyConfirmationCode","text":"Description This operation verifies the confirmation code supplied by user. This invalidates the current code, generates a new code and sends it to the user. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username.</li> <li><code>code</code> <code>[String]</code>: This is the confirmation code that is sent to the user.</li> <li><code>captcha</code> <code>[Captcha]</code>: This is the captcha code. Includes <code>imagePath</code>, <code>secretKey</code>, and <code>UserAnswer</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\" xmlns:xsd=\"http://beans.mgt.captcha.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:verifyConfirmationCode&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:username&gt;&lt;/ser:username&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:code&gt;?&lt;/ser:code&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:captcha&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:imagePath&gt;&lt;/xsd:imagePath&gt;&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:secretKey&gt;&lt;/xsd:secretKey&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:userAnswer&gt;&lt;/xsd:userAnswer&gt;\n      &lt;/ser:captcha&gt;\n   &lt;/ser:verifyConfirmationCode&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre> Response See below"},{"location":"apis/user-information-recovery-service/#verifyuser","title":"verifyUser","text":"Description This operation verifies the user against the captcha code. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username.</li> <li><code>captcha</code> <code>[Captcha]</code>: This is the captcha code. Includes <code>imagePath</code>, <code>secretKey</code>, and <code>UserAnswer</code>.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\" xmlns:xsd=\"http://beans.mgt.captcha.carbon.wso2.org/xsd\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:verifyUser&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:username&gt;&lt;/ser:username&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:captcha&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:imagePath&gt;&lt;/xsd:imagePath&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:secretKey&gt;&lt;/xsd:secretKey&gt;\n         &lt;!--Optional:--&gt;\n         &lt;xsd:userAnswer&gt;&lt;/xsd:userAnswer&gt;\n      &lt;/ser:captcha&gt;\n   &lt;/ser:verifyUser&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-information-recovery-service/#verifyuserchallengeanswer","title":"verifyUserChallengeAnswer","text":"Description This operation verifies the user against the challenge question. Permission Level /permission/admin/login Input Parameters <ul> <li><code>userName</code> <code>[String]</code>: This is the username.</li> <li><code>confirmation</code> <code>[String]</code>: This is the confirmation code that is sent to the user.</li> <li><code>questionId</code> <code>[String]</code>: This is the question Id.</li> <li><code>answer</code> <code>[String]</code>: This is the answer to the question.</li> </ul> Request <pre><code>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://services.mgt.identity.carbon.wso2.org\"&gt;\n&lt;soapenv:Header/&gt;\n&lt;soapenv:Body&gt;\n   &lt;ser:verifyUserChallengeAnswer&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:userName&gt;&lt;/ser:userName&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:confirmation&gt;&lt;/ser:confirmation&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:questionId&gt;&lt;/ser:questionId&gt;\n      &lt;!--Optional:--&gt;\n      &lt;ser:answer&gt;&lt;/ser:answer&gt;\n   &lt;/ser:verifyUserChallengeAnswer&gt;\n&lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;</code></pre>"},{"location":"apis/user-management-with-apis/","title":"User Management with APIs","text":"<p>WSO2 Identity Server provides the following web services APIs for managing users and roles in the Remote User Management API:</p> <ul> <li> <p>RemoteUserStoreManagerService     : This service exposes user, user role and claim management     functionalities. For instance, if your application needs a user role     management function, you can directly integrate with the WSO2     Identity Server instead of dealing with the userstore.  </p> </li> <li> <p>RemoteClaimManagerService :\u00a0This     service exposes more claim management functionalities such as add,     and delete claim mappings.  </p> </li> <li> <p>RemoteProfileConfigurationManagerService: This service exposes functionality     of profile management features such as add, update, delete profile     configuration.  </p> </li> <li> <p>RemoteAuthorizationManagerService     :\u00a0\u00a0This service exposes functionality of handling authorization of     users to different resources.  </p> </li> <li> <p>UserStoreConfigAdminService:     This service exposes userstore configuration functionalities such     as add, edit, and delete userstores.  </p> </li> </ul>"},{"location":"apis/user-store-rest-api/","title":"User store management API","text":""},{"location":"apis/workflow-engine-rest-api/","title":"Workflow engine management API","text":""},{"location":"apis/restapis/","title":"URLs for Swagger files","text":"<p>This document lists the URLs for the relavent Swagger files used in the API documentation. This document needs to be kept up-to-date based on the changes done to the Github repositories.</p> <ul> <li> <p>Account Recovery     https://github.com/wso2-extensions/identity-governance/blob/v1.4.72/components/org.wso2.carbon.identity.recovery.endpoint/src/main/resources/api.identity.recovery.yaml</p> </li> <li> <p>Application Management     https://github.com/wso2/identity-api-server/blob/master/components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/resources/applications.yaml</p> </li> <li> <p>Approvals     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.approval/org.wso2.carbon.identity.rest.api.user.approval.v1/src/main/resources/approval.yaml</p> </li> <li> <p>Associations     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.association/org.wso2.carbon.identity.api.user.association.v1/src/main/resources/association.yaml</p> </li> <li> <p>Authentication     https://github.com/wso2-extensions/identity-local-auth-api/blob/v2.4.2/components/org.wso2.carbon.identity.local.auth.api.endpoint/src/main/resources/api.identity.local.auth.yaml</p> </li> <li> <p>Authorized Apps V1     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.authorized.apps/org.wso2.carbon.identity.rest.api.user.authorized.apps.v1/src/main/resources/authorizedApps.yaml</p> </li> <li> <p>Authirized Apps V2     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.authorized.apps/org.wso2.carbon.identity.rest.api.user.authorized.apps.v2/src/main/resources/authorizedApps.yaml</p> </li> <li> <p>Challenge Question     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.authorized.apps/org.wso2.carbon.identity.rest.api.user.authorized.apps.v2/src/main/resources/authorizedApps.yaml</p> </li> <li> <p>Claim Management     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.claim.management/org.wso2.carbon.identity.rest.api.server.claim.management.v1/src/main/resources/claim-management.yaml</p> </li> <li> <p>Configuration Management     https://github.com/wso2/carbon-identity-framework/blob/v5.18.187/components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.endpoint/src/main/resources/org.wso2.carbon.identity.configuration.management.yaml</p> </li> <li> <p>CORS     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.cors/org.wso2.carbon.identity.api.server.cors.v1/src/main/resources/cors.yaml</p> </li> <li> <p>Consent Management     https://raw.githubusercontent.com/wso2/carbon-consent-management/v2.3.18/components/org.wso2.carbon.api.server.consent.mgt/src/main/resources/carbon-consent-management.yaml</p> </li> <li> <p>Email Templates     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.email.template/org.wso2.carbon.identity.rest.api.server.email.template.v1/src/main/resources/email-template.yml</p> </li> <li> <p>Fido     https://raw.githubusercontent.com/wso2-extensions/identity-local-auth-fido/v5.2.8/components/org.wso2.carbon.identity.application.authenticator.fido2.endpoint/src/main/resources/fido.yaml</p> </li> <li> <p>Identity Governance     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.identity.governance/org.wso2.carbon.identity.api.server.identity.governance.v1/src/main/resources/identity-governance.yaml</p> </li> <li> <p>Identity Providers     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/resources/idp.yaml</p> </li> <li> <p>Keystore Management     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.keystore.management/org.wso2.carbon.identity.api.server.keystore.management.v1/src/main/resources/keystore.yaml</p> </li> <li> <p>Server Configurations     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.configs/org.wso2.carbon.identity.api.server.configs.v1/src/main/resources/configs.yaml</p> </li> <li> <p>OAuth2 Scope Management     https://raw.githubusercontent.com/wso2-extensions/identity-inbound-auth-oauth/v6.4.111/components/org.wso2.carbon.identity.oauth.scope.endpoint/src/main/resources/api.identity.oauth2.scope.endpoint.yaml</p> </li> <li> <p>OpenID Connect Scope Managment     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.oidc.scope.management/org.wso2.carbon.identity.api.server.oidc.scope.management.v1/src/main/resources/oidc-scope-management.yaml</p> </li> <li> <p>OIDC Dynamic Client Registration     https://github.com/wso2-extensions/identity-inbound-auth-oauth/blob/v6.4.111/components/org.wso2.carbon.identity.oauth.dcr.endpoint/src/main/resources/api.identity.oauth.dcr.endpoint.yaml</p> </li> <li> <p>Permission Management     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.permission.management/org.wso2.carbon.identity.api.server.permission.management.v1/src/main/resources/permission-management.yaml</p> </li> <li> <p>Personal Information Export (See : Self-Sign-up)</p> </li> <li> <p>SCIM 2.0 API Definition - In the docs</p> </li> <li> <p>Script Libraries     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/main/resources/scriptLibrary.yaml</p> </li> <li> <p>Secondary User Store     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/resources/userstore.yaml</p> </li> <li> <p>Self Sign-up     https://github.com/wso2-extensions/identity-governance/blob/v1.4.72/components/org.wso2.carbon.identity.user.endpoint/src/main/resources/api.identity.user.yaml</p> </li> <li> <p>Session Management     https://raw.githubusercontent.com/wso2/identity-api-user/v1.3.1/components/org.wso2.carbon.identity.api.user.session/org.wso2.carbon.identity.api.user.session.v1/src/main/resources/session.yaml</p> </li> <li> <p>Tenant Management     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.tenant.management/org.wso2.carbon.identity.api.server.tenant.management.v1/src/main/resources/tenant-management.yaml</p> </li> <li> <p>TOTP     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.totp/org.wso2.carbon.identity.api.user.totp.v1/src/main/resources/totp.yaml</p> </li> <li> <p>User Discoverable Application Management     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.application/org.wso2.carbon.identity.rest.api.user.application.v1/src/main/resources/application.yaml</p> </li> <li> <p>User Functionality Management     https://raw.githubusercontent.com/wso2/identity-api-user/v1.1.17/components/org.wso2.carbon.identity.api.user.functionality/org.wso2.carbon.identity.rest.api.user.functionality.v1/src/main/resources/functionality.yaml</p> </li> <li> <p>Workflow Engine Management     https://raw.githubusercontent.com/wso2/identity-api-server/v1.0.190/components/org.wso2.carbon.identity.api.server.workflow.engine/org.wso2.carbon.identity.rest.api.server.workflow.engine.v1/src/main/resources/workflow-engine.yaml</p> </li> </ul>"},{"location":"get-started/quick-start-guide/","title":"What is WSO2 Identity Server?","text":"<p>Are you new to WSO2 Identity Server? Let's get to know what we are all about! </p> <p>WSO2 Identity Server (WSO2 IS) simplifies the Customer Identity and Access Management (CIAM) needs of your organization. The product ensures easy integration with a variety of applications to facilitate single sign-on (SSO), social login, identity federation, API security, strong authentication, account management, privacy compliance, and so much more. </p>"},{"location":"get-started/quick-start-guide/#who-uses-wso2-identity-server","title":"Who uses WSO2 Identity Server?","text":"<ul> <li> <p>Application developers who build extensive IAM solutions for organizations.</p> </li> <li> <p>Administrators or Team leaders looking for an easy but secure way to onboard and manage users. </p> </li> <li> <p>Data Protection Officers who need to implement and monitor a system that adheres to privacy protection regulations across the organization</p> </li> <li> <p>Insight managers who need precise data on logins, registrations, and user activities to derive business insights.</p> </li> </ul>"},{"location":"get-started/quick-start-guide/#why-wso2-identity-server","title":"Why WSO2 Identity Server?","text":"<ul> <li> <p>Unify sign-ins -  WSO2 IS facilitates single sign-on (SSO) that eliminates the need to maintain multiple credentials for each application making life easier for your users.</p> </li> <li> <p>Give the right access to the right people - Control access to applications based on permission levels of users or groups.</p> </li> <li> <p>Enforce strong authentication - WSO2 Identity Server offers multi-factor capabilities such as Email OTP, SMS OTP, Security Key/Biometrics (FIDO) etc. It also enables adaptive authentication which means you can define the level of authentication based on user device, location, and usage context.</p> </li> <li> <p>Empower users to manage their own accounts - Enable self-registration to applications and let users view, and manage their own profiles.</p> </li> <li> <p>Manage users and their accounts - Take control of the entire identity lifecycle management of your organization. Provision users to or from trusted identity providers and integrate heterogeneous userstores such as LDAP, Active Directory, and JDBC.</p> </li> <li> <p>Secure ever-growing APIs - WSO2 Identity Server plays a key role as the authorization server that supports several OAuth related standards or profiles. It supports open standards such as OAuth, OpenID Connect, SAML 2.0, and XACML. It also enables high availability, failover, and performance for a smooth operation. </p> </li> <li> <p>To safeguard user data and give them control over it - WSO2 Identity Server enables recording, reviewing, and revoking user consents by adhering to privacy by design principles and industry standards imposed by GDPR and similar privacy laws such as CCPA and LGDP.</p> </li> </ul>"},{"location":"get-started/sample-use-cases/federated-authentication/","title":"Federated Authentication","text":"<p>Follow the instructions given here to try out federated authentication.</p>"},{"location":"get-started/sample-use-cases/federated-authentication/#problem-scenario","title":"Problem scenario","text":"<p>Pickup works with a team of external consultants. However, it is a hassle to keep adding and maintaining their accounts in the employee database as these consultants are temporary and employed on a rolling basis.</p> <p>Therefore, Pickup decides to use the identity federation capability of WSO2 Identity Server. This allows external consultants to use their existing Google account credentials to sign in to Pickup applications.</p>"},{"location":"get-started/sample-use-cases/federated-authentication/#prerequisites","title":"Prerequisites","text":"<p>Install WSO2 Identity Server and start the server.</p>"},{"location":"get-started/sample-use-cases/federated-authentication/#set-up-a-google-oauth-20-application","title":"Set up a Google OAuth 2.0 application","text":"<p>Follow these instructions to register an OAuth 2.0 application in Google.</p> <ol> <li> <p>Go to the Google Developer console, create a new project or select an existing project.</p> </li> <li> <p>If the APIs &amp; services page isn't already open, do the following:</p> <ol> <li> <p>Open the navigation menu and click View all products.    </p> </li> <li> <p>Under Management, click APIs &amp; Services.    </p> </li> </ol> </li> <li> <p>Go to the Credentials page, click Create Credentials, and select OAuth client ID.</p> <p></p> </li> <li> <p>Configure your consent screen by clicking Configure Consent Screen and return to Create OAuth client ID screen once you are done.</p> <p>Info</p> <p>For more information, see User Consent</p> </li> <li> <p>Select Web application as the application type.</p> </li> <li> <p>Provide a name for your application and specify the following URL as the Authorized Redirect URI of the application:</p> <pre><code>https://localhost.com:9443/commonauth\n</code></pre> </li> <li> <p>Note the <code>API key</code> and <code>secret</code> for later use.</p> <p></p> <p>Tip</p> <p>To avoid getting the following error message, add <code>localhost.com</code>  to the authorized domains list.</p> <pre><code>If Invalid Redirect: domain must be added to the authorized domains list before submitting.\n</code></pre> <p></p> </li> </ol>"},{"location":"get-started/sample-use-cases/federated-authentication/#run-the-sample-scenario","title":"Run the sample scenario","text":"<p>Let's run the sample applications Pickup-Dispatch and Pickup-Manager.</p> <ol> <li> <p>Follow the instructions on setting up the samples.</p> <p>Info</p> <p>A message appears to pick a scenario.</p> <p></p> </li> <li> <p>Enter <code>4</code> as the scenario number at the command prompt to run the federated authentication scenario.</p> </li> <li> <p>Enter <code>y</code> to confirm that you have already completed the following steps.</p> <p></p> </li> <li> <p>Enter the <code>client-id</code> and <code>secret</code> of the Google application when prompted.</p> <p>Info</p> <p>Note that a message with the user and application details appears.</p> <p></p> </li> </ol>"},{"location":"get-started/sample-use-cases/federated-authentication/#try-it-out","title":"Try it out","text":"<p>Let's access the Pickup-Dispatch application and proceed to sign in.</p> <ol> <li> <p>Copy the <code>http://localhost:8080/saml2-web-app-pickup-dispatch.com</code> URL to your web browser to access the Pickup-Dispatch application.</p> </li> <li> <p>Click Login to access the authentication page.</p> <p> </p> <p>Info</p> <p>You are directed to the Google login page.</p> </li> <li> <p>Enter your Google <code>username</code> and <code>password</code> and click Sign In.</p> <p>Info</p> <p>After successful authentication, the User Consent form of the Pickup-Dispatch application appears.</p> </li> <li> <p>Select the attributes you agree to share with the Pickup-Dispatch application and click Continue.</p> <p></p> <p>Note</p> <p>Obtaining user consent is a fundamental requirement of the General Data Protection Regulation (GDPR). WSO2 Identity Server facilitates this through its Consent Management features. To learn more about GDPR and how WSO2 Identity Server handles consent, see Consent Management.</p> <p>Note that the Pickup-Dispatch application home screen appears.</p> <p></p> </li> </ol> <p>You have successfully signed in to the Pickup-Dispatch application as an external consultant using your Google credentials.</p>"},{"location":"get-started/sample-use-cases/federated-authentication/#whats-next","title":"What's next?","text":"<p>To try out other scenarios, navigate back to the command-line where you ran the quickstart sample and enter <code>y</code> to clean the setup.</p> <p></p>"},{"location":"get-started/sample-use-cases/multi-factor-authentication/","title":"Multi-Factor Authentication","text":"<p>Follow the instructions given here to try out multi-factor authentication.</p>"},{"location":"get-started/sample-use-cases/multi-factor-authentication/#problem-scenario","title":"Problem scenario","text":"<p>Pickup wants to enhance the security standards by introducing a second level of authentication when users sign in to applications. Multi-factor authentication (MFA) is enabled in WSO2 Identity Server using the following factors:</p> <ul> <li>First factor: username/password</li> <li>Second factor: HARDWARE KEY</li> </ul> <p>Let's use the command-line to check the MFA functionality.</p>"},{"location":"get-started/sample-use-cases/multi-factor-authentication/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, do the following:</p> <ol> <li>Install WSO2 Identity Server.</li> <li> <p>Deploy the sample authenticator dependency and its web application in WSO2 Identity Server.</p> <ol> <li>Stop the Identity Server if already running.</li> <li>Download the org.wso2.carbon.identity.sample.extension.authenticator.jar file and copy it to the <code>&lt;IS_HOME&gt;/repository/components/dropins</code> folder.</li> <li> <p>Download the sample-auth.war file and copy it to the <code>&lt;IS_HOME&gt;/repository/deployment/server/webapps</code> folder.  </p> <p>Info</p> <p>This <code>.war</code> file contains the WEB UI for the sample authenticators used in this tutorial.</p> </li> <li> <p>Open the <code>deployment.toml</code> file in the <code>&lt;IS_HOME&gt;/repository/conf</code> folder and add the following configuration:</p> <pre><code>[[resource.access_control]]\ncontext = \"(.*)/sample-auth/(.*)\"\nsecure = false\nhttp_method = \"all\" </code></pre> </li> </ol> </li> <li> <p>Start WSO2 Identity Server.</p> </li> </ol>"},{"location":"get-started/sample-use-cases/multi-factor-authentication/#run-the-sample-scenario","title":"Run the sample scenario","text":"<p>Let's run the sample applications Pickup-Dispatch and Pickup-Manager.</p> <ol> <li> <p>Follow the instructions on setting up the samples.</p> <p>Info</p> <p>A message appears to pick a scenario.</p> </li> <li> <p>Enter <code>3</code> as the scenario number at the command prompt.</p> <p></p> </li> <li> <p>Enter <code>y</code> to confirm that you have already done the following steps.</p> <p></p> </li> </ol>"},{"location":"get-started/sample-use-cases/multi-factor-authentication/#try-it-out","title":"Try it out","text":"<p>Let's access the Pickup-Dispatch application and proceed to sign in.</p> <ol> <li> <p>Copy the <code>http://localhost:8080/saml2-web-app-pickup-dispatch.com</code> URL to your web browser to access the Pickup-Dispatch application.</p> </li> <li> <p>Click Log in to access the first authentication step provided by WSO2 Identity Server.</p> <p></p> </li> <li> <p>Enter either of the following credentials to sign in to the     application:</p> <pre><code>Manager  --&gt; Username: cameron | Password: cameron123\nEmployee --&gt; Username: alex    | Password: alex123 </code></pre> <p></p> <p>Info</p> <p>The HARDWARE KEY login page appears as HARDWARE KEY is the second authentication factor.</p> </li> <li> <p>Enter the DEMO key that appears in the browser and click Sign In.</p> <p></p> <p>Info</p> <p>After successful authentication, the User Consent page of the Pickup-Dispatch application appears.</p> </li> <li> <p>Select the attributes you agree to share with the Pickup-Dispatch application and click     Continue.</p> <p> </p> <p>Note</p> <p>Obtaining user consent is a fundamental requirement of the General Data Protection Regulation (GDPR). WSO2 Identity Server facilitates this through its Consent Management features. To learn more about GDPR and how WSO2 Identity Server handles consent, see Consent Management.</p> <p>Note that the Pickup-Dispatch application home screen appears.</p> <p></p> </li> </ol>"},{"location":"get-started/sample-use-cases/multi-factor-authentication/#whats-next","title":"What's next?","text":"<p>To try out other scenarios, navigate back to the command-line where you ran the quickstart sample and enter <code>y</code> to clean the setup.</p> <p></p>"},{"location":"get-started/sample-use-cases/sample-scenario/","title":"Sample Scenario","text":"<p>You can easily try out the identity and access management (IAM) capabilities in the WSO2 Identity Server by using the scenario explained below.</p>"},{"location":"get-started/sample-use-cases/sample-scenario/#about-the-sample-scenario","title":"About the sample scenario","text":"<p>Pickup is a cab company that has many employees who use different credentials to sign in to different internal enterprise applications. Pickup will register its users and applications in WSO2 Identity Server to fulfill its IAM requirements.</p> <p></p> <p>Following are two such applications:</p> Pickup Dispatch This application helps manage\u00a0the overall operations at Pickup. Pickup Manager This application helps allocate vehicles to drivers. <p>Following are three users in the company:</p> Rowan The company HR manager who would define the access requirements of the company. Cameron A senior manager who needs to sign in and use both the above applications. Alex A junior manager who also needs to sign in and use both the above applications. <p>Listed below are the organizational requirements that are addressed by the WSO2 Identity Server.</p> <ul> <li> <p>Employees need to remember multiple credentials when logging in to the many applications of Pickup. It is required to unify logins for employees with single sign-on so that employees will only have to remember a single password.</p> <p>Try out single sign-on.</p> </li> <li> <p>Employee logins should be secured by making it difficult for unauthorized sources to access the applications. Therefore, it is required to apply an additional layer of security using multi-factor authentication.</p> <p>Try out multi-factor authentication.</p> </li> <li> <p>External consultants have to work on Pickup apps temporarily. It is a hassle to create and delete accounts for them in the database. Therefore, it is required to log them in with their accounts in an external identity provider using federated authentication.</p> <p>Try out federated authentication.</p> </li> <li> <p>With the expansion of Pickup, Rowan is having a hard time creating accounts for every employee joining the organization. Let new employees create their own accounts to speed up the process using the self sign-up capability.</p> <p>Try out self sign-up.</p> </li> </ul>"},{"location":"get-started/sample-use-cases/sample-scenario/#set-up-the-sample-applications","title":"Set up the sample applications","text":"<p>To try out the sample identity and access management scenarios on your WSO2 IS instance, you need to set up the required sample applications with your WSO2 IS.</p> <p>Before you begin</p> <ul> <li> <p>Open the <code>/etc/hosts</code> file and add the following entry:</p> <pre><code>127.0.0.1        localhost.com\n</code></pre> <ul> <li>If you are planning to use single sign-on (SSO), do not use <code>localhost</code> to avoid any issues. Use <code>localhost.com</code> instead. If you are using Windows, <code>localhost.com</code> is already mapped to <code>127.0.0.1</code>.</li> <li>Make sure that this is the only such entry available for this IP address in the <code>/etc/hosts</code> file to avoid any conflicts.</li> </ul> </li> <li> <p>Download and install curl. Make sure you install the binary type file of the version your choice.</p> </li> </ul> <p>Follow the steps given below.</p> <ol> <li> <p>Download the sample applications and unzip using the following command.</p> <pre><code>unzip is-samples-distribution.zip\n</code></pre> <p>Info</p> <p>The root folder of the samples distribution is referred to as <code>{IS_SAMPLE_DISTR}</code>.</p> </li> <li> <p>Open the <code>server.properties</code> file in the <code>{IS_SAMPLE_DISTR}/IS-QSG/conf/</code> folder and configure <code>wso2is.host.domain</code> and <code>wso2is.host.port</code> as follows:</p> <pre><code>#localhost.com is used to resolve naked hostname validation issue\nwso2is.host.domain=localhost.com\nwso2is.host.port=9443\nserver.host.domain=localhost.com\nserver.host.port=8080\n</code></pre> </li> <li> <p>To configure and run the sample applications, open a terminal, navigate to the <code>&lt;IS_SAMPLE_DISTR&gt;/IS-QSG/bin</code> folder, and follow the steps given below:</p> <ol> <li> <p>Execute one of the following commands to start the sample application:</p> <ul> <li> <p>On Linux/MacOS</p> <pre><code>sh app-server.sh\n</code></pre> </li> <li> <p>On Windows</p> <pre><code>app-server.bat\n</code></pre> </li> </ul> </li> <li> <p>Execute the following command to start the quickstart samples accordingly.</p> <ul> <li> <p>On Linux/MacOS</p> <pre><code>sh qsg.sh\n</code></pre> </li> <li> <p>On Windows</p> <pre><code>qsg.bat\n</code></pre> </li> </ul> </li> </ol> </li> <li> <p>When prompted, confirm the configurations.</p> </li> </ol>"},{"location":"get-started/sample-use-cases/sample-scenario/#whats-next","title":"What's next?","text":"<p>Once you complete setting up the samples, you are presented with the following list of scenarios:</p> <p></p> <p>See the topics given below to try out each of the scenarios.</p> <ul> <li>Single sign-on</li> <li>Multi-factor authentication</li> <li>Federated authentication</li> <li>Self sign-up</li> </ul>"},{"location":"get-started/sample-use-cases/self-sign-up/","title":"Self Sign-Up","text":"<p>Follow the instructions given here to try out user self sign-up.</p>"},{"location":"get-started/sample-use-cases/self-sign-up/#problem-scenario","title":"Problem Scenario","text":"<p>Cameron realizes that allowing new employees to self sign-up to the Pickup web applications can speed up the onboarding process. As a result, Cameron sets self sign-up for Pickup HR using WSO2 Identity Server.</p>"},{"location":"get-started/sample-use-cases/self-sign-up/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, do the following:</p> <ol> <li>Install WSO2 Identity Server.</li> <li>Enable the email sending configurations of WSO2 IS.</li> <li>Restart the WSO2 IS.</li> </ol>"},{"location":"get-started/sample-use-cases/self-sign-up/#run-the-sample-scenario","title":"Run the sample scenario","text":"<p>First, let's set up and run the sample applications.</p> <ol> <li> <p>Follow the instructions on setting up the samples.</p> <p>Info</p> <p>A message appears to pick a scenario.</p> <p></p> </li> <li> <p>Enter <code>5</code> as the scenario number at the command prompt.</p> <p>A prompt appears to choose the user sign-up approach.</p> <p> Enable self user registration (without any config)              This enables self sign-up without having to do additional configurations. Once registered, the user receives an email to the provided email address.          Enable account lock on creation              This locks the user account during user registration. The user can only sign in to the application after clicking the verification link sent to the user-provided email address. A confirmation mail is sent to the user but the user account is locked until the user confirms the account by clicking on the account confirmation mail sent by WSO2 Identity Server.          </p> <p></p> </li> <li> <p>Enter the <code>number</code> that matches the approach you would like to try.</p> <p></p> </li> </ol>"},{"location":"get-started/sample-use-cases/self-sign-up/#try-it-out","title":"Try it out","text":"<p>Follow the instructions given below to complete self-registration and to log in.</p>"},{"location":"get-started/sample-use-cases/self-sign-up/#self-register","title":"Self-register","text":"<p>Let's access the Pickup-Dispatch application and self-register as a new user.</p> <ol> <li> <p>Copy the <code>http://localhost.com:8080/pickup-dispatch</code> URL on a web browser to access the Pickup Dispatch application.</p> </li> <li> <p>Click Login to access the authentication page.</p> <p></p> </li> <li> <p>Click Create Account to start the self sign-up process.</p> <p></p> </li> <li> <p>Enter a <code>username</code> for your user account and click Proceed to Self Register.</p> <p></p> <p>Note</p> <p>If you want a user to self register for a specific tenant, provide the <code>username</code> in the following format: <code>&lt;USERNAME&gt;@&lt;TENAND_DOMAIN&gt;</code>.</p> </li> <li> <p>Provide the user profile details, agree to the Privacy Policy, and click Register.</p> <p></p> <p>A confirmation message appears.</p> <p></p> </li> <li> <p>Click Close to complete the registration.</p> </li> </ol>"},{"location":"get-started/sample-use-cases/self-sign-up/#log-in","title":"Log in","text":"<p>To try login with your new user account, follow the instructions given below as applicable.</p> <ul> <li> <p>If you selected Enable User Registration (without any     config) during the sample setup, go back to the Pickup-Dispatch application and sign in using the new user credentials.</p> </li> <li> <p>If you selected Account Lock on Creation during the sample setup, access your email  account to view the account registration confirmation mail.</p> <ol> <li> <p>Access your email and click Confirm Registration in the email or copy the link     in the email to your browser and confirm the account creation.</p> <p>Info</p> <p>The account gets unlocked and an email is sent.</p> </li> <li> <p>Go back to the Pickup-Dispatch application and sign in using the new user credentials.</p> <p></p> <p>Note that the Pickup-Dispatch application home screen appears.</p> <p></p> </li> </ol> </li> </ul> <p>You have successfully self-signed up to the Pickup-Dispatch web application.</p>"},{"location":"get-started/sample-use-cases/self-sign-up/#whats-next","title":"What's next?","text":"<p>To try out other scenarios, navigate back to the command-line where you ran the quickstart sample and enter <code>y</code> to clean the setup.</p> <p></p>"},{"location":"get-started/sample-use-cases/set-up/","title":"Quick Setup","text":"<p>Follow the steps given below to set up and install WSO2 Identity Server (WSO2 IS) on your computer in quick time.</p> <p>Info</p> <p>For detailed instructions on other installation options and deployments, see the installation guide.</p>"},{"location":"get-started/sample-use-cases/set-up/#install-wso2-is","title":"Install WSO2 IS","text":"<p>Follow the steps given below.</p> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:en/identity-server/7.0.0/docs/get-started/sample-use-cases/set-up.md 1. Download and install Oracle Java SE Development Kit (JDK) version 11 or 17. 2. Go to WSO2 Identity Server official website and click on Download. 3. Install WSO2 Identity Server by downloading the LATEST RELEASE. ======== 1. Download and install Java SE Development Kit (JDK) version 11 or 17.</p> <pre><code>!!! info\n    Learn more about [JDK compatibility](https://is.docs.wso2.com/en/next/deploy/environment-compatibility/) in WSO2 Identity Server 6.1.0.\n</code></pre> <ol> <li>Go to the WSO2 Identity Server website and click Get Started.</li> <li> <p>Install WSO2 Identity Server by downloading the LATEST BINARY RELEASE.</p> <p>6.1.0-docs-old:en/identity-server/6.1.0/docs/get-started/sample-use-cases/set-up.md</p> <p>Info</p> <p>The installation location of WSO2 Identity Server is referred to as <code>{IS_HOME}</code>.</p> </li> </ol>"},{"location":"get-started/sample-use-cases/set-up/#configure-the-server","title":"Configure the server","text":"<p>Open the <code>deployment.toml</code> file (stored in the <code>&lt;IS_HOME&gt;/repository/conf</code> folder) and add the following configuration to enable CORS:</p> <pre><code>[cors]\nallow_generic_http_requests = true\nallow_any_origin = true\nsupported_methods = [\n\"POST\",\n\"HEAD\",\n\"OPTIONS\"\n]\nsupports_credentials = false\nmax_age = 3600\ntag_requests = false\n</code></pre>"},{"location":"get-started/sample-use-cases/set-up/#start-wso2-is","title":"Start WSO2 IS","text":"<p>To start WSO2 IS, open a terminal, navigate to the <code>&lt;IS_HOME&gt;/bin</code> folder, and execute one of the following commands:</p> <ul> <li> <p>On Linux/MacOS</p> <pre><code>sh wso2server.sh\n</code></pre> </li> <li> <p>On Windows</p> <pre><code>wso2server.bat\n</code></pre> </li> </ul> <p>Note that the following log appears in the command prompt when the server starts:</p> <p></p> <p>Shutting down the server</p> <p>To shut down the server, press <code>Ctrl + C</code>. Note that the following log appears in the command prompt on server shutdown.</p> <p></p>"},{"location":"get-started/sample-use-cases/set-up/#whats-next","title":"What's next?","text":"<p>Try out the sample IAM scenarios to get familiar with WSO2 IS and its capabilities.</p>"},{"location":"get-started/sample-use-cases/single-sign-on/","title":"Single Sign-On","text":"<p>Follow the instructions given here to try out single sign-on.</p>"},{"location":"get-started/sample-use-cases/single-sign-on/#problem-scenario","title":"Problem scenario","text":"<p>When the number of applications that are used in Pickup increases, the employees have to maintain more credentials. This is not scalable.</p> <p>Therefore, Pickup decides to use single sign-on (SSO) to overcome this situation. With SSO, when a user signs in to one application, that user is automatically signed in to other applications, eliminating the need to maintain multiple credentials.</p>"},{"location":"get-started/sample-use-cases/single-sign-on/#prerequisites","title":"Prerequisites","text":"<p>Follow the quick setup instructions to install and start the WSO2 Identity Server.</p>"},{"location":"get-started/sample-use-cases/single-sign-on/#try-sso-with-saml-20","title":"Try SSO with SAML 2.0","text":"<p>If the two applications are using SAML 2.0 as their authentication protocol, follow the steps below.</p>"},{"location":"get-started/sample-use-cases/single-sign-on/#run-the-sample-scenario","title":"Run the sample scenario","text":"<p>First, let's set up and run the sample applications.</p> <ol> <li> <p>Follow the instructions on setting up the samples.</p> <p>Info</p> <p>A message appears to pick a scenario.</p> <p></p> </li> <li> <p>Enter <code>1</code> as the scenario number at the command prompt.</p> <p>Info</p> <p>Running scenario 1 does the following:</p> <ol> <li>Creates the two users, Cameron and Alex.</li> <li>Creates and assigns the user role of Manager to Cameron.</li> <li>Creates service providers for Pickup Dispatch and Pickup Manager.</li> <li>Configures SAML2 web SSO for Pickup-Dispatch and Pickup-Manager applications.</li> </ol> <p>Note that a message with the user and web application details appears.</p> <p></p> </li> </ol>"},{"location":"get-started/sample-use-cases/single-sign-on/#try-it-out","title":"Try it out","text":"<ol> <li> <p>Copy <code>http://localhost.com:8080/saml2-web-app-pickup-dispatch.com</code> to your browser to access the Pickup-Dispatch application.</p> </li> <li> <p>Click Login to access the authentication page.</p> <p></p> </li> <li> <p>Enter either of the following credentials to sign in to the     application.</p> <pre><code>Senior Manager --&gt; Username: cameron | Password: cameron123\nJunior Manager --&gt; Username: alex    | Password: alex123\n</code></pre> <p></p> </li> <li> <p>Select the attributes you agree to share with the Pickup-Dispatch application and click     Continue.</p> <p></p> <p>Note</p> <p>Obtaining user consent is a fundamental requirement of the General Data Protection Regulation (GDPR). WSO2 Identity Server facilitates this through its Consent Management features.  To learn more about GDPR and how WSO2 Identity Server handles consent, see Consent Management.</p> <p>Note that the Pickup-Dispatch application home screen appears.</p> <p></p> </li> <li> <p>Similarly, copy <code>http://localhost.com:8080/saml2-web-app-pickup-manager.com</code> to your browser to access the Pickup-Manager application.</p> </li> <li> <p>Click Login to access the application.</p> <p></p> </li> </ol> <p>Note that the Pickup-Manager application opens without having to enter the user credentials again.</p> <p></p>"},{"location":"get-started/sample-use-cases/single-sign-on/#try-sso-with-oidc","title":"Try SSO with OIDC","text":"<p>Follow the steps below to try out the scenario where the two applications use OIDC as their authentication protocol:</p>"},{"location":"get-started/sample-use-cases/single-sign-on/#run-the-sample-scenario_1","title":"Run the sample scenario","text":"<p>First, let's set up and run the sample applications.</p> <ol> <li> <p>Follow the instructions on setting up the samples.</p> <p>Info</p> <p>A message appears to pick a scenario.</p> <p> </p> </li> <li> <p>Enter <code>2</code> as the scenario number at the command prompt.</p> <p>Info</p> <p>Note that a message with the user and application details appears.</p> <p></p> </li> </ol>"},{"location":"get-started/sample-use-cases/single-sign-on/#try-it-out_1","title":"Try it out","text":"<p>Let's access both Pickup-Dispatch and Pickup-Manager applications and proceed to sign in.</p> <ol> <li> <p>Copy <code>http://localhost.com:8080/pickup-dispatch</code> to your web browser to access the Pickup Dispatch application.</p> </li> <li> <p>Click Login to access the authentication page.</p> <p></p> </li> <li> <p>Enter either of the following credentials to sign in to the     application.</p> <pre><code>Senior Manager --&gt; Username: cameron | Password: cameron123\nJunior Manager --&gt; Username: alex    | Password: alex123\n</code></pre> <p></p> </li> <li> <p>Select the attributes you agree to share with the Pickup-Dispatch application and click Continue.</p> <p></p> <p>Note</p> <p>Obtaining user consent is a fundamental requirement of the General Data Protection Regulation (GDPR). WSO2 Identity Server facilitates this through its Consent Management features.  To learn more about GDPR and how WSO2 Identity Server handles consent, see Consent Management.</p> <p>Note that the Pickup-Dispatch application home screen appears.</p> <p></p> </li> <li> <p>Similarly, copy <code>http://localhost:8080/pickup-manager</code>     to a browser to access the Pickup Manager application. </p> <p>Info</p> <p>Notice that the Pickup-Manager application opens without having to enter the user credentials.  </p> <p></p> </li> </ol> <p>You have set up SSO and your employees only have to provide credentials once to access both Pickup-Dispatch and Pickup-Manager applications.</p>"},{"location":"get-started/sample-use-cases/single-sign-on/#whats-next","title":"What's next?","text":"<p>To try out other scenarios, navigate back to the command-line where you ran the quickstart sample and enter <code>y</code> to clean the setup.</p> <p></p>"},{"location":"get-started/try-samples/","title":"Index","text":"Try a sample app Pick a technology and try a sample application with WSO2 Identity Server login. React Javascript Java EE - OIDC Java EE - SAML"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/","title":"Sample OIDC Java EE web app","text":"<p>By following this guide, you will be able to deploy a Java EE web application locally and secure it with OpenID Connect.</p>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Apache tomcat 9.x or 8.x</p> <p>If you don't have it, install Apache tomcat.</p> </li> <li> <p>A user account in the WSO2 Identity Server</p> <p>If you don't already have one, create a user account in the WSO2 Identity Server.</p> </li> </ul>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#register-the-app","title":"Register the app","text":"<p>Follow the steps given below to register the sample Java EE web application in Asgardeo.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Click New Application and select Traditional Web Application:</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name Give a unique name to identify your application. Protocol Select OpenID Connect. Authorized redirect URLs              The URL to which the user is redirected after a successful login. Use the following URL for this sample app:             <p><code>http://localhost:8080/oidc-sample-app/oauth2client</code></p> </p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li> <p>Go to the Protocol tab and take note of the Client ID and the Client secret. You will need them to configure the application later.</p> <p></p> </li> </ol> <p>Tip</p> <p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL from the General tab of the application. (For this sample application, the access URL is <code>https://localhost:8080/oidc-sample-app</code>).</p> <p>The access URL is used,</p> <ul> <li>in the application catalog and discovery flows.</li> <li>to redirect the user back to the application in the following scenarios.<ul> <li>if the login page times out</li> <li>after a password reset</li> <li>after the self sign-up verification</li> </ul> </li> <li>to re-initiate the login flow if the login flow fails.</li> </ul>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> Download sample View source"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li> <p>Move the  war file that you downloaded to the <code>{TOMCAT_HOME}/webapps</code> folder where <code>{TOMCAT_HOME}</code> is the home directory of your Tomcat server.</p> </li> <li> <p>Open a terminal, navigate to the <code>{TOMCAT_HOME}/bin</code> folder, and start the Tomcat server using the following command:</p> <pre><code>sh catalina.sh start\n</code></pre> <p>Note</p> <p>This will extract the contents of the war file.  If your Tomcat server is set to auto-deploy applications, you can skip this step.</p> </li> <li> <p>Go to the <code>{TOMCAT_HOME}/webapps/oidc-sample-app/WEB-INF/classes</code> folder and open the <code>oidc-sample-app.properties</code> file in a text editor.</p> </li> <li> <p>Update the following in the <code>oidc-sample-app.properties</code> file:</p> <p><pre><code>consumerKey={client ID}\nconsumerSecret={client secret}\nscope=openid,address,email,profile\n\ncallBackURL=http://localhost:8080/oidc-sample-app/oauth2client\ntrustedAudience=http://localhost:8080/oidc-sample-app      \n\nissuer=https://localhost:9443/oauth2/token\nauthorizeEndpoint=https://localhost:9443/oauth2/authorize\nlogoutEndpoint=https://localhost:9443/oidc/logout\ntokenEndpoint=https://localhost:9443/oauth2/token\njwksEndpoint=https://localhost:9443/oauth2/jwks\n#sessionIFrameEndpoint=https://localhost:9443/oidc/checksession\n\nskipURIs=/oidc-sample-app/index.html\nindexPage=index.html\nlogoutURL=logout errorPage=error.jsp\n</code></pre> Configuration Description <code>consumerKey</code>          The client id of the registered application.      <code>consumerSecret</code> The client secret of the registered application. <code>scope</code> <p>The list of OIDC scopes that are used for requesting user information. You can add OIDC scopes such as <code>profile</code> and <code>email</code> in a comma-separated list as follows: </p> <code>scope=openid,address,email,profile</code> <code>issuer</code>          Issuer endpoint of the WSO2 Identity Server used for id token validation:         <code>https://localhost:9443/oauth2/token</code> <code>authorizeEndpoint</code> The authorization endpoint of the WSO2 Identity Server:         <code>https://localhost:9443/oauth2/authorize</code> <code>logoutEndpoint</code> The logout endpoint of the WSO2 Identity Server:       <code>https://localhost:9443/oidc/logout</code> <code>tokenEndpoint</code> The token endpoint of the WSO2 Identity Server:         <code>https://localhost:9443/oauth2/token</code> <code>jwksEndpoint</code> The jwks endpoint of the WSO2 Identity Server:         <code>https://localhost:9443/oauth2/jwks</code> </p> </li> <li> <p>On your terminal, navigate to the <code>{TOMCAT_HOME}/bin</code> folder and run the following commands to restart the Tomcat server for the configurations to take effect:</p> <pre><code>sh catalina.sh stop\nsh catalina.sh start\n</code></pre> </li> </ol>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#run-the-sample","title":"Run the sample","text":"<p>Follow the steps given below to run the sample.</p> <ol> <li> <p>Access the application using the following URL: <code>http://localhost:8080/oidc-sample-app/index.html</code>.</p> </li> <li> <p>Click Login. You will be redirected to the Asgardeo login page.</p> <p></p> </li> <li> <p>Enter the credentials of your user account and click Sign In.</p> </li> </ol>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/","title":"Sample SAML Java EE web app","text":"<p>By following this guide, you will be able to deploy a Java EE web application locally and secure it with SAML.</p>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Apache tomcat 9.x or 8.x</p> <p>If you don't have it, install Apache tomcat.</p> </li> <li> <p>A user account in the WSO2 Identity Server</p> <p>If you don't already have one, create a user account in the WSO2 Identity Server.</p> </li> </ul>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#register-the-app","title":"Register the app","text":"<p>Follow these steps given below to register the sample Java EE web application in the WSO2 Identity Server.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Click New Application and select Traditional Web Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name          Give a unique name to identify your application.         <p>e.g.:<code>sample-app</code></p> Protocol Select SAML. Configruation type Select Manual (Learn more about SAML configuration types) Issuer      Add a unique identifier for the application. This should be used in the SAML authentication request sent from the client. You can't change the issuer after the app is registered.     <p>e.g.:<code>sample-issuer</code></p> Assertion consumer service URLs      The URL to which the user is redirected after login and logout. Use the following URL for this sample app:     <p><code>http://localhost:8080/sample-app/home.jsp</code></p>  5. Click Register to complete the registration.</p> </li> </ol> <p>Tip</p> <p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL from the General tab of the application. (For this sample application, the access URL is <code>https://localhost:8080/sample-app</code>).</p> <p>The access URL is used,</p> <ul> <li>in the application catalog and discovery flows.</li> <li>to redirect the user back to the application in the following scenarios.<ul> <li>if the login page times out</li> <li>after a password reset</li> <li>after the self sign-up verification</li> </ul> </li> <li>to re-initiate the login flow if the login flow fails.</li> </ul>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> Download sample View source"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li> <p>Move the  war file that you downloaded to the <code>{TOMCAT_HOME}/webapps</code> folder where <code>{TOMCAT_HOME}</code> is the root of your Tomcat server.</p> </li> <li> <p>Open a terminal, navigate to the <code>{TOMCAT_HOME}/bin</code> folder, and start the Tomcat server using the following command:</p> <p>Note</p> <p>This will extract the contents of the war file. </p> <p>If your Tomcat server is set to auto-deploy applications, you can skip this step.</p> <pre><code>sh catalina.sh start\n</code></pre> </li> <li> <p>Go to the <code>{TOMCAT_HOME}/webapps/sample-app/WEB-INF/classes</code> folder and open the <code>sample-app.properties</code> file in a text editor.</p> </li> <li> <p>Update the following in the <code>sample-app.properties</code> file:</p> <p>Note</p> <ul> <li>Update the SAML2.IdPEntityId parameter with the WSO2 Identity Server issuer, which is <code>localhost</code>.</li> <li>SAML2.SPEntityId should match the issuer name entered when registering the application in the WSO2 Identity.</li> </ul> <p><pre><code>SAML2.AssertionConsumerURL=http://localhost:8080/sample-app/home.jsp\nSAML2.SPEntityId=sample-issuer\nSAML2.IdPEntityId=localhost\nSAML2.IdPURL=https://localhost:9443/samlsso\nSAML2SSOURL=samlsso\nEnableSAML2SSOLogin=true\nSAML2.EnableSLO=true\nSAML2.SLOURL=logout\nSkipURIs=/sample-app/index.html\nIndexPage=index.html\nErrorPage=/error.jsp\nSAML2.EnableResponseSigning=false\nSAML2.EnableAssertionSigning=false\nSAML2.EnableAssertionEncryption=false\nSAML2.EnableRequestSigning=true\nSAML2.IsPassiveAuthn=false\nIdPPublicCert={public_cert_of_identity-server}\nKeyStorePassword=wso2carbon\nPrivateKeyAlias=wso2carbon\nIdPPublicCertAlias=wso2carbon\nPrivateKeyPassword=wso2carbon\n</code></pre> Configuration Description <code>SAML2.AssertionConsumerURL</code>        The URL to which the user is redirected after login and logout.       <code>SAML2.SPEntityId</code>          The SAML issuer that is used when registering your application with the WSO2 Identity Server.        <code>SAML2.IdPEntityId</code>          The issuer name of the WSO2 Identity Server.         <p><code>localhost</code></p> <code>SAML2.IdPURL</code>          The endpoint of the WSO2 Identity Server to which login and logout requests should be sent:         <p><code>https://localhost:9443/samlsso</code></p> <code>IdPPublicCert</code> This specifies the public certificate of the WSO2 Identity Server. You can obtain the public certificate from the Console. See how to get SAML configurations from the WSO2 Identity Server Console. <code>skipURIs</code> Defines the web pages in your application that should not be secured and does not require authentication. </p> Other properties<p> Configuration Description <code>EnableSAML2SSOLogin</code>          Specifies whether single sign-on is enabled for this application.        <code> SAML2.EnableSLO</code>          Specifies whether logout is enabled for this application.        <code>SAML2.EnableResponseSigning</code>          If this configuration is set to <code>true</code>, the application validates the signature in the SAML response. You also need to enable response signing from Asgardeo.         If this configuration is set to <code>false</code>, the application does not mandate response signing from Asgardeo.        <code>SAML2.EnableAssertionSigning</code>        If this configuration is set to <code>true</code>, the application validates the signature in the SAML assertion. You also need to enable response signing from Asgardeo.       If this configuration is set to <code>false</code>, the application does not mandate response signing from Asgardeo.      <code>SAML2.EnableAssertionEncryption</code>        If this configuration is set to <code>true</code>, the application expects an encrypted SAML assertion. You also need to enable encryption for SAML assertions from Asgardeo.      <code>SAML2.EnableRequestSigning</code>        If this configuration is set to <code>true</code>, Asgardeo validates the SAML authentication request and logout request. You also need to enable request signing from Asgardeo.      <code>SAML2.IsPassiveAuthn</code>        Specifies whether to enable passive authentication.      <code>KeyStorePassword</code>        Keystore password of your application.      <code>PrivateKeyAlias</code>        Private key alias of your application.      <code>PrivateKeyPassword</code>        Password of the private key of your application.      </p> </li> <li> <p>In the <code>{TOMCAT_HOME}/bin</code> folder, run the following commands to restart the Tomcat server for the configurations to take effect:</p> <pre><code>sh catalina.sh stop\nsh catalina.sh start\n</code></pre> </li> </ol>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#run-the-sample","title":"Run the sample","text":"<p>Follow the steps given below to run the sample.</p> <ol> <li> <p>Access the application using the following URL: <code>http://localhost:8080/sample-app/index.html</code>.</p> </li> <li> <p>Click Login. You will be redirected to the Asgardeo login page.</p> <p></p> </li> <li> <p>Enter credentials of your user account and click Sign In.</p> <p>Extend your login session</p> <p>By default, the user login session is active for only <code>15 minutes</code>. You can extend the session to <code>14 days</code> by selecting the Remember me on this computer option provided at the login screen of your application.</p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-javascript/","title":"Sample JavaScript SPA","text":"<p>By following this guide, you will be able to deploy a Javascript single-page application locally and secure it with OpenID Connect.</p>"},{"location":"get-started/try-samples/qsg-spa-javascript/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>npm with Node.js</p> <p>If you don't have it, install npm and node in your local environment.</p> </li> <li> <p>A user account in the WSO2 Identity Server</p> <p>If you don't already have one, create a user account in the WSO2 Identity Server.</p> </li> </ul>"},{"location":"get-started/try-samples/qsg-spa-javascript/#register-the-app","title":"Register the app","text":"<p>Follow the steps given below to register the sample Javascript SPA in the WSO2 Identity Server.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Click New Application and select Single-Page Application.</p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name Give a unique name to identify your application. Authorized redirect URLs <p>The URL to which the user is redirected after a successful login. Use the following URL for this sample app:</p> <code>https://localhost:3000</code> Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li> <p>Go to the Protocol tab and take note of the Client ID. You will need it to configure the application later.</p> <p></p> </li> </ol> <p>Tip</p> <p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL from the General tab of the application. (For this sample application, the access URL is <code>https://localhost:3000</code>).</p> <p>The access URL is used,</p> <ul> <li>in the application catalog and discovery flows.</li> <li>to redirect the user back to the application in the following scenarios.<ul> <li>if the login page times out</li> <li>after a password reset</li> <li>after the self sign-up verification</li> </ul> </li> <li>to re-initiate the login flow if the login flow fails.</li> </ul>"},{"location":"get-started/try-samples/qsg-spa-javascript/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> Download sample View source"},{"location":"get-started/try-samples/qsg-spa-javascript/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li>Unzip the application folder and open the <code>index.html</code> file located at the root of the project in a text editor.</li> <li>Scroll down towards the end of the body and find the <code>&lt;script&gt;</code> tag with the <code>authConfig</code> object.</li> <li> <p>Update the following in the <code>authConfig</code> object:</p> <pre><code>const authConfig = {\n    clientID: \"{client ID}\",\n    signInRedirectURL: \"https://localhost:3000\",\n    baseUrl: \"https://localhost:9443\",\n    scope: [ \"profile\" ]\n};\n</code></pre> <p> Configuration Description <code>clientID</code>          The client id that you received when you registered the application in the WSO2 Identity Server.      <code>baseUrl</code> <p>All authentication requests that the client application makes to the WSO2 Identity Server will be appended to this base URL.:</p> <code>https://localhost:9443</code> <code>scope</code> <p>The list of OIDC scopes that are used for requesting user information. You can add OIDC scopes such as <code>profile</code> and <code>email</code> in a comma-separated list as follows: </p> <code>\"scope\": [\"profile\", \"email\"]</code> <p>Learn more about OIDC scopes in the WSO2 Identity Server.</p> </p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-javascript/#run-the-sample","title":"Run the sample","text":"<p>Follow the steps given below to run the sample.</p> <ol> <li> <p>On your terminal, navigate to the root of the project and run the command given below to start the sample application:</p> <pre><code>npm install &amp;&amp; npm start\n</code></pre> </li> <li> <p>Once the app is successfully compiled, it is accessible at <code>https://localhost:3000</code>.</p> </li> <li> <p>Click Login. You will be redirected to the WSO2 Identity Server login page.</p> <p></p> </li> <li> <p>Enter the credentials of your user account and click Sign In.</p> <p>Extend your login session</p> <p>By default, the user login session is active for only <code>15 minutes</code>. You can extend the session to <code>14 days</code> by selecting the Remember me on this computer option provided at the login screen of your application.</p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-react/","title":"Sample React SPA","text":"<p>By following this guide, you will be able to deploy a React single-page application (SPA) locally and secure it with OpenID Connect.</p>"},{"location":"get-started/try-samples/qsg-spa-react/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>npm with Node.js</p> <p>If you don't have it, install npm and node in your local environment.</p> </li> <li> <p>A user account in the WSO2 Identity Server</p> <p>If you don't already have one, create a user account in the WSO2 Identity Server.</p> </li> </ul>"},{"location":"get-started/try-samples/qsg-spa-react/#register-the-app","title":"Register the app","text":"<p>Follow the steps given below to register the sample React SPA in the WSO2 Identity Server.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Click New Application and select Single-Page Application</p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name Give a unique name to identify your application. Authorized redirect URLs <p>The URL to which the user is redirect to after a successful login. Use the following URL for this sample app:</p> <code>https://localhost:3000</code> Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your primary organization. </p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li> <p>Go to the Protocol tab and take note of the Client ID. You will need it to configure the application later.</p> <p></p> </li> </ol> <p>Tip</p> <p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL from the General tab of the application. (For this sample application, the access URL is <code>https://localhost:3000</code>).</p> <p>The access URL is used,</p> <ul> <li>in the application catalog and discovery flows.</li> <li>to redirect the user back to the application in the following scenarios.<ul> <li>if the login page times out</li> <li>after a password reset</li> <li>after the self sign-up verification</li> </ul> </li> <li>to re-initiate the login flow if the login flow fails.</li> </ul>"},{"location":"get-started/try-samples/qsg-spa-react/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> Download sample View source"},{"location":"get-started/try-samples/qsg-spa-react/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li> <p>Unzip the application folder.</p> </li> <li> <p>Go to the <code>asgardeo-react-app/src/</code> folder and open the <code>config.json</code> file in a text editor.</p> </li> <li> <p>Update the following in the <code>config.json</code> file:</p> <pre><code>{\n\"clientID\": \"{client ID}\",\n\"baseUrl\": \"https://localhost:9443\",\n\"signInRedirectURL\": \"https://localhost:3000\",\n\"signOutRedirectURL\": \"https://localhost:3000\",\n\"scope\": [ \"profile\" ]\n}\n</code></pre> <p> Configuration Description <code>clientID</code>          The client id that you received when you registered the application in the WSO2 Identity Server.      <code>baseUrl</code> <p>All authentication requests that the client application makes to the WSO2 Identity Server will be appended to this base URL.:</p> <code>https://localhost:9443</code> <code>scope</code> <p>The list of OIDC scopes that are used for requesting user information. You can add OIDC scopes such as <code>profile</code> and <code>email</code> in a comma-separated list as follows: </p> <code>\"scope\": [\"profile\", \"email\"]</code> <p>Learn more about OIDC scopes in the WSO2 Identity Server.</p> </p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-react/#run-the-sample","title":"Run the sample","text":"<p>Follow the steps given below to run the sample.</p> <ol> <li> <p>On your terminal, navigate to the root of the project and run the command given below to start the sample application:</p> <pre><code>npm install &amp;&amp; npm start\n</code></pre> </li> <li> <p>Once the app is successfully compiled, it is accessible at <code>https://localhost:3000</code>.</p> </li> <li> <p>Click Login. You will be redirected to the WSO2 Identity Server login page.</p> <p></p> </li> <li> <p>Enter the credentials of your user account and click Sign In.</p> <p>Extend your login session</p> <p>By default, the user login session is active for only <code>15 minutes</code>. You can extend the session to <code>14 days</code> by selecting the Remember me on this computer option provided at the login screen of your application.</p> </li> </ol>"},{"location":"get-started/try-your-own-app/","title":"Index","text":"Try your own app Pick the technology of your application and follow the instructions to enable WSO2 Identity Server login. React Javascript Java EE - OIDC Java EE - SAML"},{"location":"get-started/try-your-own-app/java-ee-oidc/","title":"Integrate OIDC with your Java EE webapp","text":"<p>Follow the steps given below to authenticate users to your Java EE web application deployed on Tomcat using the Asgardeo Tomcat OIDC Agent which enables OIDC-based login and logout.</p> Try out the sample app"},{"location":"get-started/try-your-own-app/java-ee-oidc/#prerequisites","title":"Prerequisites","text":"<ul> <li>Download Apache Tomcat 9.x or 8.x in your local environment.</li> <li>Download, and install Apache Maven (3.6.x or higher) as the package manager if you already haven't.</li> <li>You need to have an application registered in the WSO2 Identity Server. If you don't, see the instructions on registering an OIDC application.</li> </ul>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#install-the-sdk","title":"Install the SDK","text":"<p>To get started with the OIDC agent, you need to add relevant dependencies. By updating the <code>pom.xml</code> file with the following dependency, you can add the OIDC agent to your project.</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;io.asgardeo.tomcat.oidc.agent&lt;/groupId&gt;\n&lt;artifactId&gt;io.asgardeo.tomcat.oidc.agent&lt;/artifactId&gt;\n&lt;version&gt;0.1.27&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>The Agent is hosted at WSO2 Internal Repository. To resolve the dependency mentioned above, point to the repository as follows.</p> <pre><code>&lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;wso2.releases&lt;/id&gt;\n&lt;name&gt;WSO2 internal Repository&lt;/name&gt;\n&lt;url&gt;http://maven.wso2.org/nexus/content/repositories/releases/&lt;/url&gt;\n&lt;releases&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;\n&lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt;\n&lt;/releases&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#initialize-the-sdk","title":"Initialize the SDK","text":"<p>To initialize the OIDC agent, you need a property file with the configurations such as the WSO2 Identity Server endpoints. The Asgardeo OIDC agent reads the configurations from this file.</p> <p>Create a file named <code>oidc-sample-app.properties</code> in the /src/main/resources directory, using the content below. <p>Note</p> <p>The <code>skipURIs</code> property defines the web pages in your application that should not be secured, and do not require authentication.</p> <p>Few of the configurations such as <code>callBackURL</code> and <code>skipURIs</code> depends on the context path of your application.</p> <pre><code>consumerKey=&lt;consumerKey&gt;\nconsumerSecret=&lt;consumerSecret&gt;\ncallBackURL=&lt;YOUR_APP_PATH&gt;/oauth2client\nscope=openid\nlogoutURL=logout\nauthorizeEndpoint=https://localhst:9443/localhost:9443/oauth2/authorize\nlogoutEndpoint=https://localhst:9443/oidc/logout\ntokenEndpoint=https://localhst:9443/oauth2/token\nissuer=https://localhst:9443//oauth2/token\njwksEndpoint=https://localhst:9443/oauth2/jwks\nskipURIs=&lt;YOUR_APP_PATH&gt;/index.html\n</code></pre> <p>A comprehensive list of the properties used above can be found in the Configuration Catalog .</p> <p>Finally, copy and paste the following configuration to the /src/main/webapp/WEB-INF/web.xml file. <pre><code>&lt;filter&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;filter-class&gt;io.asgardeo.tomcat.oidc.agent.OIDCAgentFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/logout&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/oauth2client&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;listener&gt;\n&lt;listener-class&gt;io.asgardeo.tomcat.oidc.agent.SSOAgentContextEventListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;context-param&gt;\n&lt;param-name&gt;app-property-file&lt;/param-name&gt;\n&lt;param-value&gt;oidc-sample-app.properties&lt;/param-value&gt;\n&lt;/context-param&gt;\n&lt;listener&gt;\n&lt;listener-class&gt;io.asgardeo.tomcat.oidc.agent.JKSLoader&lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#add-login","title":"Add login","text":"<p>In the <code>index.html</code> file, add a login button to redirect the user to secure pages upon successful login.</p> <p>Once the user clicks on the button, the request will be intercepted by the OIDC agent and will initiate the OIDC Login flow if it does not find an authenticated application session.</p> <pre><code>&lt;form action=\"&lt;HOME_PAGE&gt;\" method=\"post\"&gt;\n    &lt;input type=\"submit\" value=\"Log In\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#add-logout","title":"Add logout","text":"<p>Add the following snippet to enable logout.</p> <p>When the user initiates the logout, the local authenticated application session is cleared and the session in the WSO2 Identity Server is terminated.</p> <pre><code>&lt;form action=\"logout\" method=\"get\"&gt;\n    &lt;input type=\"submit\" value=\"Log Out\"&gt;\n&lt;/form&gt;\n</code></pre> <p>See the Asgardeo Tomcat OIDC Agent documentation for more information on how it works.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/","title":"Integrate SAML with your Java EE webapp","text":"<p>Follow the steps given below to authenticate users to your Java EE web application deployed on Tomcat using the Asgardeo Tomcat SAML Agent which enables SAML-based login and logout.</p> Try out the sample app"},{"location":"get-started/try-your-own-app/java-ee-saml/#prerequisites","title":"Prerequisites","text":"<ul> <li>Download Apache Tomcat 9.x or 8.x in your local environment.</li> <li>Download and install Apache Maven (3.6.x or higher) as the package manager if you already haven't.</li> <li>You need to have an application already registered in the WSO2 Identity Server. If you don't, see the instructions on registering a SAML application.</li> </ul>"},{"location":"get-started/try-your-own-app/java-ee-saml/#install-the-sdk","title":"Install the SDK","text":"<p>Follow the steps given below to install the SAML agent.</p> <ol> <li> <p>Add the relevant dependencies.  </p> <p>To get started, you need to enable the SAML agent in your application's project by adding the relevant dependencies to the <code>pom.xml</code> file.</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;io.asgardeo.tomcat.saml.agent&lt;/groupId&gt;\n&lt;artifactId&gt;io.asgardeo.tomcat.saml.agent&lt;/artifactId&gt;\n&lt;version&gt;0.1.31&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>Add the nexus repository.</p> <p>The agent is hosted at WSO2 Internal Repository. Point to this nexus repository to resolve the dependency mentioned above.</p> <pre><code>&lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;wso2.releases&lt;/id&gt;\n&lt;name&gt;WSO2 internal Repository&lt;/name&gt;\n&lt;url&gt;http://maven.wso2.org/nexus/content/repositories/releases/&lt;/url&gt;\n&lt;releases&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;\n&lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt;\n&lt;/releases&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre> </li> </ol> <p>See the reference documentation to learn more.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/#initialize-the-sdk","title":"Initialize the SDK","text":"<p>Follow the steps given below to initialize the SAML agent.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/#create-the-configuration-file","title":"Create the configuration file","text":"<p>To initialize the SAML agent, you need a property file with the configurations such as the the WSO2 Identity Server endpoints. The Asgardeo SAML agent reads the configurations from this file.</p> <p>Create a file named sample-app.properties inside the /src/main/resources directory, using the content below. <pre><code>```saml\nSAML2.AssertionConsumerURL={acs_url}\nSAML2.SPEntityId={entity_id}\nSAML2.IdPEntityId=localhost\nSAML2.IdPURL=https://localhost:9443/samlsso\nSAML2SSOURL=samlsso\nEnableSAML2SSOLogin=true\nSAML2.EnableSLO=true\nSAML2.SLOURL=logout\nSkipURIs=/sample-app/index.html\nIndexPage=index.html\nErrorPage=/error.jsp\nSAML2.EnableResponseSigning=false\nSAML2.EnableAssertionSigning=false\nSAML2.EnableAssertionEncryption=false\nSAML2.EnableRequestSigning=true\nSAML2.IsPassiveAuthn=false\nIdPPublicCert={public_cert_of_identity-server}\nKeyStorePassword=wso2carbon\nPrivateKeyAlias=wso2carbon\nIdPPublicCertAlias=wso2carbon\nPrivateKeyPassword=wso2carbon\n```\n</code></pre> <p> Configuration Description <code>SAML2.AssertionConsumerURL</code>        The URL to which the user is redirected after login and logout.        <code>SAML2.SPEntityId</code>          The SAML issuer that is used when registering your application with the WSO2 Identity Server.        <code>SAML2.IdPEntityId</code>          The issuer name of the WSO2 Identity Server.         <p><code>localhost</code></p> <code>SAML2.IdPURL</code>          The endpoint of the WSO2 Identity Server to which login and logout requests should be sent:         <p><code>https://localhost:9443/samlsso</code></p> <code>IdPPublicCert</code> This specifies the public certificate of the WSO2 Identity Server. You can obtain the publiccertificate from the Console. See how to get SAML configurations from the WSO2 Identity Server Console. <code>skipURIs</code> Defines the web pages in your application that should not be secured and does not requireauthentication. <code>EnableSAML2SSOLogin</code>          Specifies whether single sign-on is enabled for this application.        <code> SAML2.EnableSLO</code>          Specifies whether logout is enabled for this application.        <code>SAML2.EnableResponseSigning</code>          If this configuration is set to <code>true</code>, the application validates the signature in SAML response. You also need to enable response signing from Asgardeo.         If this configuration is set to <code>false</code>, the application does not mandate response signfrom Asgardeo.        <code>SAML2.EnableAssertionSigning</code>          If this configuration is set to <code>true</code>, the application validates the signature in the SAML assertion. You also need to enable response signing from Asgardeo.         If this configuration is set to <code>false</code>, the application does not mandate response signifrom Asgardeo.        <code>SAML2.EnableAssertionEncryption</code>          If this configuration is set to <code>true</code>, the application expects an encrypted SAML assertion. You also need to enable encryption for SAML assertions from Asgardeo.        <code>SAML2.EnableRequestSigning</code>          If this configuration is set to <code>true</code>, Asgardeo validates the SAML authentication requeand logout request. You also need to enable request signing from Asgardeo.        <code>SAML2.IsPassiveAuthn</code>          Specifies whether to enable passive authentication.        <code>KeyStorePassword</code>          Keystore password of your application.        <code>PrivateKeyAlias</code>          Private key alias of your application.        <code>PrivateKeyPassword</code>          Password of the private key of your application.        <p>See the complete list of configuration properties.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/#configure-the-keystore","title":"Configure the keystore","text":"<p>Copy the following configurations to the /WEB-INF/web.xml file and change the certificate-file parameter to the name of your keystore file. <pre><code>&lt;filter&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;filter-class&gt;io.asgardeo.tomcat.saml.agent.SAML2SSOAgentFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/samlsso&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/logout&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n\n&lt;listener&gt;\n&lt;listener-class&gt;io.asgardeo.tomcat.saml.agent.SSOAgentContextEventListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;context-param&gt;\n&lt;param-name&gt;property-file&lt;/param-name&gt;\n&lt;param-value&gt;sample-app.properties&lt;/param-value&gt;\n&lt;/context-param&gt;\n&lt;context-param&gt;\n&lt;param-name&gt;certificate-file&lt;/param-name&gt;\n&lt;param-value&gt;KEYSTORE_FILE_NAME&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-saml/#add-login","title":"Add login","text":"<p>In the <code>index.html</code> file, add a login button to be used to redirect users to secure pages.</p> <p>When the user clicks the button, the SAML agent intercepts the request and initiates the SAML login flow if an authenticated session does not already exist.</p> <pre><code>&lt;form action=\"&lt;HOME_PAGE&gt;\" method=\"post\"&gt;\n    &lt;input type=\"submit\" value=\"log in\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-saml/#add-logout","title":"Add logout","text":"<p>In the previous steps, you implemented login for your app. Now you need a way to log users out of your application and remove the user sessions from Asgardeo.</p> <p>When the user initiates the logout, the local authenticated application session is cleared and the session in Asgardeo is terminated.</p> <p>Add the following snippet to enable logout.</p> <pre><code>&lt;form action=\"logout?SAML2.HTTPBinding=HTTP-POST\" method=\"get\"&gt;\n    &lt;input type=\"submit\" value=\"Log Out\"&gt;\n&lt;/form&gt;\n</code></pre> <p>See the Asgardeo Tomcat SAML Agent documentation for more information.</p>"},{"location":"get-started/try-your-own-app/javascript/","title":"Integrate with your JavaScript SPA","text":"<p>Follow the steps given below to authenticate users to your JavaScript SPA with OpenID Connect using the Asgardeo JavaScript SDK.</p> Try out the sample app"},{"location":"get-started/try-your-own-app/javascript/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install npm and node in your local environment.</li> <li>Register an application in the WSO2 Identity Server.</li> </ul>"},{"location":"get-started/try-your-own-app/javascript/#install-the-sdk","title":"Install the SDK","text":"<p>There are two ways to integrate the <code>@asgardeo/auth-spa</code> SDK into your JavaScript application.</p>"},{"location":"get-started/try-your-own-app/javascript/#load-from-a-cdn","title":"Load from a CDN","text":"<p>You can pull down the <code>@asgardeo/auth-spa</code> SDK from the <code>unpkg</code> content delivery network (CDN) by adding the following script to the <code>index.html</code> file in your application.</p> <pre><code>&lt;script src=\"https://unpkg.com/@asgardeo/auth-spa@latest/dist/asgardeo-spa.production.min.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#install-using-package-manager","title":"Install using package manager","text":"<p>You can also install the <code>@asgardeo/auth-spa package</code> from <code>npm</code> or <code>yarn</code> package manager.</p> <pre><code>npm install @asgardeo/auth-spa --save\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#configure-asgardeospaclient","title":"Configure <code>AsgardeoSPAClient</code>","text":"<p>You can use the following code within your root component to initialize <code>AsgardeoSPAClient</code> for your application.</p> <p>To initialize the SDK, use the <code>getInstance()</code> function in the SDK and provide the following values to the <code>auth.initialize()</code> function to get the SDK to work with your application:  Parameter Description <code>clientID</code> This is the Client ID of your OIDC app. See how to obtain client ID. <code>baseUrl</code> This is the WSO2 Identity server's URL in the form <code>https://{host}:{port}</code>. <code>signInRedirectURL</code> This is the URL the app redirects to after user login. See Authorized redirect URLs. <code>signOutRedirectURL</code> This is the URL the app redirects to after user logout. See Authorized redirect URLs. <code>scope</code> The list of OIDC scopes that are used for requesting user information. The <code>openid</code> scope is mandatory to get the ID token. You can add other OIDC scopes such as <code>profile</code> and <code>email</code>. </p> <pre><code>&lt;script&gt;\n// This client is a class and can be instantiated as follows.\nvar auth = AsgardeoAuth.AsgardeoSPAClient.getInstance();\n\n// Once instantiated, the  client can be initialized by passing the relevant parameters such as the server origin, redirect URL, client ID, etc.\nauth.initialize({\nsignInRedirectURL: \"https://localhost:3000\",\nsignOutRedirectURL: \"https://localhost:3000\",\nclientID: \"{clientId}\",\nbaseUrl: \"https://api.asgardeo.io/t/{organization_name}\",\nscope: [ \"openid\",\"profile\" ]\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#use-the-api","title":"Use the API","text":"<p>You can now start using the SDK's API to implement the required authentication logic. Follow the instructions given below to implement each use case.</p> <p>The created instance of the SDK could be used to access the session state that contains information such as the email address of the authenticated user and the methods that are required for implementing authentication.</p>"},{"location":"get-started/try-your-own-app/javascript/#add-login","title":"Add login","text":"<p>The <code>sign-in</code> hook is used to fire a callback function after successful sign-in.</p> <p>To sign in, simply call the <code>signIn()</code> function using the created instance.</p> <p>This method is used to authenticate the users and to get the authorization code and access token.</p> <pre><code>   &lt;button onClick=\"auth.signIn()\"&gt;Log In&lt;/button&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#get-access-token","title":"Get access token","text":"<p>Add the following script to the html file and call it from a button. This is used to get the access token from the SDK.</p> <p>See the SDK reference for more information.</p> <pre><code>&lt;script&gt;\n\nasync function getToken() {\nconst accessToken = await auth.getAccessToken();\nconsole.log(accessToken);\n}\n\n&lt;/script&gt;\n</code></pre> <p>Sample access token</p> <p>61985b0e-26c3-38b7-acff-b18ad934eafc</p>"},{"location":"get-started/try-your-own-app/javascript/#get-decoded-id-token","title":"Get decoded ID token","text":"<p>To get the decoded token, call <code>getDecodedIdToken()</code> from a button click as shown below. Decoded ID token is useful to get the user attributes in the form of claims.</p> <p>See the SDK reference for details.</p> <pre><code>&lt;script&gt;\n// Use this function in a button to simply get decoded ID token.\nfunction getDecodedIdToken(){\n\nauth.getDecodedIDToken().then((idToken) =&gt; {\nvar decodedIdToken = idToken;\n// Get claims from the decoded idtoken\nvar email = decodedIdToken.email;\n})\n}\n&lt;/script&gt;\n</code></pre> <p>Sample decoded ID Token object is given below:</p> <pre><code>{\n\"isk\": \"3af75bf6579a88cfb37ee85bd96c34524899857a91989be722e4ba53d392e3f7\",\n\"at_hash\": \"3gTKEUwxlPyxc1FPDmlxMw\",\n\"sub\": \"alica@bifrost.com\",\n\"country\": \"Sri Lanka\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"sid\": \"dd1621a7-bb3e-48cf-adae-861e261410e1\",\n\"aud\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n\"c_hash\": \"b15Dl_wI3rkoK0vukXYJew\",\n\"nbf\": 1625805110,\n\"azp\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n\"exp\": 1625808710,\n\"iat\": 1625805110,\n\"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>You can loop through the  decoded ID token, and get the following values:</p> sub <code>decodedIdToken.sub</code> email <code>decodedIdToken.email</code> country <code>decodedIdToken.country</code> <p></p>"},{"location":"get-started/try-your-own-app/javascript/#get-user-information","title":"Get user information","text":"<p>In addition to implementing login and logout, your application can also use the SDK to get user information.</p> <p>There are two ways for you to get user information:</p> <ul> <li> <p>Get user information from the decoded ID token.</p> </li> <li> <p>Use the <code>getBasicUserInfo()</code> API and get basic user information.</p> </li> </ul> <p>To get the basic user information from the SDK, copy the following script and call the <code>getBasicUserInfo()</code> from a button. See the SDK reference for details.</p> <pre><code>&lt;script&gt;\n// Use this function in a button to simply get user info.\nfunction getBasicUserInfo(){\nauth.getBasicUserInfo().then((userinfoResponse) =&gt; {\nconsole.log(userinfoResponse); // check userinfo response\nconsole.log(userinfoResponse.email);  // check email\n\n}).catch((error) =&gt; {\nconsole.error(error);\n});\n}\n&lt;/script&gt;\n</code></pre> <p>Sample user info response(<code>userinfoResponse</code>) object is below:</p> <pre><code>{\n\"allowedScopes\": \"openid\",\n\"sessionState\": \"f143343efdd6bcb57fe3d6215d9b740d2b1714df4bee0f506e31a7d75e1c2a8d.sI-dfLfA0yRDiKFvsG89LA\",\n\"username\": \"alica@bifrost.com\",\n\"country\": \"Sri Lanka\",\n\"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>You can loop through the user info response(<code>userinfoResponse</code>), and get the following values:</p> email <code>userinfoResponse.email</code> country <code>userinfoResponse.country</code> <p></p>"},{"location":"get-started/try-your-own-app/javascript/#add-logout","title":"Add logout","text":"<p>In the previous steps, you implemented login for your app and enabled your app to get some information about the user that is logged in. Now you need a way to log users out of your application and remove the user sessions from Asgardeo.</p> <p>See the signOut API reference for advanced usages.</p> <pre><code>&lt;button onClick=\"auth.signOut()\"&gt;Log Out&lt;/button&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#sample-code","title":"Sample code","text":"<p>The following code snippet demonstrates the process of accessing the authenticated user's information together with other functions from the SDK.</p> <pre><code>   &lt;div&gt;\n&lt;!-- Authenticated View ---&gt;\n&lt;div id=\"authenticated-view\" style=\"display: none;\"&gt;\n&lt;ul&gt;\n&lt;li id=\"username\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;button onClick=\"auth.signOut()\"&gt;Log Out&lt;/button&gt;\n&lt;/div&gt;\n&lt;!-- Un-Authenticated View ---&gt;\n&lt;div id=\"unauthenticated-view\" style=\"display: none;\"&gt;\n&lt;button onClick=\"auth.signIn()\"&gt;Log In&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n(async () =&gt; {\nlet user = undefined;\n\n// If there are auth search params i.e code, session_state, automatically trigger login.\n// Else, try to see if there's a session.\nif (AsgardeoAuth.SPAUtils.hasAuthSearchParamsInURL()) {\nuser = await auth.signIn({ callOnlyOnRedirect: true });\n} else {\nuser = await auth.trySignInSilently();\n}\n\n// Update the UI accordingly.\nif (user) {\ndocument.getElementById(\"authenticated-view\").style.display = \"block\";\ndocument.getElementById(\"unauthenticated-view\").style.display = \"none\";\ndocument.getElementById(\"username\").innerHTML = user.username;\n} else {\ndocument.getElementById(\"authenticated-view\").style.display = \"none\";\ndocument.getElementById(\"unauthenticated-view\").style.display = \"block\";\n}\n})();\n&lt;/script&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/react/","title":"Integrate with your React SPA","text":"<p>Follow the steps given below to authenticate users to your React SPA with OpenID Connect using the React SDK.</p> Try out the sample app"},{"location":"get-started/try-your-own-app/react/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install npm and node in your local environment.</li> <li>Register an application in the WSO2 Identity Server.</li> </ul> <p>Note</p> <p>In the tutorial,</p> <ul> <li>your organization name is referred to as <code>{org_name}</code>.</li> <li><code>{client_id}</code> refers to the client credential that you obtain once you register your application in the WSO2 Identity Server.</li> </ul>"},{"location":"get-started/try-your-own-app/react/#install-the-sdk","title":"Install the SDK","text":"<p>Run the following command to install the React SDK and the necessary dependencies from the npm registry.</p> <pre><code>npm install @asgardeo/auth-react react-router-dom --save\n</code></pre> <p>Note</p> <p>The <code>react-router-dom</code> package is a peer-dependency of the SDK and it is required for the SDK to work. We are working on making it optional.</p>"},{"location":"get-started/try-your-own-app/react/#configure-the-sdk","title":"Configure the SDK","text":"<p>SDK uses the React Context API under the hood to share the data between components. You can easily integrate the WSO2 Identity Server in your application by using <code>AuthProvider</code> as the wrapper element to inject configurations.</p> <p><code>AuthProvider</code> will provide the session state which contains information such as the authenticated user's display name, email address etc. as well as the methods required to implement authentication in the React app.</p> <p><pre><code>import { AuthProvider } from \"@asgardeo/auth-react\";\n</code></pre> <code>AuthProvider</code> takes a config object as a prop which is used to initialize the SDK instance. Copy and use the following code within your root component to configure <code>AuthProvider</code> for your application.</p> <p>Note</p> <p>Typically, the root component of a react app is defined in the <code>index.*</code> file.</p> <p><pre><code>import React from \"react\";\nimport { AuthProvider } from \"@asgardeo/auth-react\";\n\nconst config = {\nsignInRedirectURL: \"https://localhost:3000/sign-in\",\nsignOutRedirectURL: \"https://localhost:3000/sign-out\",\nclientID: \"{client_id}\",\nbaseUrl: \"https://localhost:9443\",\nscope: [ \"openid\",\"profile\" ]\n};\n\nexport const MyApp = (): ReactElement =&gt; {\nreturn (\n&lt;AuthProvider config={ config }&gt;\n&lt;App /&gt;\n&lt;/AuthProvider&gt;\n)\n}\n</code></pre> Details of the parameters are given below.</p> Parameter Description <code>clientID</code> This is the Client ID of your OIDC app. See how to obtain client ID. <code>baseUrl</code> This is the WSO2 Identity server's URL in the form <code>https://{host}:{port}</code>. <code>signInRedirectURL</code> This is the URL the app redirects to after user login. See Authorized redirect URLs <code>signOutRedirectURL</code> This is the URL the app redirects to after user logout. See Authorized redirect URLs <code>scope</code> The list of OIDC scopes that are used for requesting user information. The <code>openid</code> scope is mandatory to get the ID token. You can add other OIDC scopes such as <code>profile</code> and <code>email</code>."},{"location":"get-started/try-your-own-app/react/#access-the-session-state","title":"Access the session state","text":"<p>The <code>useAuthContext()</code> hook provided by the SDK could be used to access the session state that contains information such as the email address of the authenticated user and to access the methods that are required for implementing authentication.</p> <p>Note</p> <p>Once the root component is wrapped with <code>AuthProvider</code>, <code>useAuthContext()</code> hook can be used anywhere within the application.</p> <p>Use the below code segment to import the <code>useAuthContext()</code> hook from <code>@asgardeo/auth-react</code>.</p> <p><pre><code>import { useAuthContext } from \"@asgardeo/auth-react\";\n</code></pre> And then inside your components, you can access the context as follows.  </p> <p><pre><code>const { state, signIn, signOut } = useAuthContext();\n</code></pre> Few common methods that you can access with <code>useAuthContext()</code> are listed below. These will be helpful when implementing authentication capabilities in your application.</p> <ul> <li> <p><code>state</code> object - This will contain attributes such as whether a user is currently logged in, the username of the currently logged-in user etc.</p> </li> <li> <p><code>signIn</code> - Initiate a login request to the WSO2 Identity Server, process the response to obtain authentication response.</p> </li> <li> <p><code>signOut</code> - Logout the user from the WSO2 Identity Server and clear any authentication data from the SDK storage.</p> </li> <li> <p><code>isAuthenticated</code> - Check whether there is an authenticated user session. Based on the result you can decide to change the application view/behaviour.</p> </li> <li> <p><code>getBasicUserInfo</code> - Get authenticated user's basic information from the authentication response.</p> </li> <li> <p><code>getDecodedIDToken</code> - Get the decoded <code>id_token</code> obtained in the authentication response. From there you can derive more information such as additional user-attributes.</p> </li> <li> <p><code>getIDToken</code> - Get the <code>id_token</code> (JWT) obtained in the authentication response.</p> </li> <li> <p><code>getAccessToken</code> - Get the <code>access_token</code> obtained in the authentication response.</p> </li> <li> <p><code>refreshAccessToken</code> - Get the <code>refresh_token</code> obtained in the authentication response.</p> </li> </ul> <p>Note</p> <p>Methods related to the token such as <code>getIDToken</code>, <code>getDecodedIDToken</code>, <code>getAccessToken</code> and <code>refreshAccessToken</code> are only available if the storage mechanism is set to <code>sessionStorage</code> or <code>localStorage</code> in the SDK configuration. If it is set to <code>webWorker</code>, an error is thrown since the token is stored inside the web worker and cannot be accessed by outside party.</p>"},{"location":"get-started/try-your-own-app/react/#use-the-api","title":"Use the API","text":"<p>You can now start using the SDK's API to implement the required authentication logic. Follow the instructions given below to implement each use case.</p>"},{"location":"get-started/try-your-own-app/react/#access-the-state-object","title":"Access the <code>state</code> object","text":"<p>The <code>state</code> object contains attributes of a user. Its structure is as follows.</p> <p>Note</p> <p>The <code>isAuthenticated</code> attribute checks whether a user is currently logged in via the WSO2 Identity Server or not.</p>"},{"location":"get-started/try-your-own-app/react/#add-login-to-your-application","title":"Add login to your application","text":"<p>You can use the <code>useAuthContext</code> hook from the Asgardeo React SDK to easily authenticate your React application.</p> <p>Implement a login button as follows using the <code>signIn()</code> function in the <code>useAuthContext</code> hook.</p> <p><pre><code>&lt;button onClick={ () =&gt; signIn() }&gt;Login&lt;/button&gt;\n</code></pre> Clicking on the Login button will take the user to the the WSO2 Identity Server login page. Once <code>signIn()</code> succeeds, the user will be redirected to the app (based on the <code>signInRedirectURL</code> specified in the AuthProvider configuration) and the <code>state.isAuthenticated</code> will be set to <code>true</code>.</p>"},{"location":"get-started/try-your-own-app/react/#get-access-token","title":"Get access token","text":"<p>Once the user is logged in, the application can get the access token issued by the WSO2 Identity Server .</p> <p>See the SDK reference for more information.</p> <pre><code>const { getAccessToken } = useAuthContext();\n\nuseEffect(() =&gt; {\ngetAccessToken().then((accessToken) =&gt; {\n//console.log(accessToken);\n}).catch((error) =&gt; {\n//console.log(error);\n});\n}, []);\n</code></pre> <p>Sample access token is given below:</p> <pre><code>61985b0e-26c3-38b7-acff-b18ad934eafc\n</code></pre>"},{"location":"get-started/try-your-own-app/react/#get-user-information","title":"Get user information","text":"<p>In addition to implementing login and logout, you can also use the SDK to get user information.</p> <p>There are two ways for you to get user information: - Get user information from a decoded ID token. - Use the <code>getBasicUserInfo()</code> API and get basic user information.</p> <p><code>getBasicUserInfo()</code> can be used as follows.</p> <pre><code>const { getBasicUserInfo } = useAuthContext();\n\ngetBasicUserInfo().then((basicUserDetails) =&gt; {\nconsole.log(basicUserDetails);\n}).catch((error) =&gt; {\n// Handle the error\n})\n</code></pre> <p><code>basicUserDetails</code> object will have a structure similar to below:</p> <pre><code>{\n\"allowedScopes\": \"openid\",\n\"sessionState\": \"eb0e12f9a113f49ffef887a464c7980d84bb5b11dfeb1774309aee9b88c83c21.8-LXzzHCUSOOa2GeH-LFfA\",\n\"username\": \"alica@bifrost.com\",\n\"country\": \"Sri Lanka\",\n\"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>You can get additional information from the user by requesting user information using scopes</p>"},{"location":"get-started/try-your-own-app/react/#get-decoded-id-token","title":"Get decoded ID token","text":"<p>Once the user is logged in, the application can get the ID token issued by the WSO2 Identity Server.</p> <p>The SDK provides the <code>getDecodedIDToken()</code> API to get the decoded token. You can use this decoded token to obtain user claims as below.</p> <pre><code>const { getDecodedIDToken } = useAuthContext();\n\ngetDecodedIDToken().then((decodedIDToken) =&gt; {\nconsole.log(decodedIDToken);\n}).catch((error) =&gt; {\n// Handle the error\n})\n</code></pre> <p>Sample decoded ID token object is given below:</p> <pre><code>{\n\"isk\": \"329d5bf5732791509edabb093d78a4a2665dbc65d99119f45f1d4db1a2459cf1\",\n\"at_hash\": \"TN1HIyOnt_8shS2DalrdfQ\",\n\"sub\": \"alica@bifrost.com\",\n\"country\": \"Sri Lanka\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://localhost:9443/oauth2/token\",\n\"sid\": \"81a61d37-9a6d-487a-8f5f-c7a313c44c31\",\n\"aud\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n\"c_hash\": \"1pWTMQ7ZTxCWSapucJF-bw\",\n\"nbf\": 1627966715,\n\"azp\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n\"exp\": 1627970315,\n\"iat\": 1627966715,\n\"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>From the decoded ID Token(<code>decodedIDToken</code>) object, you can get the following information:</p> sub <code>decodedIDToken.sub</code> email <code>decodedIDToken.email</code> country <code>decodedIDToken.country</code> <p>You can loop through the <code>decodedIDToken</code> object and get the other claims as well.</p>"},{"location":"get-started/try-your-own-app/react/#add-logout-to-your-application","title":"Add logout to your application","text":"<p>We can use the <code>signOut()</code> method from <code>useAuthContext()</code> hook to implement a logout button.</p> <p><pre><code>&lt;button onClick={ () =&gt; signOut() }&gt;Logout&lt;/button&gt;\n</code></pre> Clicking on the Logout button will sign out the user. The user will then be redirected to the <code>signOutRedirectURL</code> (specified in the AuthProvider configuration) and the <code>state.isAuthenticated</code> will be set to <code>false</code>.</p> <p>Tip</p> <p>You can use the <code>state.isAuthenticated</code> attribute to check the authentication status of the user.</p>"},{"location":"get-started/try-your-own-app/react/#add-routing","title":"Add Routing","text":"<p>If your application needs routing, the SDK provides a component called <code>SecureRoute</code>, which is implemented with <code>react-router-dom</code>. This component allows you to easily secure your routes with the WSO2 Identity Server. You can learn more about routing here.</p>"},{"location":"get-started/try-your-own-app/react/#more-information","title":"More Information","text":"<p>If you want to learn in-depth about the Asgardeo React SDK, you can refer to the Asgardeo React SDK documentation.</p>"},{"location":"guides/","title":"Guides - Overview","text":"<p>The guides in this section provide the instructions for building identity and access management uses cases and managing them.</p>"},{"location":"guides/#developer-guide","title":"Developer guide","text":"<p>If you are an application developer, you can integrate your applications with WSO2 Identity Server to implement identity and access management use cases for your application.</p> <p>See the following sections for details:</p> <ul> <li>Applications</li> <li>Authentication</li> </ul>"},{"location":"guides/#administration-guide","title":"Administration guide","text":"<p>The adminstration guides cover the topics related to managing the users in your organizations and other organization settings.</p> <ul> <li>User Management</li> <li>User Account Management</li> <li>User Self-Service</li> </ul>"},{"location":"guides/#your-wso2-identity-server-guide","title":"Your WSO2 Identity Server guide","text":"<p>Manage your WSO2 Identity Server organization and your administration user account. See the topics in the Your WSO2 Identity Server section for details.</p>"},{"location":"guides/api-authorization/","title":"API authorization","text":"<p>Note</p> <p>This feature is not yet available in the EU region. We are working on making it accessible in the future.</p> <p>WSO2 Identity Server allows organizations to authorize user access to an application's API resources based on the application roles assigned to the users.</p> <p></p> <p>The following are the terms used in the API authorization context:</p> Term Description API resources Used to group the API scopes/permissions that your applications can consume. Permissions Interchangeably known as scopes. Permissions represent an action an application can perform on behalf of a user. These are the scopes an application need to request to obtain a token capable of accessing the API resource. Application roles Used to map the permissions of the API resource to a persona in the application. An application role is application specific. Group A collection of users with the same privileges to access resources in an organization. A group is organization specific. <p>The relationship between these entities is as follows:</p> <ul> <li>An API resource has permissions/scopes.</li> <li>An application has application roles, and the permissions of the API resource authorized to the application can be assigned to an application role.</li> <li>An WSO2 Identity Server organization has user groups with users assigned to each group, and application roles can be assigned to user groups.</li> </ul>"},{"location":"guides/api-authorization/#how-it-works","title":"How it works","text":"<p>Administrators in an organization have the authority to either allow unrestricted access or enforce controlled access to the API resources.</p> <p>If administrators choose to skip authorization, all application users will be authorized to access the API resources without any limitations.</p> <p>However, if authorization is mandated for the API resources, the following flow occurs:</p> <ol> <li>The user attempts to access an application with controlled access to API resources.</li> <li>WSO2 Identity Server verifies the user's group assignment.</li> <li>WSO2 Identity Server retrieves the user's roles by checking the group-to-role mappings.</li> <li>WSO2 Identity Server evaluates the permissions associated with the user's roles.</li> <li>Based on the assigned permissions, WSO2 Identity Server grants or denies the user with controlled access to the API resources.</li> </ol> <p>To summarize, WSO2 Identity Server validates the user's group assignment, determines the roles based on the group-to-role mappings, examines the permissions associated with the roles, and decides whether to permit or restrict the user's access to the API resources.</p>"},{"location":"guides/api-authorization/#register-an-api-resource","title":"Register an API resource","text":"<p>WSO2 Identity Server allows administrators to register API resources with scopes/permissions.</p> <p>To register an API resource on WSO2 Identity Server,</p> <ol> <li>On the WSO2 Identity Server Console, go to API Resources.</li> <li>Click + New API Resource to register a new API resource.</li> <li> <p>Enter the following details:      Parameter Description Identifier This is an identifier for your API resource. This can be any value, but WSO2 Identity Server recommends using the URI of the API resource as the identifier. This value will be used as the <code>aud</code> claim in the issued JWT token. Display Name A meaningful name to identify your API resource in WSO2 Identity Server. </p> </li> <li> <p>Click Next and enter the following details:      Parameter Description Permission (Scope) The value that acts as the scope when requesting an access token. This value should be similar to the scope value in your application. Display Name A meaningful name for your permission. This will be displayed on your application's user consent page. Description A description for your permission. This will be displayed on your application's user consent page. </p> </li> <li> <p>Click + Add Permission. Note that you can add multiple permissions according to your requirements.</p> </li> <li> <p>Click Next and enable Requires authorization if the users consuming your API should be authorized before they get access, else you can proceed without an authorization policy.</p> </li> <li> <p>Click Finish to complete the API resource registration.</p> </li> </ol>"},{"location":"guides/api-authorization/#authorize-the-api-resources-for-an-app","title":"Authorize the API resources for an app","text":"<p>Once you have registered API resources in your organization, you can authorize applications in your organization to access those API resources. This is done by connecting the API resources to the relevant applications. Users of an application will have access to the API resource depending on the authorization settings you have configured. If an API resource requires authorization, RBAC will be applied before granting users access.</p> <p>WSO2 Identity Server allows administrators to connect API resources to applications. To authorize an API resource for an application:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Select the application to which you wish to authorize the registered API resource and go to API Authorization.</p> <p>Warning</p> <p>Note that you cannot authorize API resources for a SAML application.</p> </li> <li> <p>Click + Authorize an API Resource.</p> </li> <li> <p>Enter the following details:      Parameter Description API Resource Select the API resource you wish to integrate with your application. Authorized Scopes Select the permissions. Authorization Policy Select the authorization policy. If you have selected Requires Authorization when adding the API resource, RBAC will be selected by default, else you have the option to select between <code>Role-Based Access Control (RBAC)</code> and <code>No Authorization Policy</code>. </p> </li> <li> <p>Click Finish.</p> <p></p> </li> </ol>"},{"location":"guides/api-authorization/#configure-rbac-for-api-resources","title":"Configure RBAC for API resources","text":"<p>If RBAC is enabled as the authorization policy for the API resource, users accessing the API through an application will have role-based access.</p>"},{"location":"guides/api-authorization/#define-permissions-for-an-api-resource","title":"Define permissions for an API resource","text":"<p>If you didn't specify all the permissions for the API resource when registering the API resource, follow the steps given below to add permissions.</p> <ol> <li>On the Asgradeo Console, go to API Resources.</li> <li>Select the API resource and go to the Permissions tab.</li> <li>Click + Add Permissions and enter the following details:      Parameter Description Permission (Scope) The value that acts as the scope when requesting an access token. This value should be similar to the scope value in your application. Display Name A meaningful name for your permission. This will be displayed on your application's user consent page. Description A description for your permission. This will be displayed on your application's user consent page. </li> <li>Click Finish.</li> </ol>"},{"location":"guides/api-authorization/#create-application-roles","title":"Create application roles","text":"<p>The permissions of your API resource should be assigned to a role. These roles are application specific.</p> <p>To create a role and assign permissions to the scope:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li>Select the application to which you wish to authorize the registered API resource and go to User Management &gt; Roles.</li> <li>Click + New Role.</li> <li>Enter a Role Name and click Next.</li> <li> <p>Select the permissions you wish to assign for the newly created application role.</p> <p>Note</p> <p>Roles are application-specific but not resource specific. You can add permissions from multiple API resources to a single role.</p> <p></p> </li> <li> <p>Click Save to add the new application role.</p> <p></p> </li> </ol>"},{"location":"guides/api-authorization/#assign-roles-to-groups","title":"Assign roles to groups","text":"<p>You need to assign the created application roles to groups so that the business users belonging to a particular group will have permission to access the application with the scopes assigned.</p> <p>To assign roles to groups:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt;  Groups.</li> <li>Select the group to which you wish to assign roles and go to Roles tab.</li> <li>Click + Assign Roles.</li> <li>Select the application roles you wish to assign to the group.</li> <li>Click Save.</li> </ol>"},{"location":"guides/api-authorization/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below to try out the RBAC flow:</p> <p>Note</p> <p>Note that we are using WSO2 Identity Server's React sample application for this scenario.</p>"},{"location":"guides/api-authorization/#request-scopes-for-the-user","title":"Request scopes for the user","text":"<p>To request scopes for the user:</p> <ol> <li> <p>Add the new scopes to the configuration file of your SDK. You need to request these new scopes in addition to the OIDC scopes of your application.</p> <p>To get the scopes:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications and select your application.</li> <li> <p>Copy the scopes listed at the end of the API Authorization section.</p> <p></p> </li> </ol> <p>Tip</p> <p>When you add scopes to the configuration file of your SDK, add them as comma-separated values.</p> </li> <li> <p>Access the application URL.</p> </li> <li> <p>Try to log in as a user who has a group and has permissions to access the API resource.</p> <p>Upon successful login, you will see the permission/scopes allowed for the user on the user consent page.</p> <p></p> </li> <li> <p>Click Allow. You will now be redirected to the application.</p> <p>You will be able to see the assigned permissions on the <code>allowedScopes</code> parameter of the authentication response.</p> <p></p> </li> </ol>"},{"location":"guides/applications/","title":"Applications","text":"<p>Regardless of the application type or the development technology, you can connect your application with WSO2 Identity Server and control the way users log in to your app.</p> <p>Currently, WSO2 Identity Server supports integrating four application types. When you select an application type, WSO2 Identity Server provides all the recommended configs in place by default which you can change as needed later.</p>"},{"location":"guides/applications/#single-page-applications","title":"Single-page applications","text":"<p>Single-page applications(SPAs) are apps that run on the browser and do not require a page reload with a change in content.</p> <p>The main advantage of a single-page application is its speed. Since content is dynamically updated as the user interacts with it, the user does not need to wait for page reloads. Users can experience a seamless flow with high responsiveness from the application.</p> <p>JavaScript frameworks and libraries, such as React, Angular, Vue.js, are some popular technologies adopted to build SPAs.</p> <ul> <li>Register a single-page application</li> </ul>"},{"location":"guides/applications/#web-applications","title":"Web applications","text":"<p>Web applications(web apps) are the most common type of applications in use. They are usually hosted on a web server and accessed by the browser. Web applications need authentication as they offer functionality dependent on the logged-in user.</p> <ul> <li>Register a web application with OIDC</li> <li>Register a web application  with SAML</li> </ul>"},{"location":"guides/applications/#mobile-applications","title":"Mobile applications","text":"<p>Mobile applications are apps that run on mobile devices. Android and iOS are some of the popular technologies adopted to build Mobile Applications.</p> <ul> <li>Register a mobile application</li> </ul>"},{"location":"guides/applications/#standard-based-applications","title":"Standard-based applications","text":"<p>Standard-based applications allow users to configure the application protocol settings (OIDC or SAML) from scratch.</p> <ul> <li>Register a standard-based application</li> </ul>"},{"location":"guides/applications/#self-service-my-account-portal","title":"Self-Service (My Account) portal","text":"<p>Application users can access the My Account portal for self-service needs. Learn more about the Self-Service portal.</p>"},{"location":"guides/applications/register-mobile-app/","title":"Register a mobile app","text":"<p>To add login to your mobile application with WSO2 Identity Server, you need to first register your app in WSO2 Identity Server.</p> <p>Your app will be registered as an OpenID Connect mobile app and a client ID will be issued. Note that client secrets are not issued for mobile apps since they are public clients. However, the PKCE (Proof Key for Code Exchange) extension is enabled by default as a security measure.</p>"},{"location":"guides/applications/register-mobile-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Click New Application and select Mobile Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Name A unique name to identify your application. Authorized redirect URLs The URL to which the authorization code is sent to upon user authentication and where the user is redirected to upon logout. Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-mobile-app/#get-the-client-id","title":"Get the client ID","text":"<p>When you register your mobile application, a client ID is generated. Your mobile application will identify itself to WSO2 Identity Server with this client ID.</p> <p>You can get this client ID from the Protocol tab of the application as shown below.</p> <p></p>"},{"location":"guides/applications/register-mobile-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your mobile app</li> </ul>"},{"location":"guides/applications/register-oidc-web-app/","title":"Register an OpenID Connect web app","text":"<p>To integrate your web application with WSO2 Identity Server using OpenID Connect, you need to first register your web application as an OpenID Connect web application in WSO2 Identity Server. A client ID and client secret are issued to the application upon registration.</p> <p>Follow the instructions given below.</p>"},{"location":"guides/applications/register-oidc-web-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Click New Application and select Traditional Web Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Name A unique name to identify your application. Protocol <p>The access configuration protocol used to log in to the application with SSO.</p> Select OpenID Connect. Authorized redirect URLs <p>         The URL to which the authorization code is sent upon user authentication and where the user is redirected upon logout.</p><p>To comply with RFC 8252 section 7.3, the redirect URL in the request does not need to have an exact port match with the authorized redirect URL if it is a loopback redirect URL.         Only URLs with loopback IP addresses (127.0.0.1 and [::1] not localhost) are supported for this feature. </p> Click Add Now if you want to try a sample app.          Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-oidc-web-app/#get-the-client-id-and-secret","title":"Get the client ID and secret","text":"<p>When you register your web application, a client ID and client secret are generated. Your web application will identify itself to WSO2 Identity Server with these credentials.</p> <p>You can get this client ID and client secret from the Protocol tab of the application, as shown below.</p> <p></p>"},{"location":"guides/applications/register-oidc-web-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your web app</li> </ul>"},{"location":"guides/applications/register-saml-web-app/","title":"Register a SAML web app","text":"<p>To integrate your web application with WSO2 Identity Server using SAML, you need to first register your application as a SAML application in WSO2 Identity Server.</p> <p>There are two ways to provide your SAML application configurations to WSO2 Identity Server during registration:</p> <ul> <li>Use a SAML SP metadata file</li> <li>Add SAML SP configurations manually</li> </ul> <p>Follow the instructions given below.</p>"},{"location":"guides/applications/register-saml-web-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the WSO2 Identity Server Console, click Applications.</p> <p></p> </li> <li> <p>Click New Application and select Traditional Web Application.</p> </li> <li>In the Name field, enter a unique name to identify your application.</li> <li>Select the SAML protocol.</li> <li> <p>Select one of the following methods and add the SAML configurations:</p> <p> Method Description Manual <p>Use this option to manually specify the required SAML configurations.</p> See Add SAML configs manually. File Based <p>Upload a SAML metadata file with the required configurations.</p> See Use a SAML metadata file. URL Based <p>Point to the endpoint with the SAML metadata.</p> See Use a SAML metadata file. </p> </li> <li> <p>[Optional] Enable Allow sharing with sub-organizations to share the new application with all or any selected suborganizations that belong to your root organization.</p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-saml-web-app/#add-saml-configs-manually","title":"Add SAML configs manually","text":"<p>If you selected Manual in the previous step, you can manually specify the SAML configurations as follows:</p> <p></p> Parameter Description Issuer The unique identifier of the application. The value added here should be specified in the SAML authentication request as <code>saml:Issuer</code> element sent from the client application. You can't change this <code>issuer</code> configuration after you register the app. Assertion consumer service URLs The URLs to which the browser is redirected upon successful authentication. This receives the SAML response."},{"location":"guides/applications/register-saml-web-app/#use-a-saml-metadata-file","title":"Use a SAML metadata file","text":"<p>An SP metadata XML file contains the following:</p> <ul> <li>SP certificate</li> <li>The entity ID (also known as issuer)</li> <li>Assertion Consumer Service URLs (ACS URLs)</li> <li>Single Logout Service URLs</li> </ul> <p>There are two ways to use a SAML metadata file during application registration:</p> <ul> <li> <p>Select the File Based option and upload the SAML SP metadata file.</p> <p></p> </li> <li> <p>Select the URL Based option and specify the SAML meta URL, which refers to the endpoint that hosts the SAML metadata file.</p> <p></p> </li> </ul>"},{"location":"guides/applications/register-saml-web-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your web app</li> </ul>"},{"location":"guides/applications/register-single-page-app/","title":"Register an OpenID Connect single-page app","text":"<p>To add login to your single-page application with WSO2 Identity Server, you need to first register your app in WSO2 Identity Server.</p> <p>Your app will be registered as an OpenID Connect single-page app, and a client ID will be issued. Note that client secrets are not issued because single-page apps are public clients. However, the PKCE (Proof Key for Code Exchange) extension is enabled by default as a security measure.</p> <p>Follow the instructions given below.</p>"},{"location":"guides/applications/register-single-page-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Click New Application and select Single-Page Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Name A unique name to identify your application. Authorized redirect URLs The URL to which the authorization code is sent upon user authentication and where the user is redirected upon logout.  Click Add Now if you want to try a sample app. Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-single-page-app/#get-the-client-id","title":"Get the client ID","text":"<p>When you register your single-page application, a client ID is generated. Your application will identify itself to WSO2 Identity Server with this client ID.</p> <p>You can get this client ID from the Protocol tab of the application as shown below.</p> <p></p>"},{"location":"guides/applications/register-single-page-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your single-page app</li> </ul>"},{"location":"guides/applications/register-standard-based-app/","title":"Register a standard-based application","text":"<p>When you integrate an application with WSO2 Identity Server, the first step is to register your app from the WSO2 Identity Server Console. If you choose the standard-based application type when you register your app, it allows you to configure the protocol settings (OIDC or SAML) from scratch.</p> <p>You can also use the standard-based application type in the following scenarios:</p> <ul> <li>Integrate a web/mobile application with the password grant type. The application types for, single- page applications and, traditional web applications and mobile applications do not support password grant type as it is not recommended.</li> <li>Access the management APIs of WSO2 Identity Server.</li> </ul> <p>Note</p> <p>Alternatively, you can register using an application type that has configurations optimized for specific applications.</p> <ul> <li>Register an SPA</li> <li>Register an OIDC web application</li> <li>Register a SAML web application</li> </ul>"},{"location":"guides/applications/register-standard-based-app/#register-an-application","title":"Register an application","text":"<p>To register an application:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li> <p>Click New Application and select Standard-Based Application.</p> <p></p> </li> <li> <p>Provide an application name and select the other options based on your requirements.</p> <p>Note</p> <ul> <li>You can choose OIDC or SAML as the standard protocol for your application. See the complete list of OIDC and SAML  configurations.</li> <li>If you use OIDC, you can configure a management app, which can access the management APIs in WSO2 Identity Server. Learn about invoking management APIs.</li> </ul> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-standard-based-app/#whats-next","title":"What's Next?","text":"<ul> <li>Configuring an OIDC application</li> <li>Configuring a SAML application</li> </ul>"},{"location":"guides/authentication/","title":"Authentication","text":"<p>See the topics given below to manage authentication for your applications.</p>"},{"location":"guides/authentication/#design-the-login-flow","title":"Design the login flow","text":"<p>When you register an application, you can customize the login flow.</p> <ul> <li> <p>Configure WSO2 Identity Server login for single-page applications with OIDC or web applications with OIDC or SAML.</p> </li> <li> <p>Add social login options such as Google, Facebook, Apple, and Microsoft.</p> </li> <li> <p>Add other enterprise identity providers as login options.</p> </li> <li> <p>Configure the number of factors (2FA or MFA) in the login flow to enforce multi-factor authentication.</p> </li> <li> <p>Enforce conditional authentication to dynamically change the login flow of a user based on the user's devices, networks, locations, or usage contexts.</p> </li> </ul>"},{"location":"guides/authentication/#manage-user-attributes","title":"Manage user attributes","text":"<p>Manage the user attributes you want to share with your application:</p> <ul> <li>Enable user attributes for OpenID Connect apps</li> <li>Enable user attributes for SAML apps</li> </ul>"},{"location":"guides/authentication/#manage-connections","title":"Manage connections","text":"<p>You can define connections to external identity providers (IdPs) and use them to authenticate users who log in to your applications. This process of authenticating users with external IdPs is known as identity federation.</p> <p>Note</p> <p>The external identity provider (IdP) authenticates users and issues the identification information by using security tokens like SAML 2.0, OpenID Connect, OAuth 2.0, and WS-Trust.</p>"},{"location":"guides/authentication/#benefits-of-identity-federation","title":"Benefits of identity federation","text":"<p>There are several benefits of using identity federation:</p> <ul> <li> <p>Allows users to sign in with a user account registered with a trusted IdP without having to manually create accounts for them in WSO2 Identity Server.</p> <p>Note</p> <p>If the IdP is configured to use JIT user provisioning, signing in with an external IdP will automatically create a local account for the user in WSO2 Identity Server.</p> </li> <li> <p>Give users the convenience of choosing their existing, trusted IdP when they sign in or sign up to your organization in WSO2 Identity Server.</p> </li> </ul>"},{"location":"guides/authentication/#supported-external-idps","title":"Supported external IdPs","text":"<p>WSO2 Identity Server supports a variety of external identity providers with various open-standard protocols (such as OAuth2.0, OpenID Connect, and SAML).</p> <ul> <li>Social identity providers</li> <li>Enterprise identity providers</li> </ul> <p>You can configure any number of external connections for your application via WSO2 Identity Server.</p>"},{"location":"guides/authentication/#add-groups-to-connections","title":"Add groups to connections","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/add-login-to-apps/","title":"Add login to Apps","text":"<p>This section gives you instructions for adding login to your Single Page Applications(SPAs) and web applications using OIDC or SAML.</p> <ul> <li> <p>Secure your SPA with OpenID Connect using our SDKs or try it on a sample. See Add login to an SPA.</p> </li> <li> <p>Secure your web application using OpenID Connect or SAML using our SDKs or try it on a sample. For more instructions, see Add login to a webapp.</p> </li> <li> <p>Secure your mobile application with WSO2 Identity Server using OIDC. For more instructions, see Add login to a mobile app.</p> </li> </ul>"},{"location":"guides/authentication/add-login-to-mobile-app/","title":"Add login to a mobile app","text":"<p>Mobile applications, by design, cannot maintain any secrets. These kinds of applications are called public clients.</p> <p>Based on the OAuth 2.0 best practices for browser-based apps, WSO2 Identity Server recommends securing your mobile apps using the OpenID Connect Authorization Code Flow for public clients with the PKCE (Proof Key for Code Exchange) extension.</p> <p>See the guides given below to add login to your mobile applications with WSO2 Identity Server.</p>"},{"location":"guides/authentication/add-login-to-mobile-app/#manually-add-login-to-your-mobile-app","title":"Manually add login to your mobile app","text":"<ul> <li>Implement authorization code flow with PKCE</li> </ul>"},{"location":"guides/authentication/add-login-to-single-page-app/","title":"Add login to an SPA","text":"<p>Single-page apps (SPAs) by design run with the source code exposed in the browser, which means that they cannot maintain any secrets. These kinds of applications are called public clients.</p> <p>Based on the OAuth 2.0 best practices for browser-based apps, WSO2 Identity Server recommends securing your SPAs using the OpenID Connect Authorization Code Flow for public clients with the PKCE (Proof Key for Code Exchange) extension.</p> <p>See the guides given below to add login to your SPAs with WSO2 Identity Server.</p>"},{"location":"guides/authentication/add-login-to-single-page-app/#try-out-samples","title":"Try out samples","text":"<ul> <li>React SPA Sample</li> <li>JavaScript SPA Sample</li> </ul>"},{"location":"guides/authentication/add-login-to-single-page-app/#use-an-sdk-to-add-login-to-your-spa","title":"Use an SDK to add login to your SPA","text":"<ul> <li>React SDK</li> <li>Javascript SDK</li> </ul>"},{"location":"guides/authentication/add-login-to-single-page-app/#manually-add-login-to-your-spa","title":"Manually add login to your SPA","text":"<ul> <li>Implement authorization code flow with PKCE</li> </ul>"},{"location":"guides/authentication/add-login-to-web-app/","title":"Add login to a web app","text":"<p>Browser-based protocols like SAML and OpenID Connect are most commonly used to integrate web applications with identity providers.</p> <p>See the guides given below to add login to your web apps with WSO2 Identity Server using OpenID Connect or SAML.</p>"},{"location":"guides/authentication/add-login-to-web-app/#try-out-samples","title":"Try out samples","text":"<ul> <li>Java EE OIDC sample</li> <li>Java EE SAML sample</li> </ul>"},{"location":"guides/authentication/add-login-to-web-app/#use-an-sdk-to-add-login-to-your-web-app","title":"Use an SDK to add login to your web app","text":"<ul> <li>Java EE OIDC SDK</li> <li>Java EE SAML SDK</li> </ul>"},{"location":"guides/authentication/add-login-to-web-app/#manually-add-login-to-your-web-app","title":"Manually add login to your web app","text":"<ul> <li>Implement authorization code flow</li> </ul>"},{"location":"guides/authentication/configure-the-token-exchange-flow/","title":"Configure the token exchange flow","text":"<p>You can add a trusted token issuer to exchange tokens received from the configured third-party issuer for WSO2 Identity Server tokens.</p> <p>Learn how to configure the OAuth 2.0 token exchange flow in your WSO2 Identity Server organization. Refer Token exchange grant for more information on how the flow works.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/configure-the-token-exchange-flow/#register-a-trusted-token-issuer","title":"Register a trusted token issuer","text":"<p>To exchange a third-party token for an WSO2 Identity Server  token, you need to register the third-party token issuer as a trusted token issuer in your WSO2 Identity Server  organization.</p> <p>To register a trusted token issuer:</p> <ol> <li>On the WSO2 Identity Server console, go to Connections.</li> <li>Click New Connections and click Create on the Trusted Token Issuer.</li> <li> <p>Enter the following details of the trusted token issuer:</p> <p> Parameter Description Trusted token issuer name A unique name for the new trusted token issuer. Issuer A unique issuer value of the trusted token issuer. This is the value of the <code>iss</code> claim in the JWT token generated from the configured identity provider.      Example: <code>https://third-party-token-issuers.io/oauth2/token</code> Alias The name by which the trusted token issuer knows WSO2 Identity Server. Usually, the <code>aud</code> claim of the token should include the WSO2 Identity Server organization's issuer value. In case the organization's issuer value is not included in the <code>aud</code> claim, the alias value you assign here will be validated against the <code>aud</code> claim. </p> </li> <li> <p>Click Next and provide the mode of certificate configuration.</p> <p>Note</p> <p>You can either configure a JWKS endpoint or upload a certificate of the external party. This is required to validate the signature of the assertions sent by the external identity provider.</p> <ul> <li>JWKS endpoint: The JWKS endpoint of the trusted token issuer.</li> <li> <p>Use PEM certificate: Upload or paste the public certificate of the trusted token issuer. The certificate should be in PEM format.</p> If you have a certificate in other formats such as <code>.crt</code>, <code>.cer</code> or <code>.der</code>, expand here to see how you can convert them to PEM format using OpenSSL<p>Convert CRT to PEM <pre><code>openssl x509 -in cert.crt -out cert.pem\n</code></pre> Convert CER to PEM: <pre><code>openssl x509 -in cert.cer -out cert.pem\n</code></pre></p> <p>Convert DER to PEM: <pre><code>openssl x509 -in cert.der -out cert.pem\n</code></pre></p> </li> </ul> </li> <li> <p>Click Finish to add the new trusted token issuer.</p> </li> </ol>"},{"location":"guides/authentication/configure-the-token-exchange-flow/#enable-token-exchange-in-your-app","title":"Enable token exchange in your app","text":"<p>Before you begin</p> <p>You need to register any one of the following application types with WSO2 Identity Server:</p> <ul> <li>Standard-based OIDC application</li> <li>Mobile application</li> <li>Traditional OIDC web application</li> </ul> <p>Currently, WSO2 Identity Server does not support the token exchange grant for single-page applications.</p> <p>To enable token exchange in your application:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Open your application from the list and go to the Protocol tab.</p> </li> <li> <p>Add <code>Token Exchange</code> under the Allowed grant types.</p> <p>Note</p> <p>To enable refresh tokens for the token exchange grant, include <code>Refresh Token</code> as an Allowed Grant Type. Learn more about how the refresh token grant type works.</p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/authentication/configure-the-token-exchange-flow/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Obtain the JWT token received from the third-party token issuer.</li> <li> <p>Execute the following cURL command to exchange the third-party token for an WSO2 Identity Server token.</p> <pre><code>curl --location 'https://localhost:9443/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Authorization: Basic &lt;base64 Encoded (clientId:clientSecret)&gt;' \\\n--data-urlencode 'subject_token=&lt;jwt_token&gt;\n' \\\n--data-urlencode 'subject_token_type=urn:ietf:params:oauth:token-type:jwt' \\\n--data-urlencode 'requested_token_type=urn:ietf:params:oauth:token-type:access_token' \\\n--data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange'\n</code></pre> <p>Note</p> <p>WSO2 Identity Server only copies the <code>sub</code> claim from the token received from the trusted token issuer to the exchanged WSO2 Identity Server token.</p> </li> </ol> <p>Upon successful execution, you will receive the exchanged token issued by WSO2 Identity Server.</p>"},{"location":"guides/authentication/jit-user-provisioning/","title":"Configure Just-in-Time (JIT) user provisioning","text":"<p>This guide explains the concept of Just-In-Time user provisioning, why and when to use it, and also the instructions for configuring it.</p>"},{"location":"guides/authentication/jit-user-provisioning/#how-jit-provisioning-works","title":"How JIT provisioning works","text":"<p>Just-in-Time (JIT) user provisioning is a method used to store a user's identity and user claims in the WSO2 Identity Server user store when the user is authenticated through an external identity provider (IdP).</p> <p>The flow of JIT user provisioning is as follows:</p> <ol> <li> <p>When an application initiates an authentication request, the user gets redirected to WSO2 Identity Server.</p> </li> <li> <p>If the user has used an external identity provider for authentication, WSO2 Identity Server redirects the user to the selected external IdP.</p> </li> <li> <p>WSO2 Identity Server receives a positive authentication response from the external IdP with the user information.</p> </li> <li> <p>JIT provisioning is triggered and WSO2 Identity Server creates a user account in its internal user store along with the user claims obtained from the authentication response.</p> </li> </ol> <p></p> <p>With this process, new user accounts are automatically provisioned to WSO2 Identity Server through external IdPs.</p>"},{"location":"guides/authentication/jit-user-provisioning/#prerequisites","title":"Prerequisites","text":"<p>First, the external IdP should be registered in WSO2 Identity Server as a connection.</p> <p>Note</p> <p>Learn more about how to enable login to your application using the following external IdPs:</p> <ul> <li>Facebook</li> <li>Google</li> <li>Github</li> <li>OIDC connections</li> <li>SAML connections</li> </ul>"},{"location":"guides/authentication/jit-user-provisioning/#enabledisable-jit-user-provisioning","title":"Enable/Disable JIT user provisioning","text":"<p>To enable/disable JIT user provisioning for an external Identity provider:</p> <ol> <li> <p>On the WSO2 Identity Server Console, click Connections and select the relevant connection.</p> </li> <li> <p>Go to the Advanced tab of the selected connection.</p> </li> <li> <p>JIT provisioning is enabled by default. You can uncheck the Just-in-Time (JIT) User Provisioning checkbox to disable it.</p> <p></p> </li> <li> <p>Click Update to save.</p> </li> </ol> <p>Note</p> <ul> <li>When JIT is enabled, WSO2 Identity Server will create a user profile and store the user attributes received from the external IdP. </li> <li>When JIT is disabled, a user profile is not created. Therefore, there is no location to store the attributes of the user. In such cases, the attributes are directly passed to the application.</li> </ul> <p>Warning</p> <p>If you have configured multi-factor authentication (MFA), disabling JIT user provisioning might break the application login flow. Learn more about troubleshooting sign-in flow errors with JIT.</p>"},{"location":"guides/authentication/jit-user-provisioning/#troubleshoot-sign-in-flow-errors","title":"Troubleshoot sign-in flow errors","text":"<p>If you have disabled JIT provisioning for an IdP, you need to validate its effect on your applications that use multi-factor authentication. This is because certain MFA mechanisms (such as TOTP and EmailOTP) require the login users to have local accounts in WSO2 Identity Server. Therefore, the application's sign-in flow involving JIT-disabled IdPs and the MFA options will break by default.</p> <p>In such scenarios, you will see the following warning in the application's sign-in flow:</p> <p></p> <p>To avoid such errors, you can use one of the following options:</p> <ul> <li> <p>Conditionally skip MFA</p> <p>You can skip MFA for external connections during the login flow by using the following example script:</p> <pre><code>var localAuthenticator = 'LOCAL';\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar step = context.steps[1];\nif (step.idp == localAuthenticator) {\nexecuteStep(2); // MFA Step\n}\n}\n});\n};\n</code></pre> <p>Note</p> <p>For more information on this script, refer to the sign-in option-based conditional authentication script.</p> </li> </ul>"},{"location":"guides/authentication/manage-consent-for-attributes/","title":"Manage consent for user attributes","text":"<p>If user attributes are enabled for applications registered in WSO2 Identity Server, the applications can access these attributes when the user logs in to the app. However, it may be necessary to get the user's consent before sharing the user's information. Learn more about configuring user attributes for applications.</p> <p>In WSO2 Identity Server, you can either display a screen to request consent for user attributes or skip this step, as explained below.</p>"},{"location":"guides/authentication/manage-consent-for-attributes/#get-consent-for-user-attributes","title":"Get consent for user attributes","text":"<p>Once the user is logged in, WSO2 Identity Server requests consent to share the user's attributes with the application.</p> <p></p> <p>If the application requires mandatory attributes for which values are not specified in the user profile, WSO2 Identity Server will prompt the user to enter those values during login.</p> <p>The user can do one of the following during login:</p> <ul> <li> <p>Select specific user attributes and click Allow.</p> <p>This will share only the selected user attributes with the application. However, note that the user cannot unselect the mandatory user attributes.</p> </li> <li> <p>If the user does not want to share any of the requested user attributes, they can click Deny.</p> </li> </ul> <p>WSO2 Identity Server will not prompt for consent for the allowed attributes again unless a user revokes the provided consent via MyAccount.</p>"},{"location":"guides/authentication/manage-consent-for-attributes/#disable-the-consent-screen","title":"Disable the consent screen","text":"<p>If user consent is not required for your application to access user information, you can disable the consent screen as follows:</p> <ol> <li>Sign in to the WSO2 Identity Server and select the application for which user consent needs to be disabled.</li> <li> <p>Go to the Advanced tab and enable Skip login consent.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/","title":"Add conditional authentication","text":"<p>With conditional authentication, the login flow in an application is dependent on the risk factors associated with the user's login request. This allows you to strengthen the authentication flow when the risk is higher. In WSO2 Identity Server, conditional authentication is configured using a script.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/#authentication-script","title":"Authentication script","text":"<p>The authentication script for configuring dynamic authentication flows in WSO2 Identity Server uses a functional language similar to Javascript. You can configure the script using the script editor in the WSO2 Identity Server Console. You can either use a template or write a custom script.</p> <p>This scripting language supports a set of inbuilt functions and objects. A simple conditional authentication script will look like the following:</p> <pre><code>var onLoginRequest = function(context) {\n// Some possible initializations...\nexecuteStep(1);\nif (doStepUp(context) === true) { executeStep(2);\n}\n};\n\nfunction doStepUp(context) {\n// A function that decides whether to enforce second step based on the request context.\nreturn true;\n}\n</code></pre> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/#script-templates","title":"Script templates","text":"<p>The script editor in WSO2 Identity Server comes with a set of predefined templates to get you started with some of the most common conditional authentication scenarios. These scripts contain inline comments explaining the conditions that are applied.</p> <p></p> <p>The available templates are categorized as follows:</p> <ul> <li>User</li> <li>Request</li> <li>Environment</li> <li>Analytics</li> <li>IdP</li> </ul> <p>The pre-defined templates are listed below.</p> Template Description Role-Based This login flow prompts two-factor authentication (2FA) for users who are assigned to any of the given set of roles. User-Age-Based This configures a login flow where users can log in only if their age is over the configured value. The user's age is calculated using the <code>date of birth</code> attribute. User Store-Based This login flow prompts two-factor authentication (2FA) for users who are from to any of the given set of user stores. Login Attempt-Based This login flow prompts two-factor authentication (2FA) for users who are from to any of the given set of user stores. Group-Based This login flow prompts two-factor authentication (2FA) for users who belong to any of the given set of groups. Concurrent Session-Based This login flow prompts adaptive authentication for users who have exceeded the maximum number of allowed sessions. New-Device-Based This login flow sends an email notification and/or prompts two-factor authentication for users who are logged in from a previously unused device. IP-Based This login flow prompts two-factor authentication for users who log in from outside the given IP range. <p>If required, you can also use the script editor to introduce new functions and fields to an authentication script based on your requirement. See the instructions on writing a custom authentication script.</p>"},{"location":"guides/authentication/conditional-auth/#whats-next","title":"What's next","text":"<ul> <li>Configure conditional authentication</li> <li>Conditional authentication API reference</li> </ul>"},{"location":"guides/authentication/conditional-auth/access-control/","title":"Add access control","text":"<p>Use authentication scripts to control access to your applications.</p> <ul> <li>User age-based access control</li> <li>Group-based access control</li> </ul>"},{"location":"guides/authentication/conditional-auth/adaptive-mfa/","title":"Add adaptive MFA","text":"<p>Use authentication scripts to enforce adaptive MFA in the login flow of your applications.</p> <ul> <li>Group-Based adaptive MFA</li> <li>Sign-in-option-based adaptive MFA</li> <li>New-device-based adaptive MFA</li> <li>IP-based adaptive MFA.</li> <li>Adaptive MFA based on API calls</li> </ul>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/","title":"Add MFA based on advanced conditions (using WSO2 Choreo)","text":"<p>You can secure your applications' login flow based on data from an API hosted on WSO2 Choreo. Choreo by WSO2 is an integration platform as a service (iPaaS) for innovation, productivity, and simplicity\u2014designed in the cloud for the cloud.</p>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#scenario","title":"Scenario","text":"<p>Consider a scenario where the login flow of the application should be stepped up after an API call to a service endpoint hosted on Choreo. The API call should be executed after the first authentication step is successfully completed. The second authentication step should be prompted based on the decision made by the service during the API call.</p> <p>Let's consider an API hosted on Choreo that reads an IP address from the request body, retrieves geolocation from the IP address, evaluates the risk of the login attempt, and sends back the result in the <code>hasRisk</code> parameter in the response. And the second authentication step should be prompted if the <code>hasRisk</code> is <code>true</code>.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Get an API key from ipgeolocation. For more information, refer to ipgeolocation documentation.</p> </li> </ul>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#define-the-mfa-conditions","title":"Define the MFA conditions","text":"<p>To define the MFA conditions with Choreo, you need to:</p> <ol> <li> <p>Design your MFA condition in a REST API</p> </li> <li> <p>Integrate your REST API with Choreo</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#desgin-the-rest-api","title":"Desgin the REST API","text":"<p>You need to implement your REST API in Ballerina or any other language and containerize it. You can use the Ballerina VS code extension to develop the REST API in Ballerina. Learn more.</p> <p>To implement your REST API to fit the explained scenario:</p> <ol> <li> <p>On the VS Code editor, create a <code>.bal</code> file and add the following code segment.</p> <p> Click to expand code snippet <pre><code>import ballerina/http;\n\ntype RiskResponse record {\nboolean hasRisk;\n};\n\ntype RiskRequest record {\nstring ip;\n};\n\ntype ipGeolocationResp record {\nstring ip;\nstring country_code2;\n};\n\nfinal string geoApiKey = \"&lt;API key from ipgeolocation.io&gt;\";\n\nservice / on new http:Listener(8090) {\nresource function post risk(@http:Payload RiskRequest req) returns RiskResponse|error? {\n\nstring ip = req.ip;\nhttp:Client ipGeolocation = check new (\"https://api.ipgeolocation.io\");\nipGeolocationResp geoResponse = check ipGeolocation-&gt;get(string `/ipgeo?apiKey=${geoApiKey}&amp;ip=${ip}&amp;fields=country_code2`);\n\nRiskResponse resp = {\n// hasRisk is true if the country code of the IP address is not the specified country code.\nhasRisk: geoResponse.country_code2 != \"&lt;Specify a country code of your choice&gt;\"\n};\nreturn resp;\n}\n}\n</code></pre> </p> </li> <li> <p>Update the following details:       Parameter Description <code>geoApiKey</code> The API key obtained from ipgeolocation. <code>geoResponse.country_code2</code> Country code you would like to allow login attempts. </p> </li> <li> <p>Upload the file to your GitHub repository.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#integrate-the-rest-api-with-choreo","title":"Integrate the REST API with Choreo","text":"<p>To create the REST API component and integrate it with your REST API:</p> <ol> <li> <p>Create an application on WSO2 Choreo to integrate your REST API with your WSO2 Identity Server app.</p> <p>Note</p> <p>Note the Consumer Key and Consumer Secret.</p> </li> <li> <p>Create a REST API component on Choreo.</p> </li> <li> <p>Deploy and publish the REST API.</p> </li> <li> <p>Subscribe the application you created on Choreo to the REST API.</p> <p>Note</p> <p>The Choreo application exposes the REST API to external clients. Therefore, you can connect to this application from WSO2 Identity Server and invoke the REST API.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#configure-the-login-flow","title":"Configure the login flow","text":"<p>Follow the steps given below.</p> <ol> <li>On the WSO2 Identity Server Console, click Applications.</li> <li>Select the relevant application and go to its Sign-in Method tab.</li> <li> <p>Add MFA based on advanced conditions using your preferred editor:</p> Classic EditorVisual Editor <p>To add MFA based on advanced conditions using the classic editor:</p> <ol> <li>Click Add TOTP as a second factor to define the login flow, starting with <code>username and password</code> and stepping up with <code>TOTP</code>.</li> <li>Turn on Conditional Authentication by switching the toggle.</li> </ol> <p>To add MFA based on advanced conditions using the visual editor:</p> <ol> <li>Switch to the Visual Editor tab and go to Predefined Flows &gt; Basic Flows &gt; Add Multi-factor login.</li> <li>Select <code>Username + Password -&gt; TOTP</code> and click Confirm.</li> <li>Expand the Script Editor to add the script for MFA based on advanced conditions using Choreo.</li> </ol> <p></p> <p>You can now define your conditional authentication script.</p> </li> <li> <p>Add the following authentication script.</p> <p>Warning</p> <p>As a security measure, WSO2 Identity Server does not allow the usage of two consecutive full stops (<code>..</code>) in authentication scripts.</p> <pre><code>var connectionMetadata = {\n\"url\": \"&lt;Choreo API URL&gt;\",\n\"consumerKey\": \"&lt;Consumer key of the Choreo application&gt;\",\n\"consumerSecret\": \"&lt;Consumer secret of the Choreo application&gt;\"\n};    var onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function(context) {\n// Set the IP address of the authentication request as the body of the API call.\nvar requestPayload = {\n\"ip\": context.request.ip\n};\nLog.info(\"Calling the API hosted in Choreo!\");\ncallChoreo(connectionMetadata, requestPayload, {\nonSuccess: function(context, data) {\nLog.info('Received risk:' + data.hasRisk);\nif (data.hasRisk === true) {\n// Prompt the second authentication factor if the hasRisk is true.\nexecuteStep(2);\n}\n},\nonFail: function(context, data) {\nLog.info('Failed to call Choreo API. Stepping up authentication by    default.');\nexecuteStep(2);\n},\nonTimeout: function(context, data) {\nLog.info('Call to Choreo API timed out. Stepping up authentication by default.');\nexecuteStep(2);\n}\n});\n}\n});\n};\n</code></pre> </li> <li> <p>Update the following parameters in the script.       Parameter Description <code>url</code> The URL of the Choreo API. <code>consumerKey</code> The consumer key of the Choreo application. <code>consumerSecret</code> The consumer secret of the Choreo application. </p> Use a stored <code>Secret</code><p>If you don't want to enter the <code>consumerkey</code> and <code>consumerSecret</code> obtained from the Choreo application every time you use the conditional authentication script, you can store them as **Secret**s on Asgardeo.</p> <ul> <li> <p>Using a stored <code>consumer key</code> and <code>consumer secret</code> in the conditional authentication script.</p> <p>If you are using a stored <code>consumerSecret</code>, replace the <code>connectionMetadata</code> object of the conditional authentication script as follows:  <pre><code>var connectionMetadata = {\n\"url\": \"&lt;Choreo API URL&gt;\",\n\"consumerKeyAlias\": \"&lt;The name of the secret that stores the consumer key of Choreo application&gt;\",\n\"consumerSecretAlias\": \"&lt;The name of the secret that stores the consumer secret of Choreo application&gt;\"\n};\n</code></pre></p> </li> <li> <p>Add a stored <code>consumer key</code> and <code>consumer secret</code> to the script.</p> <p>Select the location in the script where the secret should be inserted, click the key icon above the script, and use one of the following options:</p> <p></p> <ul> <li>If you are adding an existing secret, click \"+\" next to the secret in the drop-down menu.</li> <li>If you need a new secret, you can first create a new secret.       Now the new secret will be listed when you click the key icon. You can click \"+\" to add it to the script.</li> </ul> </li> </ul> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#how-it-works","title":"How it works","text":"<p>Let's look at how this script works.</p> <ol> <li> <p>The <code>connectionMetadata</code> object specifies the required values obtained from the WSO2 Choreo application.</p> </li> <li> <p>On successful completion of the authentication step one, <code>onSuccess()</code> callback function is called.</p> </li> <li> <p><code>onSuccess</code> callback function calls the <code>callChoreo()</code> function, which sends an API call to the API hosted on Choreo.</p> </li> <li> <p>If the API call is successful, the <code>onSuccess</code> callback function passed as an argument to the <code>callChoreo( )</code> function is called.</p> <ol> <li>If the <code>hasRisk</code> value in the response is <code>true</code>, step two of the authentication flow is executed.</li> <li>If the API call fails or times out, step 2 of the authentication flow will be executed by default.</li> </ol> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Try to log in from an IP address within the allowed geolocation. You will successfully log in to the application.</p> </li> <li> <p>Log out of the application.</p> </li> <li> <p>Login from an IP address outside the allowed geolocation. TOTP authentication is prompted.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/concurrent-session-based-template/","title":"Add concurrent sessions based access control","text":"<p>You can effectively control the number of concurrent user sessions for an application by implementing the Session-Based conditional authentication template. Users are redirected to a dedicated page where they can manage their existing sessions or cancel the current authentication request if they exceed the number of allowed concurrent sessions.</p>"},{"location":"guides/authentication/conditional-auth/concurrent-session-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario with two user groups, <code>admin</code> and <code>manager</code>. Users belonging to these groups are limited to having only one active session at a time. If they try to initiate a second session, they will be presented with a list of their current sessions and offered with the following two options:</p> <ul> <li>Terminate any of their existing sessions.</li> <li>Cancel their current authentication attempt.</li> </ul>"},{"location":"guides/authentication/conditional-auth/concurrent-session-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Create two user groups named <code>admin</code> and <code>manager</code> and assign user accounts to them. For instructions, see the following:</p> <ul> <li>Managing users</li> </ul> </li> </ul>"},{"location":"guides/authentication/conditional-auth/concurrent-session-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To configure the login flow with concurrent session-based access control:</p> <ol> <li>On the WSO2 Identity Server Console, click Applications.</li> <li>Select the relevant application and go to its Sign-in Method tab.</li> <li> <p>Add concurrent session-based access control using your preferred editor</p> Classic EditorVisual Editor <p>To add concurrent session management-based access control using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the User &gt; Concurrent Session Management Template template.</p> </li> </ol> <p>To add concurrent session management-based access control using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; User.</p> </li> <li> <p>Click + ADD next to Concurrent Session Management Template to add the user-age-based access control script.</p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>rolesToStepUp</code> Comma-separated list of user roles. Two-factor authentication should apply to users from these roles. For this example scenario, enter <code>admin</code> and <code>manager</code>. <code>maxSessionCount</code> <p>The number of allowed sessions for the user</p> For this example scenario, enter <code>1</code> as we allow only one concurrent active sessions per user. <code>MaxSessionCount</code> <p>The number of allowed sessions for the user</p> For this example scenario, enter <code>1</code> as we allow only one concurrent active sessions per user. Use the same value assigned for <code>MaxSessionCount</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/concurrent-session-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the user age-based conditional authentication template.</p> <pre><code>// This script will prompt concurrent session handling\n// to one of the given roles\n// If the user has any of the below roles, concurrent session handling will be prompted\n// and it will either kill sessions or abort login based on number of active concurrent user sessions\nvar rolesToStepUp = ['admin', 'manager'];\nvar maxSessionCount = 1;\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated subject from the first step\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given roles\nvar hasRole = hasAnyOfTheRoles(user, rolesToStepUp);\n\nif (hasRole) {\nLog.info(user.username + ' Has one of Roles: ' + rolesToStepUp.toString());\nexecuteStep(2, {\nauthenticatorParams: {\nlocal: {\nSessionExecutor: {\nMaxSessionCount: '1'\n}\n}\n}\n}, {});\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When step 1 of the authentication flow is complete, the onLoginRequest function retrieves the authenticating user from the context.</li> <li>The function verifies whether the authenticating user is a member of the groups listed in <code>rolesToStepUp</code>.</li> <li>If the authenticating user is assigned to one or more roles in <code>rolesToStepUp</code>, authentication step 2 is prompted with <code>maxSessionCount</code> being passed as a parameter to the Active Sessions Limit handler.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/concurrent-session-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Log in to the application as a user belonging to the <code>admin</code> or <code>manager</code>.</p> </li> <li> <p>Attempt to log in as the same user from a second browser.</p> <p>Now, the user will receive a prompt, allowing them to either terminate one of their existing sessions or deny the authentication request for the second session.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/","title":"Configure conditional authentication","text":"<p>Given below are the high-level steps for enabling conditional authentication in your application.</p>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#enable-conditional-authentication","title":"Enable conditional authentication","text":"<p>Follow the steps given below.</p> <ol> <li>On the WSO2 Identity Server Console, click Applications.</li> <li>Select the application for which you wish to apply a conditional login flow and go to its Sign-in Method tab.</li> <li>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</li> <li> <p>Turn on Conditional Authentication by switching the toggle on. You can define your conditional authentication script in the editor.</p> <p></p> <p>Warning</p> <p>As a security measure, WSO2 Identity Server does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> </ol> <p>Enable conditional authentication using the Visual Editor</p> <p>Conditional authentication is enabled by default in the Visual Editor.</p>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#add-conditional-authentication-script","title":"Add conditional authentication script","text":"<p>There are two ways to add a conditional authentication script:</p> <ul> <li>Use a predefined template.</li> <li>Write a new conditional auth script.</li> </ul>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#add-a-secret-to-the-script","title":"Add a secret to the script","text":"<p>Secrets securely store values associated with external APIs. These secret values are used in conditional authentication scripts when WSO2 Identity Server is required to interact with an external API (service endpoint) during the authentication process. You can securely store these secret values on the WSO2 Identity Server Console and retrieve them whenever required for conditional authentication.</p>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#create-a-new-secret","title":"Create a new secret","text":"<p>To add a new secret:</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Select your application and go to the Sign-in Method tab .</p> </li> <li> <p>Add a new secret from your preferred editor:</p> Classic EditorVisual Editor <p>Enable conditional authentication and click the key icon above the script to create a new secret.</p> <p></p> <p>Switch to the Visual Editor tab, expand the Script Editor and click Add Secret.</p> <p></p> </li> <li> <p>Click Create new secret from the drop-down menu.</p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Secret Name A meaningful name for the secret. This name is not changeable. Secret Value You can enter the secret value that is <code>1</code> to <code>2048</code> bits in length. Secret Description A short description for the secret. </p> </li> <li> <p>Click Finish to complete the creation.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#delete-an-existing-secret","title":"Delete an existing secret","text":"<p>To delete an existing secret:</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Select your application and go to the Sign-in Method tab .</p> </li> <li> <p>Delete the secret by using your preferred editor:</p> Classic EditorVisual Editor <p>Enable conditional authentication and click the key icon above the script to delete a secret.</p> <p></p> <p>Switch to the Visual Editor tab, expand the Script Editor and click Add Secret.</p> <p></p> </li> <li> <p>Click the trash icon next to the secret you wish to delete.</p> </li> <li> <p>Select the checkbox and confirm your action.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/","title":"Add group-based access control","text":"<p>To control access to your application based on the user's group, you can apply the Group-Based conditional authentication template (which is in the Access Control section). Users are redirected to an error page if the user does not belong to any of the groups configured in the template.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#scenario","title":"Scenario","text":"<p>Consider a scenario with two user groups, <code>manager</code> and <code>employee</code>. Login should be allowed to users assigned to these groups.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Create two user groups named <code>manager</code> and <code>employee</code> and assign user accounts to them. For instructions, see the following:</p> <ul> <li>Managing groups</li> <li>Managing users</li> </ul> </li> </ul>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To enable conditional authentication:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the relevant application and go to it's Sign-in Method tab.</p> </li> <li> <p>Add group-based access control using your preferred editor:</p> Classic EditorVisual Editor <p>To add group-based access control using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the Access Control &gt; Group-Based template.</p> </li> </ol> <p>To add group-based access control using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; Access Control.</p> </li> <li> <p>Click + ADD next to Group-Based to add the group-based access control script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>groupsToAllowAccess</code> An array of user groups that can access the application. For this scenario, enter <code>manager</code> and <code>employee</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the group-based conditional authentication template for access control.</p> <pre><code>// This script will allow access for any user who belongs\n// to one of the given groups.\n// If the user is a member of the following groups, user will be given access.\nvar groupsToAllowAccess = ['manager','employee'];\n\n// Error page to redirect unauthorized users,\n// can be either an absolute url or relative url to server root, or empty/null\n// null/empty value will redirect to the default error page\nvar errorPage = '';\n\n// Additional query params to be added to the above url.\n// Hint: Use i18n keys for error messages\nvar errorPageParameters = {\n'status': 'Unauthorized',\n'statusMsg': 'You are not authorized to login to this application.'\n};\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated subject from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groupsToAllowAccess);\nif (!isMember) {\nsendError(errorPage, errorPageParameters);\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When the first step of the authentication flow is complete, the onLoginRequest function retrieves the user from the context.</li> <li>The user and the configured list of groups are passed to the <code>isMemberOfAnyOfGroups</code> function.</li> <li>The <code>isMemberOfAnyOfGroups</code> function, which is available in WSO2 Identity Server by default, verifies whether the given user belongs to any of the listed groups.</li> <li>If the user belongs to any of the configured groups, the user will be able to log in successfully.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in as a user who belongs to the specified groups. This user will successfully log in to the application.</li> <li>Log out of the application.</li> <li> <p>Log in again as a user who does not belong to the specified groups. The user will see the following error.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template/","title":"Add MFA based on user group","text":"<p>You can enable a more secure login flow for users that belong to specific groups by applying the Group-Based conditional authentication template for Adaptive MFA. This template enables two-factor authentication with TOTP for users who belong to the user groups you specify.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario with two user groups, <code>manager</code> and <code>employee</code>. For users assigned to these groups, the login flow in applications should be stepped up with TOTP or FIDO as follows:</p> <ol> <li>Username and password</li> <li>TOTP or FIDO</li> </ol> <p></p>"},{"location":"guides/authentication/conditional-auth/group-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Create two user groups named <code>manager</code> and <code>employee</code> and assign user accounts to them. For instructions, see the following:</p> <ul> <li>Managing groups</li> <li>Managing users</li> </ul> </li> </ul>"},{"location":"guides/authentication/conditional-auth/group-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To enable conditional authentication:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the relevant application and go to it's Sign-in Method tab.</p> </li> <li> <p>Add group-based adaptive MFA using your preferred editor:</p> Classic EditorVisual Editor <p>To add group-based adaptive MFA using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the User &gt; Group-Based template.</p> </li> </ol> <p>To add group-based adaptive MFA using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; Users.</p> </li> <li> <p>Click + ADD next to Group-Based to add the group-based adaptive MFA script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP and FIDO</li> </ul> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>groupsToStepUp</code> <p>Comma separated list of user groups. Two-factor authentication should apply to users from these groups.</p> For this example scenario, enter <code>manager</code> and <code>employee</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the group-based conditional authentication template.</p> <pre><code>var groupsToStepUp = ['manager', 'employee'];\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated subject from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groupsToStepUp);\nif (isMember) {\nLog.info(user.username + ' is a member of one of the groups: ' + groupsToStepUp.toString());\nexecuteStep(2);\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When step 1 of the authentication flow is complete, the onLoginRequest function retrieves the user from the context.</li> <li>The user and the configured list of groups are passed to the following function: <code>isMemberOfAnyOfGroups</code>.</li> <li>This function (which is available in WSO2 Identity Server by default) verifies whether the given user belongs to any of the listed groups.</li> <li>If the user belongs to any of the configured groups, authentication step 2 (TOTP) is prompted.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in with a user who does not belong to any of the configured groups (manager or employee). You will    successfully sign in to the application.</li> <li>Log out of the application.</li> <li> <p>Log in with a user who belongs to the <code>manager</code> or <code>employee</code> group or both.</p> <p>The user will be prompted to select the step-up method, and the sign-in flow will be stepped up according to the user's preference.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/ip-based-template/","title":"Add MFA based on IP address","text":"<p>You can secure the login flow based on the user's IP address by applying the IP-Based conditional authentication template to your application. This template prompts two-factor authentication for users who log in from outside a given IP range (such as external networks or other geographical locations).</p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where the internal IPs of an organization are as follows: <code>192.168.1.0/24, 10.100.0.0/16</code>. The login flow should be stepped up with TOTP when users log in from outside this IP range as follows:</p> <ol> <li>Username and password</li> <li>TOTP</li> </ol> <p>Users who log in from the internal network should be allowed to simply log in with their username and password.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#prerequisites","title":"Prerequisites","text":"<p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To enable conditional authentication:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the relevant application and go to it's Sign-in Method tab.</p> </li> <li> <p>Add IP-based adaptive MFA using your preferred editor:</p> Classic EditorVisual Editor <p>To add IP-based adaptive MFA using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the Environment &gt; IP-Based template.</p> </li> </ol> <p>To add IP-based adaptive MFA using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; Environment.</p> </li> <li> <p>Click + ADD next to IP-Based to add the IP-based adaptive MFA script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP</li> </ul> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>corpNetwork</code> Comma separated list of IP addresses. Two-factor authentication should apply when users log in from outside this range. The default values in the template are <code>192.168.1.0/24</code> and <code>10.100.0.0/16</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the IP-based conditional authentication template.</p> <pre><code>// This script will step up authentication for any user who are trying to log in outside from the configured network\n\n// Configure the network ranges here\nvar corpNetwork = ['192.168.1.0/24', '10.100.0.0/16'];\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar user = context.currentKnownSubject;\n// Extracting the origin IP of the request\nvar loginIp = context.request.ip;\nLog.info('User: ' + user.username + ' logged in from IP: ' + loginIp);\n// Checking if the IP is within the allowed range\nif (!isCorporateIP(loginIp, corpNetwork)) {\nexecuteStep(2);\n}\n}\n});\n};\n\n// Function to convert ip address string to long value\nvar convertIpToLong = function(ip) {\nvar components = ip.split('.');\nif (components) {\nvar ipAddr = 0, pow = 1;\nfor (var i = 3; i &gt;= 0; i -= 1) {\nipAddr += pow * parseInt(components[i]);\npow *= 256;\n}\nreturn ipAddr;\n} else {\nreturn -1;\n}\n};\n\n// Function to check if the ip address is within the given subnet\nvar isCorporateIP = function(ip, subnets) {\nvar subnetLength = subnets.length;\nfor (var i = 0; i &lt; subnetLength; i++) {\nvar subnetComponents = subnets[i].split('/');\nvar minHost = convertIpToLong(subnetComponents[0]);\nvar ipAddr = convertIpToLong(ip);\nvar mask = subnetComponents[1];\nif (subnetComponents &amp;&amp; minHost &gt;= 0) {\nvar numHosts = Math.pow(2, 32 - parseInt(mask));\nif ((ipAddr &gt;= minHost) &amp;&amp; (ipAddr &lt;= minHost + numHosts - 1)) {\nreturn true;\n}\n}\n}\nreturn false;\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li> <p>The convertIpToLong function converts and returns the provided IP address as a long value.</p> </li> <li> <p>The isCorporateIP function returns whether the user's IP address is in the given range. This method accepts two inputs. The first argument is the IP address that should be validated and the second argument is the allowed IP range.</p> </li> <li> <p>When step 1 of the authentication flow is complete, the onLoginRequest function retrieves the IP address of the user from the context.</p> </li> <li> <p>This IP address is passed to the isCorporateIP function along with the configured IP address range.</p> </li> <li> <p>If the IP address of the logged-in user is not in the configured IP range, step 2 of the authentication flow is executed.</p> </li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Try to log in with a user whose IP address is in the configured range. You will successfully log in to the application.</p> </li> <li> <p>Log out of the application.</p> </li> <li> <p>Log in with a user who does not belong to the configured IP address range. TOTP authentication is prompted.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/login-attempt-based-template/","title":"Add MFA based on login attempts","text":"<p>You can enable a more secure login flow for users based on the number of invalid login attempts by applying the Login-Attempt-Based conditional authentication template for Adaptive MFA. This template enables two-factor authentication with TOTP for users who exceed the number of invalid login attempts you specify.</p>"},{"location":"guides/authentication/conditional-auth/login-attempt-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where the login flow of the application is stepped up with TOTP if a user exceeds three failed login attempts. The authentication steps are as follows:</p> <ol> <li>Username and password</li> <li>TOTP</li> </ol> <p></p>"},{"location":"guides/authentication/conditional-auth/login-attempt-based-template/#prerequisites","title":"Prerequisites","text":"<p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p>"},{"location":"guides/authentication/conditional-auth/login-attempt-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To enable conditional authentication:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the relevant application and go to it's Sign-in Method tab.</p> </li> <li> <p>Add login attempt-based adaptive MFA using your preferred editor:</p> Classic EditorVisual Editor <p>To add login-attempt-based adaptive MFA using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the User &gt; Login-Attempt-Based template.</p> </li> </ol> <p>To add login-attempt-based adaptive MFA using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; Users.</p> </li> <li> <p>Click + ADD next to Login-Attempt-Based to add the login attempt-based adaptive MFA script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP</li> </ul> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>invalidAttemptsToStepup</code> <p> Minimum number of attempts made by a user to prompt 2FA..</p> For this example scenario, enter <code>3</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/login-attempt-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the login-attempt-based conditional authentication template.</p> <pre><code>// This script will step up authentication for any user who has exceeded 3 invalid login attempts continuously.\n// This variable is used to define the number of invalid attempts allowed before prompting the second facto.\nvar invalidAttemptsToStepup = 3;\n\nvar failedLoginAttemptsBeforeSuccessClaim= 'http://wso2.org/claims/identity/failedLoginAttemptsBeforeSuccess';\nvar onLoginRequest = function(context) {\ndoLogin(context);\n};\n\nvar doLogin = function(context) {\nexecuteStep(1, {\nonSuccess : function(context){\nvar user = context.steps[1].subject;\nif (isExceedInvalidAttempts(user)) {\nexecuteStep(2, {\nonSuccess : function(context) {\nvar user = context.steps[1].subject;\nuser.localClaims[failedLoginAttemptsBeforeSuccessClaim] = \"0\";\n}\n});\n}\n},\nonFail : function(context) {\n// Retry the login..\ndoLogin(context);\n}\n});\n};\n\nvar isExceedInvalidAttempts  = function(user) {\nif (user.localClaims[failedLoginAttemptsBeforeSuccessClaim] &gt;= invalidAttemptsToStepup) {\nreturn true;\n} else {\nreturn false;\n}\n};\n</code></pre> <p>Let's look at how this script works.</p> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/login-attempt-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in, but use invalid credentials.</li> <li>Repeat step 2 for two more attempts making three failed login attempts.</li> <li> <p>Try to log in to the application using valid credentials.</p> <p>The user will be prompted to enter the TOTP received on their registered TOTP authenticator.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/","title":"Add MFA based on user device","text":"<p>You can apply the New-Device-Based conditional authentication template to your application to enable a more secure login flow for users who log in from a previously unused device.</p> <p>When the user signs in from a previously unused device, this template enables two-factor authentication and/or sends an email notification when the user passes the first authentication step. A cookie is used to identify whether the device has been used before. When the cookie expires (this expiry time is specified in the template), the same browser or device is considered a new device.</p>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where users who log in to an application from a new device or browser should be prompted with TOTP as a second authentication step. The two authentication steps are as follows:</p> <ol> <li>Username and password</li> <li>TOTP</li> </ol> <p>An email should also be sent to the user with details of the login attempt.</p>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>You need to have a user account in WSO2 Identity Server. If you don't already have one, create a user account in WSO2 Identity Server.</p> </li> <li> <p>Go to the user's profile and add the email address for the user. For instructions, see Manage user profiles.</p> </li> </ul>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To enable conditional authentication:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the relevant application and go to it's Sign-in Method tab.</p> </li> <li> <p>Add New-Device-based adaptive MFA using your preferred editor:</p> Classic EditorVisual Editor <p>To add New-Device-based adaptive MFA using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the Request &gt; Device-Based template.</p> </li> </ol> <p>To add New-Device-based adaptive MFA using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; Request.</p> </li> <li> <p>Click + ADD next to New-Device-Based to add the New-Device-based adaptive MFA script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP</li> </ul> </li> <li> <p>Update the following parameters in the script.      Parameter Description <code>sendNotification</code> <p>Specifies whether email notifications should be sent to users.</p> For this scenario, set this parameter to <code>true</code>. <code>cookieName</code> A user-defined cookie name to be used for device identification. <code>deviceRememberPeriod</code> <p>The length of time in seconds for which this device should be remembered as a trusted device. Once this time period passes, login attempts are considered as new device logins.</p>For example, you can specify two years as follows: <code>60 * 60 * 24 * 365 * 2</code> </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the device-based conditional authentication template.</p> <pre><code>// This script will step up authentication and send email notification in case of\n// a user being logging in from a new device (identified by a cookie).\n\n// Amount of time in seconds to remember a device. Set to 2 years below.\nvar deviceRememberPeriod = 60 * 60 * 24 * 365 * 2;\n\n// Cookie name to be set\nvar cookieName = 'deviceAuth';\n\n// Whether to send a notification on new device login\nvar sendNotification = true;\n\n// Whether to step up authentication for new device login\nvar stepUpAuthentication = true;\n\n// Email template to be used for new device login notification\nvar emailTemplate = 'UnseenDeviceLogin';\n\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nsubject = context.currentKnownSubject;\nif (!validateCookie(context, subject)) {\nLog.debug('New device login for ' + subject.identifier);\n\nif (sendNotification === true) {\nvar templatePlaceholders = {\n'username': subject.identifier,\n'login-time': new Date().toUTCString()\n};\nvar isSent = sendEmail(subject, emailTemplate, templatePlaceholders);\nif (isSent) {\nLog.debug('New device login notification sent to ' + subject.identifier);\n} else {\nLog.debug('New device login notification sending failed to ' + subject.identifier);\n}\n}\n\nif (stepUpAuthentication === true) {\nLog.debug('Stepping up authentication due to a new device login for ' + subject.identifier);\nexecuteStep(2, {\nonSuccess: function (context) {\nsetCookie(context.response, cookieName, subject.identifier, {\n'sign': true,\n'max-age': deviceRememberPeriod,\n'sameSite': 'LAX'\n});\n}\n});\n}\n}\n}\n});\n};\n\n//Validate if the user has a valid cookie with the value as subject's username\nvar validateCookie = function(context, subject) {\nvar cookieVal = getCookieValue(context.request, cookieName, {'validateSignature': true});\nreturn subject.identifier === cookieVal;\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li> <p>The validateCookie function verifies whether the user has a valid cookie for the logged-in user. This function calls the getCookieValue(request, name, properties) function. The cookie name is configured with the cookieName parameter.</p> </li> <li> <p>When step 1 of the authentication flow is complete, the onLoginRequest function validates the deviceAuth cookie.</p> </li> <li> <p>If there is no valid cookie found, the function checks whether the sendNotification and stepUpAuthentication parameters are enabled.</p> </li> <li> <p>If the sendNotification property is enabled, the sendEmail(user, templateId, placeholderParameters) function is called to send the notification email with the login timestamp. The email template is set as UnseenDeviceLogin in the emailTemplate variable.</p> </li> <li> <p>If the stepUpAuthentication parameter is enabled, step 2 of the authentication flow is executed.</p> </li> <li> <p>On the successful execution of step 2 of the authentication flow, the setCookie(response, name, value, properties) function is called to set a deviceAuth cookie.</p> </li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL from a new device or browser.</p> </li> <li> <p>Try to log in to the application. TOTP authentication is prompted and the configured email of the user receives the email notification.</p> </li> <li> <p>Log out of the application.</p> </li> <li> <p>Log in with the same user from the same device/browser. You will successfully log in to the application with only the basic authentication.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/role-based-template/","title":"Add MFA based on user roles","text":"<p>You can enable a more secure login flow for users that belong to specific roles by applying the Role-Based conditional authentication template for Adaptive MFA. This template enables two-factor authentication with TOTP or FIDO for users who belong to the user role you specify.</p>"},{"location":"guides/authentication/conditional-auth/role-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario with two user roles, <code>admin</code> and <code>manager</code>. For users assigned to these roles, the login flow in applications should be stepped up with TOTP or FIDO as follows:</p> <ol> <li>Username and password</li> <li>TOTP or FIDO</li> </ol> <p></p>"},{"location":"guides/authentication/conditional-auth/role-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Create two user roles named <code>admin</code> and <code>manager</code> and assign user accounts to them. For instructions, see the following:</p> <ul> <li>Managing roles</li> <li>Managing users</li> </ul> </li> </ul>"},{"location":"guides/authentication/conditional-auth/role-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To enable conditional authentication:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the relevant application and go to it's Sign-in Method tab.</p> </li> <li> <p>Add role-based adaptive MFA using your preferred editor:</p> Classic EditorVisual Editor <p>To add role-based adaptive MFA using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the User &gt; Role-Based template.</p> </li> </ol> <p>To add role-based adaptive MFA using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; Users.</p> </li> <li> <p>Click + ADD next to Role-Based to add the role-based adaptive MFA script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP and FIDO</li> </ul> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>rolesToStepUp</code> <p> Comma-separated list of user roles. Two-factor authentication should apply to users from these roles.</p> For this example scenario, enter <code>admin</code> and <code>manager</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/role-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the role-based conditional authentication template.</p> <pre><code>// This script will step up authentication for any user belonging\n// to one of the given roles\n// If the user has any of the below roles, authentication will be stepped up\nvar rolesToStepUp = ['admin', 'manager'];\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated subject from the first step\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given roles\nvar hasRole = hasAnyOfTheRoles(user, rolesToStepUp);\nif (hasRole) {\nLog.info(user.username + ' Has one of Roles: ' + rolesToStepUp.toString());\nexecuteStep(2);\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When step 1 of the authentication flow is complete, the <code>onLoginRequest</code> function retrieves the user from the context.</li> <li>The user and the configured list of roles are passed to the following function: <code>hasAnyOfTheRoles</code>.</li> <li>This function (which is available in WSO2 Identity Server by default) verifies whether the given user belongs to any of the listed roles.</li> <li>If the user belongs to any of the configured roles, authentication step 2 (TOTP or FIDO) is prompted.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/role-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in with a user who does not belong to any of the configured roles (manager or admin). You will successfully sign in to the application.</li> <li>Log out of the application.</li> <li> <p>Log in with a user who belongs to the <code>admin</code> or <code>manager</code> role.</p> <p>The user will be prompted to select the step-up method, and the sign-in flow will be stepped up according to the user's preference.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/","title":"Add user age-based access control","text":"<p>To control access to your application based on the user's age, you can apply the Age-Based conditional authentication template. The age of the user is calculated using the <code>date of birth</code> attribute in the user's profile. Users are redirected to an error page if the date of birth is not specified in the user profile or if the user's age is below the minimum age configured in the template.</p>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where users who are younger than 18 years should be prevented from signing in to an application and redirected to an error message.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Go to the user's profile and update the date of birth so that the current age is below 18 years. For instructions, see Manage user profiles.</p> </li> </ul>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<ol> <li>On the WSO2 Identity Server Console, click Applications.</li> <li>Select the relevant application and go to its Sign-in Method tab.</li> <li> <p>Add user-age-based access control using your preferred editor:</p> Classic EditorVisual Editor <p>To add user-age-based access control using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the User &gt; User-Age-Based template.</p> </li> </ol> <p>To add age-based access control using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; User.</p> </li> <li> <p>Click + ADD next to User-Age-Based to add the user-age-based access control script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>ageLimit</code> <p>Minimum age required for the user to log in to the application.</p>For this example scenario, enter <code>18</code> as the value. <code>errorPage</code> The error page to which users are redirected if the age limit is below age limit. The default error page is used if this parameter is not configured. <code>errorPageParameters</code> Parameters to be passed to the error page. This information will display on the error page. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the user age-based conditional authentication template.</p> <pre><code>// This script will only allow login to application if the user's age is over configured value\n// The user will be redirected to an error page if the date of birth is not present or user is below configured value\n\nvar ageLimit = 18;\n\n// Error page to redirect unauthorized users,\n// can be either an absolute url or relative url to server root, or empty/null\n// null/empty value will redirect to the default error page\nvar errorPage = '';\n\n// Additional query params to be added to the above url.\n// Hint: Use i18n keys for error messages\nvar errorPageParameters = {\n'status': 'Unauthorized',\n'statusMsg': 'You need to be over ' + ageLimit + ' years to login to this application.'\n};\n\n// Date of birth attribute at the client side\nvar dateOfBirthClaim = 'http://wso2.org/claims/dob';\n\n// The validator function for DOB. Default validation check if the DOB is in YYYY-MM-dd format\nvar validateDOB = function (dob) {\nreturn dob.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n};\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar underAge = true;\n// Extracting user store domain of authenticated subject from the first step\nvar dob = context.currentKnownSubject.localClaims[dateOfBirthClaim];\nLog.debug('DOB of user ' + context.currentKnownSubject.identifier + ' is : ' + dob);\nif (dob &amp;&amp; validateDOB(dob)) {\nvar birthDate = new Date(dob);\nif (getAge(birthDate) &gt;= ageLimit) {\nunderAge = false;\n}\n}\nif (underAge === true) {\nLog.debug('User ' + context.currentKnownSubject.identifier + ' is under aged. Hence denied to login.');\nsendError(errorPage, errorPageParameters);\n}\n}\n});\n};\n\nvar getAge = function(birthDate) {\nvar today = new Date();\nvar age = today.getFullYear() - birthDate.getFullYear();\nvar m = today.getMonth() - birthDate.getMonth();\nif (m &lt; 0 || (m === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {\nage--;\n}\nreturn age;\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>The validateDOB function validates whether the provided date of birth is correct.</li> <li>The getAge function calculates the age based on the configured birth date.</li> <li>When step 1 of the authentication flow is complete, the onLoginRequest function checks whether the age of the user is above the configured age limit.</li> <li>If the age is below the configured limit, the user is directed to the configured error page.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in as a user who is above 18 years of age. This user will successfully log in to the application.</li> <li>Log out of the application.</li> <li> <p>Log in again with a user who is below 18 years. The user will see the following error.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/user-store-based-template/","title":"Add MFA based on user store","text":"<p>You can enable a more secure login flow for users that belong to specific user stores by applying the User Store-Based conditional authentication template for Adaptive MFA. This template enables two-factor authentication with TOTP for users who belong to the user store you specify.</p>"},{"location":"guides/authentication/conditional-auth/user-store-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario with two user stores, <code>EMPLOYEES</code> and <code>CONTRACTORS</code>. For users assigned to these user stores, the login flow in applications should be stepped up with TOTP as follows:</p> <ol> <li>Username and password</li> <li>TOTP</li> </ol> <p></p>"},{"location":"guides/authentication/conditional-auth/user-store-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Create two user stores named <code>EMPLOYEES</code> and <code>CONTRACTORS</code> and add user accounts to them. For instructions, see the following:</p> <ul> <li>Managing user stores</li> <li>Managing users</li> </ul> </li> </ul>"},{"location":"guides/authentication/conditional-auth/user-store-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<p>To enable conditional authentication:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the relevant application and go to it's Sign-in Method tab.</p> </li> <li> <p>Add user store-based adaptive MFA using your preferred editor:</p> Classic EditorVisual Editor <p>To add user store-based adaptive MFA using the classic editor:</p> <ol> <li> <p>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle on.</p> </li> <li> <p>Select the User &gt; User Store-Based template.</p> </li> </ol> <p>To add user store-based adaptive MFA using the visual editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, and expand Predefined Flows &gt; Conditional Login Flows &gt; Users.</p> </li> <li> <p>Click + ADD next to User Store-Based to add the user store-based adaptive MFA script.</p> <p></p> </li> <li> <p>Click Confirm to replace any existing script with the selected predefined script.</p> </li> </ol> <p>Important</p> <p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP</li> </ul> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>userStoresToStepUp</code> <p> Comma-separated list of user stores. Two-factor authentication should apply to users from the specified user stores.</p> For this example scenario, enter <code>EMPLOYEES</code> and <code>CONTRACTORS</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/user-store-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the user store-based conditional authentication template.</p> <pre><code>// This script will prompt 2FA to the app only for a selected set of user stores.\n// If the user is in one of the following user stores, user will be prompted 2FA\nvar userStoresToStepUp = ['EMPLOYEES', 'CONTRACTORS'];\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting user store domain of authenticated subject from the first step\nvar userStoreDomain = context.currentKnownSubject.userStoreDomain;\n// Checking if the user is from whitelisted tenant domain\nif (userStoresToStepUp.indexOf(userStoreDomain) &gt;= 0) {\nexecuteStep(2);\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When step 1 of the authentication flow is complete, the <code>onLoginRequest</code> function retrieves the user from the context.</li> <li>The <code>userStoreDomain</code> is extracted from the authentication information provided in step one.</li> <li>Check if the extracted <code>userStoreDomain</code> is in the values specified for the variable <code>userStoresToStepUp</code>.</li> <li>If the user belongs to any of the configured user stores, authentication step 2 (TOTP) is prompted.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/user-store-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in with a user who does not belong to any of the configured user stores (<code>EMPLOYEES</code> or <code>CONTRACTORS</code>). You will successfully sign in to the application.</li> <li>Log out of the application.</li> <li> <p>Log in with a user who belongs to the <code>EMPLOYEES</code> or <code>CONTRACTORS</code> user store. TOTP authentication is prompted.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/","title":"Write a custom authentication script","text":"<p>Follow this guide to write a conditional authentication script from scratch and to understand its internals.</p>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#scenario","title":"Scenario","text":"<p>Let's consider the following simplified set of requirements for your business application:</p> <ul> <li>User tries to log in to an application with username and password authentication.</li> <li>If the user belongs to the manager or employee group, they can access the application. Other users should not be allowed to access the application.</li> </ul> <p></p>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Customize the login flow in your application and enable <code>Username and Password</code> authentication.</p> </li> <li> <p>Create two user groups named <code>manager</code> and <code>employee</code> and assign user accounts to them. For instructions, see the following:</p> <ul> <li>Managing groups</li> <li>Managing users</li> </ul> </li> </ul>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#start-with-the-default-script","title":"Start with the default script","text":"<p>To start off, configure conditional authentication for your application and check the default script once you enable the two steps authentication.</p> <p><pre><code>var onLoginRequest = function(context) {\nexecuteStep(1);\n};\n</code></pre> The above scripts do not have any conditional authentication. It allows all users to access the application after successful authentication through <code>username and password</code>.</p>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#implement-onsuccess-callback","title":"Implement onSuccess callback","text":"<p>Now, let's implement what happens when username and password authentication is successful. You can use the onSuccess eventCallback.</p> <pre><code>var onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Implement what to do when Step 1 authentication is success.\n}\n});\n};\n</code></pre>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#get-user-object","title":"Get user object","text":"<p>If username and password authentication is successful, let's get the user from the context. You can use <code>context.currentKnownSubject</code>.</p> <pre><code>var groups = ['employee', 'manager'];\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated user from the first step.\nvar user = context.currentKnownSubject;\n}\n});\n};\n</code></pre>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#check-membership-of-the-user","title":"Check membership of the user","text":"<p>Now, let's check whether the user is a member of <code>manager</code> or <code>employee</code>. You can use the isMemberOfAnyOfGroups(user, groups) utility function.</p> <p>Refer the inbuilt functions to get to know more existing functions.</p> <pre><code>var groups = ['employee', 'manager'];\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated user from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groups);           }\n});\n};\n</code></pre>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#fail-authentication","title":"Fail authentication","text":"<p>If the user is not a member, fail the authentication and redirect the user to the application with some error code.</p> <pre><code>var groups = ['employee', 'manager'];\nvar errorCode = 'access_denied';\nvar errorMessage = 'You do not have access to login to this app';\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated user from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groups);\nif (!isMember) {\nfail({'errorCode': errorCode, 'errorMessage': errorMessage});\n}  }\n});\n};\n</code></pre> <p>You have now written a conditional authentication script for the group-based access control scenario.</p> <p>Similarly, you can build your own scripts to handle many scenarios using the API references.</p>"},{"location":"guides/authentication/decentralized-login/","title":"Add decentralized login","text":"Add decentralized login Add decentralized login to your applications with WSO2 Identity Server Sign-in with Ethereum"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/","title":"Sign-In With Ethereum","text":"<p>Sign-In With Ethereum is an open standard for authentication that enables users to control their digital identity with their Ethereum account. The integration uses the open-source OIDC Provider built by Login.xyz, which is hosted under oidc.signinwithethereum.org.</p> <p>Follow this guide for instructions on how to set up Sign-In With Ethereum in WSO2 Identity Server.</p>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#register-wso2-identity-server-in-sign-in-with-ethereum","title":"Register WSO2 Identity Server in Sign-In With Ethereum","text":"<p>You need to register WSO2 Identity Server as an OIDC client application in <code>oidc.signinwithethereum.org</code>.</p> <p>Note</p> <p>Follow the Sign-In With Ethereum documentation for detailed instructions.</p> <ol> <li> <p>To register a new OIDC client, use the following <code>curl</code> command.</p> <p>Note</p> <p>Replace {organization_name} with the name of your organization.</p> <pre><code>curl -X POST https://oidc.signinwithethereum.org/register\n-H 'Content-Type: application/json' -d  '{\"redirect_uris\": [\"https://localhost:9443/commonauth\"]}'\n</code></pre> </li> <li> <p>Take note of the <code>client_id</code> and <code>client_secret</code> returned from the response.</p> <p>The following is an example response:</p> <pre><code>{\n\"client_id\": \"9b49de48-d198-47e7-afff-7ee26cbcbc95\",\n\"client_secret\": \"{secret}\",\n\"registration_access_token\": \"{access_token}\",\n\"registration_client_uri\": \"https://oidc.signinwithethereum.org/client/9b49de48-d198-47e7-afff-7ee26cbcbc95\",\n\"redirect_uris\": [\"https://localhost:9443/commonauth\"]\n}\n</code></pre> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#register-the-sign-in-with-ethereum-idp","title":"Register the Sign-In With Ethereum IdP","text":"<p>Follow the steps below to register the Sign-In With Ethereum IdP in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Create Connection and select Sign-In With Ethereum.</li> <li> <p>Enter the following details of the Sign-In With Ethereum identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Sign-In With Ethereum identity provider. Client ID The client ID obtained from oidc.signinwithethereum.org. Client secret The client secret obtained from oidc.signinwithethereum.org. </p> </li> <li> <p>If required, enable JIT provisioning.</p> <p>Note</p> <p>If JIT provisioning is enabled, when a user successfully logs in with Sign-In With Ethereum for the first time, a user account is created in the WSO2 Identity Server Console with the wallet ID. This new user account will be managed by Ethereum. Note that JIT provisioning is disabled by default.</p> </li> <li> <p>In the created connection, go to the Settings tab and see the list of scopes to which Sign-In With Ethereum has granted permissions.</p> <ul> <li>openid: Engages the OpenID flow.</li> <li>profile: Allows to view the user's basic profile data.</li> </ul> <p>Note</p> <p>WSO2 Identity Server needs these scopes to get user information. WSO2 Identity Server checks the attribute configurations of the application and sends the relevant attributes received from Sign-In With Ethereum to the app.</p> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#enable-sign-in-with-ethereum","title":"Enable Sign-In With Ethereum","text":"<p>The following guide shows you how to enable Sign-In With Ethereum in an application.</p> <p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Select your application, go to the Sign-in Method tab and enable Sign-In With Ethereum using your preferred editor:</p> Classic EditorVisual Editor <p>To add enable Sign-In With Ethereum using the Classic Editor:</p> <ol> <li> <p>If you haven't defined a sign-in flow for the application, click Start with Default configuration to define a login flow with a username and a password.</p> </li> <li> <p>Click Add Authentication in the same step as the default configuration.</p> </li> <li> <p>From the list of connections that appear, select the Sign-In With Ethereum connection that you created and click Add.</p> <p></p> </li> </ol> <p>To add enable Sign-In With Ethereum using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select the Sign-In With Ethereum connection that you created</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save the changes.</p> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application that you previously registered with WSO2 Identity Server.</li> <li>Click Login to redirect to the WSO2 Identity Server login page.</li> <li> <p>On the WSO2 Identity Server login page, choose the Sign-In With Ethereum IdP to log in.</p> <p>Note</p> <p>You will be redirected to the login interface of Sign-In With Ethereum.</p> <p></p> </li> <li> <p>Click Sign-In With Ethereum again to log in.</p> <p></p> </li> <li> <p>Select a preferred Ethereum wallet.</p> <p></p> </li> <li> <p>Sign the login request to log in to the application.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#add-groups-to-the-connection","title":"Add groups to the connection","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#delete-a-connection","title":"Delete a connection","text":"<p>Before you begin</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p>Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Set up and navigate to the General tab.</li> <li> <p>At the bottom of the page, click the button in the Delete connection.</p> <p>Note<p>You cannot delete connections that are available by default.</p> </p> </li> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/","title":"Add standard-based login","text":"Add standard-based login Add login to your applications using an IdP based on the authentication standard OpenID Connect SAML"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/","title":"Add login with an OpenID Connect identity provider","text":"<p>You can add standard OpenID Connect login  to your applications using an external OpenID Connect (OIDC) identity provider (IdP) and enable users to log in to your applications while maintaining their accounts in the external identity providers.</p> <p>Follow this guide to register an OIDC IdP in WSO2 Identity Server and add it to the login flow of your application.</p>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#register-wso2-identity-server-in-the-idp","title":"Register WSO2 Identity Server in the IdP","text":"<p>You need to register an OpenID Connect application with the external identity provider. Follow the identity provider's documentation to know how to register an OIDC application.</p> <p>You can use the following URL as the callbackURL of the application.</p> <p><pre><code>https://localhost:9443/commonauth\n</code></pre> Once you register an application, you will receive the following:</p> <ul> <li>client_id (also known as <code>app_id</code> or <code>application_id</code>)</li> <li>client_secret (also known as <code>app_secret</code>)</li> </ul> <p>Check the documentation of the OIDC identity provider and get the following endpoints:</p> <ul> <li>Authorization Endpoint URL</li> <li>Token Endpoint URL</li> <li>User Info endpoint (optional)</li> <li>Logout endpoint (optional)</li> </ul>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#register-the-oidc-idp","title":"Register the OIDC IdP","text":"<p>Now, let's register the OIDC IdP in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, click Connections.</li> <li>Click Create Connection and select Standard-Based IdP.</li> <li> <p>Provide a unique identity provider name, select OpenID Connect, and click Next.</p> <p></p> </li> <li> <p>Enter the following details of the external OIDC identity provider and click Next:</p> <p> Parameter Description Client ID The client ID obtained from the external identity provider. Client secret The client secret obtained from the external identity provider. Authorization endpoint URL The authorization endpoint of the external identity provider. Token endpoint URL The token endpoint of the external identity provider. </p> </li> <li> <p>(Optional) Provide the mode of certificate configuration.</p> <p>Note</p> <p>You can either configure a JWKS endpoint or upload a certificate of the external party. This helps to validate the signature of the assertions sent by the external identity provider.</p> <ul> <li>JWKS endpoint: The JWKS endpoint of the external identity provider.</li> <li> <p>Use PEM certificate: Upload or paste the public certificate of the external identity provider. The certificate should be in PEM format.</p> If you have a certificate in other formats such as <code>.crt</code>, <code>.cer</code> or <code>.der</code>, expand here to see how you can convert them to PEM format using OpenSSL<p>Convert CRT to PEM <pre><code>openssl x509 -in cert.crt -out cert.pem\n</code></pre> Convert CER to PEM: <pre><code>openssl x509 -in cert.cer -out cert.pem\n</code></pre></p> <p>Convert DER to PEM: <pre><code>openssl x509 -in cert.der -out cert.pem\n</code></pre></p> </li> </ul> </li> <li> <p>Click Finish to complete the registration.</p> </li> </ol> <p>Note</p> <p>Once the OIDC identity provider is created, you can configure additional OIDC settings from the Settings tab.</p> <p>WSO2 Identity Server requests for the openid scope from the external identity provider. If you need more attributes from the external identity provider, you can configure scopes from the Settings tab.</p>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#enable-the-oidc-idp-for-login","title":"Enable the OIDC IdP for login","text":"<p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Select your application, go to the Sign-in Method tab and add OIDC identity provider from your preferred editor:</p> <p>Recommendations</p> <p>WSO2 Identity Server recommends adding your social and enterprise connections to the first authentication step, as they are used for identifying the user.</p> Classic EditorVisual Editor <p>To add OIDC identity provider login using the Classic Editor:</p> <ol> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the step, select your OIDC identity provider, and click Add.</p> <p></p> </li> </ol> <p>To add OIDC identity provider login using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select your OIDC identity provider connection.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#how-it-works","title":"How it works","text":"<p>To provide this login capability, WSO2 Identity Server uses the standard OpenID Connect with authorization code flow  underneath. For an application, this flow works as follows:</p> <p></p>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#delete-a-connection","title":"Delete a connection","text":"<p>Before you begin</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p>Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Set up and navigate to the General tab.</li> <li> <p>At the bottom of the page, click the button in the Delete connection.</p> <p>Note<p>You cannot delete connections that are available by default.</p> </p> </li> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#related-links","title":"Related links","text":"<ul> <li>Configure JIT user provisioning</li> <li>Configure OIDC IdP settings</li> </ul>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/","title":"Add login with a SAML identity provider","text":"<p>You can add standard SAML login to your applications using an external SAML identity provider (IdP) and enable users to log in to your applications while maintaining their accounts in the external identity providers.</p> <p></p> <p>Follow this guide to register a SAML IdP in WSO2 Identity Server and add it to the login flow of your application.</p>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#register-wso2-identity-server-in-the-idp","title":"Register WSO2 Identity Server in the IdP","text":"<p>You need to register WSO2 Identity Server as a SAML application in the external identity provider. Follow the identity provider's documentation to know how to register a SAML application.</p> <p>You can use the following URL as the Assertion Consumer Service URL (also known as callback URL/ redirect URL/ ACS URL) in the application that represents WSO2 Identity Server.</p> <pre><code>https://localhost:9443/commonauth\n</code></pre> <p>After you register the app, you should get the required configurations, as explained below.</p> <ul> <li> <p>If you are manually applying the IdP configurations to WSO2 Identity Server, you need the following configurations:</p> <ul> <li>Issuer (also known as entityId)</li> <li>Single sign on URL of the identity provider (also known as login URL)</li> <li>Identity Provider Certificate</li> </ul> </li> <li> <p>If you are using metadata to apply the IdP configurations to WSO2 Identity Server, you need the following:</p> <ul> <li>SAML IdP metadata file of the identity provider</li> <li>Identity Provider Certificate</li> </ul> </li> </ul>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#register-the-saml-idp","title":"Register the SAML IdP","text":"<p>Now, let's register the SAML IdP in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, click Connections.</li> <li>Click New Connections and select Standard-Based IdP.</li> <li> <p>Provide a unique identity provider name, select SAML, and click Next.    </p> </li> <li> <p>Select one of the following methods and add the SAML configurations:</p> <p> File Based Configuration <p>Upload a SAML metadata file with the required configurations.</p> See Use a SAML metadata file. Manual Configuration <p>Use this option to manually specify the required SAML configurations.</p> See Add SAML configs manually. </p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#add-saml-configs-manually","title":"Add SAML configs manually","text":"<p>If you selected Manual Configuration in the previous step, follow the steps given below.</p> <ol> <li> <p>Enter the following details and click Next.</p> <p></p> <p> Parameter Description Service provider entity ID  This value will be used as the <code>saml2:Issuer</code> in the SAML requests initiated from WSO2 Identity Server to the external identity provider (IdP). Identity provider Single Sign-On URL This value specifies the single sign-on URL of the external IdP. This is where WSO2 Identity Server will send its authentication requests. You need to get this value from the external IdP. Identity provider entity ID This is the <code>saml2:Issuer</code> value specified in the SAML responses issued by the external IdP. You need to get this value from the external IdP. </p> </li> <li> <p>(Optional) Upload the public certificate of the identity provider.</p> </li> <li>Click Finish to complete the registration.</li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#use-a-saml-metadata-file","title":"Use a SAML metadata file","text":"<p>If you selected File Based Configuration in the previous step, follow the steps given below.</p> <p>Note</p> <p>A SAML IdP metadata file contains the following: - IdP identifiers (<code>entityID</code> or <code>Issuer</code>) - Endpoints (single sign-on URLs, single logout URLs, etc.) - Supported bindings</p> <ol> <li> <p>Specify the service provider entity ID.</p> <p>Note</p> <p>This value will be used as the <code>saml2:Issuer</code> in the SAML requests initiated from WSO2 Identity Server to the external identity provider (IdP).</p> </li> <li> <p>Upload the IdP metadata file and click Next.</p> <p></p> </li> <li> <p>(Optional) Upload the public certificate of the identity provider.</p> </li> <li>Click Finish to complete the registration.</li> </ol> <p>Note</p> <p>Once the SAML identity provider is created, you can configure additional SAML settings from the Protocol tab.</p>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#enable-the-saml-idp-for-login","title":"Enable the SAML IdP for login","text":"<p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the WSO2 Identity Server Console, click Applications.</li> <li> <p>Select your application, go to the Sign-in Method tab and add SAML identity provider from your preferred editor:</p> <p>Recommendations</p> <p>WSO2 Identity Server recommends adding your social and enterprise connections to the first authentication step, as they are used for identifying the user.</p> Classic EditorVisual Editor <p>To add SAML identity provider login using the Classic Editor:</p> <ol> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the step, select your SAML identity provider, and click Add.</p> <p></p> </li> </ol> <p>To add SAML identity provider login using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select your SAML identity provider connection.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#configure-user-attributes","title":"Configure user attributes","text":"<p>Configuring attributes for an identity provider involves mapping the attributes available in the external SAML IdP to attributes that are local to WSO2 Identity Server. This is done so that WSO2 Identity Server can identify the user attributes in the response sent from the external SAML IdP.</p> <ol> <li>On the WSO2 Identity Server Console, click Connections.</li> <li>Select the SAML IdP connection from the list and click Set up.</li> <li> <p>Go to the Attributes tab and click Add IdP Attributes.</p> <p></p> </li> <li> <p>Provide the following values and click Add Attribute Mapping.</p> <p></p> <p> Parameter Description External IdP Attribute The attribute from the external IdP that should be mapped to the local attribute. Maps to The local attribute to which the external IdP attribute is mapped. </p> </li> <li> <p>Select one of the mapped attributes as the subject attribute for your application and click Update.</p> <p></p> <p>Note</p> <p>By default, WSO2 Identity Server uses the subject attribute sent by the external SAML IdP as the subject identifier. To configure a different attribute as the subject, enable the Find user ID from requests from the Settings tab of the SAML IdP.</p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#how-it-works","title":"How it works","text":"<p>Consider a scenario where a SAML IdP returns the authenticated user's nickname and profile updated time to WSO2 Identity Server in the SAML authentication response as follows:</p> <ul> <li>http://schemas.idp.com/nickname   : nickname</li> <li>http://schemas.idp.com/updated_at : profile updated time</li> </ul> <p>You may want to convert them to the local attribute URI so that the application can receive them in the local attribute URI. If you don't do that mapping, the application will receive the attributes as sent by the external IdP.</p> <p>A sample IdP attribute mapping done from the WSO2 Identity Server Console:</p> <p></p> <p>Sample attributes in the SAML assertion of the integrated SAML app:</p> <pre><code>&lt;saml2:AttributeStatement&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/modified\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;Mon Aug 30 2021 07:26:40 GMT+0000 (Coordinated Universal Time)&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/nickname\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;John&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;/saml2:AttributeStatement&gt;\n</code></pre> <p>Sample subject attribute in the assertion looks as shown below:</p> <pre><code>&lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;John&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"jimhbeljflkppacldhnjcfjkhoobkddhngnkamom\"\nNotOnOrAfter=\"2021-08-30T09:49:21.336Z\"\nRecipient=\"http://localhost:8081/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;/saml2:Subject&gt;\n</code></pre>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#delete-a-connection","title":"Delete a connection","text":"<p>Before you begin</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p>Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Set up and navigate to the General tab.</li> <li> <p>At the bottom of the page, click the button in the Delete connection.</p> <p>Note<p>You cannot delete connections that are available by default.</p> </p> </li> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#related-links","title":"Related links","text":"<ul> <li>Configure JIT user provisioning</li> <li>Configure SAML IdP settings</li> </ul>"},{"location":"guides/authentication/mfa/","title":"Add multi-factor authentication","text":"<p>Multi-Factor Authentication (MFA) allows you to grant access to your resources by using two (2-Factor) or more (Multi-Factor) factors to authenticate users. If one factor is compromised or broken, an attacker still has at least one more barrier to breach before successfully breaking into the resource. MFA provides an additional layer of security to the resource.</p> <p>Authentication factors in MFA rely on two or more independent credentials of the three categories given below.</p> <ul> <li>Knowledge factor  - Something you know, such as a password or a PIN.</li> <li>Possession factor - Something you have, such as a FIDO key or an ATM card.</li> <li>Inherence factor  - Something you are, such as your fingerprint or your iris pattern.</li> </ul> <p>On WSO2 Identity Server, the default authentication mechanism is username and password.</p> <p></p> <p>The WSO2 Identity Server Console allows configuring multi-step authentication where you can define an authentication chain containing different authenticators in each step. By adding different authenticators, you can achieve a login flow secured by multiple factors.</p> <p></p> <p>You can choose to replace the username and password authentication with social or enterprise logins and add a few more authenticators to build your authentication chain.</p>"},{"location":"guides/authentication/mfa/#configure-multi-factor-authentication","title":"Configure multi-factor authentication","text":"<p>Asgardeo provides two modes to configure multi-factor authentication, namely the Classic Editor and the Visual Editor.</p> <p>Given below are the main steps you will follow when enabling MFA in your login flow.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications and select the application to which MFA needs to be added.</p> </li> <li> <p>Go to the Sign-in Method tab where the application login flow is defined.</p> </li> <li> <p>Add the required authenticators that should be enforced at each step. You can add authenticators using any one of the following editors:</p> <ul> <li> <p>Using the classic editor</p> <p></p> </li> <li> <p>Using the classic editor</p> <p></p> </li> </ul> </li> </ol>"},{"location":"guides/authentication/mfa/#whats-next","title":"What's next?","text":"<p>Learn how to enable MFA using the following authenticators:</p> <ul> <li>TOTP</li> <li>Email OTP</li> <li>SMS OTP</li> </ul>"},{"location":"guides/authentication/mfa/add-emailotp-login/","title":"Add MFA with Email OTP","text":"<p>Email OTP is a One-Time Password (OTP) sent to the user's verified email address, which the user must submit during login (as an additional authentication step). This password is typically valid for a very short period.</p> <p>During Email OTP authentication, the user is required to access the verified email account within a short time span to get the OTP. This prevents unauthorized users from accessing the OTP and thereby adds an extra layer of security to the authentication process.</p> <p>Follow the instructions given below to configure Multi-Factor Authentication (MFA) using Email OTP in WSO2 Identity Server.</p>"},{"location":"guides/authentication/mfa/add-emailotp-login/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to</p> <ul> <li> <p>register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>update the user profile of the users with an email address to which the user will receive the OTP.</p> </li> </ul> <ul> <li>configure the email sending module in WSO2 Identity Server.</li> </ul> <p>Info</p> <p>You can use Email OTP for multi-factor authentication only if a previous authentication step is configured with username and password or another factor that can validate user credentials.</p>"},{"location":"guides/authentication/mfa/add-emailotp-login/#set-up-email-otp","title":"Set up Email OTP","text":"<p>WSO2 Identity Server has some default settings for email OTP, which are sufficient for most cases. If required, you can change the default settings, as explained below.</p> <p>To update the default Email OTP settings:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections and select Email OTP.</li> <li> <p>Update the following parameters in the Settings tab:</p> <p></p> <p> Field Description Email OTP expiry time Specifies the expiry time of the OTP. The generated OTP will not be valid after this expiry time. Use only numeric characters for OTP          Specifies whether to use only numeric characters in the OTP. If this is selected, the generated OTP contains only digits (0-9).         If this option is not selected, the OTP will contain alphanumeric characters.      Email OTP length Specifies the number of characters allowed in the OTP.  3. Once you update the Email OTP settings, click Update.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-emailotp-login/#enable-email-otp-for-an-app","title":"Enable Email OTP for an app","text":"<p>To enable Email OTP for MFA, you need to add Email OTP in the authentication flow of the application.</p> <p>Follow the steps given below.</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li>Select the application to which you wish to add Email OTP.</li> <li> <p>Go to the Sign-in Method tab of the application and add the Email OTP authenticator from your preferred editor:</p> Classic EditorVisual Editor <ul> <li> <p>If you don't have a customized login flow, you can click Add Email OTP as a second factor.</p> <p></p> </li> </ul> <p>This opens the customized login flow with Email OTP as a second-factor authenticator:</p> <ul> <li> <p>If you have an already customized login flow, you can add a second step and add Email OTP as the authenticator.</p> <p></p> </li> </ul> <p>To add Email OTP as a second-factor authenticator using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab and go to Predefined Flows &gt; Basic Flows &gt; Add Multi-factor login.</p> </li> <li> <p>Select <code>Username + Password -&gt; Email OTP</code>.</p> </li> <li> <p>Click Confirm to add Email OTP as a second factor to the sign-in flow.</p> <p></p> </li> </ol> <p>Enable backup codes</p> <p>Once the Email OTP authenticator is added, select Enable backup codes. This allows users to use their backup codes to log in to the application when they cannot obtain the required MFA codes.</p> Using the classic editorUsing the visual editor <p></p> <p></p> <p>Learn more about configuring backup codes for business users.</p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-emailotp-login/#how-it-works","title":"How it works","text":"<p>When Email OTP is enabled in the login flow of your application, the application user will be prompted with the Email OTP authentication step once the first authentication step is completed. Given below are the high-level steps that follow:</p> <ol> <li>WSO2 Identity Server sends the OTP to the user's verified email address.</li> <li> <p>WSO2 Identity Server prompts the user to enter the OTP code.</p> <p></p> </li> <li> <p>If required, the user can request WSO2 Identity Server to resend the OTP. The new OTP invalidates the previously sent OTP.</p> </li> <li>The user enters the OTP and clicks Continue.</li> <li>If the authentication is successful, the user can access the application.</li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/","title":"Add MFA with SMS OTP","text":"<p>SMS OTP is a One-Time Password (OTP) sent to the user's registered mobile number on WSO2 Identity Server. The OTP is typically valid for a short period, preventing unauthorized users from accessing the OTP and thereby adding an extra layer of security to the authentication process.</p> <p>Follow the instructions below to configure MFA using SMS OTP in WSO2 Identity Server.</p>"},{"location":"guides/authentication/mfa/add-smsotp-login/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <p>Note</p> <ul> <li>You can use SMS OTP for multi-factor authentication only if a previous authentication step is configured with <code>username and password</code>, <code>magic link</code>, or any federated authenticator.</li> <li>SMS OTP cannot be used as the first step in your login flow.</li> <li>WSO2 Identity Server SMS OTP uses WSO2 Identity Server events to publish the OTP Notification data.</li> </ul>"},{"location":"guides/authentication/mfa/add-smsotp-login/#set-up-sms-otp","title":"Set up SMS OTP","text":"<p>To enable SMS OTP for the organization:</p> <ol> <li>On the WSO2 Identity Server, go to Connections and select SMS OTP.</li> <li> <p>Update the following parameters in the Settings tab:</p> <p></p> <p> Field Description SMS OTP expiry time The generated OTP will not be valid after this expiry time. Use only numeric characters for OTP If this checkbox is checked, the generated OTP will only contain digits (0-9).             If the checkbox is unchecked, the OTP will contain alphanumeric characters.          SMS OTP length Specifies the number of characters allowed in the OTP. </p> </li> <li> <p>Click update to save your configurations.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#add-sms-otp-for-an-app","title":"Add SMS OTP for an app","text":"<p>To add SMS OTP to the authentication flow of the app:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li> <p>Select the application to which you wish to add SMS OTP.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and add the SMS OTP authenticator from your preferred editor:</p> Classic EditorVisual Editor <ul> <li> <p>If you don't have a customized login flow, you can click Add SMS OTP as a second factor.</p> <p></p> </li> </ul> <p>This opens the customized login flow with SMS OTP as a second-factor authenticator:</p> <ul> <li> <p>If you have an already customized login flow, you can add a second step and add SMS OTP as the authenticator.</p> <p></p> </li> </ul> <p>To add SMS OTP as a second-factor authenticator using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab and go to Predefined Flows &gt; Basic Flows &gt; Add Multi-factor login.</p> </li> <li> <p>Select <code>Username + Password -&gt; SMS OTP</code>.</p> </li> <li> <p>Click Confirm to add SMS OTP as a second factor to the sign-in flow.</p> <p></p> </li> </ol> <p>Enable backup codes</p> <p>Once the SMS OTP authenticator is added, select Enable backup codes. This allows users to use their backup codes to log in to the application when they cannot obtain the required MFA codes.</p> Using the classic editorUsing the visual editor <p></p> <p></p> <p>Learn more about configuring backup codes for business users.</p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#create-a-webhook-to-consume-otp-notifications","title":"Create a webhook to consume OTP notifications","text":"<p>WSO2 Identity Server's SMS OTP authenticator uses WSO2 Identity Server events to publish the OTP Notification data. You can consume these notifications by creating webhooks in Choreo.</p> <p>To create a webhook on Choreo:</p> <ol> <li> <p>Create an organization in Choreo with the same name and email address you used to create your WSO2 Identity Server organization.</p> <p>Note</p> <p>Organizations in WSO2 Identity Server and Choreo will synchronize based on the organization name.</p> </li> <li> <p>Select the Default Project under All Projects. Alternatively, you can create a new project or use an existing project.</p> </li> <li> <p>Start creating a webhook in Choreo from the list of components. Learn more about webhooks in the Choreo documentation.</p> <p></p> </li> <li> <p>Provide general details of the webhook and click Next</p> <p></p> </li> <li> <p>Authorize and connect the GitHub repository that you want your webhook code to be hosted on and click Next.</p> <p>Note</p> <p>Be sure to select Start with a sample, which will create a pull request in your GitHub repository with the starter code required for the webhook.</p> <p></p> </li> <li> <p>Select WSO2 Identity Server as the Trigger Type and click Next.</p> <p></p> </li> <li> <p>Select NotificationService as the Trigger Channel and click Create.</p> <p>Note</p> <p>The <code>NotificationService</code> trigger channel listens to all notification events from the organization in WSO2 Identity Server.</p> <p></p> </li> <li> <p>After the webhook is created, Choreo will create a pull request in your connected Github repository with the sample starter code. Go to your repository and merge this code to complete the setup.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#define-the-business-logic","title":"Define the business logic","text":"<ol> <li> <p>Navigate to your connected GitHub repository and open the webhook.bal file. Your boilerplate code may look as below.</p> <pre><code>import ballerinax/trigger.asgardeo;\nimport ballerina/http;\n\nconfigurable asgardeo:ListenerConfig config = ?;\n\nlistener http:Listener httpListener = new(8090);\nlistener asgardeo:Listener webhookListener =  new(config,httpListener);\n\nservice asgardeo:NotificationService on webhookListener {\n\nremote function onSmsOtp(asgardeo:SmsOtpNotificationEvent event ) returns error? {\n//Not Implemented\n}\n}\n\nservice /ignore on httpListener {}\n</code></pre> </li> <li> <p>Define your business logic in the webhook.bal file.</p> <p>Note</p> <p>The following sample logic is defined on an WSO2 Identity Server webhook that uses the <code>NotificationService</code> trigger channel. This webhook is programmed to send the SMS Message via an SMS Gateway.</p> <pre><code>import ballerinax/trigger.asgardeo;\nimport ballerina/http;\nimport ballerina/log;\nimport wso2/choreo.sendsms;\n\nconfigurable asgardeo:ListenerConfig config = ?;\n\nlistener http:Listener httpListener = new(8090);\nlistener asgardeo:Listener webhookListener =  new(config,httpListener);\n\nsendsms:Client sendSmsClient = check new ();\n\nservice asgardeo:NotificationService on webhookListener {\n\nremote function onSmsOtp(asgardeo:SmsOtpNotificationEvent event) returns error? {\n\n//logging the event.\nlog:printInfo(event.toJsonString());\n\n//read required data from the event.\nasgardeo:SmsOtpNotificationData? eventData = event.eventData;\nstring toNumber = &lt;string&gt; check eventData.toJson().sendTo;\nstring message = &lt;string&gt; check eventData.toJson().messageBody;\n\nstring response = check sendSmsClient -&gt; sendSms(toNumber, message);\nlog:printInfo(response);\n} }\n\nservice /ignore on httpListener {}\n</code></pre> SmsOtpNotificationEvent Metadata<p>The payload of the <code>SmsOtpNotificationEvent</code> contains the following metadata:</p> <ul> <li>Security Data object: The security data object is the same as all other WSO2 Identity Server events. This contains the following security metadata about the event.  Property Name Type Description <code>iss</code> String Issuer of the event <code>iat</code> String Event published timestamp. <code>jti</code> String Unique identifier for the event. <code>aud</code> String Audience of the event. </li> </ul> <p>Sample security data object:</p> <pre><code>{\n\"iss\": \"Asgardeo\",\n\"jti\": \"3b69b103-fa6c-424a-bbf4-a974d0c2d2a3\",\n\"iat\": 1659732032884,\n\"aud\": \"https://websubhub/topics/myorg/NOTIFICATIONS\"\n}\n</code></pre> <ul> <li>Event Data object - The event data object contains the details of the event. This contains the following metadata about the notification event.</li> </ul> <p> Property Name Type Description <code>organizationId</code> int Organization Identifier <code>organizationName</code> String Organization name <code>sendTo</code> String Mobile number receiving the SMS OTP. <code>messageBody</code> String Content of the SMS OTP Message </p> <p>Sample event data object:</p> <pre><code>{\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"sendTo\": \"+1234567890\"\n\"messageBody\": \"Your one-time password for the myapp is 075052. This expires in 5 minutes.\",\n}\n</code></pre> </li> <li> <p>Once you have defined your logic, you can deploy your webhook to capture WSO2 Identity Server notification events.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#how-it-works","title":"How it works","text":"<p>When SMS OTP is enabled for the organization and added to the login flow of your application, the application user will be prompted with the SMS OTP authentication step once the first authentication step is completed. Given below are the high-level steps that follow:</p> <ol> <li>WSO2 Identity Server sends the OTP to the user's registered mobile number.</li> <li> <p>WSO2 Identity Server prompts the user to enter the OTP code.</p> <p></p> </li> <li> <p>If required, the user can request WSO2 Identity Server to resend the OTP. A new OTP will be sent if the current resend attempt count is less than the maximum allowed resend attempt count. The new OTP invalidates the previously sent OTP.</p> </li> <li>The user enters the OTP and clicks Continue.</li> <li>On successful authentication, the user can access the application.</li> </ol>"},{"location":"guides/authentication/mfa/add-totp-login/","title":"Add MFA with TOTP","text":"<p>The Time-based One-Time Password (TOTP) is a temporary passcode, generated by an algorithm that can be used only once. The algorithm that generates each password uses the current time of the day, which ensures that each password is unique. TOTP is considered more secure because the passcode is valid only for a short window of time. The TOTP generated by WSO2 Identity Server is valid for 30 seconds.</p> <p>To use TOTP as a multi-factor authentication(MFA) option, application users need to have an authenticator app that can scan the QR code and generate a one-time password. Some authenticator apps are:</p> <ul> <li>Google Authenticator</li> <li>Authy</li> </ul> <p>Note</p> <p>TOTP authenticators use the TOTP specification to calculate access tokens based on the current time and the secret key shared between the user and the identity provider.</p>"},{"location":"guides/authentication/mfa/add-totp-login/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>To get started, you need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Download and install one of the authenticator apps mentioned above.</p> </li> </ul> <p>Note</p> <ul> <li>You can use TOTP for multi-factor authentication only if a previous authentication step is configured with username and password or another factor that can validate user credentials.</li> <li>TOTP cannot be used as the first step of your login flow.</li> <li>Federated users (users who are authenticated using external IdPs) can log in with TOTP MFA option.</li> </ul>"},{"location":"guides/authentication/mfa/add-totp-login/#enable-totp-for-an-app","title":"Enable TOTP for an app","text":"<p>Follow the steps given below to enable TOTP as the second factor in the login flow of your application.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Select the application for which TOTP needs to be added.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and add the TOTP authenticator from your preferred editor:</p> Classic EditorVisual Editor <ul> <li> <p>If you don't have a customized login flow, you can click Add TOTP as a second factor.</p> <p></p> <p>This opens the customized login flow with TOTP as a second-factor authenticator:</p> </li> <li> <p>If you have an already customized login flow, you can add a second step and add TOTP as the authenticator.</p> <p></p> </li> </ul> <p>To add TOTP as a second-factor authenticator using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab and go to Predefined Flows &gt; Basic Flows &gt; Add Multi-factor login.</p> </li> <li> <p>Select <code>Username + Password -&gt; TOTP</code>.</p> </li> <li> <p>Click Confirm to add TOTP as a second factor to the sign-in flow.</p> <p></p> </li> </ol> <p>Enable backup codes</p> <p>Once the TOTP authenticator is added, select Enable backup codes. This allows users to use their backup codes to log in to the application when they cannot obtain the required MFA codes.</p> Using the classic editorUsing the visual editor <p></p> <p></p> <p>Learn more about configuring backup codes for business users.</p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-totp-login/#disable-enrolling-in-totp-during-first-login","title":"Disable enrolling in TOTP during first login","text":"<p>TOTP enrollment during the first login is enabled by default for all applications.</p> <p>Administrators of an organization can configure their business applications to disable TOTP enrollment during the login flow of the users.</p> <p>To disable TOTP enrollment during login:</p> <ol> <li>On the WSO2 Identity Server Console, enable TOTP  for a selected application.</li> <li>Turn on Conditional Authentication by switching the toggle.</li> <li> <p>Add the following authentication script.</p> <p>Note</p> <p>The <code>authenticatorParams</code> method has been added to <code>executestep(2)</code>, assuming that TOTP is configured in step 2 of the authentication process. If you have configured TOTP in a different step, add the <code>authenticatorParams</code> method to the relevant step.</p> <pre><code>var enrolUserInAuthenticationFlow = \"false\";\n\nvar onLoginRequest = function (context) {\nexecuteStep(1);\nexecuteStep(2, {\nauthenticatorParams: {\ncommon: {\n'enrolUserInAuthenticationFlow': enrolUserInAuthenticationFlow\n}\n}\n}, {\nonSuccess: function (context) {\nLog.info(\"Successfully managed login flow\");\n}\n});\n};\n</code></pre> <p>Enable enrolling in TOTP at first login</p> <p>To enable enrolling in TOTP the first time a user logs in, use any of the following approaches:</p> <ul> <li>Update the value of <code>enrolUserInAuthenticationFlow</code> parameter to <code>true</code>.     <pre><code>var enrolUserInAuthenticationFlow = \"true\";\n</code></pre></li> <li>Turn off Conditional Authentication by switching the toggle.</li> </ul> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-totp-login/#try-it-out","title":"Try it out","text":"<p>Application users can enroll for TOTP authentication when they login to the business application for the first time. Given below are the steps that a user will follow:</p> <ol> <li>Download an authenticator app to a mobile device.</li> <li>Try to log in to the application by providing credentials. The user is prompted with a QR code.</li> <li> <p>Scan the QR code using the authenticator app, select the checkbox, and click Continue.</p> <p>Note</p> <ul> <li>This step is prompted only when the user attempts to log in for the first time.</li> <li>This step will not be prompted if you have disabled enrolling in TOTP during first login.</li> </ul> <p></p> </li> <li> <p>Check the authenticator app and see that the TOTP is generated.</p> </li> <li> <p>Enter the TOTP:</p> <p></p> </li> <li> <p>Click Continue to continue login.</p> </li> </ol> <p>Note</p> <p>If the QR code is deleted from the authenticator app, there is no way to recover it from the application. In such a scenario, the user should re-enroll for TOTP through the Multi Factor Authentication option in the My Account portal.</p> <p>Learn more about enrolling TOTP from My Account.</p>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/","title":"Add user-preferred MFA login","text":"<p>WSO2 Identity Server users have the option to select their preferred MFA option. Once chosen, Asgardo remembers the choice and prompts the chosen MFA option as a second factor when users log into applications.</p> <p>Note</p> <p>Currently, you can only configure user-preferred MFA login by using the SCIM2/Me API of WSO2 Identity Server.</p>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/#configure-application-login-for-user-preferred-mfa","title":"Configure application login for user-preferred MFA","text":"<p>Follow the steps given below to configure the application login to prompt the user with the preferred MFA option.</p> <ol> <li>On the WSO2 Identity Server console, click Applications.</li> <li>Select your application and go to the Sign-in Method tab.</li> <li>Click Start with default configuration to define the login flow starting with <code>username and password</code>.</li> <li> <p>Add a second authentication step with the following authenticators.</p> <ul> <li>TOTP</li> <li>Email OTP </li> </ul> <p></p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle.          You can now define your conditional authentication script.</p> <p>Warning<p>As a security measure, WSO2 Identity Server does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </p> </li> <li> <p>Add the following adaptive authentication script.     <pre><code>var onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar preferredClaimURI = 'http://wso2.org/claims/identity/preferredMFAOption';\nvar user = context.steps[1].subject;\nvar preferredClaim = user.localClaims[preferredClaimURI];\n\nvar jsonObj = JSON.parse(preferredClaim);\nvar authenticationOption = jsonObj.authenticationOption;\nLog.info(\"preferredClaim authenticationOption \" + authenticationOption);\n\nif(preferredClaim != null) {   executeStep(2, {authenticationOptions: [{authenticator: authenticationOption}]}, {});\n} else {\nexecuteStep(2);\n}\n}\n});  };\n</code></pre></p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/#set-preferred-mfa-options-for-users","title":"Set preferred MFA options for users","text":"<p>To set preferred MFA options for users:</p> <ol> <li> <p>Collect information from your application users on their preferred MFA option.</p> <p>Available authenticators</p> <p>The following authentication options are available for users:  Connection Name Authenticator TOTP <code>totp</code> Email OTP <code>email-otp-authenticator</code> </p> </li> <li> <p>Set the preferred MFA option for each user using a SCIM2/Me patch API call.</p> <p>Note</p> <p>Update the <code>preferredMFAOption.authenticationOption</code> value for each user according to their choice in step 1.</p> Sample API call to add the user's preferred MFA option<pre><code>curl -v -k --header\n'Authorization: Bearer &lt;access_token&gt;'\n--data '\n    {\"Operations\":[\n        {\n            \"op\":\"replace\",\"value\":\n                {\"name\":\n                    {\"givenName\":\"liya\"}\n                }\n        },\n        {\n            \"op\":\"replace\",\n            \"value\":\n            {\n                \"name\":\n                {\"familyName\":\"shaggy\"}\n            }\n        },\n        {\n            \"op\":\n                \"replace\",\n                \"value\":{\"phoneNumbers\":[]}\n        },\n        {\n            \"op\":\n            \"replace\",\n            \"value\":\n                {\"urn:scim:wso2:schema\":\n                    {\n                        \"country\":\"Andorra\",\n                        \"dateOfBirth\":\"\",\n                        \"preferredMFAOption\":\"\n                            {\\\"authenticationOption\\\":\\\"email-otp-authenticator\\\"}\"\n                    }\n                }\n        }\n    ],\n    \"schemas\":[\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n    ]\n}'\n--header \"Content-Type:application/json\" https://localhost:9443/t/{tenant-domain}/scim2/Me\n</code></pre> </li> </ol>"},{"location":"guides/authentication/mfa/x509/","title":"Configure X509 Certificate Authenticator","text":"<p>This page guides you through configuring the X509 certificate authenticator with WSO2 Identity Server.</p> Prerequisites<p>You need to create the neccessary certificates and truststores before you start configuirng the x509 authenticator on the WSO2 Identity Server.</p> <p>X509 authentication requires the client to possess a Public Key Certificate (PKC).</p> <p>To create a sample certificate and create your own Certificate Authority to sign the certificates, follow the following steps:</p> <ol> <li> <p>Create the private RSA key using the following command.</p> <pre><code>openssl genrsa -out rootCA.key 2048\n</code></pre> <p>For this example, we have used the key size as <code>2048</code>, you can specify the key size as you wish.</p> </li> <li> <p>Using the key created in step 1, generate a certificate that is valid for ten years using the following command:</p> <pre><code>openssl req -new -x509 -days 3650 -key rootCA.key -out rootCA.crt\n</code></pre> </li> <li> <p>You are prompted to provide the following details, and the details you provide are incorporated into the certificate request. An example is shown below.</p> <pre><code>- Country Name (2 letter code) [AU]: SL\n- State or Province Name (full name) [Some-State]: Western\n- Locality Name (eg, city) [ ]: Colombo\n- Organization Name (eg, company) [Internet Widgits Pty Ltd]: WSO2\n- Organizational Unit Name (eg, section) [ ]: QA\n- Common Name (e.g. serverFQDN or YOUR name) [ ]: wso2is.com\n- Email Address [ ]: kim@wso2.com\n</code></pre> </li> <li> <p>Create files and directories required for the CA.</p> <ol> <li> <p>Create a new directory according to the <code>openssl.conf</code> format.</p> <pre><code>mkdir -p demoCA/newcerts\n</code></pre> </li> <li> <p>Create some initial files inside your CA directory structure.</p> <pre><code>touch demoCA/index.txt\necho '01' &gt; demoCA/serial\n</code></pre> </li> </ol> </li> <li> <p>For the JVM to trust your certificate, import your certificate into your JVM truststore.</p> <p>You can use the following command by updating the values for <code>&lt;path_to_the_jvm_truststore&gt;</code> and <code>&lt;password_of_the_truststore&gt;</code>.</p> <pre><code>keytool -import -noprompt -trustcacerts -alias rootCA -file rootCA.crt -keystore &lt;path_to_the_jvm_keystore&gt; -storepass &lt;password_of_the_keystore&gt;\n</code></pre> <p>Permission Denied?</p> <p>If you get a permission denied error when adding the certificate to the JVM trust store, run the above command with administrative privileges.</p> </li> <li> <p>Create the server certificate.</p> <p>To create the server certificate:</p> <ol> <li> <p>Create the keystore that includes the private key by executing the following command:</p> <p>Command format <pre><code>keytool -genkey -v -alias &lt;alias&gt; -keyalg RSA -validity 3650 -keystore &lt;keystore-name&gt; -storepass &lt;password&gt; -keypass &lt;password&gt;\n</code></pre></p> <p>Command Sample <pre><code>keytool -genkey -v -alias localcrt -keyalg RSA -validity 3650 -keystore localcrt.jks -storepass localpwd -keypass localpwd\n</code></pre></p> <p>You will be prompted to enter the following details before creating the keystore.</p> <p>Tip</p> <p>For \"What is your first and last name?\", provide the name without any spaces.</p> <p></p> </li> <li> <p>Use the created keystore file to generate a certificate signing request(CSR).</p> <p>Command format <pre><code>keytool -certreq -alias &lt;alias&gt; -file &lt;name-of-the-csr-file&gt; -keystore &lt;created-keystore-name&gt; -storepass &lt;keystore-password&gt;\n</code></pre></p> <p>Command Sample <pre><code>keytool -certreq -alias localcrt -file localcrt.csr -keystore localcrt.jks -storepass localpwd\n</code></pre></p> </li> <li> <p>Configure the necessary openSSL extension configurations by adding the following configurations under <code>x509_extensions</code> in the <code>/usr/lib/ssl/openssl.cnf</code> file or the <code>validation.cnf</code> file.</p> <pre><code>crlDistributionPoints = URI:http://pki.google.com/GIAG2.crl\nauthorityInfoAccess = OCSP;URI: http://clients1.google.com/ocsp\n</code></pre> <p>This configuration is required to enable CRL or OCSP-based certificate revocation validation.</p> <p>Info</p> <ul> <li>CRL is a list of digital certificates that have been revoked by the issuing CA.</li> <li>OCSP is an internet protocol that is used for obtaining the revocation status of an X509 digital certificate using the certificate serial number.</li> </ul> </li> <li> <p>Sign the CSR using the CA's root key.</p> <p>Command format <pre><code>openssl ca -batch -startdate &lt;validity-start-date&gt; -enddate &lt;validity-end-date&gt; -keyfile &lt;private-RSA-key-from-step-1&gt; -cert &lt;certificate-generated-in-step-2&gt; -policy policy_anything -config &lt;path-to-the-openssl.cf-file&gt; -notext -out localcrt.crt -infiles &lt;CSR-created-in-step-6.ii&gt;\n</code></pre></p> <p>Command Sample <pre><code>openssl ca -batch -startdate 150813080000Z -enddate 250813090000Z -keyfile rootCA.key -cert rootCA.crt -policy policy_anything -config /usr/lib/ssl/openssl.cnf -notext -out localcrt.crt -infiles localcrt.csr\n</code></pre></p> <p>This creates a signed certificate called <code>localcrt.crt</code> that is valid for a specified period that is denoted by the <code>startdate</code> and <code>enddate</code>.</p> <p></p> </li> <li> <p>Import the CA and signed certificate into the keystore.</p> <p>Import the CA</p> <p>Command format <pre><code>keytool -importcert -alias &lt;CA's-alias&gt; -file &lt;certificate-generated-in-step-2&gt; -keystore &lt;keystore-name&gt; -storepass &lt;keystore-password&gt; -noprompt\n</code></pre></p> <p>Command Sample <pre><code>keytool -importcert -alias rootCA -file rootCA.crt -keystore localcrt.jks -storepass localpwd -noprompt\n</code></pre></p> <p>Import the signed certificate</p> <p>Command format <pre><code>keytool -importcert -alias &lt;certificate-alias&gt; -file &lt;path-to-the-signed-certificate&gt; -keystore  &lt;keystore-name&gt; -storepass &lt;keystore-password&gt; -noprompt\n</code></pre></p> <p>Command Sample <pre><code>keytool -importcert -alias localcrt -file demoCA/newcerts/01.pem -keystore localcrt.jks -storepass localpwd -noprompt\n</code></pre></p> </li> <li> <p>Create the <code>pkcs12</code> out of the <code>.crt</code> file using the command below. as it has been used to import certificates to the browser.</p> What is a PKCS #12?<p>PKCS #12, or Public-Key Cryptography Standards #12, is a file format commonly used for storing cryptographic objects such as private keys, public keys, and certificates in a single, password-protected container. A PKCS #12 file, often represented with the <code>.p12</code> or <code>.pfx</code> extension, is a container format that can store a certificate and its associated private key.</p> <p>Command format <pre><code>keytool -importkeystore -srckeystore &lt;keystore-name&gt; -destkeystore &lt;pkcs12-file-name.p12&gt; -srcstoretype JKS -deststoretype PKCS12 -srcstorepass &lt;keystore-password&gt; -deststorepass &lt;pkcs12-file-password&gt; -srcalias &lt;keystore-alias&gt; -destalias &lt;pkcs12-file-alias&gt; -srckeypass &lt;password&gt; -destkeypass &lt;password&gt; -noprompt\n</code></pre></p> <p>Command Sample <pre><code>keytool -importkeystore -srckeystore localcrt.jks -destkeystore localhost.p12 -srcstoretype JKS -deststoretype PKCS12 -srcstorepass localpwd -deststorepass browserpwd -srcalias localcrt -destalias browserKey -srckeypass localpwd -destkeypass browserpwd -noprompt\n</code></pre></p> <p>Make sure to use the same password you used when creating the keystore for the <code>srcstorepass</code> in the above step.</p> <p>Upon successful execution of the above command you will have a <code>.p12</code> file created.You can import this file into your browser, as explained in the import certificate section.</p> </li> </ol> </li> <li> <p>Create a new truststore and import the server certificate into the truststore using the following commands:</p> <pre><code>keytool -import -keystore cacerts.jks -storepass cacertspassword -alias rootCA -file rootCA.crt -noprompt\nkeytool -importcert -alias localcrt -file localcrt.crt -keystore cacerts.jks -storepass cacertspassword -noprompt\n</code></pre> <p>CN</p> <p>The User objects in the LDAP directory hierarchy have designators that start with CN, meaning Common Name. The CN designator applies to all but a few object types. Active Directory only uses two other object designators (although LDAP defines several).</p> </li> </ol> <p>Once you have done the above steps, you will have the keystore (<code>localcrt.jks</code>), truststore (<code>cacerts.jks</code>), and pkcs12 (<code>localhost.p12</code>) files that you need to use later on in this guide.</p>"},{"location":"guides/authentication/mfa/x509/#add-the-x509-certificate","title":"Add the X509 certificate","text":"<p>To add your x509 certificate to the WSO2 Identity Server, add the following configuration to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <p>Replace the values for your keystore file path, keystore password, trust store file path, and trust store password.</p> <p>Note</p> <p>If you dont have a keystore and truststore, refer the prerequisites section of this guide to create them.</p> <pre><code>[custom_transport.x509.properties]\nprotocols=\"HTTP/1.1\"\nport=\"8443\"\nmaxThreads=\"200\"\nscheme=\"https\"\nsecure=true\nSSLEnabled=true\nkeystoreFile=\"/path/to/keystore.jks\"\nkeystorePass=\"keystorepwd\"\ntruststoreFile=\"/path/to/truststore.jks\"\ntruststorePass=\"truststorespassword\"\nbindOnInit=false\nclientAuth=\"want\"\nssl_protocol = \"TLS\"\n</code></pre> <p>Note</p> <p>Consider the following factors when adding the above config to the <code>deployment.toml</code> file:</p> <ul> <li> <p>This connector should come first in order to function properly. Otherwise, when mutual SSL occurs, the existing connector (9443) will be picked up, and the certificate will not be retrieved correctly.</p> </li> <li> <p>The <code>clientAuth</code> attribute determines the Tomcat server to decide the level of requirement for a client to provide a certificate. It can be configured in the following ways:</p> <ul> <li> <p><code>true</code>: A valid client certificate is mandatory for a successful connection.</p> </li> <li> <p><code>want</code>: Tomcat will use a certificate if it's available, but it will still allow the connection even if no certificate is provided.</p> </li> <li> <p><code>false</code>: No client certificate is required or validated for the connection.</p> </li> </ul> </li> <li> <p>The <code>truststoreFile</code> attribute specifies the location of the truststore that contains the trusted certificate issuers.</p> </li> </ul>"},{"location":"guides/authentication/mfa/x509/#disable-certificate-validation","title":"Disable certificate validation","text":"<p>The location that is used to disable certificate validation depends on whether the WSO2 Identity Server was started at least once or not.</p> <ul> <li> <p>For an unstarted WSO2 Identity Server Pack</p> <p>If you have never started the WSO2 Identity Server before, the configurations should be made on the <code>deployment.toml</code> file. To disable certificate validation if your WSO2 Identity Server pack has never been started.</p> <ol> <li> <p>Open the <code>deployment.toml</code> file in the <code>&lt;IS_HOME&gt;/repository/conf</code> directory.</p> </li> <li> <p>Add the following configuration to disable CRL-based certificate validation and OCSP-based certificate validation.</p> <pre><code>[certificate_validation]\nocsp_validator_enabled = false\ncrl_validator_enabled = false\n</code></pre> </li> </ol> </li> <li> <p>For an already-started WSO2 Identity Server pack</p> <p>If you have started the WSO2 Identity Server at least once, the configurations should be made on the registry parameters. To disable certificate validation if the WSO2 Identity Server was started before.</p> <ol> <li> <p>On the WSO2 Identity Server management Console, go to Main &gt; Registry &gt; Browse.  </p> </li> <li> <p>Disable CRL certificate validation.</p> <ol> <li> <p>Search for <code>system/governance/repository/security/certificate/validator/crlvalidator</code> in the Location search box.  </p> </li> <li> <p>Expand Properties.</p> <p></p> </li> <li> <p>Click Edit corresponding to the enable property.  </p> </li> <li> <p>Change the value to <code>false</code> and click Save.  </p> </li> </ol> </li> <li> <p>Similarly, disable OCSP certificate validation in the <code>system/governance/repository/security/certificate/validator/ocspvalidator</code> registry parameter.</p> </li> </ol> </li> </ul>"},{"location":"guides/authentication/mfa/x509/#configure-the-authentication-endpoint","title":"Configure the Authentication Endpoint","text":"<p>To configure the authentication endpoint:</p> <ol> <li> <p>Add the following configuration to the file to the <code>deployment.toml</code> file in the <code>&lt;IS_HOME&gt;/repository/conf/</code> directory.</p> <pre><code>[authentication.authenticator.x509_certificate.parameters]\nname =\"x509CertificateAuthenticator\"\nenable=true\nAuthenticationEndpoint=\"https://localhost:8443/x509-certificate-servlet\"\nusername= \"CN\"\n</code></pre> Parameter Description name This attribute identifies the authenticator that is configured as the second authentication step. enable This attribute, when set to true, makes the authenticator capable of being involved in the authentication process. AuthenticationEndpoint This is the URL with the port that is secured with the certificate, for example: <code>https://localhost:8443/x509-certificate-servlet</code>. Update this based on your hostname. username This attribute value will be taken as the authenticated user subject identifier. Update this with any certificate attributes, e.g., CN and Email <p>Note</p> <p>When X509 authentication is configured as the second authentication step, the certificate will be validated to check whether it is associated with the authenticated user in the first authentication step. For that, the <code>username</code> parameter will be used. For that, the authenticated user name considered in the first authentication step will be validated with the certificate attribute in this property.</p> <p>When X509 authentication is configured as the first step, this certificate attribute will be treated as the authenticated user subject identifier.</p> </li> <li> <p>If you are using the identity claim dialect URI to store the X509 certificate, add the following parameter.</p> <pre><code>[authentication.authenticator.x509_certificate.parameters]\nsetClaimURI = \"http://wso2.org/claims/identity/userCertificate\"\n</code></pre> </li> <li> <p>To enable storing the X509 certificate as a user claim, add the following parameter.</p> <pre><code>[authentication.authenticator.x509_certificate.parameters]\nEnforceSelfRegistration = true\n</code></pre> </li> <li> <p>Restart the server to apply the changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/x509/#add-a-claim-mapping-for-the-certificate","title":"Add a claim mapping for the certificate","text":"<p>If storing the certificate as a user claim is enabled, the X509 certificate will be stored as a user claim and verified with the retrieved certificate from the request.</p> <ol> <li> <p>Log in to the WSO2 Identity Server Management Console (<code>https://&lt;IS_HOST&gt;:&lt;PORT&gt;/carbon</code>) using administrator credentials (<code>admin:admin</code>).</p> </li> <li> <p>On the Main tab, click Claims &gt; Add.</p> <p></p> </li> <li> <p>Click Add Local Claim.  </p> <p></p> </li> <li> <p>Add a new claim for the certificate by giving the details below, e.g., select a mapped attribute for the claim that is supported by the underlying database type.</p> <p></p> </li> <li> <p>Click Add.</p> </li> </ol>"},{"location":"guides/authentication/mfa/x509/#update-the-column-size-of-the-database-for-x509-certificates","title":"Update the column size of the database for X509 certificates","text":"<p>Make a note of the following points and configure your database to match your use case:  </p> <ul> <li>Disabling Certificate Validation in an Unstarted WSO2 IS Pack</li> <li>Disabling Certificate Validation in an Already-started WSO2 IS Pack</li> </ul>"},{"location":"guides/authentication/mfa/x509/#import-certificate","title":"Import certificate","text":"<ul> <li> <p>Chrome</p> <ol> <li> <p>In your browser, navigate to Settings &gt; Security &gt; HTTPS/SSL &gt; Manage certificates.  </p> <p></p> </li> <li> <p>Click on Import, select the localhost.p12 file, and then click Open. Note that you may have to enter the password that you used to generate the p12 file (browserpwd) to open it.</p> </li> </ol> </li> <li> <p>Firefox</p> <ol> <li> <p>Click on the menu option on the right of the screen and select     Preferences.  </p> <p></p> </li> <li> <p>Click Privacy &amp; Security in the left navigation and scroll down to     the Certificates section. Click View Certificates.  </p> <p></p> </li> <li> <p>In the window that appears, click Import.  </p> <p></p> </li> <li> <p>Select the localhost.p12 file, and then click Open. Note that you may have to enter the password that you used to generate the p12 file (browserpwd) to open it.</p> </li> </ol> </li> </ul>"},{"location":"guides/authentication/mfa/x509/#register-a-service-provider","title":"Register a service provider","text":"<p>The next step is to configure the service provider.</p> <ol> <li>Return to the management console.</li> <li>In the Service Providers section under the Main tab, click Add.</li> <li>Since you are using Travelocity as the sample, enter travelocity.com in the Service Provider Name text box and click Register.</li> <li>In the Inbound Authentication Configuration section, click Configure under the SAML2 Web SSO Configuration section.</li> <li>Now set the configuration as follows:  <ol> <li>Issuer : travelocity.com</li> <li>Assertion Consumer URL : http://localhost:8080/travelocity.com/home.jsp</li> </ol> </li> <li> <p>Select the following check-boxes:</p> <ol> <li>Enable Response Signing.</li> <li>Enable Single Logout.</li> <li>Enable Attribute Profile.</li> <li>Include Attributes in the Response Always.</li> </ol> </li> <li> <p>Click Update to save the changes. Now, you will be sent back to the Service Providers page.</p> </li> <li>Go to the Local and Outbound Authentication Configuration section.</li> <li> <p>You have two options here. You can add the X509 certificate authenticator as the first factor and also as the second factor.</p> <ol> <li> <p>Second factor  </p> <ol> <li> <p>Select the Advanced configuration radio button option.</p> </li> <li> <p>Add the Username &amp; Password authentication as a first step and X509 Certificate authentication as the second step. </p> </li> </ol> </li> <li> <p>First factor</p> <ul> <li>Select Local Authentication as the Authentication Type and select X509 Certificate from the drop-down list. </li> <li> <p>When using X509 as the first step of authentication, you need to create a user in the WSO2 Identity Server management console with the Email provided while creating the browser certificate. Example: </p> <p>Note</p> <p>For more information on creating users and assigning roles using the management console, refer here.</p> </li> </ul> </li> </ol> </li> <li> <p>Click on Update to finish the service provider configurations.</p> </li> </ol> <p>You have now added and configured the service provider.</p>"},{"location":"guides/authentication/mfa/x509/#try-it","title":"Try it","text":"<p>If you have configured the authentication successfully, you will be redirected to the home page of your application when you attempt to log in.</p>"},{"location":"guides/authentication/oidc/","title":"Configure OIDC Flows","text":"<p>Learn how to discover the OIDC endpoints in your WSO2 Identity Server organization and then use them to implement OIDC flows in your applications.</p>"},{"location":"guides/authentication/oidc/#discover-the-oidc-endpoints","title":"Discover the OIDC endpoints","text":"<p>This section covers how you can configure OIDC-based login for your single page application by discovering the required OIDC endpoints and configuring them in the WSO2 Identity Server Console.</p> <p>Discover OIDC endpoints has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#implement-authorization-code-grant-in-apps","title":"Implement authorization code grant in apps","text":"<p>The guides listed below will help you understand the OIDC login flow using the authorization code flow.</p> <ul> <li> <p>Implement authorization code flow</p> </li> <li> <p>Implement authorization code flow with PKCE</p> </li> <li> <p>Implement private key JWT client authentication for OIDC</p> </li> </ul>"},{"location":"guides/authentication/oidc/#validate-id-tokens","title":"Validate ID tokens","text":"<p>This section explains how the signature and the claims are verifieed in the ID token that is sent by WSO2 Identity Server to an application.</p> <p>Validate ID tokens has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#request-user-information","title":"Request user information","text":"<p>When WSO2 Identity Server sends the ID token to an application, there is user information encoded within it. This can be obtained using the userinfo endpoint.</p> <p>Request user information has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#token-validation-by-resource-servers","title":"Token validation by resource servers","text":"<p>WSO2 Identity Server provides the '/oauth2/introspect' endpoint to perform token validation. Using this, the resource server can verify the access token before authorizing the access.</p> <p>Token validation by resource servers has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#revoke-access-tokens","title":"Revoke access tokens","text":"<p>The token revocation endpoint can revoke any access granted to both confidential clients such as web apps and public clients such as the SPAs or mobile apps.</p> <p>Revoke access tokens has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#add-logout-to-application","title":"Add logout to application","text":"<p>The logout endpoint is used to terminate the user session at WSO2 Identity Server and to log the user out.</p> <p>Add logout to application has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/add-logout/","title":"Add logout with OIDC to application","text":"<p>OpenID Connect provides OpenID Connect RP-Initiated Logout to terminate user sessions. The logout endpoint is used to terminate the user session at WSO2 Identity Server and to log the user out. When a user is successfully logged out, the user is redirected to the <code>post_logout_redirect_uri</code> sent in the logout request.</p> <p>Logout endpoint</p> <pre><code>https://localhost:9443/oidc/logout\n</code></pre> <p>Sample request</p> <pre><code>curl -X POST \"https://localhost:9443/oidc/logout\" \\\n--data-urlencode \"id_token_hint=&lt;id_token&gt;\" \\\n--data-urlencode \"post_logout_redirect_uri=&lt;redirect URI&gt;\" \\\n--data-urlencode \"state=&lt;state&gt;\"\n</code></pre> <p>The logout request has the following parameters:</p> <p>Note</p> <p>See RP-initiated logout request for more details.</p> Request Parameter Description <code>id_token_hint</code> The ID token returned by WSO2 Identity Server (in response to the token request) is passed to the logout endpoint with a hint about the user's current authenticated session on the application. <code>post_logout_redirect_uri</code>      The URL to be redirected to during user logout. The value defined here should be added as one of the [authorized redirect URLs](https://is.docs.wso2.com/en/next/references/app-settings/oidc-settings-for-app/#authorized-redirect-urls). This should be passed along with the <code>id_token_hint</code>.     If the <code>post_logout_redirect_uri</code> parameter is not passed, the user will be routed to WSO2 Identity Server's common page after logout.      <code>state</code> The parameter passed from the application to WSO2 Identity Server to maintain state information. If an application sends this parameter, WSO2 Identity Server will return this information in the response. <p>Sample response</p> <pre><code>http://myapp.com?state=state-param\n</code></pre> <p></p>"},{"location":"guides/authentication/oidc/discover-oidc-configs/","title":"Discover OpenID Connect endpoints of WSO2 Identity Server","text":"<p>When you build OpenID Connect login in your application using WSO2 Identity Server as your identity provider, you need to get the OpenID Connect endpoints and configurations from WSO2 Identity Server.</p> <p>You can do this by invoking the discovery endpoint API or by using the WSO2 Identity Server Console as explained below.</p>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#prerequisite","title":"Prerequisite","text":"<p>To get started, you need to have an application registered in WSO2 Identity Server:</p> <ul> <li>Register a single-page app with OIDC.</li> <li>Register a web app with OIDC.</li> </ul>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#use-the-discovery-endpoint","title":"Use the discovery endpoint","text":"<p>OpenID Connect Discovery  allows you to discover the metadata such as endpoints, scopes, response types, claims, and supported client authentication methods of identity providers such as WSO2 Identity Server.</p> <p>Applications can dynamically discover the OpenID Connect identity provider metadata by calling the OpenID Connect discovery  endpoint. The structure of the request URL is as follows: <code>&lt;issuer&gt;/.well-known/openid-configuration</code>.  </p> <p>Issuer of WSO2 Identity Server <pre><code>https://localhost:9443/oauth2/token\n</code></pre></p> <p>Discovery endpoint of WSO2 Identity Server <pre><code>https://localhost:9443/oauth2/token/.well-known/openid-configuration\n</code></pre></p> <p>Sample request</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request GET 'https://localhost:9443/oauth2/token/.well-known/openid-configuration'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/token/.well-known/openid-configuration\",\n\"method\": \"GET\",\n\"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\n\nvar config = {\nmethod: 'get',\nurl: 'https://localhost:9443/oauth2/token/.well-known/openid-configuration',\nheaders: {}\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p>Sample response <pre><code>{\n\"introspection_endpoint\" : \"https://localhost:9443/oauth2/introspect\",\n\"end_session_endpoint\" : \"https://localhost:9443/oidc/logout\",\n\"registration_endpoint\" : \"https://localhost:9443/api/identity/oauth2/dcr/v1.0/register\",\n\"token_endpoint\" : \"https://localhost:9443/oauth2/token\",\n\"jwks_uri\" : \"https://localhost:9443/oauth2/jwks\",\n\"revocation_endpoint\" : \"https://localhost:9443/oauth2/revoke\",\n\"authorization_endpoint\" : \"https://localhost:9443/oauth2/authorize\",\n\"issuer\" : \"https://localhost:9443/oauth2/token\"\n}\n</code></pre></p>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#get-endpoints-from-the-console","title":"Get endpoints from the console","text":"<p>Some applications and SDKs are not capable of dynamically resolving endpoints from OpenID Connect discovery. For such applications, you need to configure endpoints manually.</p> <p>You can get the endpoints from the console as follows:</p> <ol> <li> <p>On the WSO2 Identity Server, go to Applications.</p> </li> <li> <p>Select an OIDC application from the list.</p> </li> <li> <p>Go to the Info tab of the application and find the server endpoints to your organization.    </p> </li> </ol>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#whats-next","title":"What's next?","text":"<p>Explore how OpenID Connect endpoints are used when you implement login to your applications:</p> <ul> <li>Implement login for single-page applications using the authorization code flow with PKCE.</li> <li>Implement login for traditional web applications using the authorization code flow.</li> </ul>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/","title":"Implement login using the Authorization Code flow and PKCE","text":"<p>See the instructions given below to implement login with OpenID Connect in your application by using the authorization code flow and PKCE. This method is most suitable for public clients, which are applications that cannot keep the client credentials securely.</p> <p>Single-page applications and mobile applications are some examples for public clients.</p> <p>For public clients, it is recommended to use PKCE along with the authorization code grant to mitigate code interception attacks.</p> <p>The following diagram explains how this flow works with WSO2 Identity Server.</p> <p></p> <p>As shown above, you need to configure your application to get the authorization code from WSO2 Identity Server, and then exchange it for the required tokens.</p>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to have an application registered in WSO2 Identity Server. If you don't already have one, register a single-page application or mobile application.</p> <p>Note</p> <p>Note that only users can log in to business applications. Therefore, to test login on your application, you need a user account.</p>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/#get-authorization-code","title":"Get authorization code","text":"<p>First, your app must initiate a login request to WSO2 Identity Server. After redirecting to WSO2 Identity Server, the user is prompted with a login page if the user is not already authenticated.</p> <p>Authorization endpoint</p> <pre><code>https://localhost:9443/oauth2/authorize\n</code></pre> <p>Request format</p> <pre><code>https://localhost:9443/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}&amp;code_challenge=&lt;code_challenge&gt;&amp;code_challenge_method=&lt;code_challenge_method&gt;\n</code></pre> <p>Sample request</p> <pre><code>https://localhost:9443/oauth2/authorize?scope=openid&amp;response_type=code&amp;redirect_uri=https://localhost:5000&amp;client_id=fv_LScHaB83PN4VPX1cHufphtHQa&amp;code_challenge_method=S256&amp;code_challenge=IMbNq8j9HZBlbLuZ4nHcYOv1ZkRF5TVNAfVIGyeUsi0\n</code></pre> <p></p> <p>This authorization request takes the following parameters.</p> <p>Note</p> <p>See  Authorization Request with PKCE for details.</p> Request Parameter Description <code>response_type</code> The required grant type. Use <code>code</code> to represent the authorization code grant type. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. This needs to be the same as one of the URLs given in the registered apps. <code>client_id</code> The client ID that was generated when registering the application in WSO2 Identity Server. <code>scope</code> For OpenId Connect login, use <code>openid</code> as one of the scopes. There can be additional scopes as well. Scopes should be space separated. Example: <code>openid email profile</code> <code>code_challenge</code> The client creates and records a secret cryptographical random string (<code>code_verifier</code>), which is then encoded using URL safe base64 encoding to transform it into the <code>code_challenge</code>. The <code>code_challenge</code> is required for the authorization code flow with PKCE.       You can use some [tools](https://tonyxu-io.github.io/pkce-generator/) to generate the <code>code_challenge</code> and <code>code_verifier</code>. <code>code_challenge_method</code> This is the method used for transforming the <code>code_verifier</code> into the <code>code_challenge</code>. WSO2 Identity Server supports <code>S256</code> and <code>plain</code>. This is required for the authorization code flow with PKCE. <p>When the user is authenticated, WSO2 Identity Server redirects to the <code>redirect_uri</code> with the authorization code.</p> <p>Sample response</p> <pre><code>https://localhost:5000/?code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d&amp;session_state=a0c3bc89849ba0f236791f7fe76a837b7b4422fdc9aca16db394d19a28724a29.wQc7eSHSRrGNfECJRMhSAw\n</code></pre>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/#get-tokens","title":"Get tokens","text":"<p>After receiving the authorization code, the application has to exchange it to get the below tokens:</p> <ul> <li><code>access_token</code></li> <li><code>id_token</code></li> <li><code>refresh_token</code> (only if the <code>refresh_token</code> grant type is enabled for the application registered in WSO2 Identity Server)</li> </ul> <p>Token endpoint</p> <pre><code>https://localhost:9443/oauth2/token\n</code></pre> <p>Token request</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request POST '{token_endpoint_url}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri={redirect_uri}' \\\n--data-urlencode 'code_verifier={pkce_code_verifier}' \\\n--data-urlencode 'client_id={client_id}'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/token\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"code\": \"{authorization_doe}\",\n\"grant_type\": \"authorization_code\",\n\"redirect_uri\": \"{redirect_uri}\",\n\"code_verifier\": \"{pkce_code_verifier}\",\n\"client_id\": \"{client_id}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'code': '{authorization_doe}',\n'grant_type': 'authorization_code',\n'redirect_uri': '{redirect_uri}',\n'code_verifier': '{pkce_code_verifier}',\n'client_id': '{client_id}'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://localhost:9443/oauth2/token',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata: data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p>Sample token request</p> cURL <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri=https://localhost:5000' \\\n--data-urlencode 'code_verifier=zYYoWc9LNIahfonUKyKZcpDc0oWV0zGbn-gTkrr4lkw' \\\n--data-urlencode 'client_id=fv_LScHaB83PN4VPX1cHufphtHQa'\n</code></pre> <p>This token request takes the following parameters.</p> <p>Note</p> <p>See  Token request with PKCE for details.</p> <p> Request Parameter Description <code>grant_type</code> The grant type. Here we are using the authorization_code grant. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. This needs to be the same as one of the URLs given in the registered apps. <code>code</code> The authorization code received from the authorization request. <code>code_verifier</code> The plain text cryptographical random string that was used to generate the <code>code_challenge</code>. This is required for the authorization code flow with PKCE. <code>client_id</code> The client ID obtained when registering the application in WSO2 Identity Server. </p> <p>Sample response:</p> <pre><code>{\n\"access_token\": \"54bd024f-5080-3db5-9422-785f5d610605\",\n\"refresh_token\": \"7024af0f-9216-3b8f-a249-edf6db7f72ab\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiJlYzU2N2M1YmE4NmM3NmJiYjY2ZGNiZTM5YzYzNGFlNTNhNTNiNzgwNjM1OGQwY2ZjMzE4YWNiYmFlZWIyOTRmIiwiYXRfaGFzaCI6IkpvV0hGOEExemYxcG9pUlB3aTU0TWciLCJhdWQiOiJmdl9MU2NIYUI4M1BONFZQWDFjSHVmcGh0SFFhIiwiY19oYXNoIjoiaVRqd0NIblM5aTNTOHhPdTFzbFBidyIsInN1YiI6InVzZXIxQGJpZnJvc3QuY29tIiwibmJmIjoxNjE4ODE2NzI1LCJhenAiOiJmdl9MU2NIYUI4M1BONFZQWDFjSHVmcGh0SFFhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MTg4MjAzMjUsImlhdCI6MTYxODgxNjcyNSwic2lkIjoiMGI2ZjE5M2MtNWEyOS00OGYxLThmYzAtYWNkOWU5NGQ3ODQ1In0.aWin4g0qi-KuE3UGInKun5z-0R2mEP3S-lrWhAijylNJocTgYpStgrm2nH_mI6WR4PN_e9ClVjx40EGUOdSqNlJq4OvWdGT9N6x9ei6D0IkFNcd-ad5ZKgWbJNjejcTfBgRJCa_XbCpntFvwYbrOiCm9ivdUTafMx1lL8ihl-5c04UOsZe7iwb44xTWtFj1WfrVCXiCdcu5NyNn5SKICCUeO9p1sqjLXsbGRwN6TN0H7oVBoK7Q6o9R6gYPWR_hBk9uxpt3CyKej1uCVsmxcoGGqPXMQugIz5sU2wwo685XNAv6Q9TlTEqFBWpbSpYZ0g73YjnhTvaaaHdasgE1VCw\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3600\n}\n</code></pre> <p></p> <p>To get a refresh token, you need to enable the <code>Refresh Token</code> grant type for the application. By default, it is enabled for the single-page application template.</p>"},{"location":"guides/authentication/oidc/implement-auth-code/","title":"Implement login using the Authorization Code flow","text":"<p>See the instructions given below to implement login with OpenID Connect in your application by using the authorization code flow. This method is suitable for confidential clients such as traditional web applications.</p> <p>The following diagram explains how this flow works with WSO2 Identity Server:</p> <p></p> <p>As shown above, you need to configure your application to get the authorization code from WSO2 Identity Server, and then exchange it for the required tokens.</p>"},{"location":"guides/authentication/oidc/implement-auth-code/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to have an application registered in WSO2 Identity Server. If you don't already have one, register a web app with OIDC.</p> <p>Note</p> <p>Note that only users can log in to business applications. Therefore, to test login on your application, you need a user account.</p>"},{"location":"guides/authentication/oidc/implement-auth-code/#get-the-authorization-code","title":"Get the authorization code","text":"<p>First, your app must initiate a login request to the authorization endpoint of WSO2 Identity Server. After redirecting to WSO2 Identity Server, the user should be prompted with a login page if the user is not authenticated.</p> <p>Authorization endpoint <pre><code>https://localhost:9443/oauth2/authorize\n</code></pre></p> <p>Request format <pre><code>https://localhost:9443/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}&amp;login_hint={email-address-passed-as-a-hint}\n</code></pre></p> <p>Request sample <pre><code>https://localhost:9443/oauth2/authorize?response_type=code&amp;client_id=z8RB6ysdDZhe4QO0zJAQzKbi6P4a&amp;scope=openid&amp;redirect_uri=http://localhost:3000&amp;login_hint=johnd@bifrost.com\n</code></pre></p> Request Parameter Description <code>response_type</code> Required grant type. Use <code>code</code> to represent the authorization code grant type. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. This needs to be the same as one of the URLs given in the registered apps. <code>client_id</code> The client ID obtained when registering the application in WSO2 Identity Server. <code>scope</code> For OpenId Connect login, use <code>openid</code> as one of the scopes. There can be additional scopes as well. Scopes should be space separated. Example: <code>openid email profile</code> <code>login_hint</code> The email address of the user can be passed as a query parameter. This will trigger a prompt for the user to input their password directly, streamlining the authentication process.  Note that the functionality of this query parameter is only valid if the basic authenticator is used as the first step in the sign-in flow. <p>Once the user is successfully authenticated, WSO2 Identity Server redirects the user to the <code>redirect_uri</code> with the authorization code.</p> <p>Sample response</p> <pre><code>https://localhost:3000/?code=97c85a59-a758-3a56-95cd-e71a505b493d&amp;session_state=a0c3bc89849ba0f236791f7fe76a837b7b4422fdc9aca16db394d19a28724a29.wQc7eSHSRrGNfECJRMhSAw\n</code></pre>"},{"location":"guides/authentication/oidc/implement-auth-code/#get-tokens","title":"Get tokens","text":"<p>After receiving the authorization code, the application has to exchange it to get the tokens given below:</p> <ul> <li><code>access_token</code></li> <li><code>id_token</code></li> <li><code>refresh_token</code> (only if the <code>refresh_token</code> grant type is enabled for the application registered in WSO2 Identity Server)</li> </ul> <p>Token endpoint</p> <pre><code>https://localhost:9443/oauth2/token\n</code></pre> <p>Token request</p> <p>When your application is a confidential client, it needs to identify itself to the token endpoint by submitting its credentials. There are several ways to implement client authentication at the token endpoint:</p> <p>Note</p> <p>See the list of client authentication methods in the OIDC specification.</p> <ul> <li> <p>Use client_secret_post: The <code>client_id</code> and <code>client_secret</code> are both sent as body parameters in the POST message. See the example given below.</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'client_id={client_id}' \\\n--data-urlencode 'client_secret={client_secret}' \\\n--data-urlencode 'redirect_uri={redirect_uri}'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/token\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"code\": \"{authorization_code}\",\n\"grant_type\": \"authorization_code\",\n\"client_id\": \"{client_id}\",\n\"client_secret\": \"{client_secret}\",\n\"redirect_uri\": \"{redirect_uri}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'code': '{authorization_code}',\n'grant_type': 'authorization_code',\n'client_id': '{client_id}',\n'client_secret': '{client_secret}',\n'redirect_uri': '{redirect_uri}'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://localhost:9443/oauth2/token',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata : data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> </li> <li> <p>Use client_secret_basic: The client secret is sent as an authorization header in the request (<code>Authorization: Basic BASE46_ENCODING&lt;client_id:client_secret&gt;</code>). See the example given below.</p> <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/token' \\\n--header 'Authorization: Basic ejhSQjZ5c2REWmhlNFFPMHpKQVF6S2JpNlA0YTp6MEM3OXpsb3B4OGk3QnlPdzhLMTVBOWRwbFlh' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=97c85a59-a758-3a56-95cd-e71a505b493d' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri=https://myfirstwebapp.io/login'\n</code></pre> </li> <li> <p>Use a private key JWT: A secured JWT assertion with the data required for client authentication is sent in the token request. See the example given below.</p> <p>Note</p> <p>Learn more about private key JWT client authentication in Asgardeo.</p> <pre><code>--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode     'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\\\n--data-urlencode 'client_assertion={jwt_assertion}' \\\n--data-urlencode 'redirect_uri={redirect_uri}'\n</code></pre> </li> </ul> <p>The token request has the following parameters in addition to the credentials for authentication:</p> Request Parameter Description <code>code</code> The authorization code received from the authorization request. <code>grant_type</code> The grant type. Here we are using the <code>authorization_code</code> grant. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. <code>client_assertion_type</code> This parameter is only used for client authentication using a private JWT key. <p>Sample response will be as follows:</p> <pre><code>{\n\"access_token\": \"54bd024f-5080-3db5-9422-785f5d610605\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiI4ZTQyYjgzOTQzYWViYTkwMGU3MjJkMWI5NzU3Nzc3OTAyOGRhM2NiZWJmZjhhZTQxMDVhZTA5OTRiZjU5ZDYxIiwiYXRfaGFzaCI6IlZETXZUaWFsbjRRWEk4VUlJUjVlbnciLCJhdWQiOiJ6OFJCNnlzZERaaGU0UU8wekpBUXpLYmk2UDRhIiwiY19oYXNoIjoiOXRMaHJvQnV6Z0I4aDlIWWV6cTBpZyIsInN1YiI6InVzZXIxQGJpZnJvc3QuY29tIiwibmJmIjoxNjIwNzAzODA5LCJhenAiOiJ6OFJCNnlzZERaaGU0UU8wekpBUXpLYmk2UDRhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjA3MDc0MDksImlhdCI6MTYyMDcwMzgwOSwic2lkIjoiYWQ3M2NlZGMtMzM3Ny00NDU3LWExYjUtNTZjODgyMTg1MzZmIn0.RSSL3InOFlvt_xQWFDKZY4FjKFFxh8rqGAlm1vKxleP6dKVlDAT4E0sudCJV5paJ-HdxVMd8MveWwpxrIL5NJw9XCa_sCEfso2fsMgRzQyEn1gjKLmr6Fj8Up3BoPnzPzn1cqVd-pKeXomzciM_ZDwsLr8qAEgVp663D4fg_F6pjVdDr17JRCUgO96yyjHRC5Eiqd7MP20Xhb-ZCMe0OhAlJlCmXB0FZV3nOTbza-jGvG8e_k80g3KVPFO7USek2Px3dCYfcbcA3k3cVzbTN8r8PIY3CEIIHtu5RyO_m1v3A0fjKvSaatfN0K2sndnlRpXFtOosIKQDYsy94wGnWkQ\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3600\n}\n</code></pre> <p>To get a refresh token, you need to enable the Refresh Token grant type for the application. By default, it is enabled for traditional web application templates.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/","title":"Implement private key JWT client authentication for OIDC","text":"<p>See the instructions below to implement private key JWT (JSON Web Token) client authentication for your OIDC application. This method can be used for confidential client applications that are implemented on secure servers. These clients must identify themselves with the token endpoint of WSO2 Identity Server (authorization server) before acquiring an access token.</p> <p>Typically, when you implement a grant type using OIDC in an application, there are several ways to implement client authentication at the token endpoint. With private key JWT client authentication, the client application uses a JWT to identify itself to the token endpoint. Note that the following two parameters are sent in the token request for this purpose: <code>client_assertion_type = urn:ietf:params:oauth:client-assertion-type:jwt-bearer</code> and the JWT that is set as the <code>client_assertion</code>.</p> <p>Note</p> <p>See the list of client authentication methods in the OIDC specification.</p> <p>Listed below are the high-level steps in the private key JWT client authentication process.</p> <ol> <li>Prepare a private key and public key pair for the client.</li> <li>Prepare the JSON payload and sign it using the client's private key.</li> <li>Share the public key with the authorization server (WSO2 Identity Server).</li> <li>Client application sends the JWT and the signature in the token request to the authorization server.</li> <li>The authorization server verifies the JWT using the public key.</li> <li>The authorization server extracts the signature using the public key and authenticates the client.</li> <li>The access token is granted if the client is successfully authenticated.</li> </ol> <p>Follow the steps given below to implement private key JWT client authentication.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#register-the-client-app-in-wso2-identity-server","title":"Register the client app in WSO2 Identity Server","text":"<p>Register the client application in WSO2 Identity Server as follows:</p> <ol> <li> <p>Create an OIDC application:</p> <ul> <li>Standard-based OIDC application</li> <li>OIDC web application</li> </ul> </li> <li> <p>Go to the Protocol tab of the new application and configure the required grant type.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#prepare-the-private-key-and-public-key","title":"Prepare the private key and public key","text":"<p>Generate a public key and private key for the client application. Follow the steps given below.</p> <ol> <li> <p>Open a terminal and execute the following keytool command to create the client keystore.</p> <p>Note</p> <p>Replace the following values:</p> <ul> <li><code>&lt;clinet_ID&gt;</code>: Specify the client ID generated when registering the client application in WSO2 Identity Server.</li> <li><code>&lt;keystore_name&gt;</code>: Specify the name of the keystore you are creating.</li> </ul> <pre><code>keytool -genkey -alias &lt;client_ID&gt; -keyalg RSA -keystore &lt;keystore_name&gt;.jks\n</code></pre> </li> <li> <p>Convert the <code>.jks</code> keystore to <code>PKCS#12</code> format.</p> <p>Note</p> <p>Replace <code>&lt;dest_keystore_name&gt;</code> to specify a name for the new keystore in <code>PKCS#12</code> format.</p> <pre><code>keytool -importkeystore -srckeystore &lt;keystore_name&gt;.jks -destkeystore &lt;dest_keystore_name&gt;.p12 -deststoretype PKCS12\n</code></pre> </li> <li> <p>Export the public key from the <code>.p12</code> keystore.</p> <p>Note</p> <p>Replace <code>&lt;pub_key_name&gt;</code> to specify a name for the public key certificate file.</p> <pre><code>openssl pkcs12 -in &lt;dest_keystore_name&gt;.p12 -nokeys -out &lt;pub_key_name&gt;.pem\n</code></pre> </li> <li> <p>Export the private key from the <code>.p12</code> keystore.</p> <p>Note</p> <p>Replace <code>&lt;private_key_name&gt;</code> to specify a name for the private key certificate file.</p> <pre><code>openssl pkcs12 -in &lt;dest_keystore_name&gt;.p12 -nodes -nocerts -out &lt;private_key_name&gt;.pem\n</code></pre> </li> </ol>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#upload-the-public-key-to-wso2-identity-server","title":"Upload the public key to WSO2 Identity Server","text":"<p>Go to the Certificate section in the Protocol tab of your application registered in WSO2 Identity Server and add the public key certificate of your client application.</p> <p>Note</p> <p>See the instructions on adding certificates to applications.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#prepare-the-jwt-payload","title":"Prepare the JWT payload","text":"<p>Prepare the JSON payload required by the authorization server for client authentication. Given below is a sample payload with only the required data. The complete list of required and optional claims that can be used is defined in the OpenID Connect specification.</p> <p>Note</p> <p>Note that the audience (<code>aud</code>) is the token endpoint URL of the authorization server, and the issuer (<code>iss</code>) and the subject (<code>sub</code>) is the client ID generated for your application by the authorization server in the previous step.</p> <pre><code>{\n\"iss\": \"RN0I55bldQftY97uNq9iIXQA21wa\",\n\"sub\": \"RN0I55bldQftY97uNq9iIXQA21wa\",\n\"exp\": 1643650350,\n\"iat\": 1643650346,\n\"jti\": \"10003\",\n\"aud\": \"https://localhost:9443/oauth2/token\"\n}\n</code></pre> <p>Once you have created the payload, generate a signature for it using the client application's private key. This JWT is known as the client_assetion.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#get-the-access-token","title":"Get the access token","text":"<p>Listed below are the main steps for invoking the token endpoint and acquiring an access token using the JWT.</p> <ol> <li> <p>Client application sends the JWT and the signature in the token request to the authorization server.</p> <p>Note</p> <p>Note the following two parameters that should be set in the token request:</p> <ul> <li><code>client_assertion</code>: The authentication token (JWT assertion) must be sent as the value of this parameter.</li> <li><code>client_assertion_type</code>: The value of this parameter must be <code>urn:ietf:params:oauth:client-assertion-type:jwt-bearer</code>.</li> </ul> </li> <li> <p>The authorization server verifies the JWT using the public key.</p> </li> <li>Authorization server extracts the signature using the public key and authenticates the client.</li> <li>The access token is granted if the client is successfully authenticated.</li> </ol> <p>Let's look at how this works for different grant types.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#authorization-code-flow","title":"Authorization code flow","text":"<p>If you are implementing the authorization code flow, you have enabled code as the grant type when registering your application. You can now send the following requests to get the access token.</p> <ol> <li> <p>First, invoke the authorization endpoint in WSO2 Identity Server and get an authorization code.</p> <pre><code>https://localhost:9443/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}\n</code></pre> </li> <li> <p>Invoke the token endpoint and get the access token.</p> <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\\\n--data-urlencode 'client_assertion={jwt_assertion}' \\\n--data-urlencode 'redirect_uri={redirect_uri}'\n</code></pre> <p>Be sure to replace the following values in the request:</p> <p> <code>{organization_name}</code>           Name of the organization that you are accessing.       <code>{authorization_code}</code>           The authorization code that was received by invoking the authorization endpoint.       <code>{jwt_assertion}</code>           The JWT assertion that was created for your client application.       <code>{redirect_uri}</code>           The callback URL of your client application.       </p> </li> </ol>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#client-credential-flow","title":"Client credential flow","text":"<p>If you are implementing the client credentials flow, you have enabled client credentials as the grant type when registering your application. You can now send the following requests to get the access token.</p> <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=client_credentials\u2019 \\\n--data-urlencode 'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\\\n--data-urlencode 'client_assertion={jwt_assertion}\u2019\n</code></pre> <p>Be sure to replace the following values in the request:</p> <code>{organization_name}</code>              Name of the organization that you are accessing.          <code>{jwt_assertion}</code>              The JWT assertion that was created for your client application."},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#reuse-tokens-optional","title":"Reuse tokens (optional)","text":"<p>The <code>jti</code> (JWT ID) claim is a unique identifier included in the JWT token, which controls the reuse of the access token. By default, token reuse is disabled in WSO2 Identity Server. If you enable token reuse, the <code>jti</code> can be reused within its expiration period.</p> <p>To enable token reuse in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Account Security &gt; Private Key JWT Client Authentication for OIDC.</li> <li> <p>Click Configure and use the toggle to enable token reuse.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/oidc/request-user-info/","title":"Request user information","text":"<p>User information is encoded inside the ID token returned along with the access token. In addition to that, OpenID Connect provides the userinfo endpoint  to obtain user information as a payload. The application should send a request with the access token to invoke the userinfo endpoint.</p> <p>Userinfo endpoint</p> <pre><code>https://localhost:9443/oauth2/userinfo\n</code></pre> <p>Sample request</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request GET 'https://localhost:9443/oauth2/userinfo' \\\n--header 'Authorization: Bearer {your_access_token}'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/userinfo\",\n\"method\": \"GET\",\n\"timeout\": 0,\n\"headers\": {\n\"Authorization\": \"Bearer {your_access_token}\"\n},\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\n\nvar config = {\nmethod: 'get',\nurl: 'https://localhost:9443/oauth2/userinfo',\nheaders: {\n'Authorization': 'Bearer {your_access_token}'\n}\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p>Default sample response WSO2 Identity Server returns only the <code>sub</code> claim if there are no user attributes shared with the application.</p> <pre><code>{\n\"sub\": \"user1@bifrost.com\"\n}\n</code></pre> <p>You can customize the user information in the response by configuring user attributes on the registered application. </p>"},{"location":"guides/authentication/oidc/revoke-tokens/","title":"Revoke tokens","text":"<p>OAuth2.0 supports token revocation to revoke any access granted by them. This token endpoint can revoke access tokens and refresh tokens.</p> <p>Confidential clients such as web apps can keep the client credentials securely. Those clients need to prove their identity when they access the revocation endpoint to revoke access tokens.</p> <p>Public clients such as SPAs, mobile apps can't store credentials securely. Those apps need to submit only their client ID to identify the apps during token revocation.  </p> <p>Note</p> <ul> <li>Revoking a refresh token via the revocation endpoint will not revoke the respective access token.</li> <li>Revoking an access token via the revocation endpoint will not revoke the respective refresh token.</li> </ul> <p>Token revocation endpoint</p> <pre><code>https://localhost:9443/oauth2/revoke\n</code></pre>"},{"location":"guides/authentication/oidc/revoke-tokens/#token-revocation-by-confidential-clients","title":"Token revocation by confidential clients","text":"<p>When your application is a confidential client, it needs to identify itself to the token endpoint by submitting the <code>client_id</code> as well as the <code>client_secret</code>. You can use one of the following methods:</p> <ul> <li>Use client_secret_post: The <code>client_id</code> and <code>client_secret</code> are both sent as body parameters in the POST message.</li> <li>Use client_secret_basic: The client secret is sent as an authorization header in the request (<code>'Authorization: Basic BASE64_ENCODE&lt;client_id:client_secret&gt;'</code>).</li> </ul> <p>Apart from client authentication, the revocation request has some other parameters as well.</p> Request Parameter Description <code>token</code> The token you want to revoke. <code>token_type_hint</code> The type of token. If the token is an access token, the type should be <code>access_token</code>. For a refresh token, the type should be <code>refresh_token</code>."},{"location":"guides/authentication/oidc/revoke-tokens/#client-secret-post-based-authentication","title":"Client secret post based authentication","text":"<p>In this method, the app can send the <code>client_id</code> and <code>client_secret</code> as body params in the revocation request.</p> <p>The sample request is given below.</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/revoke' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token={token}' \\\n--data-urlencode 'token_type_hint={token_type}' \\\n--data-urlencode 'client_id={client_id}' \\\n--data-urlencode 'client_secret={client_secret}'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/revoke\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"token\": \"{token}\",\n\"token_type\": \"{token_type}\",\n\"client_id\": \"{client_id}\",\n\"client_secret\": \"{client_secret}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'token': '{token}',\n'token_type_hint': '{token_type}',\n'client_id': '{client_id}',\n'client_secret': '{client_secret}',\n});\nvar config = {\nmethod: 'post',\nurl: 'https://localhost:9443/oauth2/revoke',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata : data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre>"},{"location":"guides/authentication/oidc/revoke-tokens/#client-secret-basic-authentication","title":"Client secret basic authentication","text":"<p>In client secret basic authentication, the application has to do base64 encoding on the client ID and client secret and pass that as a basic authorization header in the revocation request.</p> <p>The authorization header should look as follows:</p> <pre><code>Basic BASE46_ENCODING&lt;your_client_id:your_client_secret&gt;\n</code></pre> <p>Tip</p> <p>To perform base64 encoding for the client ID and secret, you can use a tool, or you can run the below command. <pre><code>echo -n '&lt;your_client_id:your_client_secret&gt;' | base64\n</code></pre></p> <p>Sample request</p> cURL <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/revoke' \\\n--header 'Authorization: Basic ejhSQjZ5c2REWmhlNFFPMHpKQVF6S2JpNlA0YTp6MEM3OXpsb3B4OGk3QnlPdzhLMTVBOWRwbFlh' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token_type_hint=access_token' \\\n--data-urlencode 'token=292896cf-5525-3551-b9e2-1787f1114924'\n</code></pre> <p>When the token is revoked, you will get a <code>200 OK</code> response.</p>"},{"location":"guides/authentication/oidc/revoke-tokens/#token-revocation-by-public-clients","title":"Token revocation by public clients","text":"<p>Since public clients cannot store credentials securely and they do not need to perform authentication when revoking a token. However, they need to submit their client ID.</p> <p>Sample request</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/revoke' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token={token}' \\\n--data-urlencode 'token_type_hint={token_type}' \\\n--data-urlencode 'client_id={client_id}'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/revoke\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"token\": \"{token}\",\n\"token_type\": \"{token_type}\",\n\"client_id\": \"{client_id}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'token': '{token}',\n'token_type_hint': '{token_type}',\n'client_id': '{client_id}'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://localhost:9443/oauth2/revoke',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata : data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p>This token revocation request for public clients takes the following parameters:</p> Request Parameter Description <code>token</code> The token (access token or refresh token) you want to inspect. <code>token_type_hint</code> The type of the token. If the token is an access token, the type should be <code>access_token</code>. For a refresh token, the type should be <code>refresh_token</code>. <code>client_id</code> The client ID of the application. <p>When the token is revoked, you will get a <code>200 OK</code> response.</p> <p>Note</p> <p>You will always get a <code>200 OK</code> response when you try to revoke an invalid token, expired, or already revoked. This helps to prevent any information leaks.</p>"},{"location":"guides/authentication/oidc/token-validation-resource-server/","title":"Token validation by resource servers","text":"<p>A resource server is responsible for protecting resources such as APIs via OAuth2 access tokens. Access tokens are intended for authorizing the access of a resource. The resource server should be able to verify the access token sent by the application. If the application sends a self-contained JWT access token, then the resource server can validate the access token without interacting with the authorization server. OAuth2.0 supports token introspection to inspect the access tokens and refresh tokens using authorization servers.</p> <p>WSO2 Identity Server provides the <code>/oauth2/introspect</code> endpoint to perform token validation. A resource server can inspect tokens using WSO2 Identity Server and know the information related to the tokens. On WSO2 Identity Server, the resource server has to use client secret basic authentication to authenticate with the token introspection endpoint. You have to send it as the authorization header in the request: <code>Authorization: Basic BASE46_ENCODING&lt;client_id:client_secret&gt;</code></p> <p>Token introspection endpoint</p> <pre><code>https://localhost:9443/oauth2/introspect\n</code></pre> <p>Tip</p> <p>To perform base64 encoding for the client ID and client secret, you can use a tool, or you can run the below command.</p> <p><code>echo -n '&lt;client_id:client_secret&gt;' | base64</code></p> <p>Request format</p> <pre><code>curl --location --request POST '{introspection_endpoint_url}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Authorization: Basic V3NvcTh0NG5IVzgwZ1NuUGZ5RHZSYmlDX19FYTp6MEM3OXpsb3B4OGk3QnlPdzhLMTVBOWRwbFlh' \\\n--data-urlencode 'token={access_token}'\n</code></pre> <p>Sample request</p> cURL <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/introspect' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Cookie: atbv=646b0ed2-c501-4b17-9251-94112013a718' \\\n--header 'Authorization: Bearer 54bd024f-5080-3db5-9422-785f5d610605' \\\n--data-urlencode 'token=94e325b7-77c8-32c2-a6ff-d7be430bf785'\n</code></pre> <p>This introspection request takes the following parameters:</p> <p>Note</p> <p>See the OAuth2.0 introspection request for details.</p> Request Parameter Description <code>token</code> The token(access token or refresh token) you want to inspect. <p>Sample response</p> <p>The following response will be returned for the provided access token: <pre><code>{\n\"aut\": \"APPLICATION_USER\",\n\"nbf\": 1629961093,\n\"scope\": \"openid profile\",\n\"active\": true,\n\"token_type\": \"Bearer\",\n\"exp\": 1629968693,\n\"iat\": 1629961093,\n\"client_id\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Eb\",\n\"username\": \"admin@carbon.super\"\n}\n</code></pre></p> <p>The following response will be returned for the provided refresh token:</p> <pre><code>{\n\"nbf\": 1629961093,\n\"scope\": \"openid profile\",\n\"active\": true,\n\"token_type\": \"Refresh\",\n\"exp\": 1630047493,\n\"iat\": 1629961093,\n\"client_id\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"username\": \"admin@carbon.super\"\n}\n</code></pre> <p>If the token you used is invalid, you will get the following response:</p> <pre><code>{'active':false}\n</code></pre> <p></p>"},{"location":"guides/authentication/oidc/validate-id-tokens/","title":"Validate ID tokens","text":"<p>The ID token is a security token that is sent by WSO2 Identity Server to the application when a token is requested with OpenID scopes. This ID token contains information about the authenticated user.</p> <p>Sample ID token</p> <pre><code>eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiIzYzdlNDIyZGFkNTk1MDc3ZTAyYTYzNjRjYzViN2M5YTE2NzFkNzhmYWQ1MmZmZTVlNmE0MzcwOTRiNGNhOWZmIiwiYXRfaGFzaCI6IklVdEVuNHRLQWlzVWVXRDhIWGZwRXciLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiY19oYXNoIjoic3ZicjU1SEVIUGo3emt3Z2VuSkgxUSIsInN1YiI6IkFsaWNhQGJpZnJvc3QuY29tIiwibmJmIjoxNjI5OTY4MzQ0LCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYXBpLmFzZ2FyZGVvLmlvXC90XC9iaWZyb3N0XC9vYXV0aDJcL3Rva2VuIiwiZXhwIjoxNjI5OTcxOTQ0LCJpYXQiOjE2Mjk5NjgzNDQsInNpZCI6ImY3OGY1ZjRjLTE4NjItNDIwOS04NWEzLWUyMmMyYTljMDY4ZCJ9.D9-lJ8vtC8Hj5mJvUm1ld9w0rifPzjHc6UyCbENtWbno0zTYB_ki3_z-x7zI_-72ixiDpsjzwLbmKKWw8tFtqWM36WvdwBH6mBDVB_K7cy8NqrACLOjFgBrRa3HXwHkwAgwHp6Vpgbs35aAbwf0OTBxeohnbEA4y84D0pFILHm-u_iFG1-tS-QKKh6s8SBR0MNA6dJqj95R3NVF-tk4aztHI5GB63aaw2E883Xd6r2k4MIi3vQoB35-T_zFSebypaheyW3IXCPNsXjsyy4toMRfE4KEeI-j20vixxtIB22OlOWBMie7ce9Atzu6op0R0eJz3f3Ch6OrPxcvT3ghSJQ\n</code></pre> <p>Decoded sample ID token <pre><code>{\n\"isk\": \"7b8bfe9f4ed1396eb777b0c6d8e111af6e0c18b416074c6ee8ca3f424fcc6c66\",\n\"at_hash\": \"znkxxOhMFPQ6P9W74IJJMA\",\n\"sub\": \"3b7cbde5-bfc7-474a-b79e-4d9e03c4c55f\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://localhost:9443/oauth2/token\",\n\"sid\": \"de96a883-9baf-409e-9711-eaa7ca841f51\",\n\"aud\": \"hyfI0ShhPybRU7zP2nnm3jEtJ4sa\",\n\"c_hash\": \"Jsg6vv4Q4lzpPmTtAoxImA\",\n\"nbf\": 1697445072,\n\"azp\": \"hyfI0ShhPybRU7zP2nnm3jEtJ4sa\",\n\"org_id\": \"332080fd-338e-4269-88e4-a565c98d74cb\",\n\"exp\": 1697448672,\n\"org_name\": \"Super\",\n\"iat\": 1697445072,\n\"jti\": \"3807f58a-70e3-41a8-96d5-1c394fc8cf55\"\n}\n</code></pre></p> <p>Use the following methods to validate the ID token:</p>"},{"location":"guides/authentication/oidc/validate-id-tokens/#verify-the-signature-in-the-id-token","title":"Verify the signature in the ID token","text":"<p>To validate the signature on the ID token, you need the public key of WSO2 Identity Server. The signature of ID tokens can be validated using the JWKS endpoint in WSO2 Identity Server. </p> <p>WSO2 Identity Server exposes the public key information through the standard JWKS endpoint.</p> <p>By using a signature validation library, you can validate the signature of the ID token using the JWKS endpoint.</p> <p>JWKS endpoint</p> <pre><code>https://localhost:9443/oauth2/jwks\n</code></pre> <p>Sample request</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request GET 'https://localhost:9443/oauth2/jwks'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/jwks\",\n\"method\": \"GET\",\n\"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\n\nvar config = {\nmethod: 'get',\nurl: 'https://localhost:9443/oauth2/jwks',\nheaders: {}\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p>Sample response</p> <pre><code>{\n\"keys\": [\n{\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"use\": \"sig\",\n\"kid\": \"Yzc5OTgwZTE3MWQzMWEzNDFmNzVhM2NiOTBlNjcwNTI5OGM0MmQ1YjkwYjg2MTIwZWMwNzM4Mzg1ZGIyZDg3ZA_RS256\",\n\"alg\": \"RS256\",\n\"n\": \"i_i34CgF8IZd8e27sY3lJkX6MyW7e2oIH0f_OlnwftTdS-SAmmIMm06QdyhDr0fycTuNR9hjsEhSm9ecS5kZh9qsuffLb1N041Ml37VE6qeOKP4AocvYmr0rtpH0TUgqXndDeFAAF3oLVhUTokw9Ik-T23cEPDA8gMCmQf7Nje7fNsQ6aCuzzvfUekXvRnDl_7ZAHgbw_0gyujIJ11NlKiNbmCdKMATn68TwQ4U5RJD9-IT0zizWm1ciV-ZOc12L8AsUI-QFjLnUlM4S42X1oj0Tao1oL9V8QGASHHIGKqJ9YxvvnuxaHd42NFFHJcwB4oLlirjOyI5HfKZRFE4FzQ\"\n}\n]\n}\n</code></pre> <p></p>"},{"location":"guides/authentication/oidc/validate-id-tokens/#verify-claims-in-the-id-token","title":"Verify claims in the ID token","text":"<p>Applications should verify the claims in the ID token before consuming it. You can either use some libraries, or you can manually verify the claims.  </p> <p>Given below are some claims that are sent in the ID token. These need to be verified by the application.</p> Claim Description <code>iss</code> <p>(issuer)</p> This should match the <code>https://localhost:9443/oauth2/token</code> value. <code>aud</code> <p>(audience)</p> This should match the client ID of the application. <code>iat</code> <p>(issued at time)</p> This indicates when the ID token was issued. Applications can reject tokens that were issued too long ago. <code>exp</code> <p>(expiry time)</p> This indicates the time at which the ID token will expire. Applications should reject the expired tokens."},{"location":"guides/authentication/passwordless-login/","title":"Add passwordless login","text":"<p>These sections provide instructions on how to add passwordless login to your SPAs or web applications.</p>"},{"location":"guides/authentication/passwordless-login/#magic-link-login","title":"Magic link login","text":"<p>Magic link lets users log in by clicking a link sent to their email instead of entering a password.</p> <p>Add Magic Link login has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/#fido2-login","title":"FIDO2 login","text":"<p>FIDO2 is a standard that lets users use hardware security keys or biometrics to log in.</p> <p>Add login with FIDO2 has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/#hypr-login","title":"HYPR login","text":"<p>HYPR is a FIDO-certified platform that lets users use biometrics to log in.</p> <p>Add login with HYPR has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/#email-otp-login","title":"Email OTP login","text":"<p>Email OTP allows users to log in by providing a one-time passcode sent to their email instead of entering a password.</p> <p>Add Email OTP login has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/","title":"Add Email OTP login","text":"<p>Email OTP is a form of passwordless authentication. It allows users to log in by providing a one-time passcode sent to their email instead of entering a password.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>To get started, you need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>You need to have a user account in WSO2 Identity Server. If you don't already have one, create a user account in WSO2 Identity Server.</p> <p>Note</p> <p>You cannot use an administrator account to log in to an application.</p> </li> </ul>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/#enable-email-otp-login-for-an-app","title":"Enable Email OTP login for an app","text":"<p>Follow the steps given below to enable Email OTP login to the login flow of your application.</p> <ol> <li> <p>On the WSO2 Identity Server Console, use one of the following options to start:</p> <ul> <li>Option 1: Go to Applications.</li> <li>Option 2: Go to Connections &gt; Passwordless and for the Email OTP connection, click Set up.</li> </ul> </li> <li> <p>Select the application for which Email OTP login needs to be enabled.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and add Email OTP login from your preferred editor:</p> Classic EditorVisual Editor <ul> <li> <p>If you haven't already built a login flow for your application, select Add Email OTP login to build one.</p> <p></p> </li> <li> <p>If you have an already built login flow, add the <code>Email OTP</code> authenticator as the first authentication step.</p> <p></p> </li> </ul> <p>To add passwordless login with Email OTP using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab and go to Predefined Flows &gt; Basic Flows &gt; Add Passwordless login.</p> </li> <li> <p>Select <code>Email OTP</code>.</p> </li> <li> <p>Click Confirm to add passwordless login with Email OTP to the sign-in flow.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the WSO2 Identity Server login page.</li> <li> <p>On the WSO2 Identity Server login page, enter your username and press Continue.</p> <p></p> <p>You will be redirected to the below email OTP page.</p> <p></p> </li> <li> <p>Check your inbox for the email containing the one-time passcode. The email reads as follows.</p> <p></p> </li> <li> <p>Enter the received passcode in the email OTP page and click on Continue.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/","title":"Add FIDO2 login","text":"<p>FIDO2 adds passwordless login to your applications, which allows users to replace traditional passwords with FIDO2-supported hardware security keys or built-in authenticators on their devices.</p> <p>There are two types of authenticators that you can use with FIDO2 passwordless authentication in WSO2 Identity Server.</p> <ul> <li>Platform authenticators (also known as <code>internal</code> authenticators): Authenticators like fingerprint scanners, TouchID, FaceID or Windows Hello which are bound to a particular device.</li> <li>Roaming authenticators (also known as <code>cross-platform</code> or <code>external</code> authenticators): Authenticators like hardware security keys which are external and not bound to any specific device.</li> </ul> <p>What is FIDO2?</p> <p>The FIDO Alliance, whose mission is to reduce the world's reliance on passwords, introduced its latest specifications, collectively called FIDO2. FIDO2 specifications are the World Wide Web Consortium's (W3C) Web Authentication specification (WebAuthn) and FIDO alliance's corresponding Client to Authenticator Protocol (CTAP).</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>To get started, you need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Application users need to register their security keys/biometrics via the My Account app prior to using passwordless login. Be sure to educate your users on how to register a security key/biometrics via My Account.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#enable-passwordless-login-for-an-app","title":"Enable passwordless login for an app","text":"<p>Follow the steps given below to enable passwordless login for your application.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Select the application to which you wish to add FIDO login.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and add FIDO login from your preferred editor:</p> Classic EditorVisual Editor <ul> <li> <p>If you haven't already built a login flow for your application, select FIDO2 to build one.</p> <p></p> </li> <li> <p>If you have an already built login flow, you can add FIDO2 as an additional authenticator for the first step.</p> <p></p> </li> </ul> <p>To add passwordless login with FIDO using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab and go to Predefined Flows &gt; Basic Flows &gt; Add Passwordless login.</p> </li> <li> <p>Select <code>Username &amp; Password + FIDO2</code>.</p> </li> <li> <p>Click Confirm to add passwordless login with FIDO to the sign-in flow.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#fido2-passkeys","title":"FIDO2 passkeys","text":"<p>A main drawback of classic FIDO2 passwordless authentication is that FIDO2 credentials are bound to a single device.</p> <p>Passkeys resolve this issue by allowing FIDO2 credentials to sync across multiple devices. With passkeys, users can log in to applications from any device even if their credentials are stored in another.</p> <p>If your devices sync through the cloud, major vendors have the following passkey implementations:</p> <ul> <li> <p>If you are an Apple user, your passkeys will be synced across all the devices signed into the same Apple ID and iCloud Keychain. Refer to the Apple documentation for more information.</p> </li> <li> <p>If you are an Android user, your  passkeys will be synced across all the devices signed into your Google account. Refer to the Google documentation for more information.</p> </li> </ul> <p>If your devices do not sync through the cloud, you can use your device with passkeys to scan a QR code generated in the device from which you are trying to log in.</p> <ul> <li>For example, if you want to log in to a web application from your PC, and your FIDO2 credentials are stored in a mobile device, you can scan a QR code and select the relevant passkey from the mobile device to log in.</li> </ul> <p>Refer to the passkeys documentation to stay up-to-date with the device support for FIDO2 passkeys.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#try-it-out","title":"Try it out","text":"<p>Note</p> <ul> <li>FIDO2 passwordless login with platform authenticators will NOT work on the Firefox browser in macOS Catalina, Big Sur and Monterey due to browser limitations.</li> <li>FIDO2 passwordless login with roaming authenticators will NOT work on the Firefox browser as the browser doesn't support CTAP2 (Client to Authenticator Protocol 2) with PIN.</li> </ul> <ol> <li>Access the application URL.</li> <li>Click Login to open the WSO2 Identity Server login page.</li> <li> <p>On the WSO2 Identity Server login page, click Sign In With Security Key. You will be redirected to the FIDO2 login page.</p> <p></p> </li> <li> <p>Follow the instructions given by your browser or device to login.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/","title":"Add HYPR login","text":"<p>HYPR is a passwordless authentication method that allows users to log in to applications using biometrics on their devices. As a FIDO-certified platform, HYPR eliminates risks prevalent in password-based authentication such as phishing, and password reuse.</p> <p>This guide explains how you can use  HYPR to add passwordless login to applications registered in your WSO2 Identity Server organization.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#prerequisites","title":"Prerequisites","text":"<p>You need to configure the HYPR environment and have access to the HYPR control center. Learn how to do it in the HYPR documentation.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#register-application-in-hypr","title":"Register application in HYPR","text":"<p>Follow the steps below to register your application in the HYPR control center.</p> <p>Note</p> <p>You can follow the HYPR documentation for detailed instructions.</p> <ol> <li> <p>Go to the HYPR control center and click Add Application.     </p> </li> <li> <p>Select Web as the channel and click Next.     </p> </li> <li> <p>Select Custom Solution as the IdP provider and click Next.     </p> </li> <li> <p>Enable push notifications and click Next.     </p> </li> <li> <p>Add your Firebase configurations and click Next.</p> <p>Note</p> <p>To enable push notifications, you need to configure Firebase and obtain a project ID and an API key. To learn how to do this, follow the guide in HYPR.</p> </li> <li> <p>Complete the app details form and click Done to create the application.</p> </li> <li> <p>Select your application from the Choose an App menu and note down the App ID.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#create-an-api-token-in-hypr","title":"Create an API token in HYPR","text":"<p>When you register HYPR as a connection in WSO2 Identity Server, you need to provide an API token, which WSO2 Identity Server can use to access HYPR APIs.</p> <p>Follow the steps below to obtain an API token.</p> <ol> <li> <p>Go to the HYPR control center and select your application.</p> </li> <li> <p>Under Advanced Config, click Access Tokens.     </p> </li> <li> <p>Click Create Token, provide a unique name for your token, select API Token as the token type, and click Next.     </p> </li> <li> <p>Select User Management and Authentication as the permission types and click Next.     </p> </li> <li> <p>Take a note of the API token that you have created.</p> <p>Warning</p> <p>The token is only shown once.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#register-hypr-in-wso2-identity-server","title":"Register HYPR in WSO2 Identity Server","text":"<p>Follow the steps below to register HYPR as a connection in WSO2 Identity Server.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Connections.</p> </li> <li> <p>Click Create Connection and select HYPR.</p> </li> <li> <p>Enter the following details and click Finish:     </p> <p> Parameter Description Name A unique name to identify the connection. Relying Party App ID The App ID you receive when you register your app in HYPR. Base URL The base URL of your HYPR server deployment. API Token The token you recieve when you create an API token in HYPR. </p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#enable-hypr-login","title":"Enable HYPR login","text":"<p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and add Magic link login from your preferred editor:</p> Classic EditorVisual Editor <ol> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the same step and select your HYPR connection.</p> <p></p> </li> <li> <p>Enable Conditional Authentication and add the following script.</p> <pre><code>var onLoginRequest = function onLoginRequest(context) {\n\nvar fedUser;\nexecuteStep(1,\n{\nonSuccess: function (context) {\nvar idpName = context.steps[1].idp;\n\nif (idpName === \"HYPR\") {\nfedUser = context.currentKnownSubject;\n\nvar associatedUser = getAssociatedLocalUser(fedUser);\nif (associatedUser == null) {\nvar claimMap = {};\nclaimMap[\"http://wso2.org/claims/username\"] = fedUser.username;\nvar storedLocalUser = getUniqueUserWithClaimValues(claimMap, context);\nif (storedLocalUser !== null) {\ndoAssociationWithLocalUser(fedUser, storedLocalUser.username, storedLocalUser.tenantDomain, storedLocalUser.userStoreDomain);\n}\n}\n}\n}\n});\n};\n</code></pre> </li> </ol> <p>To add passwordless login with HYPR using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select your HYPR connection.</p> <p></p> </li> <li> <p>Expand the Script Editor and add the following script.</p> <pre><code>var onLoginRequest = function onLoginRequest(context) {\n\nvar fedUser;\nexecuteStep(1,\n{\nonSuccess: function (context) {\nvar idpName = context.steps[1].idp;\n\nif (idpName === \"HYPR\") {\nfedUser = context.currentKnownSubject;\n\nvar associatedUser = getAssociatedLocalUser(fedUser);\nif (associatedUser == null) {\nvar claimMap = {};\nclaimMap[\"http://wso2.org/claims/username\"] = fedUser.username;\nvar storedLocalUser = getUniqueUserWithClaimValues(claimMap, context);\nif (storedLocalUser !== null) {\ndoAssociationWithLocalUser(fedUser, storedLocalUser.username, storedLocalUser.tenantDomain, storedLocalUser.userStoreDomain);\n}\n}\n}\n}\n});\n};\n</code></pre> </li> </ol> </li> <li> <p>Click Update to save the sign-in flow.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#try-it-out","title":"Try it out","text":"<p>Before you begin</p> <ul> <li>Make sure you have a user account in the application registered in the HYPR control center.</li> <li>Download the HYPR app to your mobile device and pair the device to your user account in HYPR.  See HYPR documentation for more details.</li> </ul> <p>Follow the steps given below:</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Click Login to open the WSO2 Identity Server login page.</p> </li> <li> <p>On the WSO2 Identity Server login page, click Sign In With HYPR.</p> <p></p> </li> <li> <p>Enter the username of an existing HYPR user.</p> </li> <li> <p>Use the HYPR mobile application to complete the log in.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/","title":"Add Magic Link login","text":"<p>Magic link is a form of passwordless authentication. It allows users to log in by clicking a link sent to their email instead of entering a password.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>To get started, you need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>You need to have a user account in WSO2 Identity Server. If you don't already have one, create a user account in WSO2 Identity Server.</p> <p>Note</p> <p>You cannot use an administrator account to log in to an application.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/#enable-magic-link-login-for-an-app","title":"Enable Magic link login for an app","text":"<p>Follow the steps given below to enable Magic link login to the login flow of your application.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications.</p> </li> <li> <p>Select the application to which you wish to add Magic link login.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and add Magic link login from your preferred editor:</p> Classic EditorVisual Editor <ul> <li>If you haven't already built a login flow for your application, select Add Magic Link login to build one.</li> </ul> <p></p> <ul> <li>If you have an already built login flow, add the <code>Magic Link</code> authenticator as the first authentication step.</li> </ul> <p></p> <p>To add passwordless login with Magic link using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab and go to Predefined Flows &gt; Basic Flows &gt; Add Passwordless login.</p> </li> <li> <p>Select <code>Magic Link</code>.</p> </li> <li> <p>Click Confirm to add passwordless login with Magick Link to the sign-in flow.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the WSO2 Identity Server login page.</li> <li> <p>On the WSO2 Identity Server login page, enter your username and press Continue.</p> <p></p> <p>You will be redirected to the below page.</p> <p></p> </li> <li> <p>Check your inbox for the magic link email. The email reads as follows.</p> <p></p> </li> <li> <p>Open the magic link by clicking Sign In on the same browser as your application.</p> </li> </ol>"},{"location":"guides/authentication/saml/","title":"Configure SAML flows","text":"<p>Learn how to discover the SAML configurations in your WSO2 Identity Server organization and then use them to implement SAML flows in your applications.</p> <ul> <li>Discover SAML configurations</li> </ul>"},{"location":"guides/authentication/saml/discover-saml-configs/","title":"Discover SAML endpoints and configs in WSO2 Identity Server","text":"<p>You can follow this document to obtain required information and the configurations to: - Integrate sign in with WSO2 Identity Server for your SAML web application - Build login with WSO2 Identity Server using a SAML supported library</p> <p>When configuring SAML based sign in with WSO2 Identity Server, you need to know:</p> <ol> <li>SAML IdP endpoints of WSO2 Identity Server</li> <li>Issuer of WSO2 Identity Server</li> <li> <p>The public certificate of WSO2 Identity Server</p> <p></p> </li> </ol>"},{"location":"guides/authentication/saml/discover-saml-configs/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to have an application registered in WSO2 Identity Server. If you don't have an app registered, go to WSO2 Identity Server to register a SAML application.</p>"},{"location":"guides/authentication/saml/discover-saml-configs/#get-saml-configs","title":"Get SAML configs","text":"<p>You need to know the SAML IdP configurations of WSO2 Identity Server if you want to add SAML login to your application.</p> <p>There are two options for a SAML application to get the SAML IdP configurations of WSO2 Identity Server:</p> <ol> <li>Use SAML IdP metadata of WSO2 Identity Server</li> <li>Get SAML IdP configurations of WSO2 Identity Server from Console</li> </ol>"},{"location":"guides/authentication/saml/discover-saml-configs/#use-saml-metadata","title":"Use SAML metadata","text":"<p>SAML metadata is an XML document which contains information necessary to integrate a SAML application with a with SAML supported identity provider.</p> <p>The SAML IdP metadata document contains:</p> <ol> <li> <p>Endpoints (single sign-on URLs, single logout URLs, etc)</p> </li> <li> <p>Supported bindings</p> </li> <li> <p>IdP identifiers (entityID or sometimes called Issuer)</p> </li> <li> <p>Public certificate</p> </li> </ol> <p>Sample SAML IdP metadata of WSO2 Identity Server</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;EntityDescriptor\nxmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"localhost\"&gt;\n&lt;IDPSSODescriptor WantAuthnRequestsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\" validUntil=\"2021-07-07T07:01:06.536Z\"&gt;\n&lt;KeyDescriptor use=\"signing\"&gt;\n&lt;KeyInfo\nxmlns=\"http://www.w3.org/2000/09/xmldsig#\"&gt;\n&lt;X509Data&gt;\n&lt;X509Certificate&gt;MIIC/jCCAeagAwIBAgIECXIstjANBgkqhkiG9w0BAQQFADBBMRAwDgYDVQQDDAdiaWZyb3N0MQ0w\nCwYDVQQLDAROb25lMQ8wDQYDVQQKDAZOb25lIEwxDTALBgNVBAYTBE5vbmUwHhcNMjEwMzIwMDYz\nNTU5WhcNMzEwNDE3MDYzNTU5WjBBMRAwDgYDVQQDDAdiaWZyb3N0MQ0wCwYDVQQLDAROb25lMQ8w\nDQYDVQQKDAZOb25lIEwxDTALBgNVBAYTBE5vbmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQCL+LfgKAXwhl3x7buxjeUmRfozJbt7aggfR/86WfB+1N1L5ICaYgybTpB3KEOvR/JxO41H\n2GOwSFKb15xLmRmH2qy598tvU3TjUyXftUTqp44o/gChy9iavSu2kfRNSCped0N4UAAXegtWFROi\nTD0iT5PbdwQ8MDyAwKZB/s2N7t82xDpoK7PO99R6Re9GcOX/tkAeBvD/SDK6MgnXU2UqI1uYJ0ow\nBOfrxPBDhTlEkP34hPTOLNabVyJX5k5zXYvwCxQj5AWMudSUzhLjZfWiPRNqjWgv1XxAYBIccgYq\non1jG++e7Fod3jY0UUclzAHiguWKuM7Ijkd8plEUTgXNAgMBAAEwDQYJKoZIhvcNAQEEBQADggEB\nAEIeJ9o5QYlRV2KJN5bLL7s6GV3hkYMIrzDoxHFgSvEt2XJULHWj3yvKe1hk/HzEII79fYYKS6xJ\nv7MORegQP/zFCD8oAHt/3lnhrG1yM/SQDe60Kd5emWqLqMxNQBmmaYQDTY7F5PIdC9KJ/EeKIoz2\nP2QlT5TNOcj9chtRHtsohNNv6Nkew6HZ49Xlm4BsFxhP6J5YPExV4bBw+RsHeiNdcxXNGaNtD5n2\nL4KOHbmKddsL1x/KZ4Q67xzaS50IhNnfC84pOFxmYT2FsB02ZuVv97UsNF+8xv+GIN3qc+pIJEWd\nHFY29KP4da//BDdQrftzYCATe37Um09id/0KMGs=&lt;/X509Certificate&gt;\n&lt;/X509Data&gt;\n&lt;/KeyInfo&gt;\n&lt;/KeyDescriptor&gt;\n&lt;ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://localhost:9443/samlartresolve\" index=\"1\"/&gt;\n&lt;SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://localhost:9443/samlsso\" ResponseLocation=\"https://localhost:9443/samlsso\"/&gt;\n&lt;SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://localhost:9443/samlsso\" ResponseLocation=\"https://localhost:9443/samlsso\"/&gt;\n&lt;SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://localhost:9443/samlsso\" ResponseLocation=\"https://localhost:9443/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://localhost:9443/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://localhost:9443/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://localhost:9443/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://localhost:9443/samlsso\"/&gt;\n&lt;/IDPSSODescriptor&gt;\n&lt;/EntityDescriptor&gt;\n</code></pre> <p>There are two ways to get the SAML IdP metadata of WSO2 Identity Server.</p> <ul> <li>File based metadata</li> <li>URL based metadata</li> </ul> <p>Based on the capability of your SAML application or library, you can choose either approach.</p> Use File Based Metadata <p>To download the SAML metadata file of your organization in WSO2 Identity Server,</p> <ol> <li> <p>In the WSO2 Identity Server Console, Select Applications.</p> </li> <li> <p>Select the SAML application from the application view.</p> </li> <li> <p>Go to the Info section.</p> </li> <li> <p>Click Download IdP Metadata to download the metadata xml file.</p> <p></p> </li> </ol> Use URL Based Metadata <p>You can use below endpoint URL to get the SAML IdP metadata information.</p> <pre><code>https://localhost:9443/identity/metadata/saml2\n</code></pre> <p>Sample endpoint URL <pre><code>https://localhost:9443/identity/metadata/saml2\n</code></pre></p> <p>Note</p> <p>When integrating WSO2 Identity Server as a SAML IdP in Salesforce, be sure to add the SAML metadata URL to the Salesforce remote site settings to recognize it as an authorized network address.</p>"},{"location":"guides/authentication/saml/discover-saml-configs/#get-saml-configurations","title":"Get SAML configurations","text":"<p>Some applications and SDKs do not have the capability to dynamically resolve endpoints from  SAML metadata file. You need to configure endpoints manually to support them.</p> <p>You can login to WSO2 Identity Server and get endpoints of WSO2 Identity Server.</p> <ol> <li> <p>In the WSO2 Identity Server Console, click Applications.</p> </li> <li> <p>Select the SAML application from the application view.</p> </li> <li> <p>Go to the Info section of the application and finds the below server information related to your organization:</p> <ul> <li>Issuer : Issuer name of WSO2 Identity Server</li> <li>Single Sign-On : Sign-on URL of WSO2 Identity Server</li> <li>Single Logout : Logout URL of WSO2 Identity Server</li> <li>IdP certificate : Public certificate of WSO2 Identity Server</li> </ul> <p></p> </li> <li> <p>You can download the certificate of WSO2 Identity Server from IdP certificate.</p> </li> </ol>"},{"location":"guides/authentication/saml/discover-saml-configs/#whats-next","title":"What's next?","text":"<p>Now you've integrated your SAML web application. You also can: - Configure SAML settings</p>"},{"location":"guides/authentication/social-login/","title":"Add social login","text":"Add social login Add social login to your applications with WSO2 Identity Server Facebook Google Microsoft Apple"},{"location":"guides/authentication/social-login/add-apple-login/","title":"Add Apple login","text":"<p>You can add Apple login to your applications using WSO2 Identity Server and enable users to log in with their Apple IDs.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-apple-login/#register-wso2-identity-server-on-apple","title":"Register WSO2 Identity Server on Apple","text":"<p>Before you begin</p> <p>You need a paid subscription to get access to an Apple developer account.</p> <p>To register WSO2 Identity Server on Apple, you need to create the following components on Apple's Developer Portal:</p> Step 1: Register an App ID<p>To register an App ID:</p> <ol> <li> <p>On the Apple Developer portal, go to Program resources &gt; Certificates, Identifiers &amp; Profiles &gt; Identifiers.</p> <p></p> </li> <li> <p>Click <code>+</code> to register an App ID.</p> </li> <li>Select App IDs and click Continue.</li> <li>Select App as the type and click Continue.</li> <li> <p>Enter the values for the following parameters.</p> <p> Parameter Definition Description A description for the services ID. Bundle ID A unique identifier for the application. It is usually a string of characters in reverse domain name notation.  Example: <code>com.domainname.appname</code> </p> <p></p> </li> <li> <p>Under the Capabilities tab, select Sign in with Apple.</p> </li> <li>Click Continue and then click Register.</li> </ol> Step 2: Register a Services ID<p>To register a services ID:</p> <ol> <li> <p>On the Apple Developer portal, go to Program resources &gt; Certificates, Identifiers &amp; Profiles &gt; Identifiers.</p> <p></p> </li> <li> <p>Click <code>+</code> and select Services IDs and click Continue.</p> </li> <li> <p>Enter values for the following parameters:</p> <p> Parameter Definition Description A description for the services ID. Identifier A unique identifier for the application. It is usually a string of characters in reverse domain name notation. This value is considered the client ID of the application. Example: <code>com.domainname.appname</code> </p> </li> <li> <p>Click Continue and then click Register.</p> </li> <li>Go back to the Identifiers section and click on the Services ID you created.</li> <li>Enable Sign in with Apple and click Configure.</li> <li>Under Web Authentication Configuration, select the App ID you created as the Primary App ID.</li> <li> <p>Enter the following values under Register Website URLs.</p> <p> Parameter Value Domain <code>https://localhost:9443</code> Return URL <code>https://localhost:9443/commonauth</code> </p> </li> <li> <p>Click Continue and then click Save.</p> </li> </ol> Step 3: Register a new key<p>To register a new key:</p> <ol> <li> <p>On Apple Developer portal, go to Program resources &gt; Certificates, Identifiers &amp; Profiles &gt; Keys.</p> <p></p> </li> <li> <p>Click <code>+</code> to register a new key.</p> </li> <li>Enter a name for the key, enable Sign in with Apple, and click Configure.</li> <li>Under Configure Keys, select the App ID you created previously and click Save. Then click Continue.</li> <li> <p>Click Register.</p> <p>Note</p> <p>You will now see that your app's Private key is ready to be downloaded. Download and save it securely, as you cannot download it again. Also, take note of the Key ID that is displayed on this page.</p> </li> <li> <p>Click Done.</p> </li> </ol> <p>Note down the Team ID displayed in the top right corner under your name.</p> <p>You can follow the Apple documentation for detailed instructions.</p> <p>Tip<p>A client secret is required to integrate the Apple application with WSO2 Identity Server. Usually, the external IdP generates a client secret, but in this scenario, Apple expects WSO2 Identity Server to generate the client secret.</p> </p>"},{"location":"guides/authentication/social-login/add-apple-login/#register-the-apple-idp","title":"Register the Apple IdP","text":"<p>Now, let's register the Apple IdP in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click New Connections and select Apple.</li> <li> <p>Enter the following details of the Apple identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Apple identity provider. Services ID The services ID obtained from Apple.. Team ID Apple developer team ID obtained from Apple. Key ID Key identifier of the private key generated for the app. Private Key Private key generated for the app. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local WSO2 Identity Server account uses the same email address to log in through an external identity provider, WSO2 Identity Server syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of WSO2 Identity Server, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use WSO2 Identity Server's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After creating the Apple identity provider, go to the Settings tab and see the list of scopes to which Apple has granted permissions.</p> <ul> <li>email: Allows to view the user's email address.</li> <li>name: Allows to view the user's name fields.</li> </ul> <p>Note</p> <p>WSO2 Identity Server needs these scopes to get user information. WSO2 Identity Server checks the attribute configurations of the application and sends the relevant attributes received from Apple to the app. You can read the Apple documentation to learn more.</p> Update the client secret validity period<p>WSO2 Identity Server generates a client secret for the IdP. This client secret has the default maximum validity period of six months.</p> <p>If you wish to reduce the validity period:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Setup on your Apple IdP.</li> <li>On the Settings tab update the value of the Client Secret Validity Period.</li> </ol>"},{"location":"guides/authentication/social-login/add-apple-login/#enable-apple-login","title":"Enable Apple login","text":"<p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li> <p>Select your application, go to the Sign-in Method tab and add Apple login from your preferred editor:</p> <p>Recommendations</p> <p>WSO2 Identity Server recommends adding your social and enterprise connections to the first authentication step, as they are used for identifying the user.</p> Classic EditorVisual Editor <p>To add Apple login using the Classic Editor: 1. If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> <ol> <li> <p>Click Add Authentication on the step, select your Apple identity provider, and click Add.</p> <p></p> </li> </ol> <p>To add Apple login using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select your Apple connection.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-apple-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Click Login to open the WSO2 Identity Server login page.</p> </li> <li> <p>On the WSO2 Identity Server login page, click Sign in with Apple.</p> <p></p> </li> <li> <p>Log in to Apple with an existing Apple ID.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Apple for the first time,</p> <ul> <li>Apple will prompt you to create an account for the Apple IDP application.</li> <li>A user account is created in the WSO2 Identity Server Console with the Apple username. Apple will manage this new user account.</li> </ul>"},{"location":"guides/authentication/social-login/add-apple-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-apple-login/#delete-a-connection","title":"Delete a connection","text":"<p>Before you begin</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p>Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Set up and navigate to the General tab.</li> <li> <p>At the bottom of the page, click the button in the Delete connection.</p> <p>Note<p>You cannot delete connections that are available by default.</p> </p> </li> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/social-login/add-facebook-login/","title":"Add Facebook login","text":"<p>You can add Facebook login to your applications using WSO2 Identity Server and enable users to log in with their Facebook account.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-facebook-login/#register-wso2-identity-server-on-facebook","title":"Register WSO2 Identity Server on Facebook","text":"<p>You need to register WSO2 Identity Server as an app on Facebook.</p> <p>Note</p> <p>You can follow the Facebook Documentation for detailed instructions.</p> <p>To register an app on Facebook:</p> <ol> <li> <p>Log in to the Facebook developer portal and click Create App.</p> <p></p> </li> <li> <p>Select Consumer as the app type and click Next.</p> <p></p> </li> <li> <p>Provide Display Name and click Create App to create an application.</p> <p></p> </li> <li> <p>Under Add products to your app, click Set up on the Facebook Login card.</p> <p></p> </li> <li> <p>Select Web type and provide the following Site URL with your organization name:</p> <pre><code>https://localhost:9443\n</code></pre> <p></p> </li> <li> <p>Save the changes and click Continue.</p> </li> <li> <p>On the left panel, under Facebook Login, go to Settings and add the following as the Valid OAuth Redirect URIs:</p> <pre><code>https://localhost:9443/commonauth\n</code></pre> </li> <li> <p>Enable Client OAuth Login and Web OAuth Login (these are enabled by default) and save the changes.</p> <p></p> </li> <li> <p>On the main panel, go to App settings &gt; basic and take note of the App ID and App Secret.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/social-login/add-facebook-login/#register-the-facebook-idp","title":"Register the Facebook IdP","text":"<p>Now, let's register the Facebook IdP in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Create Connection and select Facebook.</li> <li> <p>Enter the following details of the Facebook identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Facebook identity provider. App ID App ID obtained from Facebook. App Secret The app secret obtained from Facebook. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local WSO2 Identity Server account uses the same email address to log in through an external identity provider, WSO2 Identity Server syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of WSO2 Identity Server, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use WSO2 Identity Server's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After the Facebook identity provider is created, go to the Settings tab and see the list of permissions granted by Facebook to WSO2 Identity Server.</p> <ul> <li>email: Grants read access to a user's primary email address.</li> <li>public_profile: Grants read access to a user's default public profile details.  </li> </ul> <p>Note</p> <p>WSO2 Identity Server needs these permissions to get user information. WSO2 Identity Server checks the attribute configurations of the application and sends the relevant attributes received from Facebook to the app. You can read the Facebook documentation to learn more.</p>"},{"location":"guides/authentication/social-login/add-facebook-login/#enable-facebook-login","title":"Enable Facebook login","text":"<p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li> <p>Select your application, go to the Sign-in Method tab and add Facebook login from your preferred editor:</p> <p>Recommendations</p> <p>WSO2 Identity Server recommends adding your social and enterprise connections to the first authentication step, as they are used for identifying the user.</p> Classic EditorVisual Editor <p>To add Facebook login using the Classic Editor:</p> <ol> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the step, select your Facebook identity provider, and click Add.</p> <p></p> </li> </ol> <p>To add Facebook login using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select your Facebook connection.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-facebook-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Click Login to open the WSO2 Identity Server login page.</p> </li> <li> <p>On the WSO2 Identity Server login page, click Sign in with Facebook.</p> <p></p> </li> <li> <p>Log in to Facebook with an existing user account.</p> </li> <li> <p>The user is now redirected to the application and logged in.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Facebook for the first time, a user account is created in the WSO2 Identity Server Console with the Facebook username. This new user account will be managed by Facebook.</p>"},{"location":"guides/authentication/social-login/add-facebook-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-facebook-login/#delete-a-connection","title":"Delete a connection","text":"<p>Before you begin</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p>Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Set up and navigate to the General tab.</li> <li> <p>At the bottom of the page, click the button in the Delete connection.</p> <p>Note<p>You cannot delete connections that are available by default.</p> </p> </li> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/social-login/add-google-login/","title":"Add Google login","text":"<p>You can add Google login to your applications using WSO2 Identity Server and enable users to log in with their Google account.  </p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-google-login/#register-wso2-identity-server-on-google","title":"Register WSO2 Identity Server on Google","text":"<p>You need to register WSO2 Identity Server as an OAuth2.0 application on Google.</p> <p>Note</p> <p>For detailed instructions, you can follow the Google documentation.</p> <ol> <li> <p>Go to the Google Developer console, create a new project, or select an existing project.</p> </li> <li> <p>If the APIs &amp; services page isn't already open, do the following:</p> <ol> <li>Open the navigation menu and click View all products.</li> </ol> <p></p> <ol> <li>Under Management, click APIs &amp; Services.</li> </ol> <p></p> </li> <li> <p>Go to the Credentials page, click Create Credentials, and select Oauth client ID.</p> <p></p> </li> <li> <p>Configure your consent screen by clicking Configure Consent Screen and return to Create OAuth client ID screen once you are done.</p> <p>Note</p> <p>For more information, see User Consent</p> </li> <li> <p>Select the Web application as the application type.</p> </li> <li> <p>Provide a name for your app and the following URL as the Authorized Redirect URI of the application:</p> <pre><code>https://localhost:9443/commonauth\n</code></pre> </li> <li> <p>Take note of the client ID and client secret generated for the application.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-google-login/#register-the-google-idp","title":"Register the Google IdP","text":"<p>Now, let's register the Google IdP in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click New Connections and select Google.</li> <li> <p>Enter the following details of the Google identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Google identity provider. Client ID The client ID obtained from Google. Client secret The client secret obtained from Google. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local WSO2 Identity Server account uses the same email address to log in through an external identity provider, WSO2 Identity Server syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of WSO2 Identity Server, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use WSO2 Identity Server's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After the Google identity provider is created, go to the Settings tab and see the list of scopes to which Google has granted permissions.</p> <ul> <li>email: Allows to view the user's email address.</li> <li>openid: Allows authentication using OpenID Connect and to obtain the ID token.</li> <li>profile: Allows to view the user's basic profile data.</li> </ul> <p>Note</p> <p>WSO2 Identity Server needs these scopes to get user information. WSO2 Identity Server checks the attribute configurations of the application and sends the relevant attributes received from Google to the app. You can read the Google documentation to learn more.</p>"},{"location":"guides/authentication/social-login/add-google-login/#enable-google-login","title":"Enable Google login","text":"<p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li> <p>Select your application, go to the Sign-in Method tab and add Google login from your preferred editor:</p> <p>Recommendations</p> <p>WSO2 Identity Server recommends adding your social and enterprise connections to the first authentication step, as they are used for identifying the user.</p> Classic EditorVisual Editor <p>To add Google login using the Classic Editor:</p> <ol> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the step, select your Google identity provider, and click Add.</p> <p></p> </li> </ol> <p>To add Google login using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select your Google connection.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-google-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the WSO2 Identity Server login page.</li> <li> <p>On the WSO2 Identity Server login page, Sign in with Google.</p> <p></p> </li> <li> <p>Log in to Google with an existing user account.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Google for the first time, a user account is created in the WSO2 Identity Server Console with the Google username. This new user account will be managed by Google.</p>"},{"location":"guides/authentication/social-login/add-google-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-google-login/#delete-a-connection","title":"Delete a connection","text":"<p>Before you begin</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p>Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Set up and navigate to the General tab.</li> <li> <p>At the bottom of the page, click the button in the Delete connection.</p> <p>Note<p>You cannot delete connections that are available by default.</p> </p> </li> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/social-login/add-microsoft-login/","title":"Add Microsoft login","text":"<p>You can add Microsoft login to your applications using WSO2 Identity Server and enable users to log in with their Microsoft account.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-microsoft-login/#register-wso2-identity-server-on-microsoft","title":"Register WSO2 Identity Server on Microsoft","text":"<p>You need to register WSO2 Identity Server as an OAuth2.0 application on Microsoft.</p> <p>Note</p> <p>For detailed instructions, you can follow the Microsoft documentation.</p> <ol> <li> <p>Sign in to the Azure Portal using an account with administrator permission.</p> <p>Note</p> <p>You must use an account in the same Microsoft 365 subscription (tenant) with which you intend to register the app.</p> </li> <li> <p>On the Azure portal, go to Azure Services &gt; Azure Active Directory.</p> <p></p> </li> <li> <p>Click Add and select App registration from the list.</p> </li> <li> <p>Provide the required information for app registration.</p> <p></p> <p> Parameter Description Name Enter a meaningful name for your application. Supported Account Type Select the supported account type. Value: <code>Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g., Skype, Xbox)</code> Redirect URI Select a platform according to your application and enter the redirect URI. Value: <code>https://localhost:9443/commonauth</code> </p> </li> <li> <p>Click Register to create the application.</p> <p>Note</p> <p>Take note of the client ID after the application is created.</p> </li> </ol> <p>Now, let's generate a client secret for the application.</p> <ol> <li>Go to Certificates &amp; secrets on the left navigation and click + New client secret.</li> <li>Enter a description for the client secret and select the expiry time.</li> <li> <p>Click Add to add the client secret.</p> <p>Important</p> <p>Take note of the generated Secret ID. Azure will allow copying this value only once.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-microsoft-login/#register-the-microsoft-idp","title":"Register the Microsoft IdP","text":"<p>Now, let's register the Microsoft IdP in WSO2 Identity Server.</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click New Connections and select Microsoft.</li> <li> <p>Enter the following details of the Microsoft identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Microsoft identity provider. Client ID The client ID obtained from Microsoft. Client secret The client secret obtained from Microsoft. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local WSO2 Identity Server account uses the same email address to log in through an external identity provider, WSO2 Identity Server syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of WSO2 Identity Server, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use WSO2 Identity Server's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After the Microsoft identity provider is created, go to the Settings tab and see the list of scopes to which Microsoft has granted permissions.</p> <ul> <li>email: Allows to view the user's email address.</li> <li>openid: Allows authentication using OpenID Connect and to obtain the ID token.</li> <li>profile: Allows to view the user's basic profile data.</li> </ul> <p>Note</p> <p>WSO2 Identity Server needs these scopes to get user information. WSO2 Identity Server checks the attribute configurations of the application and sends the relevant attributes received from Microsoft to the app. You can read the Microsoft documentation to learn more.</p>"},{"location":"guides/authentication/social-login/add-microsoft-login/#enable-microsoft-login","title":"Enable Microsoft login","text":"<p>Before you begin</p> <p>You need to register an application with WSO2 Identity Server. You can register your own application or use one of the sample applications provided.</p> <p>To enable Microsoft login:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li> <p>Select your application, go to the Sign-in Method tab and add Microsoft login from your preferred editor:</p> <p>Recommendations</p> <p>WSO2 Identity Server recommends adding your social and enterprise connections to the first authentication step, as they are used for identifying the user.</p> Classic EditorVisual Editor <p>To add Microsoft login using the Classic Editor:</p> <ol> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the step, select your Microsoft identity provider, and click Add.</p> <p></p> </li> </ol> <p>To add Microsoft login using the Visual Editor:</p> <ol> <li> <p>Switch to the Visual Editor tab, by default the <code>Username &amp; Password</code> login flow will be added onto the Visual Editor's workspace.</p> </li> <li> <p>Click on <code>+ Add Sign In Option</code> to add a new authenticator to the same step and select your Microsoft connection.</p> <p></p> </li> </ol> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-microsoft-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the WSO2 Identity Server login page.</li> <li> <p>On the WSO2 Identity Server login page, Sign in with Microsoft.</p> <p></p> </li> <li> <p>Log in to Microsoft with an existing user account.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Microsoft for the first time, a user account is created in the WSO2 Identity Server Console with the Microsoft username. Microsoft will manage this new user account.</p>"},{"location":"guides/authentication/social-login/add-microsoft-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":"<p>To add groups to a connection on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of WSO2 Identity Server.</p> <p></p> </li> <li> <p>Click Update.</p> </li> <li> <p>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.</p> <p></p> </li> <li> <p>Click Finish to add the group information.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-microsoft-login/#delete-a-connection","title":"Delete a connection","text":"<p>Before you begin</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p>Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it:</p> <ol> <li>On the WSO2 Identity Server Console, go to Connections.</li> <li>Click Set up and navigate to the General tab.</li> <li> <p>At the bottom of the page, click the button in the Delete connection.</p> <p>Note<p>You cannot delete connections that are available by default.</p> </p> </li> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/user-attributes/","title":"Enable user attributes","text":"Enable user attributes Share user attributes in the user profile with OpenID Connect apps SAML apps"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/","title":"Enable user attributes for OpenID Connect apps","text":"<p>WSO2 Identity Server can share user attributes with applications. This guide explains how you share user attributes with OpenID Connect applications.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#configure-user-attributes-to-share","title":"Configure user attributes to share","text":"<p>Follow the steps below to configure the user attributes from the WSO2 Identity Server Console and share them with the application.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#select-user-attributes","title":"Select user attributes","text":"<p>You need to first specify the user attributes required for an application. This ensures that when a user logs in, the application can only get access to the user information exposed through these attributes.</p> <p>The user attributes are grouped by their specific scopes to ease the user attribute configuration process. You can add user attributes individually or all the attributes in the scope at once.</p> <p>To add user attributes to the app:</p> <ol> <li>On the WSO2 Identity Server, go to Applications.</li> <li> <p>Select your application and go to its User Attributes tab. Here, the user attributes are listed under their relevant scopes.</p> <p></p> </li> <li> <p>You can add user attributes using the following methods:</p> <ul> <li> <p>Add a group of user attributes by selecting the checkbox in front of the required scope. This will add all the user attributes grouped under the selected scope.</p> <p></p> </li> <li> <p>Add a single user attribute by expanding the required scope and selecting the user attribute you need from the expanded list.</p> <p></p> </li> </ul> </li> <li> <p>Click Update once you are done.</p> </li> </ol>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#define-mandatory-user-attributes","title":"Define mandatory user attributes","text":"<p>You can configure the mandatory attributes that are essential for application functionalities. That is, when a user logs in, the user information linked to these attributes are required to be shared with the application.</p> <p>If the user does not have this information entered in the user profile, the user will be prompted to enter the information during the login flow.</p> <p>From the attributes that are enabled for the application in the Attributes tab, you can expand the scopes and select the attributes that are mandatory for the application:</p> <p></p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#how-it-works","title":"How it works","text":"<p>Let's see how this flow works in WSO2 Identity Server.</p> <p>Once you have configured the user attributes that are required for your application, WSO2 Identity Server implements the following process when a user tries to log in to your app.</p> <p></p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#application-requests-attributes","title":"Application requests attributes","text":"<p>When the user logs in to the app, a request is sent to WSO2 Identity Server with the relevant scopes.</p> <p>Applications can use scopes to request access to a group of user attributes.</p> <p>Note</p> <p>Learn more about managing scopes in WSO2 Identity Server.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#wso2-identity-server-checks-for-mandatory-attributes","title":"WSO2 Identity Server checks for mandatory attributes","text":"<p>WSO2 Identity Server verifies whether the user's profile has values for all the mandatory attributes that are requested by the application. If there are missing values, WSO2 Identity Server will prompt the user to enter the missing values.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#requests-user-consent","title":"Requests user consent","text":"<p>By default, WSO2 Identity Server requests the user's consent to share the user attributes with the application.</p> <p>Note</p> <p>Learn more about managing user consent.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#shares-attributes-with-the-app","title":"Shares attributes with the app","text":"<p>If the user consents to share attributes with the application, WSO2 Identity Server returns the requested user attributes as well as the subject attribute to the application in the ID token.</p> Subject Attribute <p>The subject attribute is the unique identifer for a user. The application receives this value via the subject attribute parameter in the ID token. In WSO2 Identity Server, the user ID is used as the subject attribute.</p> ID token <p>Once the application calls the token endpoint, WSO2 Identity Server sends the ID token in the response.</p> <p>All the user attributes that are requested by scopes are returned as claims in the ID token. The application can decode the ID token to view the claims.</p> <p>A sample ID token is given below:</p> <pre><code>{\n\"isk\": \"69b37037a2349763dc48e2a30a62c3feebf0b5823cf869e149352737ddc0ca63\",\n\"at_hash\": \"7qgloEmkz3kGBTtH7RI4qw\",\n\"sub\": \"user@sample.com\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://localhost:9443/oauth2/token\",\n\"given_name\": \"alice\",\n\"sid\": \"5580be2b-a12d-43a4-823a-9d1352b88269\",\n\"aud\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n\"c_hash\": \"VlKxb3UhuYtFEG_VftAa0g\",\n\"nbf\": 1625557031,\n\"azp\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n\"nickname\": \"nick\",\n\"exp\": 1625560631,\n\"iat\": 1625557031,\n\"family_name\": \"john\"\n}\n</code></pre> Userinfo response <p>In addition to getting attributes from the ID token, the application can invoke the userinfo endpoint and get user attributes along with the subject attribute.</p> <p>A sample userinfo response is given below:</p> <pre><code>{\n\"sub\": \"user@sample.com\",\n\"nickname\": \"nick\",\n\"given_name\": \"alice\",\n\"family_name\": \"john\"\n}\n</code></pre>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/","title":"Enable user attributes for SAML apps","text":"<p>WSO2 Identity Server can share user attributes with applications. The following guide shows how to share user attributes with SAML applications.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#prerequisite","title":"Prerequisite","text":"<p>To get started, you need to have an application registered in WSO2 Identity Server. If you don't have an app registered, go to WSO2 Identity Server to register a SAML application.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#configure-user-attributes-to-share","title":"Configure user attributes to share","text":"<p>Follow the steps below to configure the user attributes from the WSO2 Identity Server Console and share them with the application.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#select-user-attributes","title":"Select user attributes","text":"<p>You need to first specify the user attributes required for an application. This ensures that when a user logs in, the application can only get access to the user information exposed through these attributes.</p> <p>To add user attributes to the app:</p> <ol> <li>On the WSO2 Identity Server, go to Applications.</li> <li>Select your application, go to the Protocol tab and select Enable attribute profile.</li> <li>Click Update and go to the User Attributes tab.</li> <li> <p>Click Add User Attribute if you don't have any attributes already added.</p> <p></p> </li> <li> <p>Select the required attributes from the list as shown below.</p> <p></p> </li> <li> <p>Click Save to return to the User Attributes tab and then click Update.</p> </li> </ol>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#map-user-attributes","title":"Map user attributes","text":"<p>In the user attribute configurations, you can either choose default attribute names or define application-specific user attribute names.</p> <p>To configure application-specific attribute names, you need to map the selected user attributes to application-specific user attributes.</p> <p>To perform mapping:</p> <ol> <li>Click Enable Mapping in the User Attributes section.</li> <li> <p>Change the Mapped user attribute for the selected attribute.</p> <p></p> </li> </ol> <p>This ensures that the application receives attributes based on the name that is configured.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#define-mandatory-user-attributes","title":"Define mandatory user attributes","text":"<p>You can configure the mandatory attributes that are essential for application functionalities. That is, when a user logs in, the user information linked to these attributes are required to be shared with the application.</p> <p>If the user does not have this information entered in the user profile, the user will be prompted to enter the information during the login flow.</p> <p>From the attributes that are enabled for the application in the Attributes tab, you can expand the scopes and select the attributes that are mandatory for the application:</p> <p></p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#select-the-subject-attribute","title":"Select the subject attribute","text":"<p>The subject attribute is used for exchanging information about the user. The subject is represented by the subject attribute in the SAML assertion.</p> <p>By default, WSO2 Identity Server shares username as the subject. You can define any user attribute as the subject.</p> <p>To define a different attribute as the subject:</p> <ol> <li>Select it as a user attribute.</li> <li> <p>Go to the Subject section under User Attributes.</p> <p></p> </li> <li> <p>Select an attribute as the subject from the Subject attribute list.</p> </li> <li>Click Update.</li> </ol>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#how-it-works","title":"How it works","text":"<p>Let's see how this flow works in WSO2 Identity Server.</p> <p>Once you have configured the user attributes that are required for your application, WSO2 Identity Server implements the following process when a user tries to log in to your app.</p> <p></p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#wso2-identity-server-checks-for-mandatory-attributes","title":"WSO2 Identity Server checks for mandatory attributes","text":"<p>WSO2 Identity Server verifies whether the user's profile has values for all the mandatory attributes that are requested by the application. If there are missing values, WSO2 Identity Server will prompt the user to enter the missing values.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#requests-user-consent","title":"Requests user consent","text":"<p>By default, WSO2 Identity Server requests the user's consent to share the user attributes with the application.</p> <p>Note</p> <p>Learn more about managing user consent.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#shares-attributes-with-the-app","title":"Shares attributes with the app","text":"<p>WSO2 Identity Server will share these user attributes with an application, given the user has provided consent. User attributes, along with the subject attribute, are shared via SAML assertions.</p> Subject attribute <p>The subject attribute is shared via the <code>&lt;saml2:Subject&gt;</code> element based on the configured subject attribute.</p> <p>A sample Subject element found in a SAML assertion is given below:</p> <pre><code>&lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;alice@bifrost.com&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"immfmmacmiaomepphphhlfokfggpffkleokajfbg\"\nNotOnOrAfter=\"2021-07-13T06:09:33.594Z\"\nRecipient=\"http://localhost:8081/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n\n&lt;/saml2:Subject&gt;\n</code></pre> Attribute statement <p>If the user gives consent to share attributes with the application, WSO2 Identity Server returns the requested user attributes via the <code>&lt;saml2:AttributeStatement&gt;</code> element.</p> <p>A sample attribute statement element found in a SAML assertion is given below: <pre><code>&lt;saml2:AttributeStatement&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/country\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;Sri Lanka&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/emailaddress\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;alice@bifrost.com&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;/saml2:AttributeStatement&gt; </code></pre></p> Attribute statement with attribute mapping <p>If you have done any custom attribute mapping via the Enable mapping setting, the attributes will contain those application-specific names in the SAML assertion.</p> <p>A sample attribute statement element with custom attribute mapping is given below:</p> <pre><code>&lt;saml2:AttributeStatement&gt;\n&lt;saml2:Attribute Name=\"country\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;Sri Lanka&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;saml2:Attribute Name=\"emailaddress\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;alice@bifrost.com&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;/saml2:AttributeStatement&gt;\n</code></pre>"},{"location":"guides/branding/","title":"Branding","text":"<p>By default, the business applications of your organization in WSO2 Identity Server are presented to your users with WSO2 Identity Server branding. You have the option of using your own branding as follows:</p> <ul> <li> <p>Customize the user interfaces (UIs) of the user login, sign-up, and account recovery flows.</p> </li> <li> <p>Customize email notifications</p> </li> <li> <p>Configure email sender</p> </li> </ul>"},{"location":"guides/branding/configure-email-sender/","title":"Configure the Email Sending Module","text":"<p>This document explains the steps to configure WSO2 Identity Server to send emails during multiple email-related customer identity and access management tasks such as email OTP, email notifications, and account recovery.</p>"},{"location":"guides/branding/configure-email-sender/#configure-the-email-sender-globally","title":"Configure the email sender (globally)","text":"<p>Follow the steps given below to enable the email sender globally for all tenants in your WSO2 IS.</p> <ol> <li>Shut down the server if it is running.</li> <li> <p>Add the following properties to the <code>deployment.toml</code> file in the <code>IS_HOME/repository/conf</code> folder to configure the email server.</p> <pre><code>[output_adapter.email]\nfrom_address= \"wso2iamtest@gmail.com\"\nusername= \"wso2iamtest\"\npassword= \"Wso2@iam70\"\nhostname= \"smtp.gmail.com\"\nport= 587\nenable_start_tls= true\nenable_authentication= true\nsignature = \"ABC.com\"\n</code></pre> Property Description <code>from_address</code> This is the mail address from where you want to send the notification. It can be any working mail address. <code>username</code> Provide the username of the SMTP account.  Username of the mail you have provided in from_address. <code>password</code> Provide the password of the SMTP account.  Password of the mail you have provided in from_address. <code>host</code> The SMTP server to connect to. <code>port</code> This is the SMTP server port to connect to if the connect() method does not explicitly specify one. Defaults to 25. <code>enable_start_tls</code> If true, this enables using the <code>STARTTLS</code> command (if enabled before issuing any login commands. Note that an appropriate trust store must be configured so that the client will trust the server's certificate. Defaults to <code>false</code>. <code>enable_authentication</code> If true, attempt to authenticate the user using the AUTH command. Defaults to <code>false</code>. <code>signature</code> Signature of the sender account. <p>Tip</p> <p>For information about SMTP, see here.</p> <p>Info</p> <ul> <li>If you use a Gmail account as the from_address, you must create an App Password. After you get an App Password from Google, update the <code>password</code>.</li> <li>If your password contains special characters (example: <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>), you will run into errors when running the server. To avoid errors, update the <code>password</code> parameter as follows: <pre><code>password= \"&lt;![CDATA[xxxx]]&gt;\"\n</code></pre></li> </ul> </li> <li> <p>Save the configurations and start the server.</p> </li> </ol>"},{"location":"guides/branding/configure-email-sender/#configure-the-email-sender-per-tenant","title":"Configure the email sender (per tenant)","text":"<p>Follow the steps given below to enable the email sender per tenant.</p> <ol> <li>Configure the Configuration Management REST API. </li> <li> <p>Execute the following curl command to create a resource type named <code>Publisher</code>. </p> <p>Sample Request <pre><code>curl -X POST \"https://localhost:9443/t/{tenant-domain}/api/identity/config-mgt/v1.0/resource-type\" -H \"accept: \napplication/json\" -H \"Content-Type: application/json\" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -d \"{ \\\"name\\\": \\\"Publisher\\\", \\\"description\\\": \\\"Publisher Configurations\\\"}\"\n</code></pre></p> </li> <li> <p>Execute the following curl command for creating a resource named <code>EmailPublisher</code>. </p> <p>Sample Request <pre><code>curl -X POST \"https://localhost:9443/t/{tenant-domain}/api/identity/config-mgt/v1.0/resource/Publisher\" -H \"accept: \napplication/json\" -H \"Content-Type: application/json\" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -d \"{ \\\"name\\\": \\\"EmailPublisher\\\", \\\"attributes\\\": [ { \\\"key\\\": \\\"email\\\", \\\"value\\\": \\\"string\\\" } ]}\"\n</code></pre></p> </li> <li> <p>Execute the following curl command for creating a file named <code>EmailPublisher</code>. </p> <p>Info</p> <p>This <code>EmailPublisher.xml</code> file will be used as the tenant's email publisher file. Configure the tenant-wise email configurations in the <code>EmailPublisher.xml</code> file.</p> <p>Sample Request <pre><code>curl -X POST \"https://localhost:9443/t/{tenant-domain}/api/identity/config-mgt/v1\n.0/resource/Publisher/EmailPublisher/file\" -H \"accept: application/json\" -H \"Content-Type: multipart/form-data\" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -F \"resourceFile=@EmailPublisher.xml;type=text/xml\" -F \"fileName=EmailPublisher\"\n</code></pre></p> </li> <li> <p>Open the <code>EmailPublisher.xml</code> file and configure the parameters given below.</p> <p>Note</p> <ul> <li>Only one <code>EmailPublisher.xml</code> file with the name <code>EmailPublisher</code> should be added to a tenant.</li> <li>You do not need to configure all the configurable parameters. If a parameter has not been configured in the <code>EmailPublisher.xml</code> file, configurations in the <code>output-event-adapters.xml</code> will be used instead.</li> </ul> <p> <p>Property name</p> <p>Description</p> <code>             mail.smtp.user            </code> User Name for the sender smtp server <code>             mail.smtp.password            </code> <p>Password for the sender smtp server</p> <code>             mail.smtp.port            </code> <p>Port of the sender smtp server</p> <code>             mail.smtp.from            </code> From email address of the smtp server <code>             mail.smtp.host            </code> Host name of the smtp server <code>             mail.smtp.auth           </code> Password hash method to use when storing user entries in the user store. <code>             mail.smtp.starttls.enable           </code> Property to enable STARTTLS support for JavaMail <code>             mail.smtp.replyTo           </code> Reply to address of smtp server <code>             mail.smtp.signature           </code> Signature for the sender account </p> <p>Following is a sample configuration for the <code>EmailPublisher.xml</code> file. </p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;eventPublisher name=\"EmailPublisher\" statistics=\"disable\"\ntrace=\"disable\" xmlns=\"http://wso2.org/carbon/eventpublisher\"&gt;\n&lt;from streamName=\"id_gov_notify_stream\" version=\"1.0.0\"/&gt;\n&lt;mapping customMapping=\"enable\" type=\"text\"&gt;\n&lt;inline&gt;{{body}}{{footer}}&lt;/inline&gt;\n&lt;/mapping&gt;\n&lt;to eventAdapterType=\"email\"&gt;\n&lt;property name=\"email.address\"&gt;{{send-to}}&lt;/property&gt;\n&lt;property name=\"email.type\"&gt;{{content-type}}&lt;/property&gt;\n&lt;property name=\"email.subject\"&gt;{{subject}}&lt;/property&gt;\n&lt;property name=\"mail.smtp.password\"&gt;xxxxx&lt;/property&gt;\n&lt;property name=\"mail.smtp.from\"&gt;resourcesiam@gmail.com&lt;/property&gt;\n&lt;property name=\"mail.smtp.user\"&gt;resourcesiam&lt;/property&gt;\n&lt;/to&gt;\n&lt;/eventPublisher&gt;\n</code></pre> </li> <li> <p>Since these configurations will be applicable during the tenant loading process, configure tenant loading and  unloading for your tenant.</p> </li> </ol>"},{"location":"guides/branding/configure-ui-branding/","title":"Configure UI branding","text":"<p>You can customize the user interfaces (UIs) presented to your users during the login, sign-up, and account recovery flows, and on the My Account portal according to the theming guidelines of your organization.</p> <p>UI Branding for B2B applications</p> <p>If you have created suborganizations, note that the branding you configure for your root organization also applies to your suborganizations.</p> <p>By branding these interfaces, users will get a familiar and consistent user experience.</p> <p>Note</p> <p>See the complete list of UI branding options currently available in WSO2 Identity Server.</p> <p></p>"},{"location":"guides/branding/configure-ui-branding/#update-branding","title":"Update branding","text":"<p>Follow the steps given below to configure the branding preferences for your organization.</p> <ol> <li> <p>On the WSO2 Identity Server, go to Customization &gt; Branding.</p> <p></p> </li> <li> <p>Update the UI branding options in the General, Design, and Advanced tabs.</p> <p>Note</p> <ul> <li>If you leave any of the branding preferences empty, WSO2 Identity Server defaults will be used.</li> <li>The real-time preview will show you a sample view as you update the values.</li> </ul> </li> <li> <p>Click Save &amp; Publish to publish your branding configurations.</p> </li> </ol> <p>The email templates of the organization will be automatically updated according to your branding preferences if the preferences are in the published state. See Branding email templates for more information.</p>"},{"location":"guides/branding/configure-ui-branding/#disable-branding","title":"Disable branding","text":"<p>You can temporarily disable your branding preferences by clicking Unpublish in the Danger Zone. Your progress will be preserved up to the point and you can choose to publish them again later by clicking on the Save &amp; Publish button.</p> <p>When disabled, WSO2 Identity Server's default branding will apply to the interfaces in your application's login, user registration, account recovery flows, and My Account portal.</p>"},{"location":"guides/branding/configure-ui-branding/#revert-branding","title":"Revert branding","text":"<p>If you want to revert your branding preferences, scroll down to the Danger Zone and click Revert to default.</p> <p>Warning</p> <p>Note that this permanently removes all the branding options that you have saved and the WSO2 Identity Server defaults will immediately apply.</p>"},{"location":"guides/branding/configure-ui-branding/#preview-branding","title":"Preview branding","text":"<p>You can preview how your branding preferences will look once they are saved and published.</p> <p>To preview your branding configurations for different flows, on the Preview window, select the screen you wish to preview from the Screen list.</p> <p></p>"},{"location":"guides/branding/configure-ui-branding/#ui-branding-preferences","title":"UI branding preferences","text":"<p>Listed below are the branding preferences that you can use to customize the WSO2 Identity Server interfaces (UIs) presented to your users.</p>"},{"location":"guides/branding/configure-ui-branding/#general-preferences","title":"General preferences","text":"<p>Listed below are general branding preferences you can apply to the interfaces.</p> Site Title The site title may appear in browser tabs, search engine results, social shares, etc. You can use any meaningful text here. Copyright Text The copyright text is a short description that informs users about the copyright law protecting your applications.       In WSO2 Identity Server, the copyright text will appear on the footer of the login screens and on the footer of emails.        Contact Email This email address will appear on emails, error pages and, other pages where users would require support from the organization admin."},{"location":"guides/branding/configure-ui-branding/#design-preferences","title":"Design preferences","text":"<p>Listed below are the design changes you can apply to the user registration and login interfaces.</p> Layout variations <p>Select one of the available layouts for your login interfaces. WSO2 Identity Server uses the Centered layout by default.</p> <p>Custom layout</p> <p>If you want to use the Custom layout from the list (shown below), contact WSO2 Identity Server support through the WSO2 cloud support portal or send a request email to <code>asgardeo-help@wso2.com</code> and the team will get back to you with instructions.</p> <p></p> <p>Note that these requests should be sent from the account of an administrator in the organization.</p> Theme variations <p>Select from either Dark or Light theme variations to modify the styling of your login screens. WSO2 Identity Server uses the Light theme by default.</p> Theme preferences <p>The following design preferences apply to the theme you select. You can configure and save separate design preferences for each of the themes.</p> Images<p>You can configure the WSO2 Identity Server logo, My Account logo, and favicon for the theme you selected.</p> <p> Logo  This is the logo that appears above the login box in login screens and in emails sent by the organization. Update the following values to set the logo:            <ul> <li>URL: You can update the logo by specifying the URL of a hosted image.</li> <li>Alt Text: The 'Alt text' or 'alternative text' is a short description of an image. This text is useful to make sense of the image when it can't be viewed for some reason. A descriptive alt text is always a good practice to improve accessibility.</li> </ul>            Use an image that's at least 600x600 pixels and less than 1MB in size for better performance.          Favicon Browsers that provide favicon support typically display a page's favicon in the browser's address bar and next to the page's name in a list of bookmarks.         You can update the favicon by specifying the URL of a hosted image (of type png, ico, etc.).         Use an image with a square aspect ratio that's at least 16x16 pixels in size for better results.          My Account Logo  This is the logo that appears in the header of the My Account portal. Update the following values to set the logo:            <ul> <li>URL: You can update the logo by specifying the URL of a hosted image.</li> <li>Alt Text: The 'Alt text' or 'alternative text' is a short description of an image. This text is useful to make sense of the image when it can't be viewed for some reason. A descriptive alt text is always a good practice to improve accessibility.</li> <li>Logo Title: The text shown beside the Logo.</li> </ul>            Use an image that's at least 250x50 pixels and less than 1MB in size for better performance.          </p> <p>Important</p> <p>Be sure that the hosted image you use will properly return Content-Type headers. Without these headers, the image will not correctly render and you will experience a 403 error. You can use static image hosting services to ensure these headers are properly returned.</p> Color Palette<p>This is the primary color palette for your interfaces. Click the color swatch and apply colors that match your organization's style guide.</p> <p> Primary Color           The color that appears dominantly in primary actions, anchor tags, emails, etc.          By default, WSO2 Identity Server uses an orange shade as the primary color for both Light and Dark themes        Secondary Color           The color that appears in secondary actions and other emphasized content.          By default, WSO2 Identity Server uses a lighter gray shade as the secondary color.        </p> Body background <p> Main Background Color           This is the main background color used in the UIs. This will be used as the  background color for login, sign-up, and account recovery flows, and on the My  Account portal.        </p> Surface background <p> Main Surface Background Color           The main background color used in surface elements like cards, popups, panels, etc.        Light Surface Background Color           A lighter variation of the background color used in specific parts of the surface  elements like cards, popups, panels, etc.        Dart Surface Background Color           A darker variation of the background color used in specific parts of the surface  elements like cards, popups, panels, etc.        Inverted Surface Background Color           The inverted variation of the background color used in surface elements like the     application header in the My Account portal.        </p> Outlines <p> Default Outline Color           The default outline color used in elements like cards, tooltips, dropdowns, etc.        </p> Text Colors <p> Primary Text Color           The primary text color used in the user interface. Select a color that provides good contrast against the background color and is easy to read.        Secondary Text Color           The secondary text color used in the user interface. Select a color that compliments  the primary color and enhances the visual hierarchy of your design.        </p> Alerts <p> Neutral Alert Background Color           The color of the message boxes that appears to convey non-critical information or  feedback.        Info Alert Background Color           The color of the message boxes that appears to convey informative messages such as tips or additional information.        Warning Alert Background Color           The color of the message boxes that appears to convey warning messages such as  potential risks or notifications that require your attention.        Error Alert Background Color           The color of the message boxes that appears to convey error messages such as system     failures or critical errors.        </p> Illustrations <p> Primary Color           This is the primary color used for the SVG illustrations in My Account portal.        Secondary Color           This is the secondary color used for the SVG illustrations in My Account portal.        Accent Color 1           This is the primary accent color used for the SVG illustrations. Choose a color that  will draw attention to specific elements of your illustration and highlight key features of your user interface design.        Accent Color 2           This is the secondary accent color used for the SVG illustrations. Choose an alternate  accent color that harmonizes with your design aesthetic and enhances the overall visual appeal of your SVG illustration.        Accent Color 3           This is the tertiary accent color used for the SVG illustrations. Choose an accent color  that harmonizes with your design aesthetic and enhances the overall visual appeal of your SVG illustration.        </p> Footer<p>Decide how you want the footer to look in the login screens by modifying the following attributes:</p> <p> Border Color           The color of the top border of the footer that appears on the login screens.          By default, the Default Outline Color from the Color Palette will be used     until a value for this is defined.        Font Color           The font color of the texts and links that appear on the footer.          By default, the Primary Text Color from the Color Palette will be used until     a value for this is defined.        </p> Font<p>Use one of the following options to override the default font for the theme you selected.</p> Use a web-safe font <p> Font Family           The list of available web-safe fonts to select from.          By default, WSO2 Identity Server uses Montserrat as the font family.        </p> Import a font <p> Font Import URL           Get the URL of a hosted font from the font service and add it here.          E.g., <code>https://fonts.googleapis.com/css2?family=Poppins&amp;display=swap</code> Font Family           This is the font family corresponding to the font imported using the URL  (specified in the     Font Import URL field).          E.g., <code>Poppins</code>, <code>Sans-serif</code> </p> Headings<p>These preferences decide the look and feel of  <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>, and <code>h6</code> elements on     the login screens.</p> <p> Font Color           This is the font color of the headings that appear on the login screens.          By default, the Default Outline Color from the Color Palette will be used     until a value for this is defined.        </p> Buttons<p>These preferences change the look and feel of buttons that appear on the login screens.</p> Primary Button <p> Font Color           This is the font color of the text inside the primary action buttons.          By default, WSO2 Identity Server uses white as the font color for primary buttons.        Border Radius           This is the border radius of the primary action buttons.          By default, WSO2 Identity Server uses four pixels as the border-radius for primary     buttons.        </p> Secondary Button <p> Font Color           This is the font color of the text inside the secondary action buttons.          By default, WSO2 Identity Server uses a dark gray shade as the font color for secondary     buttons.        Border Radius           This is the border radius of the secondary action buttons.          By default, WSO2 Identity Server uses four pixels as the border-radius for secondary     buttons.        </p> External Connection Button <p>These preferences change the look and feel of buttons used for linking external identity providers     (Facebook, Google, etc.) from the login screens.</p> <p> Background Color           This is the background color for external-connection buttons.          By default, WSO2 Identity Server uses a light gray shade as the font color for     external-connection buttons.        Font Color           This is the font color of the text inside the external-connection buttons.          By default, WSO2 Identity Server uses a dark gray shade as the font color for     external-connection buttons.        Border Radius           This is the border radius of the external-connection buttons.          By default, WSO2 Identity Server uses four pixels as the border-radius for     external-connection buttons.        </p> Inputs<p>These preferences change the look and feel of input fields, checkboxes, etc. on the login screens.</p> <p> Background Color           This is the background color of the inputs on the login screens.          By default, WSO2 Identity Server uses white as the background color for the inputs.        Font Color           This is the font color of the inputs on the login screens.          By default, the Primary Text Color from the Color Palette  will be used until     a value for this is defined.        Border Color           This is the border color of the inputs on the login screens.          By default, the Default Outline Color from the Color Palette will be used     until a value for this is defined.        Border Width           This is the border radius of the inputs on the login screens.          By default, WSO2 Identity Server uses <code>four</code> pixels as the border-radius for the     login box.        Border Radius           This is the border radius of the login box.          By default, WSO2 Identity Server uses 12 pixels as the border-radius for the login box.        </p> Input Labels <p> Font Color           This is the font color of the input labels on the login screens.          By default, the page font color will be used until a value for this is defined.        </p> Login Page<p>These are the specific design preferences you can update specifically for login, sign-up, account     recovery flows. If these are not set, the values will be inferred from the color palette.</p> <p> Background Color           This is the background color that appears on the login, sign-up, account recovery screens.          By default, the Main Background Color from the Color Palette will be used     until a value for this is defined.        Font Color           The font color of the text that appears on the login, sign-up, account recovery screens.          By default, the Primary Text Color from the Color Palette will be used until     a value for this is defined.        </p> Login Box<p>These preferences change how the login box appears on the screens.</p> <p> Background Color           This is the background color of the login box.          By default, the Main Surface Background Color from the Color Palette will be     used until a value for this is defined.        Font Color           This is the font color of the text inside the login box.          By default, the Primary Text Color from the Color Palette will be used until     a value for this is defined.        Border Color           This is the border color of the login box.          By default, the Default Outline Color from the Color Palette will be used     until a value for this is defined.        Border Width           This is the border width of the login box.          By default, WSO2 Identity Server uses one pixel as the border width for the login box.        Border Radius           This is the border-radius of the login box.          By default, WSO2 Identity Server uses <code>12</code> pixels as the border-radius for the login box.        </p>"},{"location":"guides/branding/configure-ui-branding/#advanced-preferences","title":"Advanced preferences","text":"<p>Listed below are some advanced branding preferences you can apply to the user registration and login interfaces.</p> Privacy Policy           This is a link to a statement or a legal document that states how your organization collects, handles, and processes the data of your users and visitors.          Once you configure a valid URL, WSO2 Identity Server will show this on the footer of the login screens.        Terms of Service           This is a link to an agreement that your users must agree to and abide by in order to use your organization's applications or other services.          Once you configure a valid URL, WSO2 Identity Server will show this on the footer of the login screens.        Cookie Policy           This is a link to a document or a webpage with detailed information on all cookies used by your applications and the purpose of each of them."},{"location":"guides/branding/customize-email-templates/","title":"Customize email templates","text":"<p>The following topics explain how you can customize email notifications that are sent to users of your WSO2 Identity Server organization.</p>"},{"location":"guides/branding/customize-email-templates/#customize-email-branding","title":"Customize email branding","text":"<p>Once you publish your branding preferences on WSO2 Identity Server, the branding preferences are automatically applied to emails sent to the users of your organization.</p> <p>The branding variables that affect the email templates are as follows:</p> <p>Email branding for B2B applications</p> <p>If you have suborganizations configured, note that the email branding you configure for your primary organization also applies to your suborganizations.</p> <p></p> Template variable Branding preference 1 Organization Logo Design &gt; Theme Preferences &gt; Images &gt; Logo URL Logo alternative text Design &gt; Theme Preferences &gt; Images &gt; Logo Alt Text 2 Primary color Design &gt; Theme Preferences &gt; Color Palette &gt; Primary Color 3 Email background color Design &gt; Theme Preferences &gt; Color Palette &gt; Body Background &gt; Main Background Color 4 Email body color Design &gt; Theme Preferences &gt; Color Palette &gt; Surface Background &gt; Main Surface Background Color 5 Email font Design &gt; Theme Preferences &gt; Font &gt; Font Family 6 Email body font color Design &gt; Theme Preferences &gt; Color Palette &gt; Text Colors &gt; Primary Text Color 7 Email button font color Design &gt; Theme Preferences &gt; Buttons &gt; Primary Button &gt; Font Color 8 Copyright text General &gt; Copyright Text 9 Support email General &gt; Contact Email"},{"location":"guides/branding/customize-email-templates/#customize-email-content","title":"Customize email content","text":"<p>You can tailor the subject, body, and footer of email notifications to your preferences by following the steps below.</p> <p>Note</p> <p>This feature is only available for the most frequently used email templates. You can customize all available email templates using the Email Templates API.</p> <ol> <li>On the WSO2 Identity Server, go to Customization &gt; Email Templates.</li> <li> <p>Select the email template and the relevant locale that you wish to modify.</p> <p>Replicate content</p> <p>If you have not yet configured an email template for the selected locale, you have the option to replicate content from the previous locale's template and use it to modify the email template for the selected locale.</p> <p></p> </li> <li> <p>Make your modifications in the Content tab and use the Preview tab for a real-time preview.</p> </li> <li> <p>Click Save to publish your changes.</p> </li> </ol> <p>Apply changes to user profiles</p> <p>To apply these changes to each user's profile in your organization:</p> <ol> <li> <p>Display the <code>local</code> attribute on the user's profile. Learn more on updating user attributes.</p> </li> <li> <p>Update the <code>local</code> attribute value with the required locale code.</p> <ul> <li> <p>If the admin onboards the user to the organization, the admin is responsible for updating the locale code.</p> </li> <li> <p>If the user self-registers, they should update the locale code by themselves at the time of registration.</p> </li> </ul> </li> </ol> <p>Alternatively, you can customize the content of email templates using the Email Templates API provided by WSO2 Identity Server.</p>"},{"location":"guides/organization-management/","title":"Organization management","text":"<p>When you create an account in WSO2 Identity Server, you define your first organization, which functions as the super organization or tenant in your WSO2 Identity Server subscription. From thereon, you (the account owner) or other delegated administrators can create multiple organizations via the WSO2 Identity Server Console and switch between them.</p> <p>Listed below are the main characteristics of an organization. - An organization contains applications, external identity providers, and user identities belonging to a single domain. - Users or applications created in one organization cannot access the resources of another organization unless they are onboarded to that organization. - The administrator who creates the organization is the owner of the organization.</p> <p>The organizations you create in WSO2 Identity Server can be structured according to your business needs as follows:</p> <p>B2C organizations</p> <p>In a B2C scenario,</p> <ul> <li> <p>you will create an organization to represent your business.</p> </li> <li> <p>the organization manages the identity and access management requirements of your B2C applications and the user identities of your direct consumers.</p> </li> <li> <p>You may create separate organizations to replicate the environments of the application development lifecycle.</p> </li> </ul> <p>B2B organizations</p> <p>In a B2B scenario,</p> <ul> <li> <p>you will create an organization to represent your business, which functions as your primary organization.</p> </li> <li> <p>you will create subordinate organizations to onboard other business organizations (partners, suppliers, customer organizations, etc.) to your platform.</p> </li> <li> <p>administrators of each subordinate organization manage the respective organization's user base and define login experiences for applications according to the organization's requirements.</p> </li> </ul>"},{"location":"guides/organization-management/manage-environments/","title":"Manage environments","text":"<p>You can manage the development lifecycle of your applications by setting up the required environments as separate organizations.</p> <p>For example, you may require a development environment and a preprod environment in addition to your organization's production environment. These environments will be used during the development and testing phases before you go into production.</p>"},{"location":"guides/organization-management/manage-environments/#define-your-environments","title":"Define your environments","text":"<p>Follow the steps below to create a separate organization to represent each environment you require.</p> <ol> <li> <p>Go to the organization list and click New.</p> </li> <li> <p>Enter a name and description for your organization and click Create.</p> <p>Use unique organization names to identify the environments. For example, if your business organization is Bifrost, you may use the following convention:</p> <p> Business environment Bifrost Preprod environment BifrostPreProd Dev environment BifrostDev </p> </li> <li> <p>Onboard the required users to each environment.</p> <ul> <li> <p>As the owner, you can onboard the required administrators to each environment. Learn more about onboarding administrators.</p> <p>Note</p> <p>Note that some administrators may be needed in multiple environments. They can easily switch between the environments on the WSO2 Identity Server Console.</p> </li> <li> <p>Business users can be onboarded to each environment depending on the requirements. Learn more about onboarding users.</p> <p>Note</p> <p>Note that your actual business users (consumers) should only be onboarded to the business environment.</p> </li> </ul> </li> </ol>"},{"location":"guides/organization-management/manage-environments/#move-artifacts-between-environments","title":"Move artifacts between environments","text":"<p>The applications and other artifacts you develop should be migrated between environments after each phase of the development lifecycle until they are live in the business environment.</p> <p></p> <p>For example, once applications and artifacts are developed and tested in the BifrostDev environment, they need to be migrated to the BifrostPreprod environment for further testing and then moved to the live business environment.</p> <p>You can do this manually by recreating the artifacts in the higher environments.</p> <p>Important</p> <p>Some configurations, such as client IDs, secrets, URLs, and connection configurations, will be specific to the business environment, while other functional attributes, such as adaptive authentication scripts, remain the same in all environments.</p>"},{"location":"guides/organization-management/manage-organizations/","title":"Manage organizations","text":"<p>If you have a B2C (Business-to-Consumer) platform offering services to direct consumers, you can use an WSO2 Identity Server organization to manage the identities and access requirements of your users. Note that your first organization on WSO2 Identity Server is created when you sign up to WSO2 Identity Server.</p> <p>Note</p> <p>If you have a B2B platform, this will also be the primary organization of your platform. Your primary organization will work with other businesses to make your applications available to their users. Such businesses should be defined as sub organizations in your primary organization.</p> <p>The following guides explain how you can create and manage these organizations in WSO2 Identity Server.</p>"},{"location":"guides/organization-management/manage-organizations/#create-a-new-organization","title":"Create a new organization","text":"<p>To create a new organization in WSO2 Identity Server:</p> <ol> <li> <p>Select the organization list and click New Organization.</p> <p></p> </li> <li> <p>Enter a name for your organization and click Create.     </p> </li> </ol> <p>The new organization is now available in the organization list.</p> <p>Note</p> <p>If you a have B2B platform, you can now onboard your sub organizations. See the instructions on setting up sub organizations and build your B2B organization structure.</p>"},{"location":"guides/organization-management/manage-organizations/#switch-between-organizations","title":"Switch between organizations","text":"<p>When you have multiple organizations, you can switch between them on the WSO2 Identity Server Console by selecting the required organization from the list.</p> <p>The list of primary organizations will show all the organizations you own or to which you have administrator access.</p> <p></p>"},{"location":"guides/organization-management/manage-organizations/#obtain-the-organization-id","title":"Obtain the organization ID","text":"<p>You may need to use the organization ID to execute cURLs when managing organizations or sub organizations using APIs.</p> <p>To obtain the organization ID of your root organization, expand the organization list and copy the provided organization ID.</p> <p></p>"},{"location":"guides/organization-management/manage-organizations/#delete-organizations","title":"Delete organizations","text":"<p>You cannot remove organziations using the WSO2 Identity Server Console. If you have such a requirement, contact the WSO2 Identity Server team at asgardeo-help@wso2.com. If you are a B2B platform and you want to remove a sub organization in your primary organization, see the instructions on deleting sub organizations.</p> <p>Before you begin</p> <p>Note the following before you proceed to delete a primary organization: </p> <ul> <li>A deleted organization cannot be restored. Proceed with caution.</li> <li>Only an organization owner can request a primary organization to be deleted.</li> <li>Be sure to use the same email address of your owner user account to send the request.</li> <li>If you remove all the primary organizations you own in WSO2 Identity Server, your user account will also be deleted from WSO2 Identity Server. </li> </ul> <p>To remove any of your primary organizations, send an email to <code>asgardeo-help@wso2.com</code> with the required details listed below. This information will help the WSO2 Identity Server team confirm the authenticity of your request. - The name of the organization you want to delete. - The first name, last name, and email address of your (owner's) WSO2 Identity Server user account.</p>"},{"location":"guides/organization-management/manage-organizations/#whats-next","title":"What's next?","text":"<ul> <li>Learn about managing administrators and users of an organization in the user management section.</li> <li>Learn about managing the environments of your SDLC.</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/","title":"Manage B2B organizations","text":"<p>If you have a business that offers Business-to-Business (B2B) solutions, you need to define the structure of your organization in WSO2 Identity Server so as to represent all your partner/supplier organizations. You can then share your applications and services with your partner/supplier organizations and allow them to manage their own identity and access management requirements.</p> <ul> <li> <p>All partner/supplier organizations of your business should be set up as sub organizations of your primary organization in WSO2 Identity Server.</p> <p>Note</p> <p>See Manage sub organizations for instructions.</p> </li> <li> <p>Once the sub organizations are set up, you should onboard administrators to them. These Administrators can then use a separate administration portal created using WSO2 Identity Server's B2B APIs to manage their respective sub organizations.</p> <p>Note</p> <p>See Manage administration for instructions.</p> </li> <li> <p>The primary business organization needs to share applications with its sub organizations so that the users managed by the sub organizations can log in and use them.</p> <p>Note</p> <p>See Share applications for instructions.</p> </li> <li> <p>Try out a complete B2B use case.</p> <p>Note</p> <p>See  Try a B2B use case for instructions.</p> </li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/","title":"API authorization for sub organizations","text":"<p>WSO2 Identity Server allows organizations to authorize user access to an application's API resources based on the API permissions, application roles, and groups assigned to the users. See API authorization for more information.</p> <p>API resources are created and authorized for applications on the root organization. If the application consuming the API resources is shared with the sub organization, all application-specific configurations of API resources are inherited by the sub organization.</p> <p></p>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#prerequisites","title":"Prerequisites","text":"<p>You need to configure your API resources on the root organization</p> <ol> <li>Register an API resource</li> <li>Authorize the API resource to an app</li> <li>Create application roles</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-sub-organization-user-groups-to-application-roles","title":"Assign sub organization user groups to application roles","text":"<p>Application roles of a sub organization</p> <p>The shared application will inherit the permission to role assignments from the application of the root organization.</p> <p></p> <p>Role-to-group assigning should be done separately for the sub organization, as the sub organization does not inherit the groups from the root organization.</p> <p>Application roles are application-specific and inherited from the root organization's application.</p> <p>You do not have permission to create new application roles, but you can assign these application roles to your sub organization groups.</p> <p>sub organizations maintain the following three types of groups, and you can assign your application roles to any of these groups. - Groups - A collection of sub organization users. - External Groups - These groups are federated from connections on the sub organization. For example, groups federated from the Google connection. - Invited User Groups - These are the user groups invited from the root organization to the sub organization.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-user-groups-to-application-roles","title":"Assign user groups to application roles","text":"<p>To assign application roles to user groups of the sub organization:</p> <ol> <li>On the WSO2 Identity Server Console, switch to the sub organization.</li> <li>Go to User Management &gt; Roles &gt; Application Roles and click Configure.</li> <li>Expand the shared application and click <code>+</code> on the application role you wish to assign to a group.</li> <li>Go to Groups and click + Assign Groups.</li> <li>Select the group which should be assigned to the selected application role,</li> <li>Click Assign to complete the role to group assigning.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-external-groups-to-application-roles","title":"Assign external groups to application roles","text":"<p>To assign application roles to External Groups:</p> <p>Before you begin</p> <p>To get started,</p> <ul> <li>You should register, configure, and create groups for a connection in your sub organization.</li> <li>You should add this connection to the sign-in flow of the application to which the application roles belong.</li> </ul> <ol> <li>On the WSO2 Identity Server Console, switch to the sub organization.</li> <li>Go to User Management &gt; Roles &gt; Application Roles and click Configure.</li> <li>Expand the fragmented application and click <code>+</code> on the application role you wish to assign to a group.</li> <li>Go to the External groups tab and expand the connection from which you select groups.</li> <li>Select the group which should be assigned to the selected application role.</li> <li>Click Assign Group to complete the role to group assigning.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-invited-user-groups-to-application-roles","title":"Assign invited user groups to application roles","text":"<p>WSO2 Identity Server provides support for inviting users from the parent organization to manage sub organization operations. Currently, this invitation flow can be implemented using API calls.</p> <p>To invite a root organization's user group and assign it to a role:</p> <ol> <li> <p>Create a group in the root organization and assign the users that should be invited.</p> </li> <li> <p>Get the required access tokens to call the API.</p> </li> <li> <p>Use the access token and the sub organization ID obtained after executing step 2 and execute the following cURL:     <pre><code>curl --location --request PATCH 'https://api.authz-dv.cloudservices.wso2.com/o/&lt;sub-org-id&gt;/applications/&lt;shared-app-id&gt;/roles/&lt;role-name&gt;/cross-org-group-mapping' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer &lt;access-token&gt;' \\\n--data '{\n    \"added_groups\": [\n        {\n            \"name\": \"&lt;userstore&gt;/&lt;group-name-in-root-org&gt;\",\n            \"organization\": \"&lt;root-org-id&gt;\"\n        }\n    ],\n    \"removed_groups\": []\n}'\n</code></pre>     Replace the following variables in the above request.</p> <p> Request Parameter Description <code>sub-org-id</code> The organization ID of the sub organization you are inviting the user group to. <code>shared-app-id</code> The application ID of the shared application in the sub organization. <code>role-name</code> The role name of the sub organization to which you wish to assign the invited user group. <code>access-token</code> The access token obtained for the sub organization. <code>userstore</code> The user store to which the user group belongs. The primary user store of WSO2 Identity Server is <code>DEFAULT</code>. <code>group-name-in-root-org</code> The name of the user group you wish to invite to the sub organization. <code>root-org-id</code> The organization ID of the root organization. </p> </li> </ol> <p>Once the above cURL is executed successfully, the application role of the sub organization will be assigned to the invited user group from the sub organization.</p> <p>To view the group-to-role assignment:</p> <ol> <li>On the WSO2 Identity Server Console, switch to the sub organization.</li> <li>Go to User Management &gt; Roles &gt; Application Roles and click Configure.</li> <li>Expand the shared application and click <code>+</code> on the application role to which you assigned the invited user group.</li> <li>Go to the Invited User Groups tab. You will now see the invited user group assigned to the application role.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below to try out the RBAC flow:</p> <p>Note</p> <p>Note that we are using WSO2 Identity Server's B2B Guardio insurance application for this scenario.</p> <p>To request scopes for the user:</p> <ol> <li> <p>Add the new scopes to the <code>APIScope</code> parameter of the <code>config.js</code> file of the sample application. You need to request these new scopes in addition to the OIDC scopes of your application.</p> <p>To get the scopes:</p> <ol> <li>On the WSO2 Identity Server Console, switch to the root organization.</li> <li>Go to Applications and select your application.</li> <li> <p>Copy the scopes listed at the end of the API Authorization section</p> <p></p> </li> </ol> <p>Tip<p>When you add scopes to the configuration file, add them as comma-separated values.</p> </p> </li> <li> <p>Access the application URL.</p> </li> <li> <p>Try to log in as a user with a group and permission to access the API resource.</p> <p>Upon successful login, you will see the permission/scopes allowed for the user on the user consent page.</p> </li> <li> <p>Click Allow. You will now be redirected to the application.     You will be able to see the assigned permissions on the <code>allowedScopes</code> parameter of the authentication response.</p> </li> </ol> <p>If you are switching organizations</p> <p>If the user switches the organization to another sub organization, the scopes will be updated according to the roles assigned to the user in the switched organization.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/","title":"Administration of sub organizations","text":"<p>The following guides explain how to manage the administration tasks of sub organizations.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#implement-an-administration-portal","title":"Implement an administration portal","text":"<p>Sub organization administrators do not have access to the WSO2 Identity Server Console. Therefore, you should expose administrative functions to administrators through a separate administration portal in your application.</p> <p>The administration portal of your application should use WSO2 Identity Server's sub organization APIs to perform administrative operations.</p> <p>Note</p> <p>To access management APIs in WSO2 Identity Server, you need to register your application as a management application. Learn how to register a management application in WSO2 Identity Server.</p> <p>The following are some of the features that your administration portal should contain.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#manage-users","title":"Manage users","text":"<p>The sub organization administrator should be able to onboard new users (administrators and consumers) to the sub organization. The identities of these users are stored in the default WSO2 Identity Server user store.</p> <p>The identity and access management requirements of these users will be managed by WSO2 Identity Server.</p> <p>The administration portal in your application should use the User management - SCIM2 API to create user operations.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#onboard-identity-providers","title":"Onboard identity providers","text":"<p>A sub organization may have an external identity provider (IdP) to manage the user identities of its employees and customers. Such an IdP may be already being used for the following purposes:</p> <ul> <li>Authenticating user logins to various applications.</li> <li>Branding the login interfaces to suit the organization.</li> <li>Enabling custom login experiences to different user groups.</li> </ul> <p>The sub organization administrator can onboard such corporate IdPs to the sub organization in WSO2 Identity Server as a connection. These IdPs can then be set as a login option in your application.</p> <p>The administration portal in your application should use the identity provider API to manage external IdPs.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#define-application-login-flows","title":"Define application login flows","text":"<p>Sub organization administrators should be able to customize the login flows of the application to suit business needs.</p> <p>For example, the administrator should be able to define the number of authentication steps that the application login flow needs and what login options should be available for each step.</p> <p>The administration portal in your application should use the application management API to manage application login flows.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#extend-administration-tasks","title":"Extend administration tasks","text":"<p>Explore the sub organization APIs of WSO2 Identity Server that are available for you to enable all the required administration capabilities from your administration portal.</p> <p>Note</p> <p>See the instructions on enabling organization login to try out a B2B organization login use case.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/","title":"Set up sub organizations","text":"<p>If you are a business having a B2B (Business-to-Business) platform, you can create sub organizations to manage other businesses that are partnered with you.</p> <p>Note</p> <p>Explore how you can structure WSO2 Identity Server organizations to fit your business model.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#prerequisites","title":"Prerequisites","text":"<p>To create sub organizations:</p> <ul> <li>You need to first have your primary business organization defined.</li> <li>You need to be an administrator in the primary business organization.</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#create-a-sub-organization","title":"Create a sub organization","text":"<p>Follow the steps given below to create a sub organization.</p> <ol> <li>First, select your primary organization from the list.</li> <li>On the WSO2 Identity Server Console, go to Sub Organizations and click Add Sub Organization.</li> <li> <p>In the Add Sub Organization dialog box that opens, enter a name and description for your organization.</p> <p></p> </li> <li> <p>Click Register to add the new sub organization. You will now see your sub organization listed as below.</p> <p></p> </li> <li> <p>Click the Switch icon next to the sub organization to go to the sub organization console.</p> </li> </ol> <p>Note</p> <p>As the creator of the sub organization, you will be assigned to the Administrator role of the sub organization by default, which grants you the following privileges from the console.</p> <ul> <li>Update / Delete users.</li> <li>Create a group and assign users.</li> <li>Create identity providers.</li> <li>Update the login options and general information of the applications shared from the primary organization. Learn more about shared applications.</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#add-sub-organization-attributes","title":"Add sub organization attributes","text":"<p>WSO2 Identity Server lets you maintain additional data about the sub organization.</p> <p>For example, you can add information about the organization's location, country, number of employees, etc.</p> <p>To add additional information about your sub organizations:</p> <ol> <li>Switch to the primary organization and go to Sub Organizations.</li> <li>Select the sub organization to which you wish to add additional attributes.</li> <li>Go to the Attributes tab and add attributes by entering a Name and Value.</li> <li> <p>Click + to add the new organization attribute.</p> <p></p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#switch-between-sub-organizations","title":"Switch between sub organizations","text":"<p>When you have multiple sub organizations for your primary business organization, you can switch between them on the WSO2 Identity Server Console by selecting the required sub organization from the list as shown below.</p> <p></p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#create-a-sub-organization-for-your-sub-organization","title":"Create a sub organization for your sub organization","text":"<p>Warning</p> <p>You need a paid WSO2 Identity Server subscription to use this feature. If you don't already have one, view the available subscription plans and contact the WSO2 Identity Server sales team.</p> <p>Sub organization admins can create new sub organization for their organizations.</p> <p>To create a new sub organization for your sub organization:</p> <ol> <li>On the WSO2 Identity Server Console, switch to your suborganization.</li> <li>Go to Sub Organizations and click + Add Sub Organization.</li> <li>In the Add Sub Organization dialog box that opens, enter a unique name and description for your sub organization.</li> <li>Click Register to add the new sub organization.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#branding-for-sub-organizations","title":"Branding for sub organizations","text":"<p>Sub organizations will inherit the UI branding, email branding, and custom domain branding configurations from the root organization.</p> <p>Note</p> <p>See the instructions on:</p> <ul> <li>how to configure UI branding for organizations.</li> <li>how to configure custom domains for organizations.</li> <li>how to customize email branding for organizations.</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#delete-sub-organizations","title":"Delete sub organizations","text":"<p>You can delete any of the sub organizations of your primary organization as follows:</p> <ol> <li>Switch to your primary organization on the WSO2 Identity Server Console.</li> <li>Go to Sub Organizations to view the list of sub organizations.</li> <li> <p>Click the delete icon next to the sub organization you want to delete.</p> <p></p> </li> <li> <p>Select the checkbox and confirm your action.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/","title":"Onboard sub organization administrators","text":"<p>You can onboard sub organization administrators using any of the following approaches:</p> <ul> <li>Sales-led approach</li> <li>Self-service approach</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#sales-led-approach","title":"Sales-led approach","text":"<p>In this approach, the admin of the root organization creates the sub organization and adds a user as an admin of the created sub organization. This method is typically used when the root organization should regulate the creation of sub-organizations, and the administrator's supervision is required to ensure proper setup.</p> <p>Follow the steps below to onboard sub organization administrators using the WSO2 Identity Server Console.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#prerequisites","title":"Prerequisites","text":"<p>You need to create a sub organization and switch to the created sub organization.</p> <p>Note</p> <p>Only sub organization creators can onboard administrators for their sub organizations using the WSO2 Identity Server Console.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#step-1-create-a-user","title":"Step 1: Create a user","text":"<p>To create a new sub organization user:</p> <ol> <li> <p>Switch to the sub organization on the WSO2 Identity Server Console.</p> </li> <li> <p>Go to User Management &gt; Users and click Add User.</p> </li> <li> <p>Enter the following details:      Email (Username) A unique email address to identify the user. First Name First name of the user. You can add/change this later. Last Name Last name of the user. You can add/change this later. </p> </li> <li> <p>You can either request the user to set the password or set one on the user's behalf.</p> <ul> <li> <p>Invite user to set their own password: If this option is selected, an email with a confirmation link will be sent to the provided email address for the user to set their own password.</p> </li> <li> <p>Set a temporary password for the user: If this option is selected, the administrator can set a temporary password for the user.</p> </li> </ul> </li> <li> <p>Click Finish to add the new user.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#step-2-assign-the-user-to-the-administrator-role","title":"Step 2: Assign the user to the Administrator role","text":"<p>The Administrator role is available in sub organizations by default. To assign the created user to this role:</p> <ol> <li> <p>Switch to the sub organization on the WSO2 Identity Server Console.</p> </li> <li> <p>Go to User Management &gt; Roles and click Configure in the Organization Roles section.</p> </li> <li> <p>Select the Administrator role and go to the Users tab.</p> </li> <li> <p>Click the edit button to open the Manage Users dialog box.</p> </li> <li> <p>Assign the user to the role by selecting the user and moving to the box on the right.</p> <p>Note</p> <p>See details of all the available administrator permissions you are granting the sub organization administrator.</p> <p></p> </li> <li> <p>Click Save.</p> </li> </ol> <p>You have now onboarded an administrator to the sub organization. From thereon, the sub organization administrator can manage that organization's identity and access management requirements.</p> <p>Note</p> <p>Note that sub organization administrators do not have access to the WSO2 Identity Server Console as they are not direct users of WSO2 Identity Server. A separate administration portal is required to carry out these functions. Learn more about implementing an administration portal.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#self-service-approach","title":"Self-service approach","text":"<p>In this approach, sub organization users can self-subscribe to the B2B application and easily create their own sub-organizations. This method empowers sub organization users to take control of the onboarding process, making it quick and convenient.</p> <p>Using the self-service approach, the sub organization users can maintain their administrators either in the sub organization itself or the root organization. The selection of the creation place depends on the organization's business requirements.</p> <ul> <li>Maintain admins in the sub organization:     You can create the user in the sub organization if the user needs to be isolated into one organization.</li> <li>Maintain admins in the root organization:     You can create the user in the root organization if the same user can manage multiple organizations.</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#initial-setup-get-access-tokens","title":"Initial setup: Get access tokens","text":"<p>Before creating admins using the APIs, you need to obtain the required access tokens and enable self-service. Follow the steps below to set up the initial requirements to create sub organization admins.</p> <ol> <li> <p>Get an access token from your root organization.</p> <p>Required scopes</p> <p>Include the following scopes when requesting for the access token:</p> <p><code>openid</code> <code>internal_application_mgt_create</code> <code>internal_application_mgt_view</code> <code>internal_organization_view</code> <code>internal_organization_update</code> <code>internal_governance_view</code> <code>internal_governance_update</code> <code>internal_email_mgt_view</code> <code>internal_email_mgt_update`` internal_email_mgt_delete</code> <code>internal_email_mgt_create</code> <code>internal_userstore_view</code> <code>internal_userstore_update</code> <code>internal_userstore_delete</code></p> </li> <li> <p>Enable self-service for the root organization.</p> <pre><code>curl --location --request PATCH \n'https://api.asgardeo.io/o/{root-org-id}/api/server/v1/self-service/preferences' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer &lt;access-token-obtained-from-step-1&gt;' \\\n-d '{\n    \"operation\": \"UPDATE\",\n    \"properties\": [\n        {\n            \"name\": \"Organization.SelfService.Enable\",\n            \"value\": \"true\"\n        }\n    ]\n}'\n</code></pre> <p>The <code>{root-org-id}</code> is the organization ID of the root organization. To obtain the organization ID of your root organization, copy the provided organization ID from the organization drop-down. Learn more.</p> <p>Note</p> <p>Enabling self-service will create the following in the root organization:</p> <ul> <li>A system user named <code>B2B-SS-System-User</code>.</li> <li>A system role named <code>B2B-SS-System-Role</code>.</li> <li>A system application named <code>B2B-Self-Service-Mgt-Application</code>. This application has     limited permissions to facilitate subsequent API calls.</li> </ul> <p>You will be able to see these entities on the WSO2 Identity Server console.</p> </li> <li> <p>Get an access token for the <code>B2B-Self-Service-Mgt-Application</code> using the following cURL.</p> <p>Note</p> <p>Take note of the system application's Client ID and Client Secret created on the WSO2 Identity Server console, as it will be required in the next steps.</p> <pre><code>curl -X POST \\\nhttps://api.asgardeo.io/t/&lt;root_org_name&gt;/oauth2/token \\\n-u  '&lt;client_id&gt;:&lt;client_secret&gt;' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-d 'grant_type=client_credentials&amp;scope=openid internal_identity_mgt_create internal_identity_mgt_delete internal_identity_mgt_update internal_identity_mgt_view internal_organization_admin internal_organization_create internal_organization_view internal_user_mgt_create internal_user_mgt_list internal_user_mgt_view'\n</code></pre> <p>The access token expiration time is set to <code>7200</code> seconds by default. If you wish to modify this duration, you can do so via the console. Go to the <code>B2B-Self-Service-Mgt-Application application</code>'s protocol section and update the User access token expiry time.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#maintain-admins-in-the-sub-organization","title":"Maintain admins in the sub organization","text":"<p>This approach is suitable when you want sub organizations to govern themselves with minimal interaction from the root organization. Additionally, if you have a B2C user, this approach will help you to separate them from B2B users easily.</p> <p>Warning</p> <p>If a user wants to create multiple organizations, they will need to register a new account for each organization. Thus they will have separate identities in each organization.</p> <p>To create and maintain admins in the sub organization:</p> <ol> <li> <p>Use the following cURL to check if the name of sub organization you wish to create is already available.     <pre><code>curl --location 'https://api.asgardeo.io/o/{root-org-id}/api/server/v1/organizations/check-name' \\\n--header 'Authorization: Bearer {access token obtained for the B2B-Self-Service-Mgt-Application }' \n--header 'Content-Type: application/json' \\\n--data '{\n\"name\": \"{sub-organization name}\"\n}'\n</code></pre></p> <p>Note</p> <p>If the sub organization name is available for use, the response will be <code>\"available\": true</code>, else it will be <code>\"available\": false</code>.</p> </li> <li> <p>If the required organization name is available for use, use the following cURL to create the sub organization.</p> <pre><code>curl --location 'https://api.asgardeo.io/o/{root-org-id}/api/server/v1/organizations' \\\n--header 'Authorization: Bearer {access token obtained for the B2B-Self-Service-Mgt-Application}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"{sub-organization name}\",\n    \"parentId\": \"{root-org-id}\"\n}'\n</code></pre> <p>Note</p> <p>Take note of the <code>id</code> parameter in the response. This is the organization-id of the newly created sub organization and you will need it in the following steps.</p> </li> <li> <p>Get an access token for the created sub organization by exchanging the access token obtained for the <code>B2B-Self-Service-Mgt-Application</code>. Use credentials of the <code>B2B-Self-Service-Mgt-Application</code> to execute the cURL.</p> </li> <li> <p>Create a user in the sub organization using the following cURL.</p> <pre><code>curl --location 'https://api.asgardeo.io/o/{organization-id-obtained-in-step-2}/scim2/Users' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {token obtained in step 3}' \\\n--data-raw '{\n    \"emails\": [\n        {\n            \"primary\": true,\n            \"value\": \"{customer-email}\"\n        }\n    ],\n    \"name\": {\n        \"familyName\": \"{customer-family-name}\",\n        \"givenName\": \"{customer-given-name}\"\n    },\n    \"password\": \"{customer-password}\",\n    \"userName\": \"{customer-username}\"\n}'\n</code></pre> <p>Note</p> <p>Take note of the <code>user-id</code> returned in the response of the above cURL.</p> </li> <li> <p>Use the following cURL to obtain the <code>id</code> of the Administrator role.</p> <pre><code>curl --location 'https://api.asgardeo.io/o/{sub-org-id}/api/server/v1/organizations/{sub-org-id}/roles?filter=name%20eq%20Administrator' ' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer {access-token-obtained-for-the-sub-organization}' \\\n</code></pre> </li> <li> <p>Create a user and assign the user to the administrator role by using the following cURL.</p> <pre><code>curl --location --request PATCH 'https://api.asgardeo.io/o/{sub-org-id}/api/server/v1/organizations/{sub-org-id}/roles/{administrator-role-id}' \\\n--header 'Authorization: Bearer {Sub-org access token}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"operations\": [\n        {\n            \"op\": \"ADD\",\n            \"path\": \"users\",\n            \"value\": [\n                \"{user-id obtained from step 4}\"\n            ]\n        }\n    ]\n}'\n</code></pre> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/onboard-sub-org-admins/#maintain-admins-in-the-root-organization","title":"Maintain admins in the root organization","text":"<p>This approach is particularly suitable when a sub organization user prefers to maintain a single identity linked to multiple sub-organizations. Under this approach, sub organization users are treated as business users (B2C users) within the organization. It grants sub organization users the capability to access various B2C applications, such as billing portals, within the Business organization.</p> <p>Warning</p> <p>Separating B2C and B2B users will be more complicated.</p> <p>To create and maintain admins in the root organization:</p> <ol> <li> <p>Create a user in the root organization using WSO2 Identity Server's SCIM APIs.     <pre><code>curl --location 'https://api.asgardeo.io/o/{root-org-id}/scim2/Users' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {access token obtained for the B2B-Self-Service-Mgt-Application}' \\\n--data-raw '{\n    \"emails\": [\n        {\n            \"primary\": true,\n            \"value\": \"{customer-email}\"\n        }\n    ],\n    \"name\": {\n        \"familyName\": \"{customer-family-name}\",\n        \"givenName\": \"{customer-given-name}\"\n    },\n    \"password\": \"{customer-password}\",\n    \"userName\": \"{customer-username}\"\n}'\n</code></pre></p> <p>Note</p> <p>Take note of the user-id received in the response of the above cURL.</p> </li> <li> <p>Use the following cURL to check if the name of sub organization you wish to create is already available.</p> <pre><code>curl --location 'https://api.asgardeo.io/o/{root-org-id}/api/server/v1/organizations/check-name' \\\n--header 'Authorization: Bearer {access token obtained for the B2B-Self-Service-Mgt-Application }' \n--header 'Content-Type: application/json' \\\n--data '{\n\"name\": \"{sub-organization-name}\"\n}'\n</code></pre> <p>Note</p> <p>If the sub organization name is available for use, the response will be <code>\"available\": true</code>, else it will be <code>\"available\": false</code>.</p> </li> <li> <p>If the required organization name is available for use, use the following cURL to create the sub organization and assign the user created in step 1 as the organization's admin.     <pre><code>curl --location 'https://api.asgardeo.io/o/{root-org-id}/api/server/v1/organizations' \\\n--header 'Authorization: Bearer {access token obtained for the B2B-Self-Service-Mgt-Application  }' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"name\": \"{sub-organization name}\",\n    \"parentId\": \"{root-org-id}\",\n    \"attributes\": [\n        {\n            \"key\": \"creator.id\",\n            \"value\": \"{user-id obtained from step 1}\"\n        },\n        {\n            \"key\": \"creator.username\",\n            \"value\": {username of the user created in step 1}\"\n        }\n    ]\n}'\n</code></pre></p> </li> </ol> <p>Now, you have created a new sub organization and assigned a user from the root organization as the admin of it. This admin will be maintained in the root organization.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/share-applications/","title":"Share applications with sub organizations","text":"<p>Applications in the primary business organization will become available to sub organizations when you share them. Once an application is shared with a sub organization, its users can log in to the application using Organization Login.</p> <p>Follow the steps below to share your primary applications with sub organizations.</p> <ol> <li>Switch to your primary organization on the WSO2 Identity Server Console.</li> <li>Go to Applications and select the application that you want to share with your sub organizations.</li> <li> <p>Go to the Shared Access tab and select Share with only selected sub organizations.</p> <p>Note</p> <p>Select Share with all sub organizations if you want to share your application with all existing sub organizations and any new sub organizations you may create in the future.</p> </li> <li> <p>Select the sub organizations you wish to share your application with.</p> <p></p> </li> <li> <p>Click Update to save the configurations.</p> </li> <li> <p>Go to the Protocol tab of the application, be sure that the following grant types are allowed, and click Update.</p> <p>Note</p> <p>Note that the <code>Organization Switch</code> grant will only be visible after you share the application with sub organizations.</p> <ul> <li>Client Credential</li> <li>Code</li> <li>Organization Switch</li> </ul> </li> </ol> <p>Note the following:</p> <ul> <li> <p>Go to the Sign-in Method tab of the application and ensure that the Organization Login authenticator is added.</p> <p>Note</p> <p>This adds the Sign in with Organization Login option to the application login screen so that sub organization users can log in using their credentials.</p> <p></p> </li> <li> <p>Switch to the relevant sub organization and ensure that your application is available under Applications as a shared app.</p> <p></p> </li> <li> <p>Go to the Sign-in Method tab of the shared app and see that login with username and password is enabled.</p> </li> </ul> <p>Once an application is shared with a sub organization, its users can use the Sign In with Organization Login option to log in using their credentials.</p> <p>To try out a complete use case, see Try a B2B use case.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/","title":"Try a B2B use case (with organization login)","text":"<p>The following guide is a complete end-to-end use case on how to manage B2B (Business-to-Business) applications in WSO2 Identity Server.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#scenario","title":"Scenario","text":"<p>You are an administrator of Guardio Insurance, which is a company that provides its services to other business organizations.</p> <p>Best Car Mart has a partnership with Guardio Insurance to provide life insurance policies to its employees. Guardio Insurance exposes its services to Best Car Mart's employees through its Guardio Insurance App.</p> <p>The employees of Best Car Mart should be able to log in to the Guardio Insurance App to consume its services. The administrators of Best Car Mart will manage the users of its organization and also determine the login experience that their users should have.</p> <p></p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#prerequisites","title":"Prerequisites","text":"<p>You should create an organization. For this example we have created an organization named <code>Guardio Insurance</code>.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#set-up-the-sub-organization","title":"Set up the sub organization","text":"<p>As the administrator of Guardio Insurance, you need to first set up a sub organization.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-1-onboard-the-sub-organization","title":"Step 1: Onboard the sub organization","text":"<p>Create a sub  organization on the WSO2 Identity Server Console with <code>Best Car Mart</code> as the Sub organization Name.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-2-onboard-a-sub-organziation-administrator","title":"Step 2: Onboard a sub organziation administrator","text":"<p>Onboard an administrator to the Best Car Mart organization using the values given below.</p> Username (Email) Enter an email address as the user name. First Name Enter the first name of the user. <code>Alex</code> Last Name Enter the last name of the user. <code>Doe</code> Password Set a temporary password for the user."},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#set-up-the-app","title":"Set up the app","text":"<p>The following guides explain how you can share an application with sub organizations and allow sub organization users to log in to it using Organization Login.</p> <p>Let's use the sample application, Guardio Insurance app, to explore this use case.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-1-register-the-app-on-wso2-identity-server","title":"Step 1: Register the app on WSO2 Identity Server","text":"<p>Follow the steps given below to register the Guardio Insurance App with WSO2 Identity Server.</p> <ol> <li>Switch to the primary organization.</li> <li> <p>Register a standard-based application in your primary organization with the following settings:</p> <p> Application Name Add a name for the application. <code>guardio-app</code> Protocol The authentication protocol to use. <code>OAuth2.0 OpenID Connect</code> Management Application Select this checkbox to indicate that the application has access to WSO2 Identity Server's management APIs. </p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-2-share-the-app-with-sub-organizations","title":"Step 2: Share the app with sub organizations","text":"<p>Share the Guardio Insurance app with your Best Car Mart sub organization. See instructions on how to share applications with sub organizations.</p> <p>By doing so, you enable Sign In with Organization Login as a login option in the application login screen, which sub organization users can use to log in.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-3-configure-the-app-on-wso2-identity-server","title":"Step 3: Configure the app on WSO2 Identity Server","text":"<p>To configure the registered application on WSO2 Identity Server:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications and select the application you registered.</li> <li> <p>Go to the Protocol tab of the application, configure the following values.</p> <p>Note</p> <p>Note that the <code>Organization Switch</code> grant will only be visible after you share the application with sub organizations.</p> <p> Allowed Grant Types  Select the following grant types:             <ul> <li>Client Credential</li> <li>Code</li> <li>Organization Switch</li> </ul> Authorization Redirect URL Enter the URLs of the application to which users should be redirected after login and logout. <ul> <li><code>http://localhost:3000/api/auth/callback/wso2is</code></li> <li><code>http://localhost:3000</code></li> </ul> Allowed Origins Enter the allowed origins. <code>http://localhost:3000</code> </p> <p>Take note of the <code>client_id</code> and <code>client_secret</code> generated for your application.</p> </li> <li> <p>Click Update to save your configurations.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-4-set-up-the-client-app","title":"Step 4: Set up the client app","text":"<p>To set up the client application:</p> <ol> <li> <p>Open the <code>config.json</code> file found in the <code>b2b-sample/guardio-insurance-sample-application</code> folder and update the following parameters:</p> <p> Parameter Description Value <code>BaseOrganizationUrl</code> The base URL of the organization. <code>https://api.asgardeo.io/t/{organization-name}</code> <code>ClientId</code> The client ID of the application created on WSO2 Identity Server. Client ID copied from step 1 above. <code>ClientSecret</code> The client secret of the application created on WSO2 Identity Server. Client secret copied from step 1 above. <code>HostedUrl</code> The URL of the client application. <code>http://localhost:3000</code> <code>APIScopes</code> The scopes required by the application to access user resources. <code>openid</code>, <code>email</code>, <code>internal_login</code>, etc. <code>Branding.name</code> The branding name of your application. <code>Guardio Insurance</code> <code>Branding.tag</code> A branding tag line for your apllication. <code>Anytime . Anywhere</code> <code>SharedApplicationName</code> The application name you used to register the application in WSO2 Identity Server. <code>Guardio Insurance App</code> <code>ImageBaseUrl</code> Add the URL of WSO2 Identity Server Console to load images required for the sample application. <code>https://console.asgardeo.io</code> </p> <p>Note</p> <p>Remove the <code>SampleOrganization</code> section from the <code>config.json</code> file as it is not required for WSO2 Identity Server configurations.</p> </li> <li> <p>To start the application, open a terminal, navigate to the <code>b2b-sample/guardio-insurance-sample-application</code> folder and execute the following commands:</p> <pre><code>npm install\n</code></pre> <pre><code>npm run dev\n</code></pre> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#try-it-out","title":"Try it out","text":"<p>The following guides explain how a sub organization user can log in to the sample application, Guardio Insurance App and how a sub organization administrator can use the built-in administration portal.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#try-out-organization-login","title":"Try out organization login","text":"<p>Follow the steps below to see how organization login works for a user in the Best Car Mart sub organization when logging into Guardio Insurance App.</p> <ol> <li> <p>Open the application by copying the following URL to your browser: <code>http://localhost:3000/</code></p> <p></p> </li> <li> <p>Click Sign In and see that you are diverted to the WSO2 Identity Server login screen.</p> </li> <li> <p>Click Sign In with Organization Login to specify the organization to which you are signing in.</p> </li> <li> <p>Enter Best Car Mart as the organization name and click Submit.</p> <p></p> </li> <li> <p>Enter the username and password of a user who you have onboarded to Best Car Mart.</p> </li> <li> <p>Click Sign in and grant permission for the application to access your user attributes.</p> <p>You have successfully logged into the Guardio Insurance App as a user of the Best Car Mart organization.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#try-out-the-administration-portal","title":"Try out the administration portal","text":"<p>Note</p> <p>Learn how to build an administration portal for your B2B application in the implement an administration portal section.</p> <p>Best Car Mart needs to manage its employees through an external IdP. As the administrator of Best Car Mart, Alex, is tasked with enabling login from the external IdP for Best Car Mart employees.</p> <p>To configure an identity provider for Guardio Insurance App:</p> <ol> <li> <p>Log in to the application with the credentials of Alex.</p> </li> <li> <p>On the application, go to Settings &gt; Identity Providers and click Add Identity Provider.</p> <p></p> </li> <li> <p>Select Google if you are onboarding a Google IdP or Enterprise if you are onboarding an enterprise IdP.</p> <p></p> </li> <li> <p>Provide the details specific to your IdP and click Create.</p> </li> <li> <p>Click Add to login flow to enable this IdP as the login option for Best Car Mart users in the application.</p> </li> </ol>"},{"location":"guides/organization-settings/attributes/","title":"Attributes and attribute mappings","text":"<p>Information directly related to users in an organization such as username, email, address, etc., is stored as user attributes in WSO2 Identity Server. You can manage the attributes within your organization. This includes viewing the attributes, updating them, and deciding if and how they would appear in a user's profile.</p> <p>You can also map yourOpenID Connect claims or SCIM2 attributes to user attributes in your organization.</p>"},{"location":"guides/user-accounts/","title":"Account management","text":"<p>This section explains how owners can create multiple organizations in the WSO2 Identity Server Console, switch between them, manage user attributes, perform account recovery, provide users with self-service capabilities, and mitigate risks via configuring security measures for user accounts.</p> <ul> <li> <p>Organization owners can manage the resources within their organizations.</p> <p>See Manage multiple organizations for instructions.</p> </li> <li> <p>User attributes represent a user's information within an organization. These default attributes can either be mapped to OpenID Connect claims or SCIM 2 attributes.</p> <p>See Manage user attributes for instructions.</p> </li> <li> <p>In WSO2 Identity Server, accounts can be recovered by administrators or by the users themselves. Users can recover their forgotten passwords using the self-service passwords recovery option.</p> <p>See Configure password recovery for instructions.</p> </li> <li> <p>Users can self-register to an organization in WSO2 Identity Server via an application's login page.</p> <p>See Configure self-registration for instructions.</p> </li> <li> <p>When you onboard several users onto your organization, it is of utmost importance to secure their accounts from unauthorized logins or other unfavorable misuses. Some popularly effective methods include locking the account on consecutive failed login attempts and using reCAPTCHA to detect bots.</p> </li> </ul> <p>See the following sections for instructions on configuring these security measures:</p> <ul> <li>Configure login-attempts security</li> <li>Configure bot detection</li> </ul>"},{"location":"guides/user-accounts/configure-self-registration/","title":"Configure self-registration","text":"<p>Users can self-register to an organization in WSO2 Identity Server via an application's login page. This creates a new user account in the organization.</p>"},{"location":"guides/user-accounts/configure-self-registration/#enabledisable-self-registration","title":"Enable/Disable self-registration","text":"<p>To disable this capability in your organization or to change the default configurations, see the following instructions:</p> <ol> <li> <p>On the WSO2 Identity Server Console, click Self Registration.</p> <p></p> <p>The Self Registration section indicates whether or not it is already enabled.</p> </li> <li> <p>Click Configure to open the Self Registration page.</p> </li> <li> <p>Configure the below settings.</p> <ul> <li>To disable self-registration, turn off the toggle.</li> <li>To configure self-registration, update the following settings and click Update.      Account verification                      Enables email verification at self-registration. That is, an email will be sent to the user's specified email address requesting account confirmation.                     Note that if you also have the Activate account immediately configuration enabled, users will be signed in to the application without waiting for the email confirmation. However, you have the option of using the account verification status to control the user experience and access level that should be granted to the user.                     Learn more.                  Account verification link expiry time Specifies account verification link expiry time in minutes. If you enter 60 min, the account verification email expires after 60 min. Activate account immediately                      Activates the account without waiting for account verification.                     However, you have the option of using the account verification status to control the user experience and access level that should be granted to the user.                     Learn more.                  Enable auto login Once a user self-registers,                        <ul> <li>if MFA is not configured, the user is redirected straight into the application without having to log in.</li> <li>if MFA is configured, the authentication flow will bypass the first level and proceed to the next.</li> </ul>                     Note that it is mandatory to enable Activate account immediately if you need to enable auto login while Account Verification is enabled.                  </li> </ul> </li> </ol>"},{"location":"guides/user-accounts/configure-self-registration/#configure-self-registration-methods","title":"Configure self-registration methods","text":"<p>A user is able to self-register to your organization using the same ways that you have configured as sign-in methods for your applications.</p> <p>Refer to the documentation on how to configure sign-in options for your application.</p> <p>Note</p> <p>Currently, WSO2 Identity Server does not support Magic Links for self-registration.</p> <p>During user self-registration, the available methods are displayed to the user as shown below.</p> <p></p> <p>For information on how a user can self-register, refer to Try self-registration.</p>"},{"location":"guides/user-accounts/configure-self-registration/#customize-the-self-registration-form","title":"Customize the self-registration form","text":"<p>If a user decides to self-register using email, the default form that is presented to the user is as follows.</p> <p></p> <p>Follow the instructions below to customize the attributes that the form requests during self-registration.</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes and under the Manage Attributes section, click Attributes again.</li> <li> <p>Click Edit on the attribute that you want to customize.</p> <p></p> </li> <li> <p>Select Display this attribute on the user's profile. The attribute will now appear on the self-registration form presented to the user.</p> </li> <li>Select Make this attribute required on the user's profile if you want to make the attribute mandatory for self-registration.</li> </ol> <p>Note</p> <p>Learn more about user attributes.</p>"},{"location":"guides/user-accounts/configure-self-registration/#get-the-verification-status-of-user-accounts","title":"Get the verification status of user accounts","text":"<p>The verification status of a user account indicates whether or not the user has confirmed the account through email verification. When you develop your application, you can implement some logic based on this parameter setting.</p> <p>This capability is beneficial when you have self-registered users. For example, you may want self-registered users with unverified accounts only to get read access to your application, whereas they should get full access once account verification is completed.</p> <p>Tip<p>To implement this scenario, you must enforce account verification for self-registered users and also allow the same users to access your applications before account verification is completed. That is, both Account verification and Activate account immediately configurations should be enabled for self-registration in your organization.</p> </p> <p>You can get the account verification status of users through the SCIM2 API in WSO2 Identity Server. Invoke the following SCIM2 endpoints:</p> <ul> <li> <p>To get your own information, invoke the <code>/scim2/Me</code> endpoint:</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/scim2/Me\n</code></pre> </li> <li> <p>To get information about other users in your organization, invoke the <code>/scim2/Users/&lt;user_id&gt;</code> endpoint:</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/scim2/Users/&lt;user_id&gt;\n</code></pre> </li> </ul> <p>Note the following details in the response payload:</p> <p>Note</p> <ul> <li>If the <code>role.display</code> parameter is set to <code>selfsignup</code>, the user has self-registered.</li> <li> <p>Under the <code>urn:scim:wso2:schema</code> schema, if the <code>emailVerified</code> parameter is available, the user has already verified the account through email. This parameter will have the following values:</p> <ul> <li><code>true</code> - User has successfully verified the account.</li> <li><code>false</code> - User's account verification attempt has failed.</li> </ul> </li> <li> <p>Under the <code>urn:scim:wso2:schema</code> schema, the <code>accountConfirmedTime</code> parameter will only be available when email verification is successful for self-registered users.</p> </li> </ul> <pre><code>\"roles\": [\n    {\n        \"display\": \"selfsignup\",\n        \"value\": \"a85d4baf-2e7a-37b1-a722-d4d427039736\",\n        \"$ref\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;/scim2/Roles/16ba9acb-fa30-42ef-8e25-29b557862124\"\n    },\n    ......\n    ],\n\"urn:scim:wso2:schema\": {\n    \"emailVerified\": \"true\",\n    \"accountConfirmedTime\": \"2023-02-16T03:07:34.392293Z\"\n    .....\n}\n</code></pre> <p>Once you have identified the <code>emailVerified</code> status of the user and the method by which the user is onboarded (self-registration or onboarded by an administrator), you can enforce any access restrictions for that user through your application logic.</p>"},{"location":"guides/user-accounts/configure-self-service-portal/","title":"Configure the self-service portal for users","text":"<p>Users in your organization can access self-service features from the My Account self-service portal in WSO2 Identity Server. See the complete list of self-service capabilities.</p>"},{"location":"guides/user-accounts/configure-self-service-portal/#access-my-account-portal","title":"Access My Account portal","text":"<p>The URL for the My Account portal is as follows:</p> <pre><code>https://myaccount.asgardeo.io/t/{organization_name}\n</code></pre> <p>For example, if your organization name is bifrost, the URL is as follows:</p> <pre><code>https://myaccount.asgardeo.io/t/bifrost\n</code></pre>"},{"location":"guides/user-accounts/configure-self-service-portal/#enabledisable-my-account-portal","title":"Enable/Disable My Account portal","text":"<p>Follow the steps given below to grant/deny access to the My Account portal for users in your organization.</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Applications, and you will see the My Account portal listed as the first application.</p> <p></p> </li> <li> <p>Click the settings icon to open the My Account configuration page.</p> </li> <li>Switch the toggle to enable or disable the My Account portal for your organization.</li> </ol>"},{"location":"guides/user-accounts/configure-self-service-portal/#enable-2fa-for-the-my-account-portal","title":"Enable 2FA for the My Account portal","text":"<p>Follow the steps below to configure Two-Factor Authentication (2FA) for the My Account portal of your organization.</p> <ol> <li>In the WSO2 Identity Server Console, go to Organizational Settings &gt; Self-Service Portal.</li> <li>Click Configure to open the My Account page.</li> <li> <p>Select the 2FA options that you need to configure for the My Account Portal.</p> <p>Note</p> <p>The SMS OTP authentication option will only be enabled when your organization's SMS OTP connection is set up. If you have not already set up the SMS OTP connection, see the instructions on setting up the SMS OTP connection.</p> <p></p> </li> <li> <p>Click Update to apply configuration changes.</p> </li> </ol>"},{"location":"guides/user-accounts/configure-self-service-portal/#enable-totp-enrollment-during-login","title":"Enable TOTP enrollment during login","text":"<p>Administrators of the organization can enable TOTP enrollment during login for the My Account portal.</p> <p>To enable TOTP enrollment during login:</p> <ol> <li>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Self-Service Portal.</li> <li>Click Configure to open the My Account page.</li> <li>Select Enable TOTP.</li> <li> <p>Select Allow TOTP enrollment during login.</p> <p></p> <p>Disable TOTP enrollment during login</p> <p>If you do not want to enable TOTP enrollment during login, keep the option unchecked. At user login, if the users have not enrolled the TOTP authenticator, they will be instructed to contact the organization admin for assistance.</p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/user-accounts/configure-self-service-portal/#enable-backup-codes-for-login","title":"Enable backup codes for login","text":"<p>My Account portal users can use backup codes to log in to applications when they cannot obtain the required MFA codes.</p> <p>To enable backup codes for My Account portal login:</p> <p>Before you begin</p> <p>To enable backup codes, you need to enable at least one 2FA option for the login flow.</p> <ol> <li>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Self-Service Portal.</li> <li>Click Configure to open the My Account page.</li> <li>Select Enable Backup Codes.</li> <li>Click Update to save the configurations.</li> </ol>"},{"location":"guides/user-accounts/password-recovery/","title":"Configure password recovery","text":"<p>WSO2 Identity Server provides the support for self-service password recovery option for users on the login page. The user will receive a password reset link via email upon request. This guide walks you through setting up password recovery for users to recover a lost or forgotten password.</p> <p>To configure password recovery:</p> <ol> <li> <p>On the WSO2 Identity Server Console, click Account Recovery.</p> <p>The Password Recovery section indicates whether or not it is already enabled.</p> </li> <li> <p>Click Configure to open the Password Recovery page.</p> </li> <li> <p>Turn on Enabled to enable this configuration.</p> <p></p> </li> <li> <p>Configure the below settings if you want to change the default password recovery configurations.      Notify on successful recovery Specifies whether to notify the user via an email when password recovery is successful. Recovery link expiry time Specifies password recovery link expiry time in minutes. If you enter 60 min, the password recovery email notification will expire after 60 min. </p> </li> <li> <p>Click Update once you configure the required settings.  </p> </li> </ol> <p>Try self-service password recovery.</p>"},{"location":"guides/user-accounts/account-login/username-validation/","title":"Configure username validation","text":"<p>Your WSO2 Identity Server organization could allow a user to log in with a custom alphanumeric username instead of an email address.</p> <p>Follow the steps given below to change the username type for the users.</p> <ol> <li>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Account Login.</li> <li>Click Configure to open the Username Validation page.</li> <li>Select Alphanumeric and configure the minimum and maximum length for a username.</li> <li>Click Update to save the changes.</li> </ol> <p></p> <p>Warning</p> <p>If you select Alphanumeric as the username type, and not make the Email attribute mandatory for users, the following features will not be available for users who do not configure an email address.</p> <ul> <li>Email Notifications</li> <li>Password recovery</li> <li>Authentication with Magic Link, Email OTP</li> </ul> <p>Learn how to update attribute properties.</p>"},{"location":"guides/user-accounts/account-security/bot-detection/","title":"Configure bot detection","text":"<p>WSO2 Identity Server uses reCAPTCHA to detect bots that attempt unauthorized login or other types of internet abuse. This is a free service provided by Google that verifies whether a user is a human or a robot. It comes in the form of a widget.</p> <p>When bot detection is enabled, WSO2 Identity Server enforces reCAPTCHA validation in the following scenarios:</p> <ul> <li>User login</li> <li>User password recovery</li> <li>User self-registration</li> </ul> <p>To configure reCAPTCHA:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Account Security.</p> <p>The Bot Detention section indicates whether or not it is already enabled.</p> </li> <li> <p>Click Configure to open the Bot Detection security page.</p> </li> <li> <p>Turn the toggle on or off to enable or disable reCAPTCHA for your organization.</p> <p></p> </li> </ol>"},{"location":"guides/user-accounts/account-security/login-attempts-security/","title":"Configure password validation","text":"<p>User accounts in WSO2 Identity Server can be secured from password attacks by defining password validation rules.</p> <p>When a user configures a password that does not abide by the validation rules, they will be requested to re-enter a password.</p> <p>To configure password validation:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Account Security.</p> <p>The Password Validation section indicates whether or not it is already enabled.</p> </li> <li> <p>Click Configure to open the Password Validation page.</p> <p></p> </li> <li> <p>Enter values to update the following parameters according to the requirements of your password policies.</p> <p> Parameter Description Password Expiration The number of days after which the password expires. If a user attempts to log in using an expired password, the user will be redirected to reset the password. Password History Count <code>[Optional]</code> This field identifies the number of new unique passwords that must be set before an old password can be reused again.   Example:  If you assign <code>3</code> as the password history count, the user cannot use the last three passwords they have used. Number of characters You can add the minimum and maximum length of the password users should use. Mandatory characters By default, a user password should contain at least one of the following characters.             <ul> <li>Numbers</li> <li>Upper-case characters: </li> <li>Lower-case characters</li> <li>Special characters</li> </ul> Number of unique characters <code>[Optional]</code> This field identifies the number of unique (non-repeated) characters the password should contain. Number of repeated characters <code>[Optional]</code>This field identifies the number of characters that can be repeated consecutively in a user password.   Example:  If you assign <code>1</code> as the number of repeated characters, the password cannot contain any repeated characters consecutively.  The password <code>aa1@Znlq</code> is incorrect as it has the character <code>a</code> appearing consecutively. </p> </li> <li> <p>Click Update to save your password validation rules.</p> </li> </ol>"},{"location":"guides/user-accounts/account-security/password-validation/","title":"Configure password validation","text":"<p>User accounts in WSO2 Identity Server can be secured from password attacks by defining password validation rules.</p> <p>When a user configures a password that does not abide by the validation rules, they will be requested to re-enter a password.</p> <p>To configure password validation:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Account Security.</p> <p>The Password Validation section indicates whether or not it is already enabled.</p> </li> <li> <p>Click Configure to open the Password Validation page.</p> <p></p> </li> <li> <p>Enter values to update the following parameters according to the requirements of your password policies.</p> <p> Parameter Description Password Expiration The number of days after which the password expires. If a user attempts to log in using an expired password, the user will be redirected to reset the password. Password History Count <code>[Optional]</code> This field identifies the number of new unique passwords that must be set before an old password can be reused again.   Example:  If you assign <code>3</code> as the password history count, the user cannot use the last three passwords they have used. Number of characters You can add the minimum and maximum length of the password users should use. Mandatory characters By default, a user password should contain at least one of the following characters.             <ul> <li>Numbers</li> <li>Upper-case characters: </li> <li>Lower-case characters</li> <li>Special characters</li> </ul> Number of unique characters <code>[Optional]</code> This field identifies the number of unique (non-repeated) characters the password should contain. Number of repeated characters <code>[Optional]</code>This field identifies the number of characters that can be repeated consecutively in a user password.   Example:  If you assign <code>1</code> as the number of repeated characters, the password cannot contain any repeated characters consecutively.  The password <code>aa1@Znlq</code> is incorrect as it has the character <code>a</code> appearing consecutively. </p> </li> <li> <p>Click Update to save your password validation rules.</p> </li> </ol>"},{"location":"guides/user-self-service/","title":"User self-service","text":"<p>You can incorporate self-service capabilities into your business application by invoking the self-service APIs provided by WSO2 Identity Server.</p> <p>WSO2 Identity Server also provides a built-in self-service portal, which is currently in <code>Preview</code> mode, where users can manage their own WSO2 Identity Server accounts using the My Account portal.</p>"},{"location":"guides/user-self-service/build-self-service-capabilities/","title":"Build self-service capabilities for your application","text":"<p>Developers can use WSO2 Identity Server's REST APIs to implement self-service capabilities for the users on their business applications.</p> <p>Here are some capabilities you may want to enable when you implement self-service capabilities in your business app.</p> <ul> <li>Allow users to update their user profiles</li> <li>Allow users to change passwords</li> <li>Allow users to enable MFA</li> <li>Allow users to manage consents given to applications</li> </ul> <p>Once the user logs in to the business application, you can make these capabilities available to the user from the business application itself.</p>"},{"location":"guides/user-self-service/build-self-service-capabilities/#self-service-apis","title":"Self-service APIs","text":"<p>You can use the following WSO2 Identity Server APIs to enable self-service capabilities in your business application.</p> <ul> <li> <p>SCIM/Me Endpoint</p> <ul> <li>List user details</li> <li>Update user profile</li> <li> <p>Update user password</p> <p>Note</p> <p>To update the password of a user, update the <code>value</code> parameter of the API payload as follows:</p> <pre><code>{\n  \"schemas\": [\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n  ],\n  \"Operations\": [\n    {\n      \"op\": \"add\",\n      \"value\": {\n        \"nickName\": \"shaggy\"\n      }\n    }\n  ]\n}\n</code></pre> </li> </ul> </li> <li> <p>Manage MFA settings and recovery</p> <ul> <li>TOTP</li> <li>Backup codes</li> </ul> </li> <li> <p>Export user profile</p> </li> <li>Manage consent of users</li> </ul>"},{"location":"guides/user-self-service/build-self-service-capabilities/#prerequisites","title":"Prerequisites","text":"<p>You need an application that integrates login with WSO2 Identity Server over OpenID connect standards.</p> <p>Learn more about registering OIDC applications on WSO2 Identity Server.</p> <ul> <li>SPA</li> <li>Traditional Web application</li> <li>Mobile appliction</li> </ul>"},{"location":"guides/user-self-service/build-self-service-capabilities/#invoke-the-self-service-apis","title":"Invoke the self-service APIs","text":"<p>To invoke the self-service APIs from your application:</p> <ol> <li>Once the user logs into your application, get an access token on behalf of the user.</li> <li>Use the obtained <code>access_token</code> as a bearer token to invoke the APIs.</li> </ol> <p>Given below is a sample API request for a client sending a <code>PATCH</code> request sent to the <code>/scim2/Me</code> endpoint to update the user password.</p> <pre><code>URL:  https://api.asgardeo.io/t/&lt;org_name&gt;/scim2/Me\nHTTP Method: PATCH\nHeaders:\n'Content-Type: application/scim+json'\n 'Authorization: Bearer &lt;access_token&gt;'\nData:\n{\n  \"schemas\": [\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n  ],\n  \"Operations\": [\n    {\n      \"op\": \"add\",\n      \"value\": {\n        \"password\": \"&lt;new-password&gt;\"\n      }\n    }\n  ]\n}\n</code></pre> If you are using WSO2 Identity Server's React SDK<p>You can use the <code>httpRequest</code> method to invoke the APIs on WSO2 Identity Server's React SDK.</p> <p>A sample of how to use the <code>httpRequest</code> method in WSO2 Identity Server's React SDK is given below:</p> <pre><code>import { useAuthContext, HttpRequestConfig } from \"@asgardeo/auth-react\";\nconst {httpRequest } = useAuthContext();\n\nconst requestConfig: HttpRequestConfig = {\n// Add API content here\nheaders: {\n\"Accept\": \"application/json\",\n\"Content-Type\": \"application/scim+json\"\n},\nattachToken: true,\nmethod: \"GET\",\nurl: \"https://api.asgardeo.io/t/&lt;org_name&gt;/scim2/Me\"\n};\nhttpRequest(requestConfig).then((response: any) =&gt; {\nconsole.log(\u201crequest response : \u201d+response.data);\n}).catch((error) =&gt; {\nconsole.log(\"request error: \" + error);\n})\n</code></pre> <p>You can replace the body of <code>const requestConfig: HttpRequestConfig = {}</code> with the API you wish to invoke.</p>"},{"location":"guides/user-self-service/change-password/","title":"Change password","text":"<p>To change the current password via My Account, the user should follow these steps.</p> <ol> <li> <p>Sign in to the My Account portal.</p> </li> <li> <p>Click Security &gt; Change Password.</p> </li> <li> <p>Click Change your password.</p> <p></p> </li> <li> <p>Enter the Current password and the New password.</p> </li> <li> <p>Click Submit.</p> </li> </ol> <p>Note</p> <ul> <li>Alternatively, users can reset the password from the application login page. </li> <li>Users onboarded from a read-only remote user store do not have the capability of changing their password through the My Account portal.</li> </ul>"},{"location":"guides/user-self-service/customer-password-recovery/","title":"Password recovery for users","text":"<p>Users can recover a forgotten password from an application sign-in page by following the steps below.</p>"},{"location":"guides/user-self-service/customer-password-recovery/#prerequisites","title":"Prerequisites","text":"<p>Administrators should enable password recovery for users in the organization.</p>"},{"location":"guides/user-self-service/customer-password-recovery/#recover-a-forgotten-password","title":"Recover a forgotten password","text":"<p>Note</p> <p>Users onboarded from a read-only remote user store do not have the capability of recovering their password through the My Account portal.</p> <p>To reset the password, the user should follow these steps.</p> <ol> <li> <p>Go to a login page via a business application or the My Account portal.</p> <p></p> </li> <li> <p>Click Forgot password?</p> </li> <li> <p>Enter your username and click Send Reset Link.</p> <p></p> <p>An email notification is sent to your email address.</p> </li> <li> <p>Open the email you received and click Reset Password.</p> <p></p> </li> <li> <p>Enter a new password and click Proceed.</p> </li> </ol> <p>Note</p> <p>If the user is already signed in to the My Account portal, the password can be reset from there. Learn how to change password from the My Account portal.</p>"},{"location":"guides/user-self-service/customer-password-recovery/#check-password-recovery-email","title":"Check password recovery email","text":"<p>Users can also check the email address to which their password recovery information is sent.</p> <ol> <li> <p>In the My Account portal, navigate to Security &gt; Account Recovery.</p> <p></p> </li> <li> <p>Click the eye icon, to check the recovery email address.</p> </li> <li> <p>Click Done.</p> </li> </ol>"},{"location":"guides/user-self-service/customer-self-service-portal/","title":"Self-service portal for users","text":"<p>Users in your organization can access self-service features from the My Account self-service portal in Asgardeo.</p>"},{"location":"guides/user-self-service/customer-self-service-portal/#self-service-capabilities-for-users","title":"Self-service capabilities for users","text":"<p>Listed below are self-service features that are available for the user in the My Account portal.</p> <ul> <li>Update profile information</li> <li>Change password</li> <li>View and revoke consents given to applications</li> <li>Enroll TOTP</li> <li>Manage backup codes</li> <li>Manage linked social accounts</li> <li>Export profile information</li> <li>View and revoke login sessions</li> <li>Manage password recovery</li> <li>Discover and maintain applications</li> <li>Register FIDO2 security key/biometrics</li> </ul>"},{"location":"guides/user-self-service/discover-applications/","title":"Discover applications","text":"<p>Users can discover applications that they can access within the organization by following the steps below.</p> <p>Note</p> <p>For an app to be discoverable by a user in the My Account portal, administrators should enable the Discoverable application option in the General tab of an application in WSO2 Identity Server.</p> <ol> <li> <p>In the user's MyAccount portal, navigate to Applications.</p> <p></p> </li> <li> <p>In the All Applications section, users can view all the applications discoverable to them.</p> </li> <li> <p>Users can click on any application and get redirected to its landing page.</p> </li> </ol>"},{"location":"guides/user-self-service/enable-totp/","title":"Enroll TOTP via My Account","text":"<p>Users can set up an authenticator app of their choice from the My Account Portal so that the app can generate TOTPs for multi-factor authentication flows in WSO2 Identity Server.</p>"},{"location":"guides/user-self-service/enable-totp/#initial-setup","title":"Initial setup","text":"<p>Follow the steps given below to set up TOTP using My Account.</p> <ol> <li> <p>In the user's MyAccount portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the + icon next to Authenticator App and a QR code will be displayed to you.</p> </li> <li> <p>Scan the QR code using your preferred authenticator application.</p> <p></p> </li> <li> <p>Enter the TOTP displayed in your authenticator app and click Verify.</p> </li> </ol>"},{"location":"guides/user-self-service/enable-totp/#access-the-qr-code","title":"Access the QR code","text":"<p>The user can view the QR code via the My Account Portal by following the steps below.</p> <ol> <li> <p>In the user's MyAccount portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the eye icon next to Authenticator App to view the QR code.</p> <p></p> </li> </ol>"},{"location":"guides/user-self-service/enable-totp/#regenerate-the-qr-code","title":"Regenerate the QR code","text":"<p>If the user has accidentally deleted the QR code from the authenticator app, follow the steps below to generate a new QR code and register the authenticator app again in the My Account portal.</p> <ol> <li> <p>In the user's MyAccount portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the eye icon next to Authenticator App and click Regenerate to get a new QR code.</p> <p></p> </li> <li> <p>Enter the TOTP code obtained after scanning the QR code and click Verify.</p> <p></p> </li> </ol>"},{"location":"guides/user-self-service/export-profile-information/","title":"Export profile information","text":"<p>Users can export profile information via the My Account portal as <code>json</code> files.</p> <p>Given below are the steps to follow.</p> <ol> <li> <p>Sign in to the My Account portal.</p> </li> <li> <p>Click Personal Info &gt; Export Profile.</p> </li> <li> <p>Click Download the profile to export the user profile information.</p> <p></p> </li> </ol> Sample JSON file<p>This is a sample of the exported <code>json</code> with a business user's profile information. <pre><code>{\n\"user_profile\": {\n\"accountState\": \"UNLOCKED\",\n\"emailVerified\": \"true\",\n\"country\": \"SriLanka\",\n\"givenname\": \"firstname\",\n\"created\": \"2021-04-07T15:07:58.001440Z\",\n\"modified\": \"2023-04-25T04:31:05.838894Z\",\n\"emailaddress\": \"tom@wso2.com\",\n\"userid\": \"36d2dd61-6e58-4b54-bfbe-f8621236c88b\",\n\"username\": \"tom@wso2.com\",\n\"lastname\": \"Jerry\"\n}\n}\n</code></pre></p>"},{"location":"guides/user-self-service/manage-backup-codes/","title":"Configure backup codes","text":"<p>Backup codes help users log in to applications when they have lost access to the configured multi factor authentication methods.</p>"},{"location":"guides/user-self-service/manage-backup-codes/#enable-backup-codes","title":"Enable backup codes","text":"<p>To enable backup codes:</p> <ol> <li> <p>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</p> </li> <li> <p>Click <code>+</code> to add backup codes.     You will see a popup window with ten backup codes. Each backup code can be used only once.</p> <p></p> </li> <li> <p>Click Download Codes or Copy Codes and save the backup codes in a secure location, as the codes will only be shown once.</p> </li> <li> <p>Click Close once you have securely stored the backup codes.</p> </li> </ol> <p>Note</p> <p>The backup codes will not be valid for your currently active sessions. Therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/user-self-service/manage-backup-codes/#regenerate-backup-codes","title":"Regenerate backup codes","text":"<p>In case you have lost the backup codes or have used them all, follow the steps below to generate a new set of backup codes.</p> <ol> <li> <p>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</p> </li> <li> <p>Click on the refresh icon to regenerate the backup codes.</p> <p></p> </li> <li> <p>On the confirmation window, click Regenerate to confirm your action.     You will see a popup window with ten backup codes. Each backup code can be used only once.</p> <p></p> </li> <li> <p>Click Download Codes or Copy Codes and save the copied or downloaded backup codes securely, as the codes will only be shown once.</p> </li> <li> <p>Click Close once you have securely stored the backup codes.</p> </li> </ol> <p>Note</p> <p>The backup codes will not be valid for your currently active sessions. Therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/user-self-service/manage-backup-codes/#remove-backup-codes","title":"Remove backup codes","text":"<p>To remove the backup codes:</p> <ol> <li> <p>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</p> </li> <li> <p>Click on the trash icon to remove the existing backup codes.</p> <p></p> </li> <li> <p>On the confirmation window, click Remove to confirm your action.</p> </li> </ol> <p>Note</p> <p>The backup codes will not be valid for your currently active sessions. Therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/user-self-service/manage-consents/","title":"Manage consents given to applications","text":"<p>When a user logs in to an application, WSO2 Identity Server prompts the user to provide consent to the application to access user attributes. Users can view these consents and if needed, revoke them using the My Account portal.</p> <p>Given below are the steps to follow.</p> <ol> <li> <p>Sign in to the My Account portal.</p> </li> <li> <p>Click Security &gt; Manage Consents.</p> </li> <li> <p>Users can view the applications for which they have given consent.</p> </li> <li> <p>Select an application and click Show more to display the attributes that are shared with the application.</p> <p></p> </li> <li> <p>To revoke consent, the user can do one of the following:</p> <ul> <li> <p>Clear attributes individually and click Update. This revokes consent for deselected user attributes.</p> </li> <li> <p>Click Revoke in the danger zone to revoke all user attributes shared with that application.</p> </li> </ul> <p>Note</p> <p>If a user revokes consent to share an attribute with an application, WSO2 Identity Server again prompts the user for consent next time the user logs in to the same application.</p> </li> </ol>"},{"location":"guides/user-self-service/manage-linked-accounts/","title":"Manage linked social accounts","text":"<p>The account owner can view one's linked social accounts and remove them if needed.</p> <p>Given below are the steps to follow.</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Personal Info &gt; External Logins.</li> <li> <p>To remove any of the linked accounts, click Remove.</p> <p></p> </li> </ol>"},{"location":"guides/user-self-service/manage-login-sessions/","title":"Manage login sessions","text":"<p>Users can manage their own active sessions via My Account as follows:</p> <ol> <li> <p>Sign in to the My Account portal.</p> </li> <li> <p>Click Security &gt; Active Sessions. All the active login sessions of the user are listed.</p> </li> <li> <p>Click Show more on a session to get more details.</p> <p></p> </li> <li> <p>To terminate sessions, users can do one of the following:</p> <ul> <li> <p>Click Terminate to terminate a selected session.</p> </li> <li> <p>Click Terminate all on the upper-right to terminate all active sessions.</p> </li> </ul> </li> </ol>"},{"location":"guides/user-self-service/register-security-key/","title":"Register FIDO2 security key/biometrics","text":"<p>Application users need to register their security key/biometrics via My Account prior to using passwordless login in applications.</p> <ol> <li> <p>In the user's My Account portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the + icon next to Security Key/ Biometrics and follow the instructions given by the browser.</p> </li> <li> <p>Once it's done, you will get the following prompt.</p> <p></p> </li> <li> <p>Provide a name for your device and click Save.</p> </li> </ol>"},{"location":"guides/user-self-service/self-register/","title":"Self-register as a user","text":"<p>If an organization has enabled self-registration, users can create an account in an Asgardeo organization without the involvement of an administrator.</p> <p>Note</p> <p>Learn how administrators can enable self-registration in an organization.</p>"},{"location":"guides/user-self-service/self-register/#self-registration-methods","title":"Self-registration methods","text":"<p>There are two ways that a user can self-register to an organization in WSO2 Identity Server.</p>"},{"location":"guides/user-self-service/self-register/#via-my-account","title":"via My Account","text":"<p>To self-register from the My Account portal, the user should follow these steps.</p> <ol> <li> <p>Go to the My Account Portal.</p> <p></p> </li> <li> <p>Click Create an account.</p> </li> <li> <p>Follow the steps to sign-up using an email.</p> </li> </ol>"},{"location":"guides/user-self-service/self-register/#via-a-business-application","title":"via a business application","text":"<p>To self-register from a business application, users should follow these steps.</p> <ol> <li>Access the application URL.</li> <li>Click Create an account</li> <li> <p>Select one of the following options to sign up:</p> <ul> <li>Click Continue with email and follow the steps to sign up using an email.</li> <li>Sign-up using any of the other authenticators as shown below.</li> </ul> <p></p> </li> </ol>"},{"location":"guides/user-self-service/self-register/#sign-up-using-an-email","title":"Sign up using an email","text":"<p>A user can sign-up to an organization in WSO2 Identity Server using an email, via My Account portal or via a business application.</p> <p>To sign up using an email:</p> <ol> <li> <p>Click Continue with email on the sign-up screen.</p> </li> <li> <p>Enter the email address, password, and any other information that the application requests.</p> <p></p> <p>Note</p> <ul> <li>Administrators can change the attributes requested when users sign up by configuring user attributes.</li> <li>By default, the Email is used as the username. Instead of using the email, administrators can let users enter a separate username. Learn how to configure username requirements.</li> </ul> </li> <li> <p>Click Sign Up to create the account.</p> </li> <li> <p>If Account Verification is enabled, the user can confirm the account from the email.</p> <p></p> </li> <li> <p>If a user attempts to log in using an unverified account, the user is displayed an error message as shown.</p> <p>Note</p> <p>This is applicable only if account verification is enabled when an administrator configures self registration.</p> </li> </ol> <p></p>"},{"location":"guides/user-self-service/update-profile-info/","title":"Update profile information","text":"<p>User profiles in the My Account portal only display user attributes enabled by administrators for the relevant organization.</p> <p>Note</p> <p>Learn how administrators can display an attribute in user profiles.</p> <p>Users can update attributes available in their profiles by following the steps below.</p> <ol> <li>Sign in to the My Account portal.</li> <li> <p>Click Personal Info to see the profile information.</p> <p></p> </li> <li> <p>Update the editable information.</p> </li> </ol> <p>Note</p> <p>Users onboarded from a read-only remote user store do not have the capability of updating their profiles through the My Account portal.</p>"},{"location":"guides/users/","title":"User management","text":"<p>The users in WSO2 Identity Server are the digital representations of the identities of physical users who interact with your organization. With WSO2 Identity Server, the identity lifecycle of each of these users can be easily managed by the admins of the organization.</p> <p>The admins can grant users access to resources in your organization and control user access. Admins can also manage various user operations via the WSO2 Identity Server Console and SCIM APIs.</p> <p>Shown below are some main user management capabilities available in WSO2 Identity Server.</p> <p></p>"},{"location":"guides/users/#user-accounts","title":"User accounts","text":"<p>WSO2 Identity Server supports a set of user account types based on their relationship to the organization.</p> <p>Given below are the types of user accounts you can have in an WSO2 Identity Server organization.</p>"},{"location":"guides/users/#owner","title":"Owner","text":"<p>This is the owner of the organization who self-registers to WSO2 Identity Server by creating an organization. The owner has all the administrative rights in the organization.</p> <p>The owner can access the WSO2 Identity Server Console and manage the organization.</p> <p>An owner can perform the following actions: - Onboard users - Create organizations - Manage users and groups - Manage applications - Enforce password reset</p> <p>The owner account cannot be deleted once it is created. There can be only one owner for an organization. By default, it's the user who created the organization.</p> <p>An owner is always assigned the Administrator role. It cannot be changed by other admins either.</p>"},{"location":"guides/users/#administrator","title":"Administrator","text":"<p>An administrator can manage the organization and has access to the organization's administrative operations. An administrator can be invited to the organization and assigned with the Administrator user role.</p> <p>Refer Managing administrators for more information.</p>"},{"location":"guides/users/#user","title":"User","text":"<p>A user registered in an organization can consume and access applications in that organization.</p> <p>Refer Managing users for more information.</p>"},{"location":"guides/users/#comparing-user-accounts","title":"Comparing User Accounts","text":"<p>The following table compares the different user account types available in WSO2 Identity Server.</p> <p>Based on your requirements, you can choose user types and create them via the WSO2 Identity Server Console.</p> <p>The source of the user account determines which entity manages the user's credentials and details.</p> <ul> <li>Accounts managed by WSO2 Identity Server can persist across multiple organizations. That is, the same user account can be associated with other organizations as an owner or an administrator. When removed from one organization, these associations with other organizations continue to persist.</li> <li>Accounts managed by an organization are confined to that organization. When removed from that organization, the account is completely deleted from WSO2 Identity Server. </li> </ul> User Accounts Managed By Capabilities Owner WSO2 Identity Server <li>Onboard users</li> <li>Create organizations</li> <li>Manage users and groups</li> <li>Manage applications</li> Administrator WSO2 Identity Server      By default, administrators are assigned all administration capabilities:       <li>Onboard users</li> <li>Create organizations</li> <li>Manage users and groups</li> <li>Manage applications</li> User Organization <li>Consume business applications</li>"},{"location":"guides/users/#whats-next","title":"What's next?","text":"<p>Following are the main components that are required for user management. - Groups - Roles</p>"},{"location":"guides/users/manage-collaborators/","title":"Manage administrators","text":"<p>This guide walks you through the steps of managing an administrator account. If you are the owner or an existing administrator in the organization, you can onboard new administrators or delete existing administrator accounts.</p> <p>Note</p> <p>You cannot manage the user profiles of other administrators or update their passwords from the WSO2 Identity Server Console. Administrators must manage their own profiles and passwords using the My Account portal.</p>"},{"location":"guides/users/manage-collaborators/#onboard-an-administrator","title":"Onboard an administrator","text":"<p>There are two ways to onboard an administrator:</p> <ul> <li>An administrator can onboard new administrators by sending an email invitation.</li> <li>An administrator can assign existing users administrative privileges.</li> </ul>"},{"location":"guides/users/manage-collaborators/#invite-an-external-administrator","title":"Invite an external administrator","text":"<p>Let's look at how administrators can onboard another administrator by sending an email invitation.</p> <p>To onboard an administrator:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Administrators.</p> </li> <li> <p>Click Add Administrator and provide the required details.</p> <p>Note</p> <p>Note that if your organization allows you to assign admin privileges to business users, you will see the following options when you click Add Administrator.</p> <p></p> <p>You need to select Invite admins to WSO2 Identity Server from this list to proceed with inviting an external admin.</p> <p></p> <p> Field name Description Email Address Provide the email address to which the invitation email should be sent. This email address will be used as the admin's username in WSO2 Identity Server. Note that a username is always unique to the organization, and you can't change it once it is created. Role The Administrator role is assigned by default. For details on the available user roles and the permissions assigned to them, see WSO2 Identity Server User Roles. </p> </li> <li> <p>Click Invite to send the invitation.</p> </li> </ol> <p>The administrator can access the WSO2 Identity Server Console by accepting the invitation and setting a password for the new administrator account.</p>"},{"location":"guides/users/manage-collaborators/#assign-admin-privileges-to-users","title":"Assign admin privileges to users","text":"<p>You can assign admin privileges to existing business users only if it is allowed in your organization. Follow the instructions given below.</p> <p>First, configure administrator settings for the organization:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Administrators.</p> </li> <li> <p>Click the settings icon next to + Add Administrator to open the Administrator Settings page.</p> </li> <li> <p>Switch on the Enable users to manage the organization toggle.</p> <p></p> </li> <li> <p>Go back to the Administrators page and see that the + Add Administrator list is updated as follows:</p> <p></p> </li> </ol> <p>Now, let's assign admin privileges to a user:</p> <ol> <li>On the Administrator page, click +Add Administrator &gt; Assign admins from users.</li> <li>Select the user you want to add as an administrator and click Add.</li> </ol> <p>The new administrator can now access the WSO2 Identity Server Console using the following URL:</p> <p>Note</p> <p>Be sure to replace <code>{org_name}</code> with the relevant organization name.</p> <pre><code>https://console.asgardeo.io/t/{org_name}\n</code></pre> <p>Note</p> <p>Currently, only privileged users onboarded from the internal user store and remote user stores can log in to the WSO2 Identity Server Console.</p>"},{"location":"guides/users/manage-collaborators/#view-administrators","title":"View administrators","text":"<p>To view the administrators of your organization:</p> <p>On the WSO2 Identity Server Console, go to Organizational Settings &gt; Administrators. You will see the list of administrators presented in two tabs as follow.</p> WSO2 Identity Server This includes administrators whose identity is managed by WSO2 Identity Server. {org_name} organization This includes administrators whose identity is managed by the <code>{org_name}</code> organization."},{"location":"guides/users/manage-collaborators/#delete-an-administrator","title":"Delete an administrator","text":"<p>Warning</p> <p>Note the following:</p> <ul> <li>If the administrator you delete is a business user with admin privileges, you will only be revoking the administrator privileges from the user. Deleting this administrator does not delete the user account.</li> <li>If the administrator is not a business user, you will be deleting the user account from the organization. This action is irreversible.</li> </ul> <p>To delete an administrator:</p> <ol> <li>On the WSO2 Identity Server Console, click Organizational Settings &gt; Administrators.</li> <li>Click Delete for the administrator you want to remove.</li> <li>Select the checkbox to confirm your action.</li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/manage-customers/","title":"Manage users","text":"<p>This guide walks you through the process of managing a user account. An owner or an administrator can manage user accounts.</p>"},{"location":"guides/users/manage-customers/#onboard-a-user","title":"Onboard a user","text":"<p>There are three ways to onboard a user:</p> <ul> <li>The user can self-register via the My Account portal or the login page of an application if self-registration is enabled in the organization. Learn how to configure self-registration.</li> <li> <p>An administrator can onboard users from an on-premise user store by connecting a remote user store to WSO2 Identity Server.</p> <p>Note</p> <p>If the remote user store access type is read-only, you cannot update the user profiles of users onboarded from this read-only user store.</p> </li> <li> <p>An administrator can onboard users from the WSO2 Identity Server Console.</p> </li> </ul> <p>Let's look at how administrators can onboard users from the WSO2 Identity Server Console.</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Users.</li> <li> <p>Click  Add User and provide the following details:</p> <p></p> <ul> <li>Email (Username): A unique email address to identify the user.</li> <li>First Name: First name of the user. You can add/change this later.</li> <li>Last Name: Last name of the user. You can add/change this later.</li> </ul> <p>Note</p> <ul> <li>A username is always unique to the organization and you can't change the username once it is created.</li> <li>Instead of using the email as the username, you can configure the username to be an alphanumeric. Then, you will be asked to enter an alphanumeric username between the configured minimum and maximum lengths.</li> <li>The existing users who have already registered with their email address as the username can continue to use it to access applications, instead of having to create a new username.</li> </ul> </li> <li> <p>You can either request the user to set the password or set one on the user's behalf.</p> <ul> <li> <p>Invite user to set their own password:</p> <ul> <li> <p>Invite via email: If this option is selected, an email with a confirmation link will be sent to the provided email (username). The user can use the confirmation link to set up a new password.</p> </li> <li> <p>Invite offline: If this option is selected, the administrator will receive an invite link at the end of user registration. This link can be shared with the user.</p> </li> </ul> </li> <li> <p>Set a password for the user:         If this option is selected, the administrator can set a password for the user. The user can change this password from the My Account Portal.</p> </li> </ul> </li> <li> <p>Add the user to a group in the next step. You will not see this option if you haven't created any groups in WSO2 Identity Server.</p> </li> <li> <p>Click Finish.</p> <p>Note</p> <p>If you have selected Invite offline or decided to set a password for the user, you can copy the corresponding information at the Summary page of the wizard and share with the user.</p> </li> </ol>"},{"location":"guides/users/manage-customers/#assign-groups","title":"Assign groups","text":"<p>A user can be assigned to different groups in the organization. Groups can be used to restrict the user's access to resources.</p> <p>To assign users to groups:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Users.</li> <li>Click Edit for the user.</li> <li> <p>Go to Groups and assign groups.</p> <p>Note</p> <p>The Groups tab for a user account will only appear after you create one or more groups in the organization. Learn how to create a group</p> <p></p> </li> </ol>"},{"location":"guides/users/manage-customers/#manage-user-profiles","title":"Manage user profiles","text":"<p>A user profile consists of attributes that represent the details of the user such as username, email address, contact information, other custom attributes, etc.</p> <p>Note</p> <p>Administrators in the organization can configure the list of attributes that should be available in a user profile. See Manage attributes for details.</p>"},{"location":"guides/users/manage-customers/#view-profile-details","title":"View profile details","text":"<p>Administrators can view the user profile of any user as follows:</p> <ol> <li> <p>On the WSO2 Identity Server Console, go to User Management &gt; Users.</p> <p>Note</p> <p>If you have connected a remote user store, and want to filter the users in your remote user store, select your user store from the drop-down menu.</p> </li> <li> <p>Select the user to view the profile.</p> <p></p> </li> </ol>"},{"location":"guides/users/manage-customers/#update-the-profile","title":"Update the profile","text":"<p>An administrator can update the profile of a user via the WSO2 Identity Server Console.</p> <p>To update the user profile:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Users.</li> <li>Find the user's account and click Edit.</li> <li> <p>Update the information on the user profile.</p> <p></p> </li> <li> <p>Click Update to save.</p> </li> </ol>"},{"location":"guides/users/manage-customers/#reset-the-users-password","title":"Reset the user's password","text":"<p>Administrators can reset a user's password or initiate the password reset process from the WSO2 Identity Server Console.</p> <p>To reset the password:</p> <ol> <li> <p>Click Reset password at the bottom of the user's profile.</p> <p></p> </li> <li> <p>Select a method to reset the user password:</p> <ul> <li> <p>Invite user to set their own password:     If this option is selected, a password reset request can be sent to the user via email. The user can then use the instructions in the email to reset the password.  </p> </li> <li> <p>Set a temporary password for the user:     If this option is selected, the owner or an administrator can set a temporary password for the user.</p> </li> </ul> <p></p> </li> <li> <p>Click Reset Password.</p> </li> </ol> <p>Using the API</p> <p>You can also use Asgardeo's SCIM API to initiate the admin initiated password recovery flow.</p> <ol> <li> <p>Get an access token with the <code>internal_user_mgt_update</code> scope.</p> </li> <li> <p>Use the obtained access token to execute the following cURL.</p> <pre><code>curl --location --request PATCH 'https://api.asgardeo.io/t/&lt;org_name&gt;/scim2/Users/ &lt;user_id&gt;' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer &lt;access_token&gt;' \\\n--data '{\n   \"schemas\": [\n      \"urn:ietf:params:scim:api:messages:2.0:PatchOp\",\n      \"urn:scim:wso2:schema\"\n   ],\n   \"Operations\": [\n      {\n            \"op\": \"add\",\n            \"value\": {\n               \"urn:scim:wso2:schema\": {\n                  \"forcePasswordReset\": true\n               }\n            }\n      }\n   ]\n}'\n</code></pre> </li> </ol> <p>Upon successful execution of the cURL the user will recieve an email to reset their password.</p>"},{"location":"guides/users/manage-customers/#lock-a-user-account","title":"Lock a user account","text":"<p>When you lock a user's account, the user will no longer be able to access any applications or the My Account portal.</p> <p>To lock a user account:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Users and select the user.</li> <li> <p>Enable the Lock user toggle at the bottom of the user's profile.</p> <p></p> </li> <li> <p>Enable the checkbox to confirm your action.</p> </li> <li>Click Confirm.</li> </ol> <p>Note</p> <p>You can unlock the user account again using the Lock user toggle explained above.</p>"},{"location":"guides/users/manage-customers/#delete-a-user","title":"Delete a user","text":"<p>A user account can be deleted by administrators. Once an account is deleted, the action is irreversible.</p> <p>To delete a user account:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Users and select the user.</li> <li> <p>Click Delete User at the bottom of the user's profile.</p> <p></p> </li> <li> <p>Enable the checkbox to confirm your action.</p> </li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/manage-groups/","title":"Manage groups","text":"<p>A group is a collection of users who have the same privileges to access resources in an organization.</p> <p>One user can be assigned to any number of groups. Applications can get details about groups a user belongs to in the authentication response (e.g., ID token) from WSO2 Identity Server as a user attribute.</p> <p>Note</p> <p>Administrators and users onboarded from remote user stores cannot be assigned to groups from WSO2 Identity Server Console.</p> <p>For example, you can create the following user groups: <code>Admin</code>, <code>Manager</code>, and <code>Developer</code>. When one user group is granted access to a resource, it applies to all users in the group.</p>"},{"location":"guides/users/manage-groups/#onboard-a-group","title":"Onboard a group","text":"<p>There are two ways to onboard a group:</p> <ul> <li> <p>An administrator can onboard users from an on-premise user store by connecting a remote user store to WSO2 Identity Server.</p> <p>Note</p> <p>If the remote user store access type is read-only, you cannot update the user groups onboarded from this read-only user store.</p> </li> <li> <p>Administrators can add groups via the WSO2 Identity Server Console.</p> </li> </ul> <p>Let's look at how administrators can onboard groups from the WSO2 Identity Server Console.</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Groups.</li> <li> <p>Click New Group and provide the following details.</p> <ul> <li>Group Name: A unique name to identify the group.</li> <li>Add Users: If you already have existing users, you can search and add them.</li> </ul> <p></p> </li> <li> <p>Click Finish.</p> </li> </ol>"},{"location":"guides/users/manage-groups/#assign-users-to-groups","title":"Assign users to groups","text":"<p>Users can be assigned to groups. Admins can restrict access to resources based on the groups.</p> <p>To assign users to groups:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Groups.</li> <li>Select the group to assign the user.</li> <li> <p>Click Edit and navigate to Users.</p> <p></p> </li> <li> <p>Click Assign User and select users to add to the group.</p> </li> <li>Click Save.</li> </ol>"},{"location":"guides/users/manage-groups/#remove-users-from-groups","title":"Remove users from groups","text":"<p>Users can be removed from the assigned groups by administrators.</p> <p>To remove users from groups:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Groups.</li> <li>Select the group to remove the user.</li> <li> <p>Click Edit and navigate to Users.</p> <p></p> </li> <li> <p>Click Edit icon.</p> </li> <li>Clear the checkbox for the user(s) you want to remove.</li> <li>Click Save.</li> </ol>"},{"location":"guides/users/manage-groups/#assign-groups-to-application-roles","title":"Assign groups to application roles","text":"<p>You can assign groups to application roles and grant permission for the group's users to access an API resource. See manage application roles for more information.</p> <p>To assign a group to a role:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Groups.</li> <li>Go to the Roles tab and click + Assign Roles.</li> <li>Expand the application to which the required roles belong.</li> <li> <p>Select the application role/s you wish to add to the group.</p> <p></p> </li> <li> <p>Click Save to assign the group to the selected application role.</p> </li> </ol>"},{"location":"guides/users/manage-groups/#delete-a-group","title":"Delete a group","text":"<p>An administrator can delete groups via the WSO2 Identity Server Console. To delete a group:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Groups.</li> <li>Click the trash icon next to the group you wish to delete.</li> <li>Select the checkbox and confirm your action.</li> </ol>"},{"location":"guides/users/manage-groups/#view-remote-user-store-groups","title":"View remote user store groups","text":"<p>Once you connect a remote user store to WSO2 Identity Server, you can view the onboarded groups and the members of the groups. To view the onboarded groups:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt;  Groups.</li> <li>Select your user store from the drop-down menu.</li> </ol> <p>Note</p> <p>These groups are read-only. Administrators can only view the group details and the assigned members.</p>"},{"location":"guides/users/manage-sessions/","title":"Manage active sessions","text":"<p>A session corresponds to the time a user spends on an application from one user agent (e.g., browser) instance. We can consider one session as the time interval between a user's login and logout.</p> <p>WSO2 Identity Server maintains user sessions based on session cookies. Active sessions in WSO2 Identity Server are terminated in the following instances:</p> <ul> <li>User closes the browser</li> <li>User tries to terminate the sessions via the WSO2 Identity Server Console and My Account</li> <li>User logs out of an application</li> <li>User resets the password</li> </ul> <p>Active sessions can be terminated explicitly by using the session management APIs as well.</p> <p>An administrator or an owner can view and terminate the active session(s) of users via the WSO2 Identity Server Console.</p>"},{"location":"guides/users/manage-sessions/#view-active-sessions-of-users","title":"View active sessions of users","text":"<p>To view all active sessions of a user:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; Users.</li> <li>Select a user and click Edit.</li> <li> <p>Go to Active Sessions to view details.</p> <p></p> </li> </ol>"},{"location":"guides/users/manage-sessions/#terminate-active-sessions","title":"Terminate active sessions","text":"<p>You can terminate a specific user session or terminate all active sessions for the user.</p> <p>To terminate a specific active session of a user:</p> <ol> <li>On the Asgardeo Console, go to User Management &gt; Users.</li> <li>Select a user and click Edit.</li> <li>Go to Active Sessions and expand the required session.</li> <li>Click  Terminate to terminate the respective session only.</li> <li>Select the checkbox to confirm your action and click Confirm.</li> </ol> <p>To terminate all active sessions of a user:</p> <ol> <li>On the Asgardeo Console, go to User Management &gt; Users.</li> <li>Select a user and click Edit.</li> <li>Go to Active Sessions and click Terminate All. This will terminate all the sessions of that user.</li> <li>Select the checkbox to confirm your action and click Confirm.</li> </ol>"},{"location":"guides/users/migrate-users/","title":"Migrate users to WSO2 Identity Server","text":"<p>Owners of organizations in WSO2 Identity Server may need to migrate users from an existing identity provider (IdP) to the WSO2 Identity Server user store. This guide explains why you may need user migration and how to get it done.</p>"},{"location":"guides/users/migrate-users/#when-is-user-migration-required","title":"When is user migration required?","text":"<p>You may need to migrate users from an external IdP to WSO2 Identity Server if the organization requires:</p> <ul> <li>To combine users from multiple systems to one IdP for proper user management.</li> <li>To reorganize, restructure, and simplify data storage.</li> <li>To combine user data storages for centralized user management during company acquisitions and mergers.</li> <li>To move or separate identity data due to geopolitical, data protection, compliance, and regulatory reasons.</li> <li>Effective identity management that can provide additional protection over user data storage, scalability in IAM, and minimal maintenance costs.</li> </ul>"},{"location":"guides/users/migrate-users/#how-to-migrate-users-to-wso2-identity-server","title":"How to migrate users to WSO2 Identity Server?","text":"<p>You can contact the WSO2 Identity Server team at asgardeo-help@wso2.com for guidance on migrating your existing user base from your current IdP to your WSO2 Identity Server user store.</p> <p>Note</p> <p>Make sure you use your owner account or an administrator account to send the request.</p> <p>Alternatively, you can use traditional approaches to user migration. However, these methods run with challenges as listed in the section below.</p>"},{"location":"guides/users/migrate-users/#challenges-of-traditional-user-migration","title":"Challenges of traditional user migration","text":"<p>Identity providers generally support various automatic user migration methods, which help administrators import user records (including group details, attributes, and other characteristics) from external systems.</p> <p>These traditional methods come with various challenges as explained below, which become an operational overhead for administrators and provide a bad user experience:</p> <ul> <li> <p>Credential transition</p> <p>Identity providers use hashing algorithms to store user passwords securely. The password policies and hashing mechanisms vary across different IdPs. Due to this, a hashed password on one system will not be usable on another.</p> </li> <li> <p>Schema matching</p> <p>The schemas of one system might not match the schemas of the other system to which the organization is migrating. In such scenarios, the administrators will experience the overhead of matching the schemas one-to-one.</p> </li> <li> <p>End-user experience</p> <p>Due to the challenge of credential transition, when migrating users in bulk, the following methods are used to activate the user accounts:</p> <ul> <li>Setting a temporary password for each user.</li> <li>Sending an invitation email with a password reset link.</li> </ul> <p>The invitation emails may be missed out or ignored by the users, and users may even try to use the old password on the new systems. This causes user dissatisfaction with the organization.</p> </li> </ul> <p>Note</p> <p>All the challenges mentioned above are handled by the WSO2 Identity Server team during user migration. This reduces the operational overhead on administrators and provides end-users with a better user experience.</p>"},{"location":"guides/users/attributes/","title":"Manage attributes and mappings","text":"<p>Information directly related to users in an organization, such as username, email, address, etc., is stored as user attributes in WSO2 Identity Server. You can view the attributes, update them, and decide if and how they should appear in a user's profile. Learn more about managing attributes in your organization.</p> <p>You can also map your OpenID Connect attributes or SCIM2 attributes to user attributes in your organization.</p>"},{"location":"guides/users/attributes/manage-attributes/","title":"Manage attributes","text":"<p>An attribute is a piece of information about a particular user. It can be anything associated with the user, such as name, group, preferences, etc.</p> <p>User attributes represent information directly related to the user, such as the street address, username, email, first name, and more.</p> <p>You need user attributes to maintain the required user information in an organization. You can select the user information for your applications by using these attributes. Also, the user information displayed in user profiles is managed using attributes.</p> <p>See the information given below to manage attributes in your organization.</p>"},{"location":"guides/users/attributes/manage-attributes/#view-attributes","title":"View attributes","text":"<p>To view the attributes available for your organization:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes.</li> <li>Click Attributes again under the Manage Attributes section.</li> </ol> <p></p> <p>You can now see the complete list of attributes along with Attribute Display Name and Attribute name.</p>"},{"location":"guides/users/attributes/manage-attributes/#add-custom-attributes","title":"Add custom attributes","text":"<p>To add a custom attribute:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes.</li> <li>Click Attributes to see the list of attributes.</li> <li> <p>Click New Attribute and enter values for the following properties:</p> <p></p> <p> Attribute Name The name that will be shared with applications. Protocol Mappings Mappings are auto-generated for the protocols. You can customize them here.  Attribute Display Name The name that will be used in a user's profile. </p> </li> <li> <p>Click Finish</p> </li> </ol>"},{"location":"guides/users/attributes/manage-attributes/#update-attributes","title":"Update attributes","text":"<p>To update the properties of a user attribute:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes.</li> <li>Click Attributes to see the list of attributes.</li> <li> <p>Click Edit for the attribute you want to update.</p> <p></p> <p>Note</p> <p>The Attribute field specifies the unique identifier of the attribute. It always starts with <code>http://wso2.org/claims</code>. This cannot be edited.</p> </li> <li> <p>Update the following values.</p> <p> Attribute Display Name Update the display name of the attribute that will show in user profiles. Description Update the description for the attribute. Display this attribute on the user's profile If this checkbox is selected, the attribute is displayed in user profiles. Make this attribute required on user's profile If this checkbox is selected, users are required to specify a value for this attribute on their profile. Make this attribute read-only on user's profile If this checkbox is selected, the value for this attribute will be read-only in user profiles. </p> </li> <li> <p>Click Update.</p> </li> </ol>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/","title":"Manage OpenID Connect attribute mappings","text":"<p>You can map OpenID Connect attributes to default attributes in the organization. This allows applications that implement OpenID Connect login to receive user information in the ID token.</p>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/#view-openid-connect-attributes","title":"View OpenID Connect attributes","text":"<p>To view the OpenID Connect attributes available for your organization:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes &gt; Manage Attribute Mappings.</li> <li>Click OpenID Connect.</li> </ol> <p></p> <p>You can find the mapped OpenID Connect attributes.</p>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/#add-an-openid-connect-attribute","title":"Add an OpenID Connect attribute","text":"<p>WSO2 Identity Server supports some OpenID Connect attributes by default. You can add new OpenID Connect attributes as follows:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes &gt; Manage Attribute Mappings.</li> <li>Click OpenID Connect &gt; New Attribute.</li> <li> <p>Enter values for the following properties:</p> <p></p> <p> OpenID Connect Attribute The OpenID Connect attribute name that will be shared with applications in the ID token and userinfo responses. User attribute to map to Select the default attribute that should be mapped to the new OIDC attribute. </p> </li> <li> <p>Click Save.</p> </li> </ol> <p>For example, shown below is an OpenID Connect attribute mapped to a user attribute in WSO2 Identity Server:  OpenID Connect Attribute User attribute to map to <code>email_home</code> <code>http://wso2.org/claims/emails.home</code> </p> <p>You need to enable <code>email_home</code> as a requested attribute for your application and also add it to an OIDC scope. You can then configure your application to receive this user information when a user signs in.</p> <p>After user authentication, you can find the <code>email_home</code> claim in the ID token, as shown below.</p> <pre><code>{\n  \"isk\": \"69b37037a2349763dc48e2a30a62c3feebf0b5823cf869e149352737ddc0ca63\",\n  \"at_hash\": \"7qgloEmkz3kGBTtH7RI4qw\",\n  \"sub\": \"user@sample.com\",\n  \"amr\": [\n    \"BasicAuthenticator\"\n  ],\n  \"iss\": \"https://accounts.asgardeo.io/t/bitfrost/oauth2/token\",\n  \"given_name\": \"alice\",\n  \"sid\": \"5580be2b-a12d-43a4-823a-9d1352b88269\",\n  \"aud\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n  \"c_hash\": \"VlKxb3UhuYtFEG_VftAa0g\",\n  \"nbf\": 1625557031,\n  \"azp\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n  \"nickname\": \"nick\",\n  \"exp\": 1625560631,\n  \"iat\": 1625557031,\n  \"family_name\": \"john\"\n  \"email_home\": \"john_home@gmail.com\"\n}\n</code></pre>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/#delete-an-openid-connect-attribute","title":"Delete an OpenID Connect attribute","text":"<p>To delete the OpenID Connect attributes available in your organization:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes &gt; Manage Attribute Mappings.</li> <li>Click OpenID Connect and select the attribute to delete.</li> <li>Click Delete and select the checkbox to confirm your action.</li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/","title":"Manage SCIM 2.0 attribute mappings","text":"<p>Attributes in your organization are mapped to the following SCIM 2.0 schemas mappings:</p> <ul> <li>Core schema attributes</li> <li>User schema attributes</li> <li>Enterprise schema attributes</li> <li>Custom schema attributes</li> </ul> <p>The attributes in the core, user, and enterprise schemas are well-defined in the SCIM 2.0 specification and you can't modify the attributes in these schemas. Custom schema attributes can be added or deleted by users.</p>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/#view-scim-20-attributes","title":"View SCIM 2.0 attributes","text":"<p>To view the SCIM 2 attributes mapped to user attributes in your organization:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes &gt; Manage Attribute Mappings.</li> <li> <p>Click SCIM 2.0.</p> <p></p> </li> </ol>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/#add-a-scim-20-custom-schema-attribute","title":"Add a SCIM 2.0 custom schema attribute","text":"<p>You can add new SCIM 2.0 custom schema attributes as follows:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt;  Attributes &gt; Manage Attribute Mappings.</li> <li>Click SCIM 2.0 and click New Attribute.</li> <li> <p>Enter values for the following properties:</p> <p></p> <p> SCIM Attribute The SCIM attribute name that will be shared with applications. User attribute to map to Select the default attribute that should be mapped to the new SCIM attribute. </p> </li> <li> <p>Click Save.</p> </li> </ol>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/#delete-a-scim-20-custom-schema-attribute","title":"Delete a SCIM 2.0 custom schema attribute","text":"<p>To delete the SCIM 2.0 custom schema attributes available in your organization:</p> <ol> <li>On the WSO2 Identity Server Console, go to Attribute Management &gt; Attributes &gt; Manage Attribute Mappings.</li> <li>Click SCIM 2.0 &gt; Custom Schema and select the attribute to delete.</li> <li>Click Delete and enable the checkbox to confirm you action.</li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/attributes/manage-scopes/","title":"Manage OIDC Scopes","text":"<p>In WSO2 Identity Server, each piece of user information is mapped to a user attribute.</p> <p>OpenID Connect (OIDC) Scopes are a convenient way of grouping such user attributes. Applications can use scopes to request access to the user attributes corresponding to them. Access to other attributes that do not belong to the requested scopes is restricted.</p>"},{"location":"guides/users/attributes/manage-scopes/#default-oidc-scopes","title":"Default OIDC scopes","text":"<p>WSO2 Identity Server uses <code>openid</code> as a marker scope during authentication and it will not return any user attributes for the <code>openid</code> scope.</p> <p>Listed below are the default OpenID Connect scopes that applications can request and the corresponding user attributes:</p> Scope Description Attributes <code>profile</code> This requests to retrieve profile information of the user. <ul> <li>name</li> <li>family_name</li> <li>given_name</li> <li>middle_name</li> <li>nickname</li> <li>preferred_username</li> <li>profile</li> <li>picture</li> <li>website</li> <li>gender</li> <li>birthdate</li> <li>zoneinfo</li> <li>locale</li> <li>updated_at</li> </ul> <code>email</code> This requests access to the end-user's email related claims. <ul> <li>email</li> <li>email_verified</li> </ul> <code>address</code> This scope value requests access to the address view of the user. This will return sub fields of the address claim. <ul> <li>address</li> <li>street_address</li> </ul> <code>phone</code> This scope value requests access to the information related to the phone number of the user. <ul> <li>phone_number</li> <li>phone_number_verified</li> </ul> <code>groups</code> This scope value requests access to the groups to which the user belongs. <ul> <li>groups</li> </ul>"},{"location":"guides/users/attributes/manage-scopes/#create-custom-scopes","title":"Create custom scopes","text":"<p>To add new scopes to your organization:</p> <ol> <li>In the WSO2 Identity Server Console, go to Scopes</li> <li> <p>Click New OIDC Scope to open the Create OpenID Connect Scope dialog box.</p> <p></p> </li> <li> <p>Enter values for the required properties and click Next:      Scope The scope name that will be shared with applications. Display name The scope name that will be displayed in the Scopes section. Applications should use this scope name to request the corresponding attributes. Description The description of the scope. </p> </li> <li> <p>Select the attributes that should correspond to the scope and click Finish.</p> <p></p> </li> </ol>"},{"location":"guides/users/attributes/manage-scopes/#edit-scopes","title":"Edit Scopes","text":"<p>You can add or delete attributes to scopes based on your requirement.</p> <ol> <li>On the WSO2 Identity Server Console, go to Scopes</li> <li>Select the scope to edit.</li> <li>To add a new attribute to the scope:<ol> <li>Click New Attribute.</li> <li>Select the attribute you wish to add and click Save.</li> </ol> </li> <li>To delete an attributes from the scope, click the trash icon next to it.</li> <li>Click Save Changes to save the updates.</li> </ol>"},{"location":"guides/users/attributes/manage-scopes/#use-scopes-to-request-attributes","title":"Use scopes to request attributes","text":"<p>As an application developer, you can follow the steps given below to configure your applications to request user attributes using scopes.</p> <ol> <li> <p>First, go to the WSO2 Identity Server Console and see that your application has the required attributes enabled.</p> </li> <li> <p>Copy the scopes listed at the end of the User Attributes section. You may have default OIDC scopes or custom scopes listed.</p> <p></p> </li> <li> <p>When configuring the authentication request in your client app, append the scope parameter with the scopes that you need:</p> <ul> <li> <p>For client apps using the SDK:</p> <pre><code>{\n\"clientID\": \"&lt;client ID&gt;\",\n\"baseUrl\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;\",\n\"signInRedirectURL\": \"https://localhost:3000\",\n\"signOutRedirectURL\": \"https://localhost:3000\",\n\"scope\": [ \"openid\", \"address\", \"phone\", \"profile\" ]\n}\n</code></pre> <p>Note</p> <p>Find out more about configuring applications.</p> </li> <li> <p>For client apps using direct API calls to authenticate:</p> <pre><code>curl -X GET \\\nhttps://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize \\\n-d 'client_id={client_id}'\n-d 'response_type=code'\n-d 'redirect_uri={redirect_uri}'\n-d 'scope=openid%address%phone%profile'\n</code></pre> </li> </ul> </li> </ol> <p>When the user logs in, WSO2 Identity Server will prompt the user with a consent screen to authorize access to the user attributes. Once the user consents, your application will have access to the requested user attributes.</p>"},{"location":"guides/users/user-stores/","title":"Manage user stores","text":"<p>Administrators in an organization can use user stores to store information about users of an organization.</p> <p>WSO2 Identity Server maintains the following two types of user stores:</p> Internal user store This is the <code>DEFAULT</code> user store of WSO2 Identity Server. You can add users and groups to this user store and make changes to them via the WSO2 Identity Server Console. Remote user store             This is a remote user store that administrators can connect to WSO2 Identity Server. These user stores can be configured with two access types:  <ul> <li>Read-only  - The users and groups of read-only user stores cannot be modified through WSO2 Identity Server.</li> <li>Read-write - You can perform create, read, update, and delete operations on users in the user store                 and read and update operations on groups through WSO2 Identity Server.</li> </ul>"},{"location":"guides/users/user-stores/#whats-next","title":"What's Next","text":"<ul> <li>Connect a remote user store</li> <li>Configure high availability for a remote user store</li> <li>Update the configurations of a remote user store</li> </ul>"},{"location":"guides/users/user-stores/configure-a-user-store/","title":"Connect a remote user store","text":"<p>Note</p> <p>If you have connected a remote user store before 7th February 2023, you will have Read-Only access for the user store. If you need Read-Write access for your user store on WSO2 Identity Server,</p> <ol> <li>Delete the existing remote user store.</li> <li>Register a remote user store again with Read/Write access type.</li> <li>Set up the remote user store with the latest user store agent.</li> </ol> <p>You can connect your on-premise user store to WSO2 Identity Server and onboard users and groups from it. Note that this user store connection is read-only, which means you cannot use the WSO2 Identity Server Console to modify this user store.</p> <p>Administrators get the opportunity to manage access to business applications and manage users and groups based on the access type of the user store.</p> <p>Follow the guide below to set up a remote user store in WSO2 Identity Server.</p>"},{"location":"guides/users/user-stores/configure-a-user-store/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>An organization in WSO2 Identity Server. Create an organization if you don't have one already.</p> </li> <li> <p>An on-premise user store. Currently, WSO2 Identity Server supports:</p> </li> <li>Lightweight Directory Access Protocol (LDAP)</li> <li> <p>Active Directory (AD)</p> </li> <li> <p>To run the user store agent, you need to have:</p> </li> <li>JAVA 8 or JAVA 11 installed locally</li> <li>JAVA_HOME configured correctly</li> </ul> Requirements<ul> <li> <p>Recommended hardware requirements      CPU cores <code>2</code> Storage <code>500 MB</code> of free space on disk. Operating System The connector can run on Windows or Linux. RAM <code>1 GB</code> </p> </li> <li> <p>Connectivity methods      Protocol Web socket Port 443 </p> </li> </ul>"},{"location":"guides/users/user-stores/configure-a-user-store/#register-a-remote-user-store","title":"Register a remote user store","text":"<p>To configure a remote user store for your organization:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; User Stores.</li> <li> <p>Click Connect userstore to open the following:</p> <p></p> </li> <li> <p>Enter the following details about the user store.      Name A unique name to identify your user store. Description A description for the user store. Remote user store type Select your user store type Access Type              Select the access type of the user store. It can be any one of the following:  - Read-only              - Read/Write  Note : The access type of the user store cannot be modified after creation.          </p> </li> <li> <p>Click Next and under Map Attributes, map Username and User ID attributes to that of your user store.</p> <p>Warning</p> <p>These two attributes need to be mapped correctly for proper authentication.</p> <ul> <li><code>Username</code> - This attribute is used as the user identifier. Provide an attribute that identifies your user in your on-premise user store. For the best experience, use a username that satisfies validation rules in Username Validation section.</li> <li><code>User ID</code> - This attribute is used to uniquely identify a user entry. Provide an attribute that uniquely identifies a user entry in your user store.</li> </ul> </li> <li> <p>Click Finish to complete the registration.</p> </li> </ol>"},{"location":"guides/users/user-stores/configure-a-user-store/#set-up-the-remote-user-store","title":"Set up the remote user store","text":"<p>After registering the user store, you'll be redirected to the Setup Guide of the user store agent.</p> <p>To assemble and configure the user store agent bundle:</p> <ol> <li> <p>Download the user store agent.</p> </li> <li> <p>Configure the properties and connection details of the local user store by following these steps:</p> <ol> <li>Unzip the downloaded user store agent.</li> <li>Go to the root directory of the user store agent and open the <code>deployment.toml</code> file.</li> <li> <p>Update the configurations of the <code>deployment.toml</code> file according to your user store settings. A sample configuration is given below for reference.</p> <pre><code>[user_store]\ntype = \"ldap\"\nbase_dn = \"dc=wso2,dc=org\"\nconnection_url = \"ldap://localhost:10391\"\nconnection_name = \"cn=admin,dc=example,dc=org\"\nconnection_password = \"adminpassword\"\nuser_id_search_filter = \"(&amp;amp;(objectClass=inetOrgperson)(uid=?))\"\nuser_name_list_filter = \"(objectClass=inetOrgperson)\"\nuser_id_attribute = \"uid\"\nuser_name_attribute = \"cn\"\nuser_name_search_filter = \"(&amp;amp;(objectClass=inetOrgperson)(cn=?))\"\npassword_hash_method = \"PLAIN_TEXT\"\ngroup_search_base = \"ou=Groups,dc=example,dc=org\"\ngroup_name_attribute = \"cn\"\ngroup_name_search_filter = \"(&amp;amp;(objectClass=groupOfNames)(cn=?))\"\ngroup_name_list_filter = \"(objectClass=groupOfNames)\"\ngroup_id_attribute = \"gid\"\nmembership_attribute = \"member\"\n</code></pre> <p>Note</p> <p>Refer remote user store properties for the complete list of user store configurations.</p> </li> </ol> </li> <li> <p>Return to the WSO2 Identity Server Console and, click Generate Token to create an installation token. The installation token is essential to run the user store agent.</p> <p>Warning</p> <ul> <li>Copy the installation token and save it in a safe location. You won't be able to see it again!</li> <li>This token has no expiry time, but in case you lose or forget it, you can regenerate an installation token.</li> </ul> </li> <li> <p>To start the user store agent, navigate to its root directory and run one of the following commands based on your operating system:</p> Linux/OSxWindows <pre><code>sh wso2agent.sh\n</code></pre> <pre><code>wso2agent.bat -- run\n</code></pre> <p>Enter the installation token generated in the previous step when prompted.</p> (Optional) Run the user store agent as a background process<ol> <li>Create a file named <code>accessToken</code> in the root directory of the agent.</li> <li>Add the installation token obtained from the previous step.</li> <li> <p>Run the user store agent.</p> Linux/OSxWindows <pre><code>sh wso2agent.sh start\n</code></pre> <pre><code>wso2agent.bat start\n</code></pre> </li> </ol> </li> </ol>"},{"location":"guides/users/user-stores/configure-a-user-store/#whats-next","title":"What's Next","text":"<ul> <li>Configure high availability for a remote user store</li> <li>Manage remote user stores in WSO2 Identity Server</li> </ul>"},{"location":"guides/users/user-stores/configure-high-availability/","title":"Configure high availability for a remote user store","text":"<p>It is recommended to maintain high availability for your remote user store in WSO2 Identity Server as it includes user information that must be available at all times.</p> <p>To maintain high availability for the remote user store, you need to connect a second user store agent.</p>"},{"location":"guides/users/user-stores/configure-high-availability/#prerequisites","title":"Prerequisites","text":"<p>Configure and connect a remote user store in WSO2 Identity Server.</p>"},{"location":"guides/users/user-stores/configure-high-availability/#connect-a-second-user-store-agent","title":"Connect a second user store agent","text":"<p>To connect a second user store agent:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; User Stores.</li> <li>Select your user store from the User stores list.</li> <li>In the General tab, a second user store agent is listed under User Store Agent Connection(s).</li> <li> <p>Click Generate token on the second user store agent.</p> <p></p> <p>Note</p> <p>An installation token can only be used to connect to one user store agent. You cannot use the same installation token to run a second agent.</p> </li> <li> <p>Run a second user store agent by navigating to its root directory and by using one of the following commands based on your operating system:</p> Linux/OSxWindows <pre><code>sh wso2agent.sh\n</code></pre> <pre><code>wso2agent.bat\n</code></pre> <p>Enter the second installation token generated in the previous step when prompted.</p> </li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/","title":"Manage remote user stores in WSO2 Identity Server","text":"<p>This guide walks you through the process of managing your remote user stores via the WSO2 Identity Server Console.</p>"},{"location":"guides/users/user-stores/update-user-stores/#update-attribute-mappings","title":"Update attribute mappings","text":"<p>To update attribute mappings via the WSO2 Identity Server Console:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; User Stores.</li> <li>Select your user store from the User stores list.</li> <li> <p>Go to the Attribute Mappings tab and update the required information.</p> <p>Note</p> <ul> <li>Update Custom Attributes and Local Attributes mapped to your user store.</li> <li>Map WSO2 Identity Server attributes with the corresponding on-premise user store attributes.</li> </ul> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#disconnect-a-user-store-agent","title":"Disconnect a user store agent","text":"<p>To disconnect a user store agent:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; User Stores.</li> <li>Select your user store from the User stores list.</li> <li>In the User Store Agent Connection(s) section, click Disconnect on the user store agent that you wish to disconnect.</li> <li>Select the checkbox to confirm your action and click Confirm.</li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#regenerate-an-installation-token","title":"Regenerate an installation token","text":"<p>An installation token is used to run a user store agent. Once generated, an installation token is displayed only once.</p> <p>In case you forget or lose this installation token, you can regenerate it.</p> <p>Warning</p> <ul> <li> <p>If you regenerate a token without disconnecting the user store agent, the agent will be disconnected forcefully. You will need to re-run the user store agent with the new installation token.</p> </li> <li> <p>If the token is compromised, it is essential to regenerate an installation token.</p> </li> </ul> <p>To regenerate an installation token:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; User Stores.</li> <li>Select your user store from the User Stores list and go to the General tab.</li> <li>In the User Store Agent Connection(s) section, click Regenerate Token on the user store agent that you wish to regenerate the token for.</li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#disable-a-user-store","title":"Disable a user store","text":"<p>Warning</p> <p>If you disable a user store, its users will lose access to WSO2 Identity Server applications and administrators can no longer view users or groups of that user store in the WSO2 Identity Server Console.</p> <p>To disable a user store:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; User Stores and select your user store.</li> <li> <p>Turn on the Disable User Store toggle at the bottom of the page to disable the user store.</p> <p></p> <p>Note</p> <p>You can re-enable a disabled user store by switching off the toggle.</p> </li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#delete-a-remote-user-store","title":"Delete a remote user store","text":"<p>A user store can be deleted by an administrator. Once a user store is deleted, the action is irreversible.</p> <p>Note</p> <p>Once you delete the remote user store the user store agents associated with this user store will be forcefully disconnected.</p> <p>To delete a user store:</p> <ol> <li>On the WSO2 Identity Server Console, go to User Management &gt; User Stores and select your user store.</li> <li> <p>Click Delete User Store at the bottom of the page.</p> <p></p> </li> <li> <p>On the pop-up window, type the user store name and click Confirm to delete the user store.</p> </li> </ol>"},{"location":"guides/your-is/","title":"Your WSO2 Identity Server","text":"<p>If you are an owner of an organization or an administrator, you can manage your WSO2 Identity Server accounts using the My Account portal.</p> <p>The owner is a user who creates an organization in WSO2 Identity Server. This grants the owner all the administrative rights by default. An administrator is a user who is invited in to the organization and assigned administrative priviledges.  </p>"},{"location":"guides/your-is/delete-your-user-account/","title":"Delete your user account","text":"<p>If you have a requirement to delete your own user account from WSO2 Identity Server, see the guidelines and instructions given below.</p>"},{"location":"guides/your-is/delete-your-user-account/#owners","title":"Owners","text":"<p>If you are the owner of one or multiple WSO2 Identity Server organizations, you will have user accounts (of type Owner) in each organization. Currently, you are not allowed to remove your owner accounts or to transfer your ownership of organizations to other users.</p> <p>To delete your owner account(s), you need to remove the organizations that you own.</p>"},{"location":"guides/your-is/delete-your-user-account/#administrators","title":"Administrators","text":"<p>If you want to remove your administrator account from an organization, you need to send a request to another administrator in the organization. See the instruction on deleting administrators.</p> <p>Note</p> <p>Note that removing your administrator account from one organization only removes your association with that organization. Your administrator account will continue to persist in other organizations that you are associated with.</p>"},{"location":"guides/your-is/is-self-service/","title":"Self-service for owners and administrators","text":"<p>If you are an owner or an administrator in an WSO2 Identity Server organization, go to the My Account portal to easily access and self-manage your information from anywhere.</p> <p>You can perform the following activities on this portal: - Update profile information - Change password - View linked social accounts - View and revoke active sessions</p>"},{"location":"guides/your-is/is-self-service/#access-my-account-portal","title":"Access My Account portal","text":"<p>You can access the My Account portal using the following URL:</p> <p>https://myaccount.asgardeo.io</p> <p>You can also switch to My Account from the WSO2 Identity Server. Click your profile icon as shown below and select My Account.</p> <p></p> <p>You are now automatically signed in to the portal.</p>"},{"location":"guides/your-is/is-self-service/#update-profile-information","title":"Update profile information","text":"<p>The user details displayed in your profile corresponds to the default attributes that are enabled for the organization.</p> <p>To update your profile information via My Account:</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Personal Info to see the profile information.</li> </ol> <p></p> <ol> <li>If required, update the editable information.</li> </ol>"},{"location":"guides/your-is/is-self-service/#change-password","title":"Change password","text":"<p>To change the current password via My Account, the user should follow these steps.</p> <ol> <li> <p>Sign in to the My Account portal.</p> </li> <li> <p>Click Security &gt; Change Password.</p> </li> <li> <p>Click Change your password.</p> <p></p> </li> <li> <p>Enter the Current password and the New password.</p> </li> <li> <p>Click Submit.</p> </li> </ol> <p>Note</p> <ul> <li>Alternatively, users can reset the password from the application login page. </li> <li>Users onboarded from a read-only remote user store do not have the capability of changing their password through the My Account portal.</li> </ul>"},{"location":"guides/your-is/is-self-service/#manage-linked-social-accounts","title":"Manage linked social accounts","text":"<p>The account owner can view one's linked social accounts and remove them if needed.</p> <p>Given below are the steps to follow.</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Personal Info &gt; External Logins.</li> <li> <p>To remove any of the linked accounts, click Remove.</p> <p></p> </li> </ol>"},{"location":"guides/your-is/is-self-service/#export-profile-information","title":"Export profile information","text":"<p>Users can export profile information via the My Account portal as <code>json</code> files.</p> <p>Given below are the steps to follow.</p> <ol> <li> <p>Sign in to the My Account portal.</p> </li> <li> <p>Click Personal Info &gt; Export Profile.</p> </li> <li> <p>Click Download the profile to export the user profile information.</p> <p></p> Sample JSON file<p>This is a sample of the exported <code>json</code> file with an admin user's profile information.</p> <pre><code>{\n\"user_profile\": {\n\"accountState\": \"UNLOCKED\",\n\"emailVerified\": \"true\",\n\"country\": \"SriLanka\",\n\"givenname\": \"firstname\",\n\"created\": \"2021-04-07T15:07:58.001440Z\",\n\"modified\": \"2023-04-25T04:31:05.838894Z\",\n\"emailaddress\": \"tom@wso2.com\",\n\"userid\": \"36d2dd61-6e58-4b54-bfbe-f8621236c88b\",\n\"username\": \"tom@wso2.com\",\n\"lastname\": \"Jerry\"\n},\n\"linked_accounts\": [\n{\n\"connection\": \"Google\",\n\"connectionId\": \"xxxx\",\n\"linkedAccountId\": \"xxxx\",\n\"isExternalConnection\": true\n}\n]\n}\n</code></pre> </li> </ol>"},{"location":"guides/your-is/is-self-service/#manage-login-sessions","title":"Manage login sessions","text":"<p>Users can manage their own active sessions via My Account as follows:</p> <ol> <li> <p>Sign in to the My Account portal.</p> </li> <li> <p>Click Security &gt; Active Sessions. All the active login sessions of the user are listed.</p> </li> <li> <p>Click Show more on a session to get more details.</p> <p></p> </li> <li> <p>To terminate sessions, users can do one of the following:</p> <ul> <li> <p>Click Terminate to terminate a selected session.</p> </li> <li> <p>Click Terminate all on the upper-right to terminate all active sessions.</p> </li> </ul> </li> </ol>"},{"location":"guides/your-is/is-self-service/#enroll-totp-for-wso2-identity-server-users","title":"Enroll TOTP for WSO2 Identity Server users","text":"<p>If you, as an administrator or an organization owner, want to register an authenticator app for generating OTP values, you can configure it via the My Account portal.</p>"},{"location":"guides/your-is/is-self-service/#initial-setup","title":"Initial setup","text":"<p>Follow the steps given below to set up an authenticator app using My Account.</p> <ol> <li> <p>In your My Account portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the + icon and scan the prompted QR code using an authenticator application.</p> <p></p> </li> <li> <p>Enter the TOTP code obtained after scanning the QR code and click Verify.</p> <p></p> </li> </ol>"},{"location":"guides/your-is/is-self-service/#regenerate-the-qr-code","title":"Regenerate the QR code","text":"<p>If you deleted the scanned QR from the authenticator app, follow the steps below to reconfigure it.</p> <ol> <li> <p>In your My Account portal, go to Security &gt; Additional Authentication.</p> </li> <li> <p>Click the eye icon (view) next to the authenticator app.</p> <p></p> </li> <li> <p>Click Regenerate to generate a new QR code.</p> <p></p> </li> <li> <p>Enter the TOTP code obtained after scanning the QR code and click Verify.</p> <p></p> </li> </ol>"},{"location":"guides/your-is/is-self-service/#configure-backup-codes","title":"Configure backup codes","text":"<p>When you have enabled at least one additional authentication method in the Additional Authentication section, authentication using backup codes will be available as a recovery option for MFA. Users can use these backup codes to log in when they cannot obtain the required MFA codes.</p>"},{"location":"guides/your-is/is-self-service/#enable-backup-codes","title":"Enable backup codes","text":"<p>Before you begin</p> <p>You need to configure at least one additional authenticator from the My Account portal. See more information on configuring the authenticator app.</p> <p>To enable backup codes:</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li> <p>Click <code>+</code> to add backup codes.     You will see a popup window with ten backup codes. Each backup code can be used only once.</p> <p></p> </li> <li> <p>Click Download Codes or Copy Codes and save the copied or downloaded backup codes securely, as the codes will only be shown once.</p> </li> <li>After saving the backup codes, click Close.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/your-is/is-self-service/#regenerate-backup-codes","title":"Regenerate backup codes","text":"<p>In case you have lost these backup codes or have used them all, follow the steps below to generate a new set of backup codes.</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li> <p>Click on the refresh icon to regenerate the backup codes.</p> <p></p> </li> <li> <p>On the confirmation window, click Regenerate to confirm your action.     You will see a popup window with ten backup codes. Each backup code can be used only once.</p> <p></p> </li> <li> <p>Click Download Codes or Copy Codes and save the copied or downloaded backup codes securely, as the codes will only be shown once.</p> </li> <li>After saving the backup codes, click Close.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/your-is/is-self-service/#remove-backup-codes","title":"Remove backup codes","text":"<p>To remove the backup codes:</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li> <p>Click on the trash icon to remove the existing backup codes.</p> <p></p> </li> <li> <p>On the confirmation window, click Remove to confirm your action.</p> </li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/your-is/manage-subscriptions/","title":"Manage subscriptions","text":"<p>Start your WSO2 Identity Server journey with the free plan and use it for as long as you want if it fits your requirements. You can also upgrade to a paid plan, downgrade to a lower plan, or cancel your subscription, as explained below.</p> <p>See the pricing details and the available resource limits and usage limits for each subscription plan.</p>"},{"location":"guides/your-is/manage-subscriptions/#upgrade-the-subscription-plan","title":"Upgrade the subscription plan","text":"<p>To upgrade your subscription:</p> <ol> <li>Sign in to the Asgardeo Console.</li> <li> <p>Click Upgrade on the upper menu or go to the profile menu and select Billing Portal to open the portal.</p> <p></p> </li> <li> <p>On the Subscriptions page, select your preferred billing cycle, your business use case, the number of monthly active users (MAUs), the subscription plan, and the support plan.</p> <p>Note</p> <p>Find detailed information about subscription plans in Plan details</p> </li> <li> <p>Once you have evaluated the subscription details, you can do one of the following:</p> <ul> <li> <p>Subscribe to an Essentials or a Professional plan by following the steps below:</p> <ol> <li>Once you have decided on an appropriate plan, click Upgrade.</li> <li> <p>Enter your billing and payment details and agree to our terms of fees and payment</p> <p></p> </li> <li> <p>Click Upgrade to complete your subscription.</p> </li> </ol> </li> <li> <p>Upgrade an existing paid subscription by selecting a higher tier plan and following the same steps mentioned above.</p> </li> <li> <p>Subscribe to an Enterprise plan by clicking Contact Us, and submitting your information. The WSO2 Identity Server team will get back to you with the next steps.</p> </li> </ul> </li> </ol>"},{"location":"guides/your-is/manage-subscriptions/#plan-details","title":"Plan details","text":"<p>The topics below explain about the options available to you when selecting a plan that is right for you.</p>"},{"location":"guides/your-is/manage-subscriptions/#billing-cycle","title":"Billing cycle","text":"<p>You can choose to be billed monthly or annually for your subscription. However, note that the monthly active users (MAUs) count that exceeds the allowed limit is always charged monthly.</p> <p>Note</p> <p>Billing cycles start on the 1st day of every month. Depending on the day of the month on which you subscribe, you will be charged a prorated fee for the first month. </p>"},{"location":"guides/your-is/manage-subscriptions/#business-use-case","title":"Business use case","text":"<p>Choose your business use case from the available options:</p> B2C (Business-to-Consumer)                     Your organization focuses on providing digital services directly to individual consumers.          B2B (Business-to-Business)                     Your organization focuses on providing digital products and services to other businesses that will enable those services for their business users.          B2E (Business-to-Employee)                     Your organization focuses on providing products or services directly to its employees.          <p>Note that the price for each subscription plan varies depending on the business use case.</p>"},{"location":"guides/your-is/manage-subscriptions/#monthly-active-users-maus","title":"Monthly Active Users (MAUs)","text":"<p>This value indicates the total number of users that can be authenticated into your system using WSO2 Identity Server within a month. Use the slider to select the number of monthly active users (MAU) you expect to have. Note that the price for each subscription plan varies depending on the MAU.</p> <p>If you are on the free subscription, the MAU count will be throttled when the limit is exceeded. However, for higher subscription plans, additional MAUs will not be throttled but charged as specified in the WSO2 Identity Server pricing page.</p>"},{"location":"guides/your-is/manage-subscriptions/#subscription-plan","title":"Subscription plan","text":"<p>Depending on your selected use case, the available subscription plans will change. You can customize the subscription plan by changing your selected options such as  MAUs, support plan, etc.</p> <p>Note</p> <p>To compare the different subscription plans, go to WSO2 Identity Server pricing.</p> <p></p>"},{"location":"guides/your-is/manage-subscriptions/#support-plan","title":"Support plan","text":"<p>The support plan you select determines the availability of support services from the WSO2 Identity Server team. Select the support plan you want using the drop-down list available for the subscription plan, as shown in the following example.</p> <p>Available support packages for each plan are as follows:</p> <ul> <li>Essentials plan: Optional Basic(12/5 SLA) support</li> <li>Professional plan: Optional Basic(12/5 SLA) or Enterprise(24/7 SLA) support</li> <li>Enterprise plan: Enterprise(24/7 SLA) support included.</li> </ul> <p></p>"},{"location":"guides/your-is/manage-subscriptions/#manage-billing-and-payment","title":"Manage billing and payment","text":"<p>Your billing and payment information will be saved in the Billing Details tab. You can use this tab to edit your billing details or to add or delete a payment method.</p> <p></p>"},{"location":"guides/your-is/manage-subscriptions/#manage-invoices","title":"Manage invoices","text":"<p>Once you have upgraded to a paid plan, you can find and download your invoice from the Invoices tab that appear.</p> <p></p>"},{"location":"guides/your-is/manage-subscriptions/#downgradecancel-your-subscription","title":"Downgrade/Cancel your subscription","text":"<p>Contact the WSO2 Identity Server support team at asgardeo-help@wso2.com for subscription downgrades and cancellations.</p>"},{"location":"guides/your-is/recover-password/","title":"Recover your password","text":"<p>If you are an owner or an administrator in an WSO2 Identity Server organization, you can recover a forgotten password by following the instructions on the WSO2 Identity Server sign-in page.</p> <p>To recover your password:</p> <ol> <li> <p>Go to the sign-in page via the My Account Portal.</p> <p></p> </li> <li> <p>Click Forgot password?.</p> </li> <li> <p>Enter your username and click Send Reset Link.</p> <p></p> <p>An email notification is sent to your email address.</p> </li> <li> <p>Open the email you received and click Reset Password.</p> <p></p> </li> <li> <p>Enter new password and Proceed.</p> </li> </ol> <p>Now you have reset your password and can sign in using your new password.</p>"},{"location":"references/","title":"References - Overview","text":"<p>See the topics in this section for references that will help you while working with WSO2 Identity Server. This includes concepts related to WSO2 IS features, configuration details, and other resources.</p> <ul> <li> <p>User roles and their associated permissions.</p> </li> <li> <p>OpenID Connect and SAML settings for applications.</p> </li> <li> <p>OpenID Connect and SAML settings for enterprise identity providers in WSO2 IS.</p> </li> <li> <p>Grant types used in WSO2 IS.</p> </li> <li> <p>The API references you need for writing conditional authentication scripts.</p> </li> <li> <p>Remote user store properties you need for configuring WSO2 IS user store agent.</p> </li> <li> <p>Monitor logs in WSO2 IS.</p> </li> <li> <p>Email templates in WSO2 IS.</p> </li> <li> <p>Compliance in WSO2 IS.</p> <ul> <li>GDPR</li> <li>eIDAS</li> <li>CCPA</li> <li>FIPS</li> <li>Accessibility Compliance</li> </ul> </li> <li> <p>Localization in WSO2 IS.</p> </li> </ul>"},{"location":"references/authorization-policies-for-apps/","title":"Authorization policies for apps","text":"<p>In the context of WSO2 Identity Server, an authorization policy can be engaged when authorizing an API resource to an application. The policy selection determines the enforcement mechanism for controlling access to the API resource. WSO2 Identity Server offers two options:</p> <ul> <li> <p>Role-Based Access Control (RBAC): This approach allows developers to enforce authorization to API resources based on application roles. The process flow once a user selects RBAC is as follows</p> <ol> <li>The user attempts to access an application with controlled access to API resources.</li> <li>WSO2 Identity Server verifies the user's group assignment.</li> <li>WSO2 Identity Server retrieves the user's roles by checking the group-to-role mappings.</li> <li>WSO2 Identity Server evaluates the permissions associated with the user's roles.</li> <li>Based on the assigned permissions, WSO2 Identity Server grants or denies the user with controlled access to the API resources.</li> </ol> <p>To summarize, WSO2 Identity Server validates the user's group assignment, determines the roles based on the group-to-role mappings, examines the permissions associated with the roles, and decides whether to permit or restrict the user's access to the API resources.</p> </li> <li> <p>No Authorization Policy: If an authorization policy is not required for an API resource, no authorization will be applied by default. This option allows users to access the API resource based on authentication and consent without any additional authorization requirements. Choosing this policy will provide unrestricted access for the API resource.</p> </li> </ul> <p>When configuring an authorization policy, it is important to carefully consider the security requirements of the API resource and select the appropriate policy that aligns with the desired level of access control.</p>"},{"location":"references/email-templates/","title":"Email templates","text":"<p>WSO2 Identity Server organizations use several email templates to send email notifications to users.</p> <p>Note</p> <ul> <li>You can customize all available email templates to match your organization's preferences using the Email Templates API.</li> <li>You can also use the Console to change some of the most frequently used email templates in WSO2 Identity Server. Learn how to customize email content from the Console.</li> </ul>"},{"location":"references/email-templates/#email-templates-in-wso2-identity-server","title":"Email templates in WSO2 Identity Server","text":"<p>The following is a comprehensive list of email templates that are available in WSO2 Identity Server.</p> <p>Note</p> <p>Some of the email templates below should contain URLs to redirect the user for certain actions. Learn how to generate these URLs in the URLs in email templates section.</p> Template ID Description LiteUserEmailConfirmation                 ResendLiteUserEmailConfirmation              These emails are generated when you create an account in WSO2 Identity Server. EmailConfirm             AccountConfirmation             ResendAccountConfirmation                  These emails are sent when a user creates an account in your WSO2 Identity Server organization. The email will prompt the user to confirm their account/email  VerifyEmailOnUpdate This email is generated when the user changes the email associated with the account. AccountIdRecovery This email is generated when a user requests an account ID recovery.  PasswordReset                 resendPasswordReset                 AdminForcedPasswordReset                 resendAdminForcedPasswordReset These emails involve password resets. Depending on whether the user or the administrator initiates the password reset, separate emails are generated.  initiateRecovery This email is generated when a user initiates a password reset using security questions.  passwordResetSuccess This email is generated when a user successfully resets the password.  AdminForcedPasswordResetWithOTP                 resendAdminForcedPasswordResetWithOTP              These emails are generated when a user initiates password reset using OTP. The email template can display the OTP using the {{ confirmation-code }} literal. TemporaryPassword This email is generated when a user is offered a temporary password by the administrator. The email template can display the temporary using the {{ temporary-password }} literal. AccountLockAdmin                 AccountUnlockAdmin                 AccountEnable                 AccountDisable These emails are generated when a user account is enabled or disabled.  AccountLockFailedAttempt This email is generated when a user account gets locked due to a specified number of failed login attempts. The email template can display the lock duration using the {{ lock-duration }} literal. AccountUnlockTimeBased This email is generated when a user account is unlocked automatically once the lock duration exceeds. UnseenDeviceLogin This email is generated when the logs in to using an unrecognized device. The email template can display the time of login using the {{ login-time }} literal. idleAccountReminder This email is generated when there is no activity in the user account for a specified amount of time. TOTP This email is generated when the user is given a TOTP to log in. The email template can display the token using the {{ token }} literal OneTimePassword This email is generated when a user is given a new password to log in. The email template can display the password using the {{ otp-password }} literal EmailOTP                 ResendEmailOTP              These emails are generated when a user is given a one-time password to sign in to an application. The email templates can display the password using the {{ OTPCode }} literal. magicLink              This email is generated when a user logs in with a magic link. The application name and the expiry time of the link can be accessed by the literals {{ application-name }}, and {{ expiry-time }} respectively. AskPassword                 resendAskPassword These emails are generated when a user is asked to create a password for the newly created account.  selfSignUpNotify                 selfSignUpSuccess These emails are generated when a user uses self sign-up to register in your organization."},{"location":"references/email-templates/#urls-in-email-templates","title":"URLs in email templates","text":"<p>Some email templates in WSO2 Identity Server should contain URLs which users can click to complete an action. Explained below are those URLs and in which email templates these URLs should contain.</p> <ul> <li> <p>URL to confirm a user account</p> <pre><code>{{ account.recovery.endpoint-url }}/confirmliteuserregistration.do?confirmation={{ confirmation-code }}&amp;callback=https://{{ server.placeholder.websiteHostName }}/early-access\n</code></pre> <p>This URL is used in the <code>LiteUserEmailConfirmation</code> and <code>ResendLiteUserEmailConfirmation</code> templates.</p> </li> <li> <p>URL to confirm an email address</p> <p><pre><code>{{ account.recovery.endpoint-url }}/confirmregistration.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}\n</code></pre> This URL is used in the <code>EmailConfirm</code> template.</p> </li> <li> <p>URL to confirm a user account</p> <p><pre><code>{{ account.recovery.endpoint-url }}/confirmregistration.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;spId={{ spId }}\n</code></pre> This URL is used in the <code>AccountConfirmation</code> and <code>ResendAccountConfirmation</code>.</p> </li> <li> <p>URL to verify an updated email address.</p> <p><pre><code>{{ account.recovery.endpoint-url }}/confirmregistration.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;amp;username={{ url:user-name }}\n</code></pre> This URL is used in the <code>VerifyEmailOnUpdate</code> template.</p> </li> <li> <p>URL to reset a password</p> <pre><code>{{ account.recovery.endpoint-url }}/confirmrecovery.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;callback={{ callback }}&amp;spId={{ spId }}&amp;type=reset\n</code></pre> <p>This URL is used in the <code>PasswordReset</code> and <code>resendPasswordReset</code> templates.</p> </li> <li> <p>URL to reset a password (admin forced)</p> <pre><code>{{ account.recovery.endpoint-url }}/confirmrecovery.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;type=reset\n</code></pre> <p>This URL is used in the <code>AdminForcedPasswordReset</code> and <code>resendAdminForcedPasswordReset</code> templates.</p> </li> <li> <p>URL to generate a password for a newly created account</p> <pre><code>{{ account.recovery.endpoint-url }}/confirmrecovery.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;type=invite\n</code></pre> <p>This URL is used in the <code>AskPassword</code> and <code>resendAskPassword</code> templates.</p> </li> <li> <p>URL generate magic links</p> <pre><code>{{ carbon.product-url }}/commonauth?mlt={{ ma\\Token }}\n</code></pre> <p>This URL is used in the <code>magicLink</code> template.</p> </li> <li> <p>URL to prompt the user to access My Account after a user self signs up.</p> <pre><code>{{ authentication.endpoint-url }}?client_id=MY_ACCOUNT&amp;t={{ tenant-domain }}&amp;relyingParty=MY_ACCOUNT&amp;type=oidc&amp;sp=My+Account&amp;isSaaSApp=true&amp;authenticators=BasicAuthenticator:LOCAL\n</code></pre> <p>This URL is used in the <code>selfSignUpNotify</code> and <code>selfSignUpSuccess</code> templates.</p> </li> </ul> <p>Note</p> <p>Be sure to use proper HTML URL encoding when including above URLs in email templates.</p>"},{"location":"references/email-templates/#literals-in-email-templates","title":"Literals in email templates","text":"<p>Email templates use literals to display dynamic information on email templates. The following are the template literals that are accessible for all email templates in WSO2 Identity Server.</p>"},{"location":"references/email-templates/#general-literals","title":"General literals","text":"<p>The following literals about the user are accessible for all email templates.</p> Literal Description {{ user-name }} Name of the user account. {{ user.claim.givenname }} Given name of the user. {{ userstore-domain }} Name of the user store. {{ tenant-domain }} Name of the organization."},{"location":"references/email-templates/#branding-literals","title":"Branding literals","text":"<p>You can use the following literals and customize email templates to fit the branding of your organization.</p> <p>You can configure the values of these literals from the WSO2 Identity Server Console. Refer to the branding documentation to learn more.</p> Literal Descriprion {{ organization.logo.img }} Organization logo {{ organization.logo.altText }} Logo alternative text {{ organization.copyright.text }} Copyright text {{ organization.support.mail }} Support email {{ organization.color.primary }} Primary color {{ organization.color.background }} Email background color {{ organization.font }} Email font {{ organization.font.color }} Email body font color {{ organization.button.font.color }} Email button font color"},{"location":"references/grant-types/","title":"OAuth2 grant types of WSO2 Identity Server applications","text":"<p>OAuth 2.0 defines several grant types used to obtain an access token, which is required to access protected resources on behalf of a user or an application. Each grant type is designed for a specific use case and supports different parameters.</p> <p>The grant types supported by WSO2 Identity Server applications are as follows:</p> <p>OAuth 2.0 grants</p> <ul> <li>Authorization code grant</li> <li>Refresh token grant</li> <li>Client credentials grant</li> <li>Implicit grant</li> <li>Password grant</li> </ul> <p>WSO2 Identity Server's custom grants</p> <ul> <li>Organization switch grant</li> </ul>"},{"location":"references/grant-types/#authorization-code-grant","title":"Authorization code grant","text":"<p>The Authorization code flow provides a secure way for a client application to obtain an access token without exposing the user's credentials to the client application. The user only authenticates with the authorization server, which then issues an authorization code that can be exchanged for an access token.</p> <p>This helps to protect the user's credentials and prevents them from being compromised by malicious client applications.</p> <p>The following diagram shows how the authorization code flow works.</p> <p></p> <ol> <li>The user visits the client application and requests for login through WSO2 Identity Server.</li> <li>The client application redirects the authorization code request to WSO2 Identity Server.</li> <li>WSO2 Identity Server prompts the user to enter credentials.</li> <li>The user enters the credentials.</li> <li>After successful authentication, WSO2 Identity Server sends the authorization code to the client application.</li> <li>The client application uses this authorization code to request an access token from WSO2 Identity Server.</li> <li>WSO2 Identity Server sends the access token and ID token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns the requested user information to the client application.</li> </ol>"},{"location":"references/grant-types/#refresh-token-grant","title":"Refresh token grant","text":"<p>The refresh token grant provides a secure way for client applications to obtain a new access token without requiring the user to re-authenticate. This can help improve the user experience by avoiding unnecessary login prompts and reducing the load on the authorization server by reducing the frequency of authentication requests. Refresh tokens typically have a longer lifetime than access tokens, and the user or the authorization server can revoke them at any time.</p> <p>The following diagram shows how the refresh token flow works.</p> <p></p> <ol> <li>The client application requests user information from the resource server by providing the access token.</li> <li>As the access token is expired, the resource server returns an error message.</li> <li>By sending the refresh token, the client application requests a new access token from WSO2 Identity Server.</li> <li>WSO2 Identity Server sends a new access token and a new refresh token.</li> </ol>"},{"location":"references/grant-types/#client-credentials-grant","title":"Client credentials grant","text":"<p>The client credentials flow provides a secure way for client applications to obtain an access token without user authentication. This can be useful in scenarios where the client application needs to access its own resources, such as data storage or APIs, but does not require access to user data. However, it is important to ensure that the client credentials are kept secure, as any party that posses these credentials can obtain access tokens and access the client's resources.</p> <p>The following diagram shows how the client credentials grant flow works.</p> <p></p> <ol> <li>The client application sends its credentials (<code>client_id</code> and <code>client_secret</code>) to WSO2 Identity Server and requests an access token.</li> <li>WSO2 Identity Server sends the access token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns the requested user information to the client application.</li> </ol>"},{"location":"references/grant-types/#implicit-grant","title":"Implicit grant","text":"<p>Note</p> <p>WSO2 Identity Server does not recommend using implicit grant in it's applications.</p> <p>The implicit grant flow is an OAuth 2.0 grant type that enables a client application to obtain an access token directly from the authorization server without an intermediate authorization code exchange. This flow is commonly used in browser-based applications where the client application runs in a web browser.</p> <p>However, it is important to note that the access token is exposed in the browser's URL fragment, which can make it vulnerable to certain types of attacks, such as cross-site scripting (XSS). As a result, this flow is typically not recommended for applications that require high security.</p> <p>The following diagram shows how the implicit grant flow works.</p> <p></p> <ol> <li>The user visits the client application and requests for login through WSO2 Identity Server.</li> <li>The client application redirects the authorization request to WSO2 Identity Server.</li> <li>WSO2 Identity Server prompts the user to enter credentials.</li> <li>The user enters the credentials.</li> <li>After successful authentication, WSO2 Identity Server sends the access token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns requested user information to the client application.</li> </ol>"},{"location":"references/grant-types/#password-grant","title":"Password grant","text":"<p>The password grant flow is an OAuth 2.0 grant type that enables a client application to obtain an access token by presenting the user's username and password directly to the authorization server. This flow is generally considered less secure than other grant types, as it requires the client application to handle and transmit the user's credentials.</p> <p>The password grant is primarily used in scenarios where the client application is highly trusted, and the user experience is prioritized over security concerns. It is generally not recommended for use in public-facing applications or scenarios where sensitive data is accessed.</p> <p>The following diagram shows how the password grant flow works.</p> <p></p> <ol> <li>The user visits the client application and requests for login through WSO2 Identity Server.</li> <li>The client application requests the user's credentials.</li> <li>The user sends the requested credentials to the client application.</li> <li>The client application sends the user's credentials and requests an access token from WSO2 Identity Server.</li> <li>WSO2 Identity Server sends the access token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns the requested user information to the client application.</li> </ol>"},{"location":"references/grant-types/#token-exchange-grant","title":"Token exchange grant","text":"<p>OAuth 2.0 token exchange is a grant type in the OAuth 2.0 framework that enables the exchange of one type of token for another. This grant type is defined in the OAuth Token Exchange specification (RFC 8693)</p> <p>The token exchange grant type is useful in scenarios where an application needs to obtain a different type of access token with a different set of permissions or attributes than the one it currently possesses. It allows an application to act on a user's or another entity's behalf, obtaining a new access token that represents the requested authorization.</p> <p>Important</p> <p>Currently, WSO2 Identity Server supports the following capabilities of the OAuth 2.0 Token Exchange specification:</p> <ul> <li>Impersonation semantics of the OAuth 2.0 token exchange grant type.</li> <li>Exchanging JWT security tokens in the token exchange flow.</li> </ul> <p>The following diagram shows how the token exchange grant flow works.</p> <p></p> <ol> <li>The user sends a login request to the client application.</li> <li>The client application sends an authorization request to the third-party IdP.</li> <li>The third-party IdP returns the JWT access token for the user to the client application.</li> <li>The client application makes a token exchange request to the authorization server, specifying the Token Exchange grant type and providing the necessary parameters, such as the original access token.</li> <li>The authorization server validates the request, performs the token exchange, generates a new access token of the requested type based on the provided parameters and the server's policy, and responds to the client with the new access token.</li> <li>The client application can now request resources from the resource server by providing the access token.</li> <li>As the resource server trusts WSO2 Identity Server issued tokens, it returns the requested resources to the client application.</li> </ol> <p>See configure the token exchange flow for more details.</p>"},{"location":"references/grant-types/#organization-switch-grant","title":"Organization switch grant","text":"<p>The organization switch grant is a custom grant type in WSO2 Identity Server that enables users to switch between different organizations in a hierarchical organization structure.</p> <p>Client applications should always use one of the traditional grant types to authorize user access. The organization switch grant is also required when the authorization request is for resources of a suborganization. That is because it is necessary to switch between the root organization and the suborganization to obtain access tokens that are valid for suborganizations.</p> <p>The following diagram illustrates this flow.</p> <p></p> <ol> <li>The user visits the client application and requests login through the root organization.</li> <li>The client application redirects the authorization code request to the root organization.</li> <li>WSO2 Identity Server prompts the login page of the root organization's application.</li> <li>The user selects the Organization Login authentication option.</li> <li>The root organization prompts the user to enter the suborganization name.</li> <li>The user enters the suborganization name.</li> <li>The root organization sends an authorization code request to the suborganization.</li> <li>The suborganization prompts the user to enter credentials.</li> <li>The user enters the credentials.</li> <li>The suborganization sends the authorization code to the root organization.</li> <li>The root organization uses this authorization code to request an access token from the suborganization.</li> <li>The suborganization sends the access token and ID token to the root organization.</li> <li> <p>The root organization sends the authorization code to the client application.</p> <p>Note</p> <p>This is the response to the authorization code request in step two.</p> </li> <li> <p>The client application uses this authorization code to request an access token from the root organization.</p> </li> <li>The root organization sends the access token and ID token to the client application.</li> <li>The client application exchanges the access token received in the above step for an access token for the suborganization.</li> <li>The root organization initiates an exchange for an access token and sends an access token against the suborganization to the client application.</li> <li>The user requests information from the client application.</li> <li>The client application requests user information from the suborganization by providing the access token received in step 17.</li> <li>The suborganization returns requested user information to the client application.</li> </ol>"},{"location":"references/localization/","title":"Localization in Asgardeo","text":"<p>Asgardeo enables a language picker on the following interfaces exposed to business users, allowing business users to select their preferred language.</p> <ul> <li>Interfaces related to the business user registration/sign-up flow, login flows (including MFA), and the account recovery flow.</li> <li>Interfaces of the self-care portal (My Account)</li> </ul> <p>The default language on these interfaces is configured as explained in the language settings section.</p> <p>Important</p> <p>When user attributes configured on Asgardeo are displayed to users (during user sign-up and consent management flows), only the default user attributes get translated.</p> <p>These interfaces are i18n-supported, which allows Asgardeo to update the text content from i18n resource files. This feature allows your business users to experience these use cases in their preferred language. The languages that Asgardeo currently supports are listed below.</p>"},{"location":"references/localization/#supported-languages","title":"Supported languages","text":"<p>Below are the languages currently available for the i18n-supported user interfaces of Asgardeo.</p>              Language                       Code                       English          <code>en_US</code>              French          <code>fr_FR</code>              Spanish          <code>es_ES</code>              Portuguese          <code>pt_PT</code>              German          <code>de_DE</code>              Chinese          <code>zh-CN</code>              Japanese          <code>ja-JP</code>              Sinhalese          <code>si-LK</code>"},{"location":"references/localization/#language-settings","title":"Language settings","text":"<p>The following methods can set the language used by Asgardeo interfaces exposed to business users.</p>"},{"location":"references/localization/#language-switcher","title":"Language switcher","text":"<p>The language switcher is available at the footer of the (i18n-supported) Asgardeo interfaces, which allows business users to select the preferred language for Asgardeo.</p> <p>Note that Asgardeo will remember the language selected from this switcher, and it will be applied to all i18n-supported interfaces.</p>"},{"location":"references/localization/#browser-level-settings","title":"Browser-level settings","text":"<p>The language preference specified in the user's browser is applied to Asgardeo interfaces by default, provided it is an Asgardeo-supported language. However, the user can still change the language on the Asgardeo interfaces by using the language switcher.</p>"},{"location":"references/localization/#application-level-settings","title":"Application-level settings","text":"<p>As an application developer, you can configure the application to send the <code>ui_locales</code> parameter in the sign-in request or authorization request when the user signs in to the application.</p> <p>Important</p> <p>The <code>ui_locale</code> parameter is only available for OIDC flows and not for SAML flows.</p> <p>You can provide a list of strings, separated by a space, to define the locales. Asgardeo will search through the list until an Asgardeo-supported locale is found, and the first Asgardeo-supported locale in the list will be used as the default locale. If a supported locale is not found, Asgardeo will use the browser-level locale.</p> <p>Consider the following examples:</p> <ul> <li>If the <code>ui_locales</code> is sent as <code>fr_FR</code>, French is used as the default locale.</li> <li>If the <code>ui_locales</code> is sent as <code>fr_FR en_US</code>, French will be the default locale since it's the first Asgardeo-support locale in the list.</li> <li>If the <code>ui_locales</code> is sent as <code>it_IT en_US</code>, English (en_US) will be used as the default locale because the first given locale (<code>it_IT</code>) is not supported.</li> </ul> <p>The following examples demonstrate how to set the <code>ui_locales</code> parameter in your application.</p> <ul> <li> <p>Example 1: Setting the default locale from the <code>signIn</code> request.</p> <p>You can send the <code>ui_locales</code> in the signIn request as a parameter.</p> <p>Note</p> <p>Learn more about setting the signIn request using the Asgardeo SDKs.</p> <p>The following sample illustrates the <code>signIn</code> request using the JS/React SDK.</p> <pre><code>&lt;SecureApp\nfallback={&lt;div&gt;Loading&lt;/div&gt;}\noverrideSignIn={async () =&gt; {\nawait signIn({\n'ui_locales': 'fr_FR en_US'\n});\n}}\n&gt;\n&lt;AppContent/&gt;\n&lt;/SecureApp&gt;\n</code></pre> </li> <li> <p>Example 2: Setting the default locale from the authorization request.</p> <p>If you are sending the locale in the authorization request directly, you can append the <code>ui_locales</code> query parameter with the list of locales as shown below.</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}&amp;ui_locales={ locales list }\n</code></pre> </li> </ul> <p>Privacy policy and Terms of conditions URLs</p> <p>The privacy policy and terms of conditions URLs are specified in your branding configurations. The <code>ui_locales={ locales list }</code> parameter is appended to these URLs, which allows you to show the translated content for the user from your end.</p>"},{"location":"references/pushed-authorization-requests/","title":"OAuth2 Pushed authorization requests (PAR)","text":"<p>Generally, when a user logs in to a web application using a user agent, such as a web browser, an OAuth 2.0 authorization request is initiated from the front-channel. This introduces two major challenges,</p> <ul> <li> <p>The authorization payload is sent through query strings in a URL. Therefore, the authorization server cannot guarantee the integrity of the authorization payload.</p> </li> <li> <p>Complex authorization requests can sometimes be too large for browsers to process.</p> </li> </ul> <p>The PAR specification defines the <code>/par</code> endpoint in an authorization server to mitigate these issues.</p> <p>During a PAR initiated login, first, the back-channel sends the authorization payload directly to the <code>/par</code> endpoint of the authorization server.  The <code>/par</code> endpoint, in response, returns a reference to the authorization payload called the <code>request_uri</code>.</p> <p>After this interaction, the usual OAuth flow takes place in the front-channel. But, instead of including the complete authorization payload in the URL, the new authorization request contains only the client ID of the application and the <code>request_uri</code>.</p> <p>Therefore, using PAR with an OAuth authorization request,</p> <ul> <li>ensures integrity of the request is protected.</li> <li>ensures confidentiality of the request.</li> <li>enables complex requests to be passed without browser limitations.</li> <li>avoids leakage of query strings to third-party sites and web server logs.</li> </ul>"},{"location":"references/pushed-authorization-requests/#how-does-it-work","title":"How does it work?","text":"<p>The diagram below illustrates the PAR authorization flow.</p> <p></p> <ol> <li> <p>The client makes a POST request to the <code>/par</code> endpoint along with all the parameters required for authorization.</p> </li> <li> <p>The authorization server authenticates the client.</p> </li> <li> <p>The endpoint validates the pushed authorization request.</p> </li> <li> <p>If the validation is successful, the endpoint returns a response containing the <code>request_uri</code>, which functions as the reference to the authorization payload.</p> </li> <li> <p>The client makes an authorization request to the authorization endpoint with the client ID and the request_uri.</p> </li> <li> <p>The <code>/authorize</code> endpoint validates the request.</p> </li> <li> <p>If the validation is successful, the client receives the authorization code (or the access token based on the chosen grant type).</p> </li> </ol>"},{"location":"references/app-settings/","title":"App configurations","text":"App configurations  <p>Configure the OpenID connect or SAML protocol related settings of your application in WSO2 Identity Server</p> OpenID Connect SAML"},{"location":"references/app-settings/oidc-settings-for-app/","title":"OIDC settings for apps","text":"<p>You can find the OpenID Connect protocol related settings under protocol section of the selected application.</p> <p></p>"},{"location":"references/app-settings/oidc-settings-for-app/#basic-settings","title":"Basic settings","text":""},{"location":"references/app-settings/oidc-settings-for-app/#client-credentials","title":"Client credentials","text":"<p>When your application is registered in WSO2 Identity Server, a client ID is generated as the identifier of the application. If you register a traditional web application, a client secret is generated in addition to the client ID as shown below.</p> <p></p>"},{"location":"references/app-settings/oidc-settings-for-app/#allowed-grant-types","title":"Allowed grant types","text":"<p>This will determine how the application communicates with the token service. Web application template supports following grant types:</p> Grant type Description Code Used for executing the OAuth2 Authorization Code flow in client applications. Upon user authentication, the client receives an authorization code, which is then exchanged for an access token. The client can use this token to access the required resources. Client Credentials Used for executing the OAuth2 Client Credentials flow in client applications. Users are authenticated from the user credentials and an access token is granted. The client can use this token to access the required resources. Refresh Token The client can use the refresh token to get a new access token when the original access token expires, without having the user re-authenticate. Implicit Used for executing the OAuth2 Implicit flow in client applications. Clients without a back-channel (hence cannot securely store secrets) can receive the access token directly in the URL. This grant type is not recommended. Password Used for executing the OAuth2 Password flow in client applications.  The client sends the user's credentials to get an access token. This grant type is not recommended. Token Exchange This is a grant type in the OAuth 2.0 framework that enables the exchange of one type of token for another.  Organization Switch A custom OAuth2 grant type that allows clients to get access to suborganization APIs in WSO2 Identity Server. The client can exchange the access token received from the root organization for an access token of the suborganization.   <p>It is recommended to use <code>code</code> grant for public clients. For single-page application templates, code grant is enabled by default. You can enable refresh token grant to get refresh tokens.</p> <p>However, implicit grant and password grants are not recommended due to security reasons.</p> <p>See grant types of WSO2 Identity Server for more details.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#public-client","title":"Public client","text":"<p> A public client is an application which cannot keep the client credentials in secure way. It is recommended to use authorization code grant type for public clients. In addition to that, PKCE should be used along with authorization code to mitigate code interception attacks. A public client does not need to authenticate to WSO2 Identity Server with <code>client_secret</code>.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#authorized-redirect-urls","title":"Authorized redirect URLs","text":"<p>Authorized redirect URLs are not required for <code>Client Credentials</code> and <code>Password</code> grant type.  Authorized redirect URLs determine where WSO2 Identity Server will redirect users after authentication and logout. An application can have multiple Authorized redirect URLs.</p> <p>The <code>redirect_uri</code> sent in the login request and the <code>post_logout_redirect_uri</code> sent in the logout request should match with one of the registered authorized redirect URLs.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#allowed-origins","title":"Allowed origins","text":"<p> For security reasons, browsers restrict cross-origin HTTP requests initiated from browser scripts. Cross Origin Resource Sharing(CORS) allows your application to do cross-origin HTTP requests.</p> <p>Allowed origins are the set of URLs that are allowed to access WSO2 Identity Server APIs from javascript. By pre-registering the application origin as an allowed one, applications can access APIs of WSO2 Identity Server: - Token endpoint - JWKS endpoint - Userinfo endpoint - Other APIs</p>"},{"location":"references/app-settings/oidc-settings-for-app/#advanced-settings","title":"Advanced settings","text":"<p>This section elaborates on the advanced setting available for OIDC applications on WSO2 Identity Server.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#proof-key-for-code-exchangepkce","title":"Proof Key for Code Exchange(PKCE)","text":"Mandatory <p>  By enabling this option, WSO2 Identity Server mandates an application to use PKCE with the authorization code flow. The application has to send a <code>code challenge</code> in the authorization request and the corresponding <code>code verifier</code> in the token request. WSO2 Identity Server supports <code>SHA-256</code> and <code>plain</code>.</p> <p>Sample authorization request</p> <pre><code>https://localhost:9443/oauth2/authorize?scope=openid&amp;response_type=code&amp;redirect_uri=&lt;redirect_uri&gt;&amp;client_id=&lt;client_id&gt;&amp;code_challenge=&lt;code_challenge&gt;&amp;code_challenge_method=&lt;code_challenge_method&gt;\n</code></pre> <p>Sample token request</p> <p>=== \"cURL\"</p> <pre><code> ```bash\n curl --location --request POST 'https://localhost:9443/oauth2/token' \\\n --header 'Content-Type: application/x-www-form-urlencoded' \\\n --data-urlencode 'code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d' \\\n --data-urlencode 'grant_type=authorization_code' \\\n --data-urlencode 'redirect_uri=https://localhost:5000' \\\n --data-urlencode 'code_verifier=WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO' \\\n --data-urlencode 'client_id=fv_LScHaB83PN4VPX1cHufphtHQa'\n ```\n</code></pre> <p>=== \"JavaScript - jQuery\"</p> <pre><code> ```js\n var settings = {\n     \"url\": \"https://localhost:9443/oauth2/token\",\n     \"method\": \"POST\",\n     \"timeout\": 0,\n     \"headers\": {\n         \"Content-Type\": \"application/x-www-form-urlencoded\"\n     },\n     \"data\": {\n         \"code\": \"60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d\",\n         \"grant_type\": \"authorization_code\",\n         \"redirect_uri\": \"https://localhost:5000\",\n         \"code_verifier\": \"WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO\",\n         \"client_id\": \"fv_LScHaB83PN4VPX1cHufphtHQa\"\n     }\n };\n\n $.ajax(settings).done(function (response) {\n     console.log(response);\n });\n ```\n</code></pre> <p>=== \"Nodejs - Axios\"</p> <pre><code> ```js\n var axios = require('axios');\n var qs = require('qs');\n var data = qs.stringify({\n     'code': '60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d',\n     'grant_type': 'authorization_code',\n     'redirect_uri': 'https://localhost:5000',\n     'code_verifier': 'WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO',\n     'client_id': 'fv_LScHaB83PN4VPX1cHufphtHQa'\n });\n var config = {\n     method: 'post',\n     url: 'https://localhost:9443/oauth2/token',\n     headers: {\n         'Content-Type': 'application/x-www-form-urlencoded'\n     },\n     data: data\n };\n\n axios(config)\n     .then(function (response) {\n         console.log(JSON.stringify(response.data));\n     })\n     .catch(function (error) {\n         console.log(error);\n     });\n ```\n</code></pre> Support Plain Transform Algorithm <p> If this configuration is selected, the applications can use <code>plain</code> algorithm. i.e,<code>code_challenge = code_verifier</code>. But this is not recommended due to security best practises.</p> <pre><code>https://localhost:9443/oauth2/authorize?response_type=code&amp;client_id=Wsoq8t4nHW80gSnPfyDvRbiC__Ea&amp;scope=openidprofile&amp;redirect_uri=http%3A%2F%2Flocalhost%3A5000&amp;code_challenge_method=plain&amp;code_challenge=nAkA5m0EKlFbHFvF_V53Icig9gSnqr-HxH44Lvkne2c\n</code></pre> <p>Sample token request:</p> cURLJavaScript - jQueryNodejs - Axios <pre><code>curl --location --request POST 'https://localhost:9443/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri=https://localhost:5000' \\\n--data-urlencode 'code_verifier=nAkA5m0EKlFbHFvF_V53Icig9gSnqr-HxH44Lvkne2c' \\\n--data-urlencode 'client_id=fv_LScHaB83PN4VPX1cHufphtHQa'\n</code></pre> <pre><code>var settings = {\n\"url\": \"https://localhost:9443/oauth2/token\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"code\": \"60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d\",\n\"grant_type\": \"authorization_code\",\n\"redirect_uri\": \"https://localhost:5000\",\n\"code_verifier\": \"WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO\",\n\"client_id\": \"fv_LScHaB83PN4VPX1cHufphtHQa\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'code': '60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d',\n'grant_type': 'authorization_code',\n'redirect_uri': 'https://localhost:5000',\n'code_verifier': 'WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO',\n'client_id': 'fv_LScHaB83PN4VPX1cHufphtHQa'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://localhost:9443/oauth2/token',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata: data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre>"},{"location":"references/app-settings/oidc-settings-for-app/#access-token","title":"Access Token","text":"Token type <p>In additional to usual opaque tokens, WSO2 Identity Server supports self-contained JWT tokens as well.</p> <ol> <li> <p>Opaque: These types of tokens are plain text tokens. If a resource server wants to know information related to opaque token, it has to query introspection endpoint and get the information related to tokens.</p> <pre><code>{\n\"access_token\": \"9fac7747-bb2d-46be-bef2-a95b2f69f8b2\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiJhYjdlMDNlMGQ3MzlkNmVlNmQxYTJkMGYwMTk0NDJiZDJiMDE5MDQyNjhiYzY5ZTkyYTg3OTViMjViYmU1NTdkIiwiYXRfaGFzaCI6IkNYb2hyLU9kZ1pISTF6VElvNHF6cmciLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiY19oYXNoIjoiajBhd1lkTGtOVF9mdVBzNVcwZ2VFUSIsInN1YiI6IkFsaWNhQGJpZnJvc3QuY29tIiwibmJmIjoxNjIzOTA0ODgzLCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjM5MDg0ODMsImlhdCI6MTYyMzkwNDg4M30.XHNsUSAcaRAFvOmWB366fdhbQzQxsDiJC0ADD1kiWpiFentvl6fh3h1ITN-x92623cJDYZbC-YK_OdeZ3X7hYLHOK6UXu_gEA4GIaExl7B3iWB9XLukdbU67AX-QpqPFbPgYLqq3CIyyYUxjDC9F22CQreWREc8neLkMW0ejMvZSK7q3hNtuxh6Ox2yhoIJT4KgCygZO259L8xzp6ZuCNDp39nIRsj4zjTOuvz92Md6DC_eauS1BF0SaIZO4YG1PW-FVfmOppcqE0P3MCH8D3EOvmSj2ZqSJRy5hki8E7LOmBhUp4O6yLPWEgFf8QGNa2xAIWK2YqX4kezEyj6Iftw\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3522\n}\n</code></pre> </li> <li> <p>JWT token: JWT tokens are self-contained verifiable access tokens. They contain information related to tokens. If a resource server wants to know the information related to that token, it can decode the token and get the required information without any additional network calls.</p> <p><pre><code>{\n\"access_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJBbGljYUBiaWZyb3N0LmNvbSIsImF1dCI6IkFQUExJQ0FUSU9OX1VTRVIiLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwibmJmIjoxNjIzOTA0ODA1LCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwic2NvcGUiOiJvcGVuaWQiLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjM5MDg0MDUsImlhdCI6MTYyMzkwNDgwNSwianRpIjoiOWZhYzc3NDctYmIyZC00NmJlLWJlZjItYTk1YjJmNjlmOGIyIn0.ETimDfsoXiV2wqkCy7ZWZ-cO3mK8VaGKXvbBeFd8hh5TceGppRvrOs_0Kxez6p8gVRTrCbv-iBIrJFikl_I_euqTk30-JfPxvh0ox5RxY_4nsXs8GGycJwL40XfssE5BLlFSff2YIsbvy6Mbih8_Jerb-RA6j7cAZSII_T-4ATD7mk9DeXmK_-jwqBoyH0UNtAxJKLgfIs8G2yIiioaS4rSnX8tEGGvPvcaDzeTdNx2RNKod_EYlWDNJVtJHUf61lstu4WSA0pdHyP5_Fpbhe4pu_FaXeSMyAwsHYIENWVarB8kknvyUnL51lkoOrIJaSHRjqIbSNteIJ3QyEQ-a8Q\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiJhYjdlMDNlMGQ3MzlkNmVlNmQxYTJkMGYwMTk0NDJiZDJiMDE5MDQyNjhiYzY5ZTkyYTg3OTViMjViYmU1NTdkIiwiYXRfaGFzaCI6IjZSWkQ4a2lZYkFpZkh4OENldWJUcXciLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiY19oYXNoIjoiWjVPXzk5cmZFSkFabjJSUl9yTEhxZyIsInN1YiI6IkFsaWNhQGJpZnJvc3QuY29tIiwibmJmIjoxNjIzOTA0ODA1LCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjM5MDg0MDUsImlhdCI6MTYyMzkwNDgwNSwic2lkIjoiOTE3MzQzOGQtNDFlNy00MmFhLWFmZTctNjlkNDM3Njk1NTRlIn0.f9rTgJtDD6VAUQ1fXZCbiUtg66B0Q5nNSgGTIbrCI6aBC8sn2QmhI4YFqXntj72b2T7-TTYXiY4k6iQH665Oc_KfhxJIwrCW4X96h6dMMHcDMQYuP5blZNMuP8fi42sFAVgAUcs4B5Lfq-nIiPrqO90XGJVyrzJEdSoGsgbX9fg6HWbx016Shla2oKeVzsvZra6uflk4S1bsEVnk5gmRjZ25Vueqtb5qJW291i38-dKhO6FDEkAJyw_QWG6nK_ZpOMx4GW6qj0GTEKrC_TuUTp5hUX1xUnpLRFHcN8WAQoe7_g6JyLOUQzQSFTr-CniwwftwnK0DcGq916bRPvTEjw\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3600\n}\n</code></pre> </p> </li> </ol> User access token expiry time <p>This provides the validity period of access tokens issued to a user in seconds. The default expiry time is 3600 seconds.</p> Application access token expiry time <p>This specifies the validity period of the access tokens issued to an application with the <code>Client Credentials</code> grant in seconds.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#id-token","title":"ID Token","text":"Audience <p>Specifies the recipient(s) that this ID token is intended for. By default, the client ID of this application is added as an audience. You can add multiple audiences in the ID token.</p> <p>Sample default ID token:  <pre><code>{\n\"isk\": \"c37e33a87f794f9db4e43eeec5596dd0f64ba43c2c8a6e35eb4bd09e8a09d58a\",\n\"at_hash\": \"sXH3BGop66MmXp0CCWDk2A\",\n\"aud\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"c_hash\": \"IgFIyrsoOeTwjdAaG3y3OQ\",\n\"sub\": \"Alice@bifrost.com\",\n\"nbf\": 1623843889,\n\"azp\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://localhost:9443/oauth2/token\",\n\"exp\": 1623847489,\n\"iat\": 1623843889\n}\n</code></pre></p> <p>Sample ID token when <code>sample_app</code> is added as a audience value:</p> <p><pre><code>{\n\"isk\": \"1f77c2907c1c2670d73909d3dad38cd02ecda3c21a343dec9d75b51630ca5418\",\n\"at_hash\": \"a387Ursh5iNxeMmNViWT2A\",\n\"aud\": [\n\"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"sample_app\"\n],\n\"c_hash\": \"tz02tie7nYsK4__SFj2uKQ\",\n\"sub\": \"Alice@bifrost.com\",\n\"nbf\": 1623908834,\n\"azp\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://localhost:9443/oauth2/token\",\n\"exp\": 1623912434,\n\"iat\": 1623908834\n}\n</code></pre> </p> Enable encryption <p>Specifies whether to enable encryption for the ID token when the token is issued. The public key of your application is used for encryption.</p> <p>To enable encryption, you should configure the certificate of your application from the Certificates section.</p> Algorithm <p>A single-use AES secret key, called the Content Encryption Key (CEK), is generated to encrypt the ID token payload.</p> <p>WSO2 Identity Server uses the public Key of the application (obtained from the certificate) and the asymmetric encryption algorithm specified here to encrypt the generated CEK. The selected algorithm is mentioned as the \"alg\" in the ID token header.</p> Encryption Method <p>The encryption method defines a symmetric encryption algorithm for encrypting ID tokens.</p> <p>WSO2 Identity Server uses a generated CEK value and the symmetric encryption algorithm specified here to encrypt the ID token. The selected encryption method is mentioned as the \"enc\" in the id token header.</p> ID Token expiry time <p>Provides the validity period of ID token in seconds. The default value is 3600 seconds.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#refresh-token","title":"Refresh Token","text":"<p> These configurations are enabled only if refresh token grant type is added as an allowed grant type.</p> Renew refresh token <p>WSO2 Identity Server issues a new refresh token each time when access token is refreshed with refresh token grant type. The previous token gets invalidated.</p> <p>If the application does not want to get a new refresh token for each request, you can clear the Renew refresh token checkbox. Then, the same refresh token will be issued with refresh token grant type until the refresh token expires.</p> <p></p> Refresh token expiry time <p>Provides the validity period of refresh token in seconds. The default value is 86400 seconds.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#certificate","title":"Certificate","text":"<p>The certificate is used to validate signatures of signed requests from the application to WSO2 Identity Server and to encrypt requests from WSO2 Identity Server to the application.  You can either Provide Certificate or Use JWKS endpoint to add a certificate.  Follow the steps given below to Provide Certificate.</p> <ol> <li> <p>Select Provide Certificate and click New Certificate.</p> <p></p> </li> <li> <p>Upload the certificate file or copy the certificate contents. </p> </li> </ol> If you have certificate in other formats such as <code>.crt</code>, <code>.cer</code> or <code>.der</code>, expand here to convert your certs to PEM format using OpenSSL<p>Convert CRT to PEM <pre><code>openssl x509 -in cert.crt -out cert.pem\n</code></pre> Convert CER to PEM: <pre><code>openssl x509 -in cert.cer -out cert.pem\n</code></pre> Convert DER to PEM: <pre><code>openssl x509 -in cert.der -out cert.pem\n</code></pre></p>"},{"location":"references/app-settings/saml-settings-for-app/","title":"SAML settings for apps","text":"<p>You can find the SAML protocol related settings under protocol section of the selected SAML application.</p> <p></p>"},{"location":"references/app-settings/saml-settings-for-app/#basic-settings","title":"Basic settings","text":""},{"location":"references/app-settings/saml-settings-for-app/#assertion-consumer-service-urls-acs-urls","title":"Assertion consumer service URLs (ACS URLs)","text":"<p>The Assertion Consumer Service (ACS) URL determines where WSO2 Identity Server will send the SAML response. An application can have multiple ACS URLs. SAML authentication response and logout response are sent to one of the ACS URLs configured.</p>"},{"location":"references/app-settings/saml-settings-for-app/#default-assertion-consumer-service-url-default-acs-url","title":"Default assertion consumer service URL (Default ACS URL)","text":"<p>Since an application can register multiple assertion consumer URLs, you need to pick one of them as the Default Assertion Consumer URL. If there is only one ACS URL, it will be taken as the Default ACS URL.</p> <p>Note</p> <ul> <li>If no ACS URL is given in the authentication request, WSO2 Identity Server sends the response to the default ACS URL.</li> <li>If an ACS URL is given in the authentication request, and it matches with one of the registered ACS URLs, the WSO2 Identity Server sends the response to the ACS URL sent in the request (the matched one).</li> </ul>"},{"location":"references/app-settings/saml-settings-for-app/#idp-entity-id-alias","title":"IdP entity ID alias","text":"<p>This value can override the default Identity Provider (IdP) entity ID (localhost). The IdP entity ID is used as the <code>saml2:Issuer</code> of the SAML response that is generated by WSO2 Identity Server. This should be a valid URI/URL.</p> <p><pre><code>&lt;saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\"\nxmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n&gt;localhost&lt;/saml2:Issuer&gt;\n</code></pre> </p>"},{"location":"references/app-settings/saml-settings-for-app/#advanced-settings","title":"Advanced settings","text":""},{"location":"references/app-settings/saml-settings-for-app/#request-validation","title":"Request Validation","text":"Enable request signature validation <p>Specifies whether WSO2 Identity Server must validate the signature of the SAML authentication request and the SAML logout request that are sent by the application.</p> <p>Note</p> <p>This option will only be available after a certificate is uploaded. Learn more about certificates.</p> <p></p>"},{"location":"references/app-settings/saml-settings-for-app/#response-signing","title":"Response Signing","text":"Sign SAML response <p>Specifies whether the SAML responses generated by WSO2 Identity Server should be signed.</p> Digest algorithm <p>Used as the digest algorithm in authentication response and logout response. This is specified as the <code>DigestMethod</code> algorithm in the <code>Signature</code> element.</p> Signing algorithm <p>Used as the signing algorithm to sign the authentication response and logout response. This specifies the <code>SignatureMethod</code> algorithm to be used in the <code>Signature</code> element in the SAML response. </p>"},{"location":"references/app-settings/saml-settings-for-app/#single-sign-on-profile","title":"Single Sign-On Profile","text":"Bindings <p>Specifies the mechanisms to transport SAML messages in communication protocols. Bindings define how SAML request-response protocol messages can be exchanged between identity provider and SAML application via HTTP transport.</p> <p>WSO2 Identity Server by default supports the following bindings: - HTTP Post - HTTP Redirect </p> Enable IdP initiated SSO <p>Specifies whether to initiate Single Sign-On (SSO) from the IdP instead of the application. If this is selected, a service provider is not required to send the SAML2 request. The Request URL is used by the IDP to forward the users directly to the service provider. </p> <p>Request <pre><code>https://localhost:9443/samlsso?spEntityID={sp_issuer}\n</code></pre></p> <p>Sample request <pre><code>https://localhost:9443/samlsso?spEntityID=https://sample.app/saml/sp\n</code></pre></p> <p>Note that, you need to encode the URLs before calling the single signon service. </p>"},{"location":"references/app-settings/saml-settings-for-app/#assertion","title":"Assertion","text":"Name ID format <p>Specifies the name identifier format that is used to exchange information regarding the user in the SAML assertion.</p> <p>For SSO interactions, you can configure the following types of NameID formats.</p> <ul> <li><code>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</code></li> <li><code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code></li> <li><code>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</code></li> <li><code>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</code></li> <li><code>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</code></li> <li><code>urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName</code></li> <li><code>urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos</code></li> <li><code>urn:oasis:names:tc:SAML:2.0:nameid-format:entity</code></li> </ul> <p>Specifies the name identifier format that the application wants to receive in the subject of an assertion from WSO2 Identity Server.</p> <p>WSO2 Identity Server uses <code>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</code> as the default name identifier.</p> <pre><code>&lt;saml2:Assertion ID=\"_1fc418b1886158a8c239f9ee5205718b\"\nIssueInstant=\"2021-07-07T08:28:30.228Z\"\nVersion=\"2.0\"\nxmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n&gt;\n-\n   -\n    &lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;Alica@bifrost.com&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"mjagocahejhadgbaldpgpoipaghellkjkdnpilcp\"\nNotOnOrAfter=\"2021-07-07T08:33:30.228Z\"\nRecipient=\"http://localhost:8080/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;/saml2:Subject&gt;\n-\n    -\n&lt;/saml2:Assertion&gt;\n</code></pre> Audiences <p>Specifies the audiences, to whom this SAML assertion is intended.</p> <p>The issuer of the application will be added as the default audience <pre><code>&lt;saml2:Assertion ID=\"_1fc418b1886158a8c239f9ee5205718b\"\nIssueInstant=\"2021-07-07T08:28:30.228Z\"\nVersion=\"2.0\"\nxmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n&gt;\n-\n   -\n    &lt;saml2:AudienceRestriction&gt;\n&lt;saml2:Audience&gt;https://sampleapp.com/saml/sp&lt;/saml2:Audience&gt;\n&lt;/saml2:AudienceRestriction&gt;\n-\n   -\n&lt;/saml2:Assertion&gt;\n</code></pre> </p> Recipients <p>Recipient is a URI specifying the entity or location to which WSO2 Identity Server can present the assertion.</p> <p>This attribute may specify the recipient endpoint to which the assertion should be delivered. This attribute is helpful in preventing an intermediary from redirecting the assertion to some other endpoint.</p> <p>By default, WSO2 Identity Server sends <code>ACS URL</code> as the <code>recipient</code> value.</p> <p>After adding <code>http://localhost:8081/sample-app-new/home.jsp</code> as a <code>recipient</code>:</p> <pre><code>&lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;Alica@bifrost.com&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"jegiegkloeahkcllbnbcohgdeklidegeoiijhado\"\nNotOnOrAfter=\"2021-07-07T08:44:45.727Z\"\nRecipient=\"http://localhost:8081/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"jegiegkloeahkcllbnbcohgdeklidegeoiijhado\"\nNotOnOrAfter=\"2021-07-07T08:44:45.727Z\"\nRecipient=\"http://localhost:8081/sample-app-new/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;/saml2:Subject&gt;\n</code></pre> Enable encryption <p>Specifies whether to enable encryption for SAML assertion.  To enable encryption, you should configure the certificate of your application. You can configure the certificate from the Certificates section.</p> Assertion encryption algorithm <p>The Assertion encryption algorithm you select specifies the symmetric encryption algorithm that is used for encrypting the SAML Assertion.</p> <p>The following encryption process is enforced by the Assertion encryption algorithm:</p> <ol> <li>First, a SAML2 Key is generated. This key is used for maintaining a secure communication channel with the application.</li> <li>WSO2 Identity Server then uses the generated SAM2 Key value and the symmetric encryption algorithm specified here to encrypt the SAML Assertion.</li> </ol> Key encryption algorithm <p>The key encryption algorithm you select specifies the asymmetric encryption algorithm that is used for encrypting the SAML2 key.</p> <p>WSO2 Identity Server uses the Public Key of the application (obtained from the certificate)  and the asymmetric encryption algorithm specified here to encrypt the SAML2 Key.</p>"},{"location":"references/app-settings/saml-settings-for-app/#attribute-profile","title":"Attribute Profile","text":"Enable attribute profile <p>Specifies whether to include the user's attributes in the SAML assertions as part of the attribute statement. You can configure user attributes by navigating to User Attributes section in the application.</p> <p></p>"},{"location":"references/app-settings/saml-settings-for-app/#single-logout-profile","title":"Single Logout Profile","text":"<p>All the settings under this section are related to single-logout. In Single logout, if one application logs out from a browser session, WSO2 Identity Server will send logout requests to all the other SAML applications participating in the same browser session.</p> Enable SLO <p>Specifies whether you want to enable single-logout to your application. By default, this is disabled for applications.</p> Logout method <p>Specifies the logout method that is supported by the application. WSO2 Identity Server supports below logout methods: - Back Channel logout - Front Channel HTTP Redirect - Front Channel HTTP Post</p> <p>Back Channel logout is enabled by default.</p> Single logout response URL <p>Specifies the endpoint of the application to where the single logout response should be sent. If you do not specify this URL, WSO2 Identity Server will use the Default ACS URL.</p> Single logout request URL <p>Specifies the endpoint of the application to where the single logout request should be sent. If you do not specify this URL, WSO2 Identity Server will use the Default ACS URL.</p> IdP initiated single logout <p>WSO2 Identity Server facilitates IdP initiated SAML2 single log out requests. The following parameters can be used with the IdP initiated SLO request:</p> Request Parameter Description slo Must have the value \u201ctrue\u201d to mark the request as an IdP initiated log out request. spEntityID Value of the parameter should be the SAML issuer value of the application returnTo Value of the parameter should be the URL which needs to be redirected to, after the log out. If this parameter is present in the request, then the `spEntityID` parameter must also be present. <p></p> <p>Enable: Specifies whether to support IdP initiated logout.</p> <p>Return to URLs: Specifies the URLs to which the user should be redirected after the logout. The <code>returnTo</code> parameter sends in the logout request should match with any of the URL configured as Return to URLs or Default ACS URL.</p> <p>If <code>Return to URLs</code> is not configured, the <code>returnTo</code> parameter should match with <code>Default ACS URL</code>.</p> <p>Request <pre><code>https://localhost:9443/samlsso?slo=true&amp;spEntityID={sp_issur}&amp;returnTo={url}\n</code></pre></p> <p>Sample request <pre><code>https://localhost:9443/samlsso?slo=true&amp;spEntityID=https://sample.app/saml/sp&amp;returnTo=http://localhost:8081/sample-app/index.html\n</code></pre></p> <p></p> <p>Note that, you need to encode the URLs before calling the single logout service.</p>"},{"location":"references/app-settings/saml-settings-for-app/#certificate","title":"Certificate","text":"<p>The certificate is used to validate signatures when authentication requests or logout requests from the application are signed. Note that request signature validation should be enabled.  You can either upload your certificate file or copy the contents. Follow the steps given below.</p> <ol> <li> <p>Select Provide Certificate and click New Certificate.</p> <p></p> </li> <li> <p>Upload the certificate file or copy the certificate contents </p> </li> </ol> If you have certificate in other formats such as <code>.crt</code>, <code>.cer</code> or <code>.der</code>, expand here to convert your certs to PEM format using OpenSSL<p>Convert CRT to PEM <pre><code>openssl x509 -in cert.crt -out cert.pem\n</code></pre> Convert CER to PEM: <pre><code>openssl x509 -in cert.cer -out cert.pem\n</code></pre> Convert DER to PEM: <pre><code>openssl x509 -in cert.der -out cert.pem\n</code></pre></p> <p></p>"},{"location":"references/compliance/","title":"Compliance","text":"<p>Being compliant with industry regulations and law is a vital responsibility for any organization. WSO2 Identity Server is designed based on privacy best practices and is compliant with the following regulations.</p> <ul> <li> <p>GDPR</p> </li> <li> <p>eIDAS</p> </li> <li> <p>CCPA</p> </li> <li> <p>FIPS</p> </li> <li> <p>Accessibility Compliance</p> </li> </ul>"},{"location":"references/compliance/accessibility/","title":"Accessibility compliance","text":"<p>WSO2 Identity Server conforms with Level A and Level AA success criteria and techniques of the Web Content Accessibility Guidelines 2.1 (WCAG 2.1).</p> <p>This makes content on WSO2 Identity Server more accessible to a broader range of people with disabilities and makes the product more usable in general. With this, the business user registration interfaces and sign-in interfaces offered by WSO2 Identity Server are now operable through a keyboard interface. Color is not used as the only visual means of conveying information anymore.</p> <p>Content is now robust and understandable, making it more user-friendly.</p> <p>WSO2 provides a Voluntary Product Accessibility Template (VPAT) document for WSO2 Identity Server with details of the product's compliance with Web Content Accessibility Guidelines 2.1 (WCAG 2.1).</p>"},{"location":"references/compliance/ccpa/","title":"California Consumer Privacy Act","text":"<p>The California Consumer Privacy Act (CCPA) is a bill passed by the California State Legislature, that came into effect on January 1, 2020. The act ensures that consumers are given more power and control over their personal data. Accordingly, CCPA compliance is a must for any organization that collects and processes the personal information (PI) of California residents. According to the CCPA, \u201cPersonal information means information that identifies, relates to, describes, is capable of being associated with, or could reasonably be linked, directly or indirectly, with a particular consumer or household.\". This includes a broader spectrum of identifiers such as purchase events or download actions of a user as opposed to the Personally Identifiable Information (PII) which includes only aspects unique to the user such as the user's email address or social security number. </p>"},{"location":"references/compliance/ccpa/#main-clauses-in-ccpa-and-how-wso2-identity-server-complies-with-it","title":"Main clauses in CCPA and how WSO2 Identity Server complies with it","text":"<ol> <li> <p>The right to access Personal Information (PI)     This clause insists that California residents have the right to know the categories of personal information a business collects and sells to third parties.     The business should also be ready to disclose details regarding the categories of third parties with whom this personal information has been shared.     Moreover, the consumer can request specific information about them that has been collected and shared, and the business should ensure that the detail requested is shared with the customer.</p> <p>Users who have given their PIs to the system should be able to:</p> <ul> <li>Remove sections of the information</li> <li>Modify information</li> <li>Download any kind of information stored in the system in a human-readable manner</li> </ul> <p>To facilitate this, WSO2 Identity Server published an API that can be used to download profile details of consumers stored in the server, in a well-structured and machine-readable JSON format. Consumers can download their profiles by logging into the self-care portal called My Account. Any organization can integrate this capability into existing applications and portals with the help of the RESTful personal data export API exposed by the WSO2 Identity Server. For more information, refer to Personal Information Export REST APIs.</p> </li> <li> <p>The right to have PI deleted     The customers have the right to request the business to delete their personal information available with the business.     This requires the complete removal of any kind of PI that is related to the requested user from the system.     This includes logs, audit records, and any stored media, which will eventually keep contextless data in the system.</p> <p>WSO2 IS uses anonymization and pseudonymization to support the right to erasure, as specified in the CCPA. By anonymizing data stored in a system, after an erasure, it ensures that there won\u2019t be any information left in the system to identify PI. Pseudonymization helps the system to keep the context related to the operation without keeping the actual PI.</p> <p>WSO2 Identity Server provides a privacy toolkit that can be used to delete all identifiable data from the data storage and log files whenever required.</p> <p>This privacy toolkit provides the following functionalities.</p> <ol> <li>Delete the user by \u201cIdentity Admin\u201d of the tenant. This will remove the user from any underlying \u201cRead/Write\u201d user store (JDBC/LDAP/AD).</li> <li> <p>Anonymize any retained traces of user activity</p> <ul> <li>Log files</li> <li>Analytics data and information related to logins, sessions, key validations, etc</li> <li>Key/token data held at the database layer</li> </ul> </li> <li> <p>Delete any unwanted data retained in the database</p> <ul> <li>Token(s) issued</li> <li>Password history information</li> </ul> </li> </ol> <p>Additionally, the WSO2 Privacy Toolkit can be extended to clear personal data in any relational database or any textual log file. For further information on the WSO2 privacy toolkit, refer to Remove References to Deleted User Identities.</p> </li> <li> <p>The right of disclosure     Companies collecting consumers\u2019 personal information for commercial purposes (sell or disclose to a third party) should disclose the categories of PI collected, the sources through which the PI was collected, the purpose for the collection, the entities which the PI was shared with or sold to, and the specific pieces of PI that were collected or sold.</p> </li> <li> <p>The right to opt-out and opt-in     The customers have the right to deny the sales of their personal details by informing the business that holds their PI.  </p> </li> <li> <p>The right to non-discrimination     All consumers have the right to not be discriminated against exercising any of the rights provided by the CCP.</p> </li> </ol>"},{"location":"references/compliance/ccpa/#consent-management","title":"Consent management","text":"<p>A CCPA-compliant system first needs a mechanism to manage the user consent of those from whom the business collects information. Consent lifecycle management plays a key role when complying with the CCPA clauses mentioned above.</p> <p>In the following instances, the system should obtain user consent.</p> <ul> <li>User self-registration</li> <li>User provisioning to third-party systems or from third-party systems</li> <li>Sharing user attributes through single sign-on (SSO)</li> <li>Federating identities</li> </ul> <p>The user should have the following capabilities.</p> <ul> <li>Review given consent</li> <li>Modify given consent</li> <li>Revoke given consent</li> </ul> <p>Currently, there is an open standard regarding Consent Receipt Management from the Kantara initiative. An IAM provider who supports such open standards will provide leverage over proprietary protocols when adopting such capabilities to a system.</p> <p>WSO2 Identity Server comes with an extensive consent management solution that enables users to conveniently manage the consents of their consumers and third-party applications. WSO2 Identity Server\u2019s consent management module consists of the following key features.</p> <ul> <li> <p>Has RESTful consent APIs to manage consents remotely. For more information on consent management, refer to Consent Management.</p> </li> <li> <p>Provides an admin portal support for organizations to define and manage consent, data processing purposes, and user attributes per consent.</p> </li> <li> <p>Supports the Kantara consent receipt specification. For more information, see the Kantara Consent Receipt Specification.</p> </li> <li> <p>Any self-care user profile creation, user provisioning to other systems, sharing of user attributes through SSO and identity federation is fully based on user consent.</p> </li> <li> <p>Users can review, modify, and revoke previously given consent via the self-care My Account, My Account, or RESTful Consent API.</p> </li> <li> <p>Consent APIs can also be used to integrate the WSO2 Identity Server\u2019s consent management capabilities with existing applications.</p> </li> <li> <p>WSO2 Identity Server can be used to manage the consent of any third-party application via the RESTful Consent API.</p> </li> </ul>"},{"location":"references/compliance/eidas/","title":"Electronic Identification, Authentication and Trust Services Regulation","text":"<p>eIDAS (electronic IDentification, Authentication and Trust Services) is an EU regulation on electronic identification and trust services for electronic transactions in the internal market. For a set of eIDAS-compliant technical specifications that the member states of the EU need to refer to, see here.</p> <p>If there are cross-border connections within the member states of the EU, an eIDAS network that consists of a series of eIDAS nodes implemented at the member state level can be used. An eIDAS node consists of an eIDAS connector and an eIDAS proxy service or eIDAS middleware service.</p> <p>An eIDAS node can request a cross-border authentication through the eIDAS connector and provide a cross-border authentication through the eIDAS service (an eIDAS service can operate either in an eIDAS proxy service or eIDAS middleware service).</p> <p>Following is an example eIDAS network with proxy to proxy-to-proxy connection between two \"member states\" (MS).</p> <p></p> <p>Following is what happens in the illustration given above.</p> <ol> <li> <p>The user (citizen) of MS A requests access to a service provider in MS B.</p> </li> <li> <p>The service provider in MS B sends the request to its own connector.</p> </li> <li> <p>On receipt of the request, the connector asks the user for the country of origin (TLS protocol).</p> </li> <li> <p>When the user selects the country of origin, the SAML request is forwarded by the connector to the eIDAS-node proxy service of the user's member state.</p> </li> <li> <p>The eIDAS-node proxy service sends the SAML request to the identity provider for authentication, and a user authenticates using the electronic identity. Once authenticated, this identity is returned to the eIDAS-node proxy service.</p> </li> <li> <p>The eIDAS-node proxy service sends a SAML assertion to the requesting connector, which forwards the response to the service provider.</p> </li> <li> <p>The service provider grants access to the user.</p> </li> </ol> <p>For more information on how eIDAS works, see How does eIDAS work?.</p>"},{"location":"references/compliance/fips/","title":"Federal Information Processing Standard (FIPS) 140-2","text":"<p>FIPS 140-2 is a standard specifying the security requirements for cryptographic modules that protect sensitive information in computer and telecommunication systems. It was developed by a working group composed of government and industry experts.</p> <p>The standard defines four security levels, each offering increased security over the previous level. These levels accommodate a wide range of data sensitivity and application environments, allowing for cost-effective solutions based on specific security needs.</p> <p>Compliance with FIPS 140-2 does not guarantee the overall security of a system or module. The operator of the cryptographic module is responsible for ensuring that the security measures provided by the module are sufficient and acceptable for protecting the information. The overall security level should be chosen based on the specific security requirements of the application and environment.</p> <p>Security awareness and prioritizing information security at the management level are crucial. Organizations should identify their information resources, assess their sensitivity and the potential impact of losses, and implement appropriate controls. These controls can include administrative policies, physical and environmental measures, information and data controls, software development practices, and backup and contingency planning.</p> <p>In summary, FIPS 140-2 establishes security requirements for cryptographic modules. Compliance with this standard is important, but it's essential to consider the broader security needs of the system and implement appropriate controls based on risk assessments and specific application requirements.</p>"},{"location":"references/compliance/fips/#security-levels-of-fips-140-2","title":"Security levels of FIPS 140-2","text":"<p>FIPS 140-2 defines four security levels, often referred to as Levels 1, 2, 3, and 4. These security levels represent increasing levels of security requirements and controls.</p>"},{"location":"references/compliance/fips/#level-1","title":"Level 1","text":"<p>This is the lowest security level. It requires basic security measures and focuses primarily on the software aspects of the cryptographic module. Level 1 security provides a limited level of security, mainly relying on the inherent security of the operating environment.</p>"},{"location":"references/compliance/fips/#level-2","title":"Level 2","text":"<p>This level introduces additional physical security requirements on top of Level 1. It includes features like tamper-evident seals or coatings designed to detect and respond to physical tampering attempts. Level 2 also mandates that the module should have an audit function to record security-relevant events.</p>"},{"location":"references/compliance/fips/#level-3","title":"Level 3","text":"<p>At this security level, the module incorporates stronger physical security mechanisms to detect and respond to tampering attempts. Level 3 modules typically include active physical protection mechanisms, such as self-destruct features or cryptographic boundary detection. These mechanisms are designed to respond to physical attacks and protect the module's sensitive cryptographic keys and data.</p>"},{"location":"references/compliance/fips/#level-4","title":"Level 4","text":"<p>Level 4 is the highest security level defined by FIPS 140-2. It includes the most stringent requirements for both physical and logical security. Level 4 modules have extensive protection mechanisms against physical tampering, including active responses to attacks. Additionally, Level 4 modules undergo extensive testing and evaluation to ensure their resistance to attacks and their ability to recover from security breaches.</p>"},{"location":"references/compliance/gdpr/","title":"General Data Protection Regulation","text":"<p>The General Data Protection Regulation (GDPR) is a legal framework formalized by the European Union (EU) in 2016. This regulation came into effect on 25, May 2018, and affects any organization that processes Personally Identifiable Information (PII) of individuals who live in Europe. PII can be any information that can uniquely identify an individual, such as the social security number, phone number, or email address. Organizations that fail to demonstrate GDPR compliance are subjected to financial penalties. This regulation is critical to comply with due to both the heavy penalties and the fact that non-compliance puts the organization's reputation and integrity at stake.</p> <p>GDPR affects organizations that are located in places within the EU, organizations that are located in places where the EU laws are followed, or when the clients of these organizations are EU citizens. Apart from these, there are special cases that do not fall under any of the previous scenarios but need to comply with the regulation nevertheless.</p> <p>For more information on the fundamentals of this regulation, see Defining a Winning GDPR Strategy.</p>"},{"location":"references/compliance/gdpr/#how-is-a-specialized-iam-solution-better-at-complying-with-regulations","title":"How is a specialized IAM solution better at complying with regulations?","text":"<p>Generally, identity data are scattered over several systems within an organization. To reach GDPR compliance, it is required to review, redesign, and modify each of these systems. This is a maintenance overhead that consumes a significant portion of the annual IT budget and requires a specialized set of skills for continuous review and modification processes. Considering the amount of data available within an organization and the intensity of adverse impact on the organization in case of failure to comply with GDPR, skilled staff working in a centralized, secure environment for data processing is vital.</p> <p>A GDPR-compliant IAM solution ensures that all identity profiles are managed centrally and shares only required data with other systems in an on-demand manner through well-known security standards such as SAML and OpenID Connect. Any efficient IAM solution supports anonymization to remove PII data from datasets, and pseudonymization to set artificial identifiers to uniquely identify the user, instead of their personal data. This mitigates the risk of exposing the personal data of individuals to compromised environments.</p>"},{"location":"references/compliance/gdpr/#ensure-compliance","title":"Ensure compliance","text":"<p>WSO2 Identity Server (WSO2 IS) is designed based on privacy best practices and is fully compliant with GDPR. GDPR compliance in IAM and API security spaces can be completely fulfilled with WSO2 IS.</p> <p>WSO2 IS has been designed and architectured based on well-known Secure by Design and Privacy by Design principles.  With the formalization of GDPR in 2016, the product architecture of the WSO2 Identity Server has been reviewed and fine-tuned accordingly to support privacy principles efficiently, with less overhead for product performance and user experience.</p> <p>WSO2 IS provides all privacy features enabled in the product as default options, and uses up-to-date algorithms and frameworks for all cryptographic operations such as data encryption, signing, and hashing.</p> <p>WSO2 IS is subjected to regular reviews and updates for the latest versions of the crypto algorithm and the latest versions of crypto frameworks. These security updates are provided as WSO2 updates. Additionally, several data encryption and protection features are supported by WSO2 IS.</p> <p>Following are the encryption features supported for personal data.</p> <ul> <li> <p>OAuth 2.0 access token</p> </li> <li> <p>OAuth 2.0 refresh token</p> </li> <li> <p>OAuth 2.0 authorization</p> </li> <li> <p>ID tokens</p> </li> <li> <p>SAML responses</p> </li> </ul> <p>Following is the hashing feature supported for personal data.</p> <ul> <li>User credentials</li> </ul> <p>GDPR also mandates processing organizations to make sure only authorized people on a need-to-know basis can access the user profile data of other individuals. Access control features supported in WSO2 IS such as role-based access control (RBAC) and attribute-based access control can be used to cater to this requirement.</p>"},{"location":"references/compliance/gdpr/#individual-right-in-gdpr","title":"Individual right in GDPR","text":"<p>GDPR defines a set of strong individual rights that every data processing organization should facilitate for its users. The My Account application available with the WSO2 IS is equipped to exercise these individual rights by users themselves. Any organization that deploys WSO2 IS will have the My Account application by default.</p> <p>The following features are supported as part of My Account:</p> <ul> <li> <p>The right of transparency and modalities - Personal data processing activities carried out by the organization, their purposes and time limits, and what data stored can be made transparent to users via the WSO2 IS My Account application.  </p> </li> <li> <p>The right of access - Via the WSO2 IS My Account application, users can access and review what personal data is stored in the processing organization.  </p> </li> <li> <p>The right to rectification - Individuals can rectify incorrect data on their user profiles by themselves by logging in to the My Account application.</p> </li> <li> <p>The right to restrict processing - Individuals can make restrictions on their user profiles by themselves by logging into the My Account application. Generally, this is done by revoking an already given consent but can be extended to other usages as well.  </p> </li> <li> <p>The right to be forgotten - This is one of the most important individual rights defined in GDPR. In simple terms, an individual can request to completely remove their personal data from the processing organizations. According to GDPR, unless there is a clear and valid legal background, processing organizations should fulfill such forget me requests.</p> </li> </ul> <p>WSO2 IS provides an out-of-the-box privacy toolkit to remove all identifying data from related databases and log files. This toolkit can be run manually by organization administrators or can be automated so that whenever a user profile gets deleted from the system, all the related PII data gets removed from the system.</p> <p>By considering performance overhead and automation flexibility, this privacy toolkit is run separately from WSO2 IS runtime. For older versions of WSO2 IS, it is required to download the WSO2 Privacy Toolkit from here separately.</p> <p>When it comes to Right to be forgotten, WSO2 IS supports the following features.</p> <ul> <li> <p>Delete the user by \u201cIdentity Admin\u201d of the tenant. This will remove the user from any underlying \u201cRead/Write\u201d user store (JDBC/LDAP/AD).</p> </li> <li> <p>Anonymize any retained traces of the user activity.  </p> <ul> <li>Log files</li> <li>Analytics data, related to login, session, key validation, etc.</li> <li>Key/token data held at the database layer.</li> </ul> </li> <li> <p>Delete any unwanted data retained in the database(due to performance reasons)</p> <ul> <li>Token(s) issued,</li> <li>Password History information.</li> </ul> </li> </ul> <p>For more information on the topic, see Remove References to Deleted User Identities.</p> <ul> <li> <p>The right for notification obligation - The My Account application can be extended to act as the notification center for individuals.  </p> </li> <li> <p>The right to data portability - Individuals can download their user profile in a structured, commonly used, and machine-readable JSON document format through the My Account application. In WSO2 IS it is possible to use one of the following options to download the user profile as a structured JSON document.</p> </li> <li> <p>Logging in to the My Account application.</p> </li> <li> <p>Invoking personal data export API (secure RESTful API)</p> </li> </ul> <p>Additionally, GDPR encourages facilitating user profile provisioning from the data processing organization to another organization automatically based on individuals' requests. SCIM 2.0 API supported in WSO2 IS can be used to fulfill this requirement.</p> <ul> <li> <p>The right to object - The My Account application can be extended to act as a communication channel to make objections on processing.  </p> </li> <li> <p>Rights in relation to automated decision-making and profiling - The My Account application can be extended to act as a communication channel to make objections on automated decision-making and profiling.</p> </li> </ul> <p>The following additional features are also supported in the My Account application.</p> <ul> <li>Revoking consent for all or specific attributes</li> <li>Giving an expiry date for consent</li> </ul>"},{"location":"references/compliance/gdpr/#what-is-consent","title":"What is consent?","text":"<p>GDPR defines six lawful means of processing individual data.</p> <ul> <li>Consent from an individual</li> <li>Contract with the individual</li> <li>Compliance with a legal obligation</li> <li>Vital interests</li> <li>A public task</li> <li>Legitimate interests</li> </ul> <p>Out of these, consent from an individual is considered the most crucial since it is a data processing law that applies to a wide spectrum of business activities. For more information on lawful data processing, see Defining a Winning GDPR Strategy Part 2 - 7 Steps for GDPR Compliance.</p> <p>According to GDPR, consent is defined as \u201c Any freely given, specific, informed and unambiguous indication of the data subject\u2019s wishes by which he or she, by a statement or by a clear affirmative action, signifies agreement to the processing of personal data relating to him or her \u201d.</p>"},{"location":"references/compliance/gdpr/#consent-management-in-wso2-is","title":"Consent management in WSO2 IS","text":"<p>WSO2 IS fully ensures precise consent management and can be used to manage consents from third party applications via secure RESTful consent management API.</p> <p>It also supports the following features.</p> <ol> <li> <p>When WSO2 IS is acting as the Identity Provider (IdP), all the user attributes shared (usually security tokens such as SAML, ID token, JWT, etc.) with service providers (SP) are based on user consent.</p> </li> <li> <p>When WSO2 IS is storing user attribute profiles based on My Account or security token received from a federated identity provider, consent is obtained.</p> </li> <li> <p>My Account facilitates users to review the already given consents and revoke them if necessary.</p> </li> <li> <p>Secure RESTful consent management API can be used to integrate read, modify, and delete consents managed by WSO2 IS.</p> </li> <li> <p>Secure RESTful consent management API facilitates the use of WSO2 IS as the consent lifecycle management solution for third-party applications such as web and mobile applications.</p> </li> </ol> <p>Note</p> <p>WSO2 IS also supports the Consent Receipt Specification draft from Kantara Initiative. For more information on this draft, see  Proposing a global consent receipt standard.</p> <p>Related topics</p> <p>To understand GDPR more elaborately, take a look at this tutorial series on Creating a Winning GDPR Strategy.</p> <ul> <li> <p>Part 1 - Introduction to     GDPR</p> </li> <li> <p>Part 2 - 7 Steps for GDPR Compliance</p> </li> <li> <p>Part 3 - Identity and Access Management to the     Rescue</p> </li> <li> <p>Part 4 - GDPR Compliant Consent     Design</p> </li> </ul> <p>For more resources on GDPR, see the white papers, case studies, solution briefs, webinars, and talks published on the WSO2 GDPR homepage. See the original GDPR legal text here.</p>"},{"location":"references/conditional-auth/api-reference/","title":"Conditional authentication - API reference","text":"<p>WSO2 Identity Server provides a set of defined functions and objects to write your conditional authentication script. They are grouped as follows:</p> <ul> <li> <p>Core functions: These are the basic functions used in the script. These are used to identify the user who initiated the login flow, execute a step in the login flow, handle login failures, etc. Listed below are the core functions that can be used in conditional authentication scripts.</p> <ul> <li><code>onLoginRequest()</code></li> <li><code>executeStep()</code></li> <li><code>fail()</code></li> <li><code>sendError()</code></li> </ul> </li> <li> <p>Utility functions: These utility functions are used for specific scenarios. For example, checking whether the login user belongs to a specific user group. Listed below are the utility functions that can be used in conditional authentication scripts.</p> <ul> <li><code>isMemberOfAnyOfGroups()</code></li> <li><code>setCookie()</code></li> <li><code>getCookieValue()</code></li> <li><code>prompt()</code></li> <li><code>getUserSessions()</code></li> <li><code>terminateUserSession()</code></li> <li><code>sendEmail()</code></li> <li><code>callChoreo</code></li> <li><code>getValueFromDecodedAssertion()</code></li> <li><code>getUniqueUserWithClaimValues()</code></li> <li><code>getAssociatedLocalUser()</code></li> </ul> </li> <li> <p>Object references: You can use objects to capture user behaviors and set attributes. For example, you can use the user and request objects and write the login conditions accordingly. Listed below are the object references that can be used in conditional authentication scripts.</p> <ul> <li><code>context</code></li> <li><code>step</code></li> <li><code>user</code></li> <li><code>request</code></li> <li><code>response</code></li> <li><code>session</code></li> <li><code>application</code></li> <li><code>userAgent</code></li> <li><code>connectionMetadata</code></li> </ul> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#core-functions","title":"Core functions","text":"<p>These are the basic functions that are required for defining the application login flow using an authentication script.</p>"},{"location":"references/conditional-auth/api-reference/#initial-login-request","title":"Initial login request","text":"<p><code>onLoginRequest()</code></p> <p>This function is called when WSO2 Identity Server receives the initial login request. It includes the parameters given below.</p> <ul> <li> <p>Parameters</p> <p> <code>context</code> The authentication context, which contains the context information about the request. </p> </li> <li> <p>Example</p> <pre><code>onLoginRequest(context)\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#execute-a-step","title":"Execute a step","text":"<p><code>executeStep()</code></p> <p>This function is called to execute an authentication step in the login flow. You need to define your application's login flow before using this function.</p> <p>This method accepts an object as a parameter and should include the details listed below.</p> <code>&lt;stepId&gt;</code> (Mandatory) The step number in the login flow. <code>&lt;options&gt;</code> (Optional) A map that can configure step execution. Authentication option filtering is supported. For more information, see the example on filtering connections in a step given below. <code>&lt;eventCallbacks&gt;</code> (optional) The object that contains the callback functions, which are to be called based on the result of the step execution.     Supported results are <code>onSuccess</code> and <code>onFail</code>, which can have their own optional callbacks as anonymous functions. <p>The following sample template shows how the above categorization can be used in a script.</p> <pre><code>executeStep(&lt;stepId&gt;, {\n&lt;options&gt;:[\n//The objects of the option\n]\n},\n{\n&lt;eventCallback&gt;: function()&gt; {\n//eventCallback can be `onSuccess` or `onFail` \n//Define what should be done\n}\n});\n</code></pre> Parameters <p>This section describes the options you can use to configure the <code>executeStep()</code> function, and the values you can use as local authenticators and federated IdPs in the function.</p> <ul> <li> <p>Options</p> <p>You can use these options when executing an authentication step through the script. See the examples given below for details.</p> <p> <code>authenticationOptions</code> List the authentication methods that will be prompted for this step. <code>authenticationOptions.authenticator</code> The name of the local authenticator used. <code>authenticationOptions.idp</code> The name of the federated identity provider used. <code>authenticatorParams</code> Pass the configuration for the step authenticators or identity providers. <code>authenticatorParams.common</code> Specify the common configurations for both local authenticators and federated identity providers. <code>authenticatorParams.local.{authenticator-name}</code> The name of the local authenticator used in the application. The configurations passed here will be available for that specific authenticator. <code>authenticatorParams.local.{federated-identity-provider}</code> The name of the federated identity provider used in the application. The configurations passed here will be available for that federated identity provider. </p> </li> <li> <p> Connections: Local authenticators and federated IdPs </p> <p>When you want to access your configured connections in an authentication step, you can use the following values through the options explained above.</p> <p>See the example on filtering connections in a step given below for details.</p> <p>The local authenticators are represented by the <code>authenticator</code> parameter. The table shows the connection names (as displayed on the WSO2 Identity Server Console) and the corresponding authenticator name you can use in the scripts.</p> <p> Connection Name Authenticator Email OTPemail-otp-authenticator Identifier FirstIdentifierExecutor Magic LinkMagicLinkAuthenticator Security Key/BiometricsFIDOAuthenticator SMS OTPsms-otp-authenticator TOTPtotp Username &amp; PasswordBasicAuthenticator </p> <p>The external identity providers are represented by the <code>idp</code> parameter. The federated connection names are generated based on the name you assign to the connection at registration.</p> <p>Example</p> <p>If you add a federated google connection with the name bifrost google, the value you can use in your authentication scripts is <code>bifrost_google</code>.</p> </li> </ul> Examples <p>Shown below are ways to define a login flow using the core functions.</p> <ul> <li> <p>Example 1: Use <code>stepId</code></p> <p>This example uses only the <code>stepId</code>. <pre><code>executeStep(1)\n</code></pre></p> </li> <li> <p>Example 2: Use <code>stepId</code> and <code>eventCallbacks</code></p> <p>This example uses only the <code>stepId</code> and <code>eventCallbacks</code>. <pre><code>executeStep(1, {\nonSuccess: function(context) {\n//Do something on success\n}\n});\n</code></pre></p> </li> <li> <p>Example 3: Use all parameters</p> <p>This example uses the <code>stepId</code>, <code>options</code>, and an empty <code>eventCallbacks</code> object. Different properties can be defined by the <code>options</code> object, such as <code>authenticationOptions</code> and <code>authenticatorParams</code>. However, you cannot write a script with only the <code>stepId</code> and <code>options</code>. See the following two examples:</p> <p><pre><code>executeStep(1, {\nauthenticationOptions:[{\nauthenticator: 'totp'\n}]}, {}\n);\n</code></pre> <pre><code>executeStep(1, {\nauthenticatorParams: {\nlocal: {\nemail-otp-authenticator: {\nenableRetryFromAuthenticator: 'true'\n}\n}\n}, {}\n);\n</code></pre></p> </li> <li> <p>Example 4: Filter connections in a step</p> <p>The <code>authenticationOptions</code> array filters out connections (local authenticators and federated identity providers) of a step based on a condition.</p> <p>This can be achieved by specifying an array named <code>authenticationOptions</code> to the <code>options</code> map.  You can have <code>idp</code> as an array item for federated connections and <code>authenticator</code> as an array item for local connections, as shown below.</p> <pre><code>executeStep(1,{\nauthenticationOptions:[{authenticator:'BasicAuthenticator'},{idp:'google'}]\n},{\nonSuccess: function (context) {\n// Do something on success\n};\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#fail-the-login-flow","title":"Fail the login flow","text":"<p><code>fail()</code> </p> <p>This function redirects the user to the redirect URI provided in the authorization request when the login flow fails.</p> <p>This function takes a map as an optional parameter. When a map is provided as the parameter, the redirect URL will be appended with the following properties (which should be contained in the map). Otherwise, the default parameters are passed. All the properties passed in the map are also optional.</p> <ul> <li> <p>Parameters</p> <p> <code>errorCode</code> The error code to be appended in the redirect URL. <code>errorMessage</code> The error message to be appended in the redirect URL. <code>errorURI</code> The URI of a web page that includes additional information about the error. </p> </li> <li> <p>Example</p> <pre><code>var parameterMap = {'errorCode': 'access_denied', 'errorMessage': 'login could not be completed', \"errorURI\":'http://www.example.com/error'};\nif (!isAuthenticated) {\nfail(parameterMap);\n}\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#redirect-to-error-code","title":"Redirect to error code","text":"<p><code>sendError()</code></p> <p>This function redirects the user to an error page. It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>url</code> The URL of the error page that the user is redirected to. If the value is null, the user is redirected by default to the retry.do error page.       Note that any relative URL is assumed to be relative to the host's root. <code>parameters</code> Key value map passed as parameters. These are converted to query parameters in the URL. </p> </li> <li> <p>Example</p> <p>It is recommended to use an i18n key to describe the error messages so that they can be internationalized easily on the error page.</p> <pre><code>var user = context.steps[1].subject;\nvar isAdmin = hasRole(user, 'admin');\nif (!isAdmin) {\nsendError('http://www.example.com/error',{'status':'000403','statusMsg':'You are not allowed to login to this app.', 'i18nkey':'not.allowed.error'});\n}\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#utility-functions","title":"Utility functions","text":"<p>The implementation of utility functions can be found in the WSO2 extensions code repository.</p>"},{"location":"references/conditional-auth/api-reference/#check-group-membership","title":"Check group membership","text":"<p><code>isMemberOfAnyOfGroups()</code></p> <p>This function returns <code>true</code> if the specified user belongs to at least one of the given groups, and returns <code>false</code> if the user does not. It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>user</code> A user object representing the user details. <code>groups</code> A list of strings that contain the groups. Each string is a group name. </p> </li> <li> <p>Example</p> <pre><code>var groups = ['admin', 'manager'];\nvar user = context.steps[1].subject;\nvar isMember = isMemberOfAnyOfGroups(user, groups);\nif (isMember) {\nexecuteStep(2);\n}\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#set-cookie","title":"Set cookie","text":"<p><code>setCookie(response, name, value, properties)</code></p> <p>This function sets a new cookie. It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>response</code> The HTTP response. <code>name</code> Name of the cookie. <code>value</code> Value of the cookie. <code>properties</code> <p>A map that may contain optional attributes of the cookie with the two custom attributes given below.</p> <ul> <li><code>sign</code>: The default value is <code>false</code>. If it is set to true, the value will be signed.</li> <li><code>encrypt</code>: The default value is <code>false</code>. If it is set to true, the value will be encrypted.</li> </ul> </p> </li> <li> <p>Example</p> <p>The size of the value has to be less than the RSA key pair length if '<code>encrypt</code>' is enabled (set to true).</p> <pre><code>setCookie(context.response, \"name\", \"test\", {\"max-age\" : 4000,\n\"path\" : \"/\",\n\"domain\" : \"localhost\",\n\"httpOnly\" : true,\n\"secure\" : true,\n'sameSite': 'LAX',\n\"version\" : 1,\n\"comment\" : \"some comments\",\n\"encrypt\" : true,\n\"sign\" : true})\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#get-cookie-value","title":"Get cookie value","text":"<p><code>getCookieValue(request, name, properties)</code></p> <p>This function gets the plain-text cookie value for the cookie name if it is present. It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>request</code> HTTP authentication request. <code>name</code> Name of the cookie. <code>properties</code> <p>A map that may contain optional attributes of the cookie:</p> <ul> <li><code>decrypt</code>: The default value is <code>false</code>. If it is set to <code>true</code>, the value will be decrypted.</li> <li><code>validateSignature</code>: The default value is <code>false</code>. If it is set to <code>true</code>, the signature will be validated before returning a response.</li> </ul> </p> </li> <li> <p>Example</p> <pre><code>getCookieValue(context.request,\"name\", {\"decrypt\" : true,\"validateSignature\" : true })\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#prompt-for-user-input","title":"Prompt for user input","text":"<p><code>prompt()</code></p> <p>This function prompts user input. It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>templateId</code> Identifier of the template that needs to be prompted. <code>data</code> The data to send to the prompt. <code>eventHandlers</code> The callback event handlers. </p> </li> <li> <p>Example</p> <pre><code>var onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar username = context.steps[1].subject.username;\nprompt(\"genericForm\", {\"username\":username, \"inputs\":[{\"id\":\"fname\",\"label\":\"First Name\"},{\"id\":\"lname\",\"label\":\"Last Name\"}]}, {\nonSuccess : function(context) {\nvar fname = context.request.params.fname[0];\nvar lname = context.request.params.lname[0];\nLog.info(fname);\nLog.info(lname);\n}\n});\n}\n});\n}\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#get-user-sessions","title":"Get user sessions","text":"<p><code>getUserSessions()</code></p> <p>This function returns a session object  (i.e., all the active user sessions of the specified user or an empty array if there are no sessions). It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>user</code> This is a user object that represents the user details. </p> </li> <li> <p>Example</p> <pre><code>var user = context.currentKnownSubject;\nvar sessions = getUserSessions(user);\nfor (var key in sessions) {\nLog.info(\"Session ID: \" + sessions[key].id);\n}\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#terminate-user-session","title":"Terminate user session","text":"<p><code>terminateUserSession()</code></p> <p>This function returns a session object (i.e., all the active user sessions of the specified user or an empty array if there are no sessions). It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>user</code> This is a user object that represents the user details. <code>sessionId</code> This is the <code>sessionId</code> string of the session that needs to be terminated. </p> </li> <li> <p>Example</p> <pre><code>var user = context.currentKnownSubject;\nvar sessions = getUserSessions(user);\nif (sessions.length &gt; 0) {\nvar result = terminateUserSession(user, sessions[0]);\nLog.info(\"Terminate Operation Successful?: \" + result);\n}\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#send-email","title":"Send email","text":"<p><code>sendEmail()</code></p> <p>This function sends an email to the specified user. It includes the parameters listed below.</p> <ul> <li> <p>Parameters</p> <p> <code>user</code> An object representing the user details. <code>templateId</code> Identifier of the email template. The email template specifies the body of the email that is sent out. <code>placeholderParameters</code> Used to replace any placeholders in the template. </p> </li> <li> <p>Example</p> <pre><code>var user = context.steps[1].subject;\nvar firstName = user.localClaims['http://wso2.org/claims/givenname'];\nsendEmail(user, 'myTemplate', {'firstName':firstName});\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#call-a-choreo-api","title":"Call a Choreo API","text":"<p>This function invokes an API hosted in Choreo. It includes the parameters listed below.</p> <p>Important</p> <p>Note that to use the <code>callChoreo</code> function, the API should,</p> <ul> <li>contain an endpoint that accepts <code>POST</code> requests.</li> <li>return a status code of <code>2xx</code>.</li> </ul> <ul> <li> <p>Parameters</p> <p> <code>connectionMetadata</code> An object containing the necessary metadata to invoke the API. . See ConnectionMetadata for more information. <code>payloadData</code> An object representing the payload that needs to be sent in the API request body. <code>eventHandlers</code> An object that contains the callback functions, which are to be called based on the result of API invocation.  Supported results are <code>onSuccess</code>, <code>onFail</code>, and <code>onTimeout</code>. </p> </li> <li> <p>Example</p> <pre><code>var connectionMetadata = {\n\"url\": \"&lt;Choreo API URL&gt;\",\n\"consumerKey\": \"&lt;Consumer key of the Choreo Application&gt;\",\n\"consumerSecret\": \"&lt;Consumer secret of the Choreo Application&gt;\"\n};\n\nvar requestPayload = {\"example-key\": \"example-value\"};\n\ncallChoreo(connectionMetadata, requestPayload, {\nonSuccess: function(context, data) {\nLog.info(\"Successfully invoked the Choreo API.\");\n},\nonFail: function(context, data) {\nLog.info(\"Error occurred while invoking the Choreo API.\");\n},\nonTimeout: function(context, data) {\nLog.info(\"Invoking Choreo API timed out.\");\n}\n});\n</code></pre> Using WSO2 Identity Server as the key manager<p>If you are using WSO2 Identity Server as the key manager in your Choreo organization, append  the <code>asgardeoTokenEndpoint</code> parameter to the <code>connectionMetadata</code> variable as follows:     <pre><code>var connectionMetadata = {\n\"asgardeoTokenEndpoint\": \"https://localhost:9443/oauth2/token\"\n};\n</code></pre></p> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#get-parameter-value-from-jwt","title":"Get parameter value from JWT","text":"<p><code>getValueFromDecodedAssertion(jwt, parameterName, isParameterInPayload)</code></p> <p>This function returns a string containing the parameter's value in a decoded Json Web Token (JWT). It includes the following parameters:</p> <ul> <li> <p>Parameters</p> <p> <code>jwt</code> The JWT to be decoded. <code>parameterName</code> The name of the parameter in the JWT for which the value should be retrieved. <code>isParameterInPayload</code> Indicates whether the parameter to be retrieved is in the JWT header or body.  Value should be <code>true</code> if the parameter to be retrieved is in the body. </p> </li> <li> <p>Example</p> <pre><code>var state = getValueFromDecodedAssertion(context.request.params.request[0],\"state\",true);\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#get-unique-user","title":"Get unique user","text":"<p><code>getUniqueUserWithClaimValues(claimMap, context)</code></p> <p>The utility function will search the underlying user stores and return a unique user with the claim values. The claim map consists of the claim and value.</p> <ul> <li> <p>Parameters</p> <p> <code>claimMap</code> A map that contains the claim URI and claim value. <code>context</code> The authentication context, which contains the context information about the request. </p> </li> <li> <p>Example</p> <pre><code>var claimMap = {};\nclaimMap[MAPPED_FEDERATED_USER_NAME_CLAIM] = federatedUserName;\nclaimMap[MAPPED_FEDERATED_IDP_NAME_CLAIM] = idpName;\nvar mappedUsername = getUniqueUserWithClaimValues(claimMap, context);\n</code></pre> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#get-associated-user","title":"Get associated user","text":"<p><code>getAssociatedLocalUser(federatedUser)</code></p> <p>This function returns the local user associated with the federate username given as input.</p> <ul> <li> <p>Parameters</p> <p> <code>federatedUser</code> The federated user object. </p> </li> </ul>"},{"location":"references/conditional-auth/api-reference/#object-reference","title":"Object reference","text":""},{"location":"references/conditional-auth/api-reference/#context","title":"Context","text":"<p>Contains the authentication context information. The information can be accessed as follows:</p> context.steps[n] Access the authentication step information, where 'n' is the step number (1-based). See step for more information. <p>The step number is the one configured at the step configuration, not the actual order in which they get executed.</p> context.request Access the HTTP authentication request information. See request for more information. context.response Access the HTTP response, which will be sent back to the client. See response for more information. context.serviceProviderName Get the application name."},{"location":"references/conditional-auth/api-reference/#step","title":"Step","text":"<p>Contains the authentication step information. It may be a null or invalid step number.</p> step.subject Contains the authenticated user's information from this step. It may be null if the step is not yet executed. See user for more information. step.idp Gives the name of the federated connection that is used to authenticate the user. step.authenticator Give the name of the authenticator that is used for authenticating te user. You can find the authenticator names from the connection names table."},{"location":"references/conditional-auth/api-reference/#user","title":"User","text":"<code>user.uniqueId</code> The unique identifier of the user. <code>user.username</code> The user's username. <code>user.userStoreDomain</code> <code>(Read/Write)</code> The user store domain of the local user. <code>user.localClaims[\"local_claim_url\"]</code> <code>(Read/Write)</code>  User's attribute (claim) value for the given \"local_claim_url\". If the user is a federated user, this will be the value of the mapped remote claim from the identity provider. <code>user.claims[\"local_claim_url\"]</code> <code>(Read/Write)</code>  Sets a temporary claim value for the session. <code>user.localClaims[\"local_claim_url\"]</code> Updates the claim value in the user store as well. The <code>user.claims[\"local_claim_url\"]</code> parameter is an alternative to setting a temporary claim. <code>user.remoteClaims[\"remote_claim_url\"]</code> <code>(Read/Write)</code>  User's attribute (claim) as returned by the identity provider for the given <code>remote_claim_url</code>. Applicable only for federated users."},{"location":"references/conditional-auth/api-reference/#request","title":"Request","text":"<code>request.headers[\"header_name\"]</code> The request's header value for the given header name. <code>request.params.param_name[0]</code> The request's parameter value for the given parameter name by the <code>param_name</code> index (<code>param_name</code> is an array). <code>request.cookies[\"cookie_name\"]</code> The request's cookie value for the given cookie name. <code>request.ip</code> The client IP address of the user who initiated the request. If there are any load balancers (eg. Nginx) with connection termination, the IP is retrieved from the headers set by the load balancer."},{"location":"references/conditional-auth/api-reference/#response","title":"Response","text":"<p> <code>response.headers[\"header_name\"]</code> (Write) The response header value for the given header name. </p>"},{"location":"references/conditional-auth/api-reference/#session","title":"Session","text":"session.userAgent This is the userAgent object of the user session. See userAgent for more information. session.ip This is the session's IP address. session.loginTime This is the session's last login time. session.lastAccessTime This is the session's last accessed time. session.id This is the list of application objects in the session. See application for more information."},{"location":"references/conditional-auth/api-reference/#application","title":"Application","text":"<p> <code>application.subject</code> This is the subject of the application. <code>application.appName</code> This is the name of the application. <code>application.appId</code> This is the ID of the application. </p>"},{"location":"references/conditional-auth/api-reference/#user-agent","title":"User agent","text":"<p> <code>userAgent.raw</code> This is the raw userAgent string. <code>userAgent.browser</code> This is the web browser property that is extracted from the raw userAgent string. <code>userAgent.platform</code> This is the operating system property that is extracted from the raw userAgent string. <code>userAgent.device</code> This is the device property that is extracted from the raw userAgent string. </p>"},{"location":"references/conditional-auth/api-reference/#connectionmetadata","title":"ConnectionMetadata","text":"<p>It contains the necessary metadata for invoking the API when calling the callChoreo function.</p> <code>connectionMetadata.url</code> URL of the Choreo hosted API. <code>connectionMetadata.consumerKey</code> The consumer key of the Choreo application. <code>connectionMetadata.consumerSecret</code> The consumer secret of the Choreo application. <p>If the consumer key and the consumer secret are added as secrets, they should be included in the ConnectionMetadata as aliases, as shown below.</p> <code>connectionMetadata.consumerKeyAlias</code> The name of the secret that stores the consumer key. <code>connectionMetadata.consumerSecretAlias</code> The name of the secret that stores the consumer secret."},{"location":"references/extend/authenticator-x509/","title":"Extending the x509 authenticator","text":"<p>Before you begin</p> <p>You need to configure the x509 authenticator on WSO2 Identity Server.</p> <p>This document guides you on extending an x509 authenticator's functionality for additional authentication methods.</p> <p>You can use the following methods to extend the authenticator's functionalities:</p> <ul> <li>Authenticating using the Subject Alternative Name</li> <li>Authenticating using the RDN</li> </ul>"},{"location":"references/extend/authenticator-x509/#using-the-subject-alternative-name","title":"Using the Subject Alternative Name","text":"<p>The Subject Alternative Name (SAN) is an extension to the X.509 certificate format that enables securing multiple hostnames, such as <code>CN</code>, <code>IP</code>, <code>DNS</code>, and <code>email</code>, using a single certificate.</p> <p>How SAN works in the WSO2 Identity Server</p> <ul> <li> <p>If SAN (Subject Alternative Name) is not enabled, the system doesn't check for any alternative names in the certificate.</p> </li> <li> <p>When SAN is enabled, the system follows these rules:</p> <ul> <li> <p>If the certificate does not define alternative names, an error occurs, and authentication fails.</p> </li> <li> <p>If no matching string is found for the alternative name pattern defined in the certificate, an error occurs, and authentication fails.</p> </li> <li> <p>If multiple matching strings are found for the alternative name pattern defined in the certificate, an error occurs, and authentication fails.</p> </li> <li> <p>If SAN is enabled and there's a single match for the alternative name pattern in the certificate, that match is used as the user name, and the system proceeds with user authentication. If a user with that username is found in the system, the user is authenticated.</p> </li> </ul> </li> </ul> <p>To enable SAN in the WSO2 Identity Server, add the following configurations to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[authentication.authenticator.x509_certificate.parameters]\nAlternativeNamesRegex=\"^[a-zA-Z]{3}$\"\n</code></pre>"},{"location":"references/extend/authenticator-x509/#using-the-rdn","title":"Using the RDN","text":"<ul> <li> <p>Relative Distinguished Name (RDN)     An RDN comprises one or more certificate attribute-value pairs in the following form:</p> <pre><code>&lt;attribute&gt;=&lt;value&gt;\n</code></pre> <p>Sample RDN: <code>cn=John Doe+o=WSO2</code></p> <p>The above example separates the two attribute-value pairs, <code>cn=John Doe</code> and <code>o=WSO2</code>, by a plus (+) sign.</p> </li> <li> <p>Distinguished Name (DN)     A DN is a sequence of comma-separated RDNs, i.e., RDNs are the components of a DN.</p> <p>Sample DN: <code>cn=Jon Doe+o=WSO2, c=US</code></p> </li> </ul> <p>How DN/RDN works in WSO2 Identity Server</p> <p>The system examines the subject DN (Distinguished Name) for a matching string.</p> <ul> <li>When a matching string is discovered, it is utilized as the user name for further user authentication.</li> <li>However, if multiple matching or no matching values are encountered, the system generates an error, and authentication fails.</li> </ul> <p>To enable subject DN in the WSO2 Identity Server, add the following configurations to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[authentication.authenticator.x509_certificate.parameters]\nUsernameRegex=\"[a-zA-Z]{3}\"\n</code></pre>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/","title":"Write a Custom OAuth 2.0 Grant Type","text":"<p>OAuth 2.0 authorization servers support four main grant types according to the OAuth 2.0 specification. It also has the flexibility to support any custom grant types. This topic provides instructions on how to implement a custom grant type for the OAuth 2.0 authorization server and how to extend the behavior of default grant types.</p> <p>The WSO2 Identity Server is used as the OAuth 2.0 authorization server implementation, which is an open-source implementation.</p>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#implement-a-new-grant-type","title":"Implement a new grant type","text":"<p>Follow the steps given below to implement a new grant type.</p> <ol> <li> <p>Implement the following two extensions.</p> <ul> <li> <p><code>GrantTypeHandler</code> - This extension specifies the validation process and token issuance mechanism.. This can be achieved either by implementing the <code>AuthorizationGrantHandler</code> interface or by extending the pre-existing <code>AbstractAuthorizationGrantHandler</code>. In many scenarios within the WSO2 OAuth component, extending the AbstractAuthorizationGrantHandler is sufficient.</p> </li> <li> <p><code>GrantTypeValidator</code> - This extension validates the grant request sent to the <code>/token</code> endpoint. You can define what parameters must be in the request and define the validation of them. This can be implemented by extending the <code>AbstractValidator</code> in the Apache Amber component.</p> </li> </ul> </li> <li> <p>When the implementation is done, package your class as a <code>.jar</code> file and add it to the <code>&lt;IS_HOME&gt;/repository/component/lib</code> directory.</p> </li> <li> <p>To register the custom grant type, add the following configuration to <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file:</p> <pre><code>[[oauth.custom_grant_type]]\nname=\"grant type identifier\"\ngrant_handler=\"full qualified class name of grant handler\"\ngrant_validator=\"full qualified class name of grant validator\"\n[oauth.custom_grant_type.properties]\nIdTokenAllowed=true\n</code></pre> <p>Info</p> <p>Setting the <code>&lt;IdTokenAllowed&gt;</code> parameter to <code>true</code>, provides flexibility to control the issuing of IDtoken for each grant and also allows the OIDC scope validator to validate the grant types that should support the openid scope.</p> </li> <li> <p>Restart the server to apply changes.</p> </li> </ol> <p>To test this out, follow the instructions below to implement a custom-grant type sample.</p>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#use-the-sample-grant-type","title":"Use the sample grant type","text":"<p>In this section of the guide, we will use a sample defining a custom grant type called the <code>mobile</code> grant. It is similar to the password grant type; the only difference is that users will pass a mobile number instead of a password. The request to the <code>/token</code> API must contain the following two request parameters.</p> <ul> <li><code>grant_type=mobile</code></li> <li><code>mobileNumber=044322433</code></li> </ul> <p>You can access the new grant-type project sample from the GitHub repository. The grant handler and validator class is inside the <code>org.wso2.sample.identity.oauth2.grant.mobile</code> package. This can be modified as required.</p>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#configure-the-resource","title":"Configure the resource","text":"<p>The following Maven buildable source is compatible with WSO2 Identity Server 5.1.0 onwards. The attached <code>.jar</code> file can be directly used as well.</p> Buildable source custom-grant Built jar file custom-grant-4.4.2.jar <p>Note</p> <p>To generate the <code>.jar</code> file from the buildable source, run the following Apache Maven command in the sample's location using the command line.</p> <pre><code>mvn clean install\n</code></pre> <ol> <li> <p>Copy the <code>.jar</code> file in the target directory into the <code>&lt;IS_HOME&gt;/repository/component/lib</code> directory.</p> </li> <li> <p>Add the following configurations to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[[oauth.custom_grant_type]]\nname=\"mobile\"\ngrant_handler=\"org.wso2.sample.identity.oauth2.grant.mobile.MobileGrant\"\ngrant_validator=\"org.wso2.sample.identity.oauth2.grant.mobile.MobileGrantValidator\"\n[oauth.custom_grant_type.properties]\nIdTokenAllowed=true\n</code></pre> </li> <li> <p>Restart the server.</p> </li> </ol>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#configure-a-service-provider-with-the-custom-grant","title":"Configure a service provider with the custom grant","text":"<p>Before you begin</p> <p>You need to have an OIDC application created on the WSO2 Identity Server. If you don't already have one use the following guides to create one.</p> <ul> <li> <p>Register an OpenID Connect web app</p> </li> <li> <p>Register a standard-based application</p> </li> </ul> <p>To add the custom grant type to your application:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li>Select your application, go to the Protocol tab and select the mobile from the Allowed Grant Types list.</li> <li>Click Update to save the configurations.</li> </ol> <p>Tip</p> <p>To configure more advanced configurations, see OAuth/OpenID Connect Configurations.</p>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#obtain-an-access-token","title":"Obtain an access token","text":"<p>Send the grant request to the <code>/token</code> API using a cURL command.</p> <p>Note</p> <p>The HTTP POST body must contain the parameters <code>grant_type=mobile</code> and <code>mobileNumber</code>.</p> <pre><code>grant_type=mobile&amp;mobileNumber=&lt;MOBILE_NUMBER&gt;\n</code></pre> <p>Request format <pre><code>curl --user &lt;OAUTH_CLIENT_KEY&gt;:&lt;OAUTH_CLIENT_SECRET&gt; -k -d \"grant_type=&lt;CUSTOM_GRANT_TYPE&gt;&amp;mobileNumber=&lt;MOBILE_NUMBER&gt;\" -H \"Content-Type: application/x-www-form-urlencoded\" https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/oauth2/token\n</code></pre></p> <p>Sample request <pre><code>curl --user 7wYeybBGCVfLxPmS0z66WNMffyMa:WYfwHUsbsEvwtqmDLuaxF_VCQJwa -k -d \"grant_type=mobile&amp;mobileNumber=0333444\" -H \"Content-Type: application/x-www-form-urlencoded\" https://localhost:9443/oauth2/token\n</code></pre></p> <p>You will receive a response similar to the following JSON response with the access token.</p> <pre><code>{\n\"token_type\":\"bearer\",\n\"expires_in\":2823,\n\"refresh_token\":\"26e1ebf16cfa4e67c3bf39d72d5c276\",\n\"access_token\":\"d9ef87802a22cf7682c2e77df72c735\"\n}\n</code></pre> <p>Note</p> <p>The sample application randomly generates the access token and the refresh token received with the response. Those tokens are not valid.</p>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#customize-an-existing-grant-type","title":"Customize an existing grant type","text":"<p>You can customize one of the existing grant types as an alternative to creating a custom OAuth grant type.</p> <p>The following two classes are sample implementations of customizing the password grant type in particular, but any other grant type can be customized as well.</p> <ul> <li> <p>RoleBasedPasswordGrant - This does RBAC validation apart from the authentication before granting access.</p> </li> <li> <p>ModifiedAccessTokenPasswordGrant - This implementation customize the access token value.</p> </li> </ul>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#configure-the-resource_1","title":"Configure the resource","text":"<ol> <li> <p>Copy the .jar file into the <code>&lt;IS_HOME&gt;/repository/component/lib</code> directory. You can also modify the project and build it using Apache Maven 3.</p> </li> <li> <p>Add the following configurations to the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> <pre><code>[oauth.grant_type.password]\ngrant_handler=\"org.wso2.sample.identity.oauth2.grant.password.ModifiedAccessTokenPasswordGrant\"\n</code></pre> </li> <li> <p>Restart the server.</p> </li> </ol>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#configure-a-service-provider-with-the-customized-grant","title":"Configure a service provider with the customized grant","text":"<p>Before you begin</p> <p>You need to have an OIDC application created on the WSO2 Identity Server. If you don't already have one, use the following guides to create one.</p> <ul> <li> <p>Register an OpenID Connect web app</p> </li> <li> <p>Register a standard-based application</p> </li> </ul> <p>To add the customized grant type to your application:</p> <ol> <li>On the WSO2 Identity Server Console, go to Applications.</li> <li> <p>Select your application, go to the Protocol tab and select the Password from the Allowed Grant Types list.</p> <p>Note</p> <p>Note the Client ID and Client Secret that appear.</p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol> <p>Tip</p> <p>To configure more advanced configurations, see OAuth/OpenID Connect Configurations.</p>"},{"location":"references/extend/write-a-custom-oauth-2.0-grant-type/#obtain-an-access-token_1","title":"Obtain an access token","text":"<p>Send the password grant request to the <code>/token</code> API using a cURL command.</p> <p>Abstract</p> <p>Request format <pre><code>curl --user &lt;OAUTH_CLIENT_KEY&gt;:&lt;OAUTH_CLIENT_SECRET&gt; -k -d \"grant_type=password&amp;username=&lt;USERNAME&gt;&amp;password=&lt;PASSWORD&gt;\" -H \"Content-Type: application/x-www-form-urlencoded\" https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/oauth2/token\n</code></pre></p> <p>Sample request <pre><code>curl --user 7wYeybBGCVfLxPmS0z66WNMffyMa:WYfwHUsbsEvwtqmDLuaxF_VCQJwa -k -d \"grant_type=password&amp;username=admin&amp;password=admin\" -H \"Content-Type: application/x-www-form-urlencoded\" https://localhost:9443/oauth2/token\n</code></pre></p> <p>You will receive a response similar to the following JSON response with the access token.</p> <pre><code>{\n\"token_type\":\"bearer\",\n\"expires_in\":2955,\n\"refresh_token\":\"6865c8d67b42c0c23e634a8fc5aa81f\",\n\"access_token\":\"982f40d4-0bb6-41ce-ac5a-1da06a83e475asela@soasecurity.org\"\n}\n</code></pre> Sending Custom Error Codes<p>Using a custom grant handler, you can send custom error codes to the client side in case of defined/identified errors.</p> <p>This uses the mobile grant sample and adds the specific error codes/messages to it. </p> <p>Tip</p> <p>See here for instructions on implementing and using the mobile grant sample before adding the custom error codes to it.</p> <p>In the downloaded Maven buildable source, add the following code segment in the sample class <code>org.wso2.sample.identity.oauth2.grant.mobile.MobileGrant</code> inside <code>validateGrant()</code> method is the relevant code used for this mechanism.</p> <pre><code>if(mobileNumber != null) {\n//validate mobile number\nauthStatus =  isValidMobileNumber(mobileNumber);\n\nif(authStatus) {\n// if valid set authorized mobile number as grant user\nAuthenticatedUser mobileUser = new AuthenticatedUser();\nmobileUser.setUserName(mobileNumber);\noAuthTokenReqMessageContext.setAuthorizedUser(mobileUser);\noAuthTokenReqMessageContext.setScope(oAuthTokenReqMessageContext.getOauth2AccessTokenReqDTO().getScope());\n} else{\nResponseHeader responseHeader = new ResponseHeader();\nresponseHeader.setKey(\"SampleHeader-999\");\nresponseHeader.setValue(\"Provided Mobile Number is Invalid.\");\noAuthTokenReqMessageContext.addProperty(\"RESPONSE_HEADERS\", new ResponseHeader[]{responseHeader});\n}\n\n}\n</code></pre> <p>Note</p> <p>The <code>ResponseHeader</code> code chunk sets a custom response header in case an invalid mobile number is sent.</p> <p>Build the project and copy the modified jar to the <code>&lt;IS_HOME&gt;/repository/component/lib</code> directory.   </p> <p>Try it out</p> <ul> <li>Happy Path</li> </ul> <pre><code>curl --user &lt;OAUTH_CLIENT_KEY&gt;:&lt;OAUTH_CLIENT_SECRET&gt; -k -d \"grant_type=mobile&amp;mobileNumber=0333444\" -H \"Content-Type: application/x-www-form-urlencoded\" https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/oauth2/token\n</code></pre> <ul> <li>Erroneous Path</li> </ul> <pre><code>curl -v --user &lt;OAUTH_CLIENT_KEY&gt;:&lt;OAUTH_CLIENT_SECRET&gt; -k -d \"grant_type=mobile&amp;mobileNumber=0363444\" -H \"Content-Type: application/x-www-form-urlencoded\" https://&lt;IS_HOST&gt;:&lt;IS_PORT&gt;/oauth2/token\n</code></pre> <p>Info</p> <p>According to the mobile custom grant sample, this is erroneous because the mobile number does not start with '003'. You can use the -v option in the cURL command to see the response's header, which should be as seen in the code block below.</p> <pre><code>&gt; POST /oauth2/token HTTP/1.1\n&gt; Authorization: Basic dlNmZVE5amZOb2RZMXR2OUtMTk54TE93N2t3YTpDRVVXdTdmRE55X1JZZzVsT19tcDhQTGY3blFh\n&gt; User-Agent: curl/7.29.0\n&gt; Host: localhost:9443\n&gt; Accept: */*\n&gt; Content-Type: application/x-www-form-urlencoded\n&gt; Content-Length: 38\n&gt; \n* upload completely sent off: 38 out of 38 bytes\n&lt; HTTP/1.1 400 Bad Request\n&lt; Date: Wed, 13 Jan 2016 06:05:33 GMT\n&lt; SampleHeader-999: Provided Mobile Number is Invalid.\n&lt; Content-Type: application/json\n&lt; Content-Length: 87\n&lt; Connection: close\n&lt; Server: WSO2 Carbon Server\n&lt; \n* Closing connection 0\n* SSLv3, TLS alert, Client hello (1):\n{\"error\":\"invalid_grant\",\"error_description\":\"Provided Authorization Grant is invalid\"}\n</code></pre> <p>Info</p> <p><code>SampleHeader-999...</code> shows the custom header appearing in the headers.</p> <p>Similarly, this can be used to transfer any custom information to the client's flexibly.</p>"},{"location":"references/idp-settings/","title":"IdP configurations","text":"IdP configurations  <p>Configure the OpenID enterprise IdP or SAML IdP related settings in WSO2 Identity Server</p> OpenID Connect SAML"},{"location":"references/idp-settings/oidc-settings-for-idp/","title":"OIDC settings for IdPs","text":"<p>You can find the OIDC enterprise IdP settings in the Settings tab of the selected OIDC enterprise IdP.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#mandatory-settings","title":"Mandatory settings","text":"<p>Listed below are the mandatory settings.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#client-id","title":"Client ID","text":"<p>The client ID that is generated when registering WSO2 Identity Server as an OIDC application in the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#client-secret","title":"Client secret","text":"<p>The client secret that is generated when registering WSO2 Identity Server as an OIDC application in the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#authorization-endpoint-url","title":"Authorization endpoint URL","text":"<p>The OpenID Connect standard authorization endpoint URL of the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#token-endpoint-url","title":"Token endpoint URL","text":"<p>The OpenID Connect standard token endpoint URL of the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#authorized-redirect-url","title":"Authorized redirect URL","text":"<p>This is where the user needs to be redirected after completing authentication at the external identity provider. The identity provider needs to send the authorization code to this URL upon successful authentication.</p> <p>You should configure <code>https://localhost:9443/commonauth</code> as the redirect URL/callback URL when you register WSO2 Identity Server as an OIDC application in the external IdP.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#additional-settings","title":"Additional settings","text":"<p>Listed below are additional settings.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#user-info-endpoint-url","title":"User info endpoint URL","text":"<p>The OpenID Connect standard userinfo endpoint  of the external identity provider. If this URL is not given, user attributes are taken from the ID token of the token response received from the external IdP.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#logout-url","title":"Logout URL","text":"<p>The OpenID Connect standard logout endpoint of the external identity provider. If this URL is given, WSO2 Identity Server sends logout requests to the external IdP when a user logs out from the connected application.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#scopes","title":"Scopes","text":"<p>This is a list of case-sensitive OpenID Connect scopes that needs to be requested from the OIDC external IdP. See the OpenID Connect specification for more information about what scopes can be configured here.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#additional-query-parameters","title":"Additional query parameters","text":"<p>WSO2 Identity Server supports sending additional information to your OIDC external IdP in the form of query params in the login request.</p> <ul> <li>Fixed query params</li> <li> <p>Dynamic query params</p> <ul> <li>Query param value sent in the application login request</li> <li>Query param value resolved in a conditional authentication script</li> </ul> </li> </ul> <p>You can check below examples when an application developer wants to send login_hint as a query param to external provider.</p> Fixed query params <p>Here WSO2 Identity Server sends the fixed query param to the external identity provider in the login request.</p> <ul> <li> <p>Sample Query Param:</p> <p><code>login_hint=none</code></p> <p></p> </li> </ul> Dynamic query params <ol> <li> <p>Query param value sent in the application login request</p> <ul> <li> <p>Sample Query Param:</p> <p><code>login_hint=${login_hint_value}</code></p> <p></p> <p>You can see a sample OIDC request from an application below.</p> <pre><code>https://localhost:9443/oauth2/authorize?scope=openid&amp;response_type=code&amp;redirect_uri=&lt;redirect_uri&gt;&amp;client_id=&lt;client_id&gt;&amp;login_hint_value=user@gmail.com\n</code></pre> </li> <li> <p>If the application does not send the query param in the login request, the particular parameterized query param will not be sent to the external OIDC identity provider.</p> </li> </ul> </li> <li> <p>Query param value resolved in a conditional authentication script</p> <ul> <li> <p>Sample Query Param:</p> <p><code>login_hint=$authparam{login_hint_value}</code></p> <p></p> </li> </ul> <p>Here login_hint_value needs to be resolved from the conditional auth script.  </p> <ul> <li> <p>Sample conditional auth script: </p> <p><pre><code>// Step 1: username and password authentication  \n// Step 2: OIDC enterprise login  \nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function(context) {\n// Extracting authenticated user from the first step.\nvar emailAddress = context.steps[1].subject.username;\nexecuteStep(2, {\nauthenticatorParams: {\ncommon: {\n'login_hint_value': emailAddress  // This is where we resolve the dynamic query param.\n}\n},\nauthenticationOptions: [{\nidp: 'OIDC enterprise IDP' // Name of the OIDC idp.\n}]\n}, {});\n},\n});\n};\n</code></pre> </p> </li> </ul> </li> </ol>"},{"location":"references/idp-settings/oidc-settings-for-idp/#enable-http-basic-auth-for-client-authentication","title":"Enable HTTP basic auth for client authentication","text":"<p>Specify whether to enable HTTP basic authentication for the token request. Otherwise, client credentials are sent in the request body instead of the HTTP header.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/","title":"SAML settings for IdPs","text":"<p>You can find the SAML IdP related settings under settings section of the selected SAML IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#basic-settings","title":"Basic settings","text":"<p>WSO2 Identity Server supports below bindings:</p> <ul> <li>HTTP Post</li> <li>HTTP Redirect</li> <li>As Per Request</li> </ul>"},{"location":"references/idp-settings/saml-settings-for-idp/#service-provider-entity-id","title":"Service provider entity ID","text":"<p>Also known as  issuer. Specifies the entityID of WSO2 Identity Server which acts as the application. This value will be used as the <code>&lt;saml2:Issuer&gt;</code> in the SAML requests initiated from WSO2 Identity Server to external Identity Provider (IdP). You need to provide a unique value as the service provider entityId.</p> <p>It is recommended to use a valid urn (e.g: urn:asgardeo:id) as the entityID.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-single-sign-on-url","title":"Identity provider Single Sign-On URL","text":"<p>Single sign-on URL of the external IdP. This is where WSO2 Identity Server will send its authentication requests.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#assertion-consumer-service-acs-url","title":"Assertion Consumer Service (ACS) URL","text":"<p>The Assertion Consumer Service (ACS) URL determines where WSO2 Identity Server expects the external identity provider to send the SAML response.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-entity-id","title":"Identity provider entity ID","text":"<p>Also known as the issuer of identity provider. This is the <code>&lt;saml2:Issuer&gt;</code> value specified in the SAML responses issued by the external IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-nameid-format","title":"Identity provider NameID format","text":"<p>Name ID defines the name identifier formats supported by the external IdP. Name identifier is how WSO2 Identity Server communicates with external IdP regarding a user.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#http-protocol-binding","title":"HTTP protocol binding","text":"<p>Specifies the mechanisms to transport SAML messages in communication protocols. Bindings define how SAML request-response protocol messages can be exchanged between identity provider and SAML application via HTTP transport.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#single-logout","title":"Single Logout","text":""},{"location":"references/idp-settings/saml-settings-for-idp/#accept-identity-provider-logout-requests","title":"Accept identity provider logout requests","text":"<p>Specifies whether single logout request from the IdP must be accepted by WSO2 Identity Server. By selecting this configuration, WSO2 Identity Server can process the SAML IdP initiated logout requests and send the back-channel logout requests to the downstream applications.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-logout-enabled","title":"Identity provider logout enabled","text":"<p>Specifies whether logout is supported by the external IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#idp-logout-url","title":"IdP logout URL","text":"<p>Provides the logout endpoint URL of the IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#request-response-signing","title":"Request &amp; Response Signing","text":""},{"location":"references/idp-settings/saml-settings-for-idp/#strictly-verify-authentication-response-signature-info","title":"Strictly verify authentication response signature info","text":"<p>Specifies if SAML2 authentication response from the external IdP must be signed or not. If this setting is selected, WSO2 Identity Server will validate the signature in authentication response sent by the external IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#logout-request-signing","title":"Logout request signing","text":"<p>Specifies if SAML2 logout request to the external IdP from WSO2 Identity Server must be signed or not.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#authentication-request-signing","title":"Authentication request signing","text":"<p>Specifies if SAML2 authentication request to the external IdP from WSO2 Identity Server must be signed or not.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#signature-algorithm","title":"Signature algorithm","text":"<p>Used as the signing algorithm to sign the authentication request and logout request.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#digest-algorithm","title":"Digest algorithm","text":"<p>Used as the digest algorithm in authentication request and logout request.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#advanced","title":"Advanced","text":""},{"location":"references/idp-settings/saml-settings-for-idp/#include-protocol-binding-in-the-request","title":"Include protocol binding in the request","text":"<p>Specifies whether the transport mechanism should be included in the small authentication request.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#find-user-id-from-requests","title":"Find user ID from requests","text":"<p>To specify an attribute from the SAML 2.0 assertion as the user identifier, configure the subject attribute from the attributes section.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#additional-query-parameters","title":"Additional query parameters","text":"<p>WSO2 Identity Server supports sending additional information to your SAML external IdP in the form of query params in the login request.</p> <ul> <li>Fixed query params</li> <li> <p>Dynamic query params</p> </li> <li> <p>Query param value sent in the application login request</p> </li> <li>Query param value resolved in a conditional authentication script</li> </ul> <p>You can check below examples when an application developer wants to send login_hint as a query param to external provider.</p> Fixed query params <p>Here WSO2 Identity Server sends the fixed query param (e.g: <code>login_hint</code>) to the external identity provider in the login request.</p> <ul> <li> <p>Sample Query Param:</p> <p><code>login_hint=none</code></p> <p></p> </li> </ul> Dynamic query params <ol> <li> <p>Query param value sent in the application login request</p> <ul> <li> <p>Sample Query Param:</p> <p><code>login_hint={login_hint_value}</code> </p> <p></p> </li> <li> <p>If the application does not send the query param <code>login_hint_value</code> in the login request, the particular parameterized query param  will not be sent to the external SAML identity provider.</p> </li> </ul> </li> <li> <p>Query param value resolved in a conditional authentication script</p> <ul> <li> <p>Sample Query Param:</p> <p><code>login_hint=$authparam{login_hint_value}</code></p> <p></p> <p>Here login_hint_value needs to be resolved from the conditional auth script.      </p> </li> <li> <p>Sample conditional auth script: </p> <pre><code>// Step 1: username and password authentication  \n// Step 2: SAML enterprise login  \nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function(context) {\n// Extracting authenticated user from the first step.\nvar emailAddress = context.steps[1].subject.username;\nexecuteStep(2, {\nauthenticatorParams: {\ncommon: {\n'login_hint_value': emailAddress  // This is where we resolve the dynamic query param.\n}\n},\nauthenticationOptions: [{\nidp: 'SAMLIDP' // Name of the SAML IdP.\n}]\n}, {});\n},\n});\n};\n</code></pre> </li> </ul> </li> </ol>"},{"location":"references/remote-user-store/remote-user-store-properties/","title":"Remote user store properties","text":"<p>The following table provides descriptions of the key properties to apply in <code>deployment.toml</code> file to configure the user store that you need to connect.      Configuration name Description <code>type</code>                      Type of the user store you are trying to connect. You can update the type parameter as <code>ldap</code>                     if you are using LDAP (Lightweight Directory Access Protocol) and <code>active_directory</code> if you are                     using an Active Directory user store.  Example: <code>type = \"ldap\"</code> <code>connection_url</code> Connection URL to the user store server.  Example: <code>connection_url = \"ldap://localhost:389\"</code> <code>connection_name</code>                      The username used to connect to the user store and perform various operations. This user does not have to be                     an administrator in the user store, but this user MUST have permission to read the user list and users' attributes and                     to perform search operations on the user store. The value you specify is used as the DN ( Distinguish Name ) attribute                     of the user. This property is mandatory.  Example: <code>connection_name = \"uid=admin,ou=system\"</code> <code>connection_password</code> Password for the ConnectionName user. Example: <code>connection_password = \"password\"</code> <code>ldap_connection_timeout</code>                      Timeout in making the initial LDAP connection. This is configured in milliseconds.                      Example: <code>ldap_connection_timeout = 2000</code> <code>base_dn</code>                      The starting point the directory server uses when searching for users authentication within your Directory.                      Example: <code>base_dn = \"dc=example,dc=org\"</code> <code>user_search_base</code>                      DN of the context or object under which the user entries are stored in the user store. In this case,                     it is the \"users\" container. When the user store searches for users, it will start from this location                     of the directory.  Example: <code>user_search_base = \"ou=Users,dc=example,dc=org\"</code> <code>user_name_list_filter</code>                      Filtering criteria for listing all the user entries in the user store. This query or filter is used                     when doing search operations on users. In this case, the search operation only provides the objects                     created from the specified class. This query is the same as listing out all the available users in                     the management console.  Example: <code>user_name_list_filter = \"(objectClass=user)\"</code> <code>user_name_attribute</code>                      The attribute used for uniquely identifying a user entry. Users can be authenticated using their                     email address, UID, etc. The name of the attribute is considered as the username.                      Example: <code>user_name_attribute = \"cn\"</code> <code>user_name_search_filter</code>                      Filtering criteria are used to search for a particular user entry.                      Example: <code>user_name_search_filter = \"(&amp;(objectClass=user)(cn=?))\"</code> <code>user_entry_object_class</code>                      The object class is used to construct user entries.                      Example: <code>user_entry_object_class = \"inetOrgperson\"</code> <code>user_id_attribute</code>                      The attribute used for uniquely identifying a user entry. The value of the attribute is considered                     as the unique user ID.  Example: <code>user_id_attribute = \"objectGuid\"</code> <code>user_id_search_filter</code>                      Filtering criteria used to search for a particular user entry using the user id attribute.                      Example: <code>user_id_search_filter = \"(&amp;(objectClass=user)(objectGuid=?))\"</code> <code>password_hash_method</code>                      Specifies the Password Hashing Algorithm uses the hash the password before storing in the user store.                     Possible values:  <code>SHA</code> - Uses SHA digest method. SHA-1, SHA-256  <code>MD5</code> - Uses MD 5 digest method.                      <code>PLAIN_TEXT</code> - Plain text passwords.(Default) Example: <code>password_hash_method = \"PLAIN_TEXT\"</code> <code>read_groups</code>                      Specifies whether groups should be read from the user store. If this is disabled by setting it to                     false, none of the groups in the user store can be read, and the following group configurations are                     NOT mandatory: group_search_base, group_name_list_filter, group_name_search_filter, or group_name_attribute.                     Example: <code>read_groups = \"true\"</code> <code>group_search_base</code>                      DN of the context under which group entries are stored in the user store.                      Example: <code>group_search_base = \"ou=Groups,dc=example,dc=org\"</code> <code>group_entry_object_class</code>                      The object class is used to construct group entries.                     Example: <code>group_entry_object_class = \"groupOfNames\"</code> <code>group_name_attribute</code>                      Attribute used for uniquely identifying a group entry. This attribute is to be treated as the group name.                      Example: <code>group_name_attribute = \"cn\"</code> <code>group_name_search_filter</code>                      Filtering criteria used to search for a particular group entry.                      Example: <code>group_name_search_filter = \"(&amp;(objectClass=groupOfNames)(cn=?))\"</code> <code>group_name_list_filter</code>                      Filtering criteria for listing all the group entries in the user store. The group search operation                     only returns objects created from this class.                     Example: <code>group_name_list_filter = \"(objectClass=groupOfNames)\"</code> <code>group_id_enabled</code> Whether the unique groupid is enabled or not.Example: <code>group_id_enabled = \"true\"</code> <code>group_id_attribute</code>                      The attribute used for uniquely identifying a group entry. The value of the attribute is considered as the unique group ID.                     Example: <code>group_id_attribute = \"gid\"</code> <code>membership_attribute</code>                      Attribute used to define members of groups.                     Example: <code>membership_attribute = \"member\"</code> <code>group_created_date_attribute</code>                      This attribute is to be treated as the group created timestamp.                     Example: <code>group_created_date_attribute = \"whenCreated\"</code> <code>multi_attribute_separator</code>                      This property is used to define a character to separate multiple attributes. This ensures that it                     will not appear as part of a claim value. Normally \u201c,\u201d is used to separate multiple attributes, but                     you can define \",,,\" or \"...\" or a similar character sequence                     Example: <code>multi_attribute_separator = \",\"</code> <code>case_insensitive_user_name</code>                  Enables the case-insensitivity of the user's username. The default value is true for this configuration.                  Eg: If a user's username is test, that user can also use the username as TEST.                 Example: <code>case_insensitive_user_name = \"true\"</code> <code>immutable_attributes</code>                  This property is used to define a list of attributes that are considered unchangeable attributes in the user store.                  This property needs to be configured only for user stores with Read/Write access.                 Example: <code>immutable_attributes = \"whenCreated,whenChanged,location\"</code> </p>"},{"location":"references/user-management/user-roles/","title":"WSO2 Identity Server user roles","text":"<p>Roles consist of the permissions that are required by users to access the WSO2 Identity Server resources such as functions available on the WSO2 Identity Server Console, REST APIs, etc.</p> <p>When you assign a role to a user, you are controlling what the user can do in WSO2 Identity Server.</p> <p>By default, WSO2 Identity Server has the Administrator user role. This role includes all administrative permissions in the organization. An organization can have many users with the administrator role. An administrator is a privileged user who has overall access to the organization.</p> <p>The following list contains the permissions enabled for an Administrator:</p>"},{"location":"references/user-management/user-roles/#user-management","title":"User management","text":"<ul> <li>View users</li> <li>Onboard users</li> <li>Update user profiles</li> <li>Delete users</li> <li>Terminate sessions</li> <li>View groups</li> <li>Create groups</li> <li>Update and delete groups</li> <li>View assigned users to groups</li> <li>Asign users to groups</li> </ul>"},{"location":"references/user-management/user-roles/#application-management","title":"Application management","text":"<ul> <li>View apps and app settings</li> <li>Register apps</li> <li>Update and delete apps</li> <li>Update Sign-in methods</li> <li>Update protocol settings</li> </ul>"},{"location":"references/user-management/user-roles/#connections-management","title":"Connections management","text":"<ul> <li>View connections and connection settings</li> <li>Create new connection</li> <li>Update and delete connections</li> </ul>"},{"location":"references/user-management/user-roles/#organization-management","title":"Organization management","text":"<ul> <li>Create new organizations</li> <li>Create suborganizations</li> <li>As the suborganization creator, view, update, and delete suborganizations that you created</li> <li>Share applications from the root organizations to it's suborganizations</li> </ul>"},{"location":"references/user-management/user-roles/#managing-attributes-and-scopes","title":"Managing attributes and scopes","text":"<ul> <li>View attributes</li> <li>Create new attributes</li> <li>Update and delete attributes</li> <li>View scopes</li> <li>Add new attributes to scopes</li> <li>Update and delete scopes</li> </ul>"},{"location":"references/user-management/user-roles/#managing-organization-settings","title":"Managing organization settings","text":"<ul> <li>View account recovery scenario and settings</li> <li>Configure account recovery scenarios</li> <li>View self registration related settings</li> <li>Configure self registration for users</li> <li>View account security related settings and configurations</li> <li>Configure account security related settings</li> </ul>"}]}