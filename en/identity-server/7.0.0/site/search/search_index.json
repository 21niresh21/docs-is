{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to the Choreo Learning Portal <p>NoteThe Home page will be designed to  provide a guided experience to any user coming to docs with a valid Choreo use case. We intend to ONLY INCLUDE conceptual information in the documentation  for the relevant topics and **NOT INCLUDE** any how to guides, or instructions with the exception of Tutorials.</p>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.\u00a0</p>"},{"location":"what-is-choreo/","title":"What is Choreo?","text":"<p>Choreo is a powerful SaaS application development suite that streamlines the process of creating digital experiences. With Choreo, you can build, deploy, monitor, and manage your cloud-native applications with ease, enabling you to focus on innovation and reduce time-to-market.</p> <p>The Choreo suite comprises 5 profiles that work together seamlessly:</p> <ul> <li> <p>Internal Developer Platform is a full lifecycle cloud native application development platform to create, deploy, run, and govern APIs, integrations, and microservices on Kubernetes. Gives you the benefit of organization-wide productivity via self-service teams, governance and security, enterprise marketplaces, and business metrics.</p> </li> <li> <p>API Manager is an enterprise-grade, API-first development platform to create, deploy, run, and manage APIs and services that integrate perfectly with your development practices across multiple environments. You can deploy to the Choreo cloud or any private cloud within minutes.</p> </li> <li> <p>iPaaS is a developer-friendly, serverless platform for writing real integrations as code or low-code. You can create scheduled tasks, reusable APIs, or event-driven integrations, and build, deploy, run, and observe in a seamless serverless, multi-cloud, and multi-environment setup.</p> </li> <li> <p>Cloud Native App Developer provides you with the flexibility to design, develop, deploy, and operate your backend APIs, services, integrations, and more with any programming language of your choice.</p> </li> <li> <p>DevOps allows you to release and manage applications on Kubernetes without compromising on security, reliability, or governance, across any cloud.</p> </li> </ul>"},{"location":"apis/","title":"APIs - Overview","text":"<p>This is the REST API documentation for Asgardeo.</p>"},{"location":"apis/#apis-in-asgardeo","title":"APIs in Asgardeo","text":"<p>Asgardeo exposes a set of APIs, which allows you to manage various organization settings and application settings programmatically using the APIs. This is an alternative to using the Asgardeo Console.</p> <p>Some of these APIs are used for management purposes and they have special authentication requirements. The management APIs in Asgardeo are as follows:</p> <ul> <li>Email templates API</li> <li>User management API (SCIM2)</li> <li><code>me</code> endpoint</li> <li><code>users</code> endpoint</li> <li><code>group</code> endpoint</li> <li><code>bulk</code> endpoint</li> <li><code>resource type</code> endpoint</li> <li><code>service provider config</code> endpoint</li> <li>User session management API</li> <li>User session extension API</li> <li>Event configuration management API</li> <li>Identity Governance API</li> <li>Suborganization APIs</li> </ul>"},{"location":"apis/#authentication","title":"Authentication","text":"<p>You need an access token to invoke APIs in Asgardeo. If you are an administrator or developer who has access to the Asgardeo Console, you can generate the required access tokens.</p> <p>The process of obtaining access tokens is different for management APIs and other APIs of Asgardeo.</p> <p>Note</p> <p>Learn how to:</p> <ul> <li>get access tokens for management APIs.</li> <li>get access tokens for other APIs.</li> <li>get access tokens for suborganization APIs.</li> </ul>"},{"location":"apis/application-management/","title":"Application management API","text":""},{"location":"apis/authentication/","title":"Authentication","text":"<p>To access management APIs  in Asgardeo, you need to first get an access token from your organization for the API operations that you want to access. You can then use this access token to securely invoke those API operations.</p> <p>Follow the instructions given below.</p>"},{"location":"apis/authentication/#get-an-access-token","title":"Get an access token","text":"<p>Follow the steps given below to get an access token with the required permissions.</p> <ol> <li>Register a management app</li> <li>Request an access token</li> </ol>"},{"location":"apis/authentication/#register-a-management-app","title":"Register a management app","text":"<p>Use the standard-based app type to register an OIDC management app:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li> <p>Click New Application and select Standard-Based Application to open the following:</p> <p></p> </li> <li> <p>Provide an application name.</p> </li> <li> <p>Select OIDC Standard-Based Application as the app type and then select the Management Application checkbox.</p> <p>Note</p> <p>Learn more about OIDC configurations.</p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li>Go to the Protocol tab and select Client Credential as the grant type for the application.</li> </ol> <p>The client credentials for your application are displayed in the protocol tab as shown below. </p> <p>Note</p> <p>The client ID and client secret are sensitive information that must be protected. See the best practices before you proceed.</p>"},{"location":"apis/authentication/#request-an-access-token","title":"Request an access token","text":"<p>You can now request an access token from the token endpoint by specifying the internal scopes (permission level) that you require to access.</p> <p>Note</p> <p>See the relevant API reference docs for the list of internal scopes for each API.</p> <p>Use the following cURL command format in your request:</p> <pre><code>curl -X POST \\\nhttps://api.asgardeo.io/t/&lt;org_name&gt;/oauth2/token \\\n-u  '&lt;client_id&gt;:&lt;client_secret&gt;' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-d 'grant_type=client_credentials&amp;scope=&lt;scope&gt;'\n</code></pre> <p>Replace the following variables in the above request.</p> Variable Description <code>org_name</code> Name of your organization on Asgardeo. <code>client_id</code> Client ID of your application. This is generated when registering the application in Asgardeo. <code>client_secret</code> Client secret of your application. This is generated when registering the application in Asgardeo. <code>scope</code> The scope corresponding to the API you want to use.See the relevant API reference docs for the list of internal scopes for each API. Sample access token <p>Shown below is a sample access token that you will receive in the response.</p> <pre><code>61985b0e-26c3-38b7-acff-b18ad934eafc \n</code></pre>"},{"location":"apis/authentication/#access-the-api","title":"Access the API","text":"<p>You can now use the access token as an Authorization Bearer header to access the management APIs.</p> <p>This is a sample cURL command template for the request.</p> <pre><code>curl -X GET \"https://api.asgardeo.io/t/&lt;org_name&gt;/scim2/Users\" -H \"accept: application/scim+json\" -H \"Authorization: Bearer &lt;access_token&gt;\"\n</code></pre>"},{"location":"apis/authentication/#best-practices","title":"Best practices","text":"<p>When invoking the management APIs we recommend the following best practices:</p> <ul> <li>If the <code>client_id</code> and <code>client_secret</code> are compromised, anyone can use them to invoke the client credentials grant and get an access token with all the access levels of the admin. Therefore, we highly recommend not to share the client id and client secret.</li> <li>If required, the administrator can set a higher expiry time for the application token through the application configurations in the Asgardeo Console.</li> <li>When you request an access token, be sure that it is specific to the scopes that are required for a specific task. This allows you to mitigate the risk of token misuse when you share it with other developers.</li> </ul>"},{"location":"apis/consent-management/","title":"Consent management API","text":"<p>-- template: templates/redoc.html</p> <p> </p>"},{"location":"apis/email-template/","title":"Email templates API","text":""},{"location":"apis/event-configuration/","title":"Event configuration API","text":""},{"location":"apis/extend-sessions/","title":"Session extension API","text":""},{"location":"apis/identity-governance/","title":"Identity governance API","text":""},{"location":"apis/idle-account-identification/","title":"Idle account identification API","text":""},{"location":"apis/idp/","title":"Identity provider API","text":""},{"location":"apis/oauth-dcr/","title":"OAuth Dynamic Client Registration API","text":""},{"location":"apis/scim2/","title":"User management (SCIM 2.0) API","text":""},{"location":"apis/session/","title":"Session management API","text":""},{"location":"apis/validation/","title":"Validation API","text":""},{"location":"apis/administrators/export-admin-info/","title":"Export admin information API","text":""},{"location":"apis/organization-management/","title":"Suborganization Management APIs","text":"<p>This is the REST API documentation for suborganizations in Asgardeo.</p>"},{"location":"apis/organization-management/#apis-in-asgardeo","title":"APIs in Asgardeo","text":"<p>Asgardeo exposes a set of APIs, allowing you to manage various suborganization settings and application settings programmatically. This is an alternative to using the Asgardeo Console.</p> <p>Some of these APIs are used for organization management purposes, and they have special authentication requirements. The management APIs of suborganization in Asgardeo are as follows:</p> <ul> <li>Suborganization user management API (SCIM2)</li> <li><code>users</code> endpoint</li> <li><code>group</code> endpoint</li> <li>Suborganization application management API</li> <li>Suborganization identity provider management API</li> <li>Suborganization role management API</li> <li>Suborganization level organization management API</li> </ul> <p>!!! warning     You need a paid Asgardeo subscription to use this feature. If you don\u2019t already have one, view the available subscription plans and contact the Asgardeo sales team.</p>"},{"location":"apis/organization-management/#authentication","title":"Authentication","text":"<p>You need an access token to invoke APIs in suborganizations of Asgardeo. You can generate the required access tokens if you are an administrator or developer with access to the Asgardeo Console.</p> <p>Note</p> <p>Learn how to get access tokens for suborganization management APIs.</p>"},{"location":"apis/organization-management/authentication/","title":"Authentication for suborganization APIs","text":"<p>To access the management APIs of suborganizations in Asgardeo, you must first get an access token from your suborganization for the API operations you want to execute. You can then use this access token to invoke those API operations securely.</p> <p>The following is a high-level diagram of how to authenticate to suborganization APIs.</p> <p></p> <p>Follow the steps given below to get an access token with the required permissions.</p> <ol> <li>Register a management app</li> <li>Request for authorization code</li> <li>Request an access token against the root organization</li> <li>Request an access token against the suborganization</li> </ol>"},{"location":"apis/organization-management/authentication/#register-a-management-app","title":"Register a management app","text":"<p>Use the standard-based app type to register an OIDC management app:</p> <ol> <li>On the Asgardeo Console, go to Develop &gt; Applications.</li> <li> <p>Click New Application and select Standard-Based Application to open the following:</p> <p></p> </li> <li> <p>Provide an application name.</p> </li> <li> <p>Select OIDC Standard-Based Application as the app type and then select the Management Application checkbox.</p> <p>Note</p> <p>Learn more about OIDC configurations.</p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li>Click Share Application to share the application with suborganizations.</li> <li>Go to the Protocol tab and select Authorization Code and Organization Switch as the grant types for the application.</li> </ol> <p>The client credentials for your application are displayed in the protocol tab, as shown below. </p> <p>Note</p> <p>The client ID and client secret are sensitive information that must be protected. See the best practices before you proceed.</p>"},{"location":"apis/organization-management/authentication/#get-the-authorization-code","title":"Get the authorization code","text":"<p>First, your app must initiate a login request to the authorization endpoint of Asgardeo. After redirecting to Asgardeo, the user should be prompted with a login page if the user is not authenticated.</p> <p>Request Format <pre><code>https://api.asgardeo.io/t/&lt;root_organization_name&gt;/oauth2/authorize?response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}\n</code></pre></p> Request Parameter Description <code>response_type</code> Required grant type. Use <code>code</code> to represent the authorization code grant type. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. This needs to be the same as one of the URLs given in the registered apps. <code>client_id</code> The client ID obtained when registering the application in Asgardeo."},{"location":"apis/organization-management/authentication/#get-access-tokens","title":"Get access tokens","text":"<p>In this flow, the application needs to get tokens for the root organization and exchange the obtained token to get an access token for the suborganization.</p> <p>Let's see how this works:</p>"},{"location":"apis/organization-management/authentication/#step-1-for-the-root-organization","title":"Step 1: For the root organization","text":"<p>After receiving the authorization code, the application has to exchange it to get the tokens given below:</p> <ul> <li><code>access_token</code></li> <li><code>id_token</code></li> </ul> <p>The application has to provide its credentials and get the tokens.</p> <p>Token request <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/&lt;root_organization_name&gt;/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=&lt;authorization_code&gt;' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'client_id=&lt;client_id&gt;' \\\n--data-urlencode 'client_secret=&lt;client_secret&gt;' \\\n--data-urlencode 'redirect_uri=&lt;redirect_uri&gt;'\n</code></pre></p> <p>This token request has the following parameters:</p> Request Parameter Description <code>code</code> The authorization code received from the authorization request. <code>grant_type</code> The grant type. Here we are using the <code>authorization_code</code> grant. <code>redirect_uri</code> This is where the response is redirected to at the end of the process."},{"location":"apis/organization-management/authentication/#step-2-for-the-suborganization","title":"Step 2: For the suborganization","text":"<p>You can now request an access token from the token endpoint by exchanging the access token of the root organization and specifying the internal scopes (permission level) you require to access.</p> <p>Note</p> <p>See the relevant API reference docs for the list of internal scopes for each API.</p> <p>Use the following cURL command format in your request:</p> <pre><code>curl -X POST \\\n'https://api.asgardeo.io/t/&lt;root_organization_name&gt;/oauth2/token' \\\n--header 'Authorization: Basic &lt;base64 Encoded (clientId:clientSecret)&gt;' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=organization_switch' \\\n--data-urlencode 'token=&lt;access token from step 1&gt;' \\\n--data-urlencode 'scope=&lt;required scopes&gt;' \\\n--data-urlencode 'switching_organization=&lt;suborganization id&gt;'\n</code></pre> <p>Replace the following variables in the above request.</p> Variable Description <code>org_name</code> Name of your organization on Asgardeo. <code>client_id</code> Client ID of your application. This is generated when registering the application in Asgardeo. <code>client_secret</code> Client secret of your application. This is generated when registering the application in Asgardeo. <code>token</code> The access token obtained for the root organization. <code>scope</code> The scope corresponding to the API you want to use. See the relevant API reference docs for the list of internal scopes for each API. <code>switching_organization</code> The organization ID of the suborganization you are switching to."},{"location":"apis/organization-management/authentication/#best-practices","title":"Best practices","text":"<p>When invoking the management APIs, we recommend the following best practices:</p> <ul> <li>If the <code>client_id</code> and <code>client_secret</code> are compromised, anyone can use them to invoke the client credentials grant and get an access token with all the access levels of the admin. Therefore, we highly recommend not sharing the client id and client secret.</li> <li>If required, the administrator can set a higher expiry time for the application token through the application configurations in the Asgardeo Console.</li> <li>When you request an access token, be sure it is specific to the scopes required for a specific task. This allows you to mitigate the risk of token misuse when you share it with other developers.</li> </ul>"},{"location":"apis/organization-management/org-application-management/","title":"Application management API","text":""},{"location":"apis/organization-management/org-idp/","title":"Identity providers API","text":""},{"location":"apis/organization-management/org-management/","title":"Organization management API","text":""},{"location":"apis/organization-management/org-scim2/","title":"User management - SCIM2 API","text":""},{"location":"apis/organization-management/organization-role-management/","title":"Organization role management API","text":""},{"location":"apis/register-mfa/backup-code/","title":"Backup codes API","text":""},{"location":"apis/register-mfa/export-user-info/","title":"Export user information API","text":""},{"location":"apis/register-mfa/password-recovery/","title":"Password recovery API","text":""},{"location":"apis/register-mfa/totp/","title":"TOTP API","text":""},{"location":"get-started/","title":"Get Started","text":""},{"location":"get-started/#get-started-overview","title":"Get Started - Overview","text":"<p>Welcome to Asgardeo! Here's a quick guide to get you started. Pick the learning path you prefer and follow the topics to get started.</p>"},{"location":"get-started/#start-integrating-apps","title":"Start integrating apps","text":"<p>Select a technology and try integrating an application with Asgardeo.</p> <p>Learn more</p>"},{"location":"get-started/#learn-by-use-case","title":"Learn by use case","text":"<p>Select an identity and access management use case for your application and see how it works in Asgardeo.</p> <p>Learn more</p>"},{"location":"get-started/asgardeo-use-cases/","title":"Learn by use case","text":"<p>Let's take a look at the core CIAM use cases of Asgardeo.</p>"},{"location":"get-started/asgardeo-use-cases/#authentication","title":"Authentication","text":"<p>See the following authentication scenarios covered in Asgardeo.</p>"},{"location":"get-started/asgardeo-use-cases/#single-sign-on-sso","title":"Single Sign On (SSO)","text":"<p>With Asgardeo, you can enable users to provide their credentials once and obtain access to multiple applications. Thus,  they do not have to remember multiple username/password pairs to access multiple services. User  identities are managed at a central point. This is more secure, less complex, and easily manageable.</p> <ul> <li>Try SSO by implementing login to multiple applications in an Asgardeo organization.</li> </ul>"},{"location":"get-started/asgardeo-use-cases/#bring-your-own-identity-byoi","title":"Bring your own identity (BYOI)","text":"<p>Use Asgardeo to allow your users federated access to multiple systems across multiple trust domains using open  identity standards. With Bring Your Own Identity (BYOID) approach, we provide social login with well-known identity  providers.</p> <ul> <li>Try social login with Asgardeo.</li> <li>Try enterprise IdP login with Asgardeo.</li> </ul>"},{"location":"get-started/asgardeo-use-cases/#conditional-and-multi-factor-authentication","title":"Conditional and multi-factor authentication","text":"<p>Use Asgardeo to ensure secure access for your users by enabling conditional and multi-factor authentication (MFA). You  can apply the right level of security to each and every login request based on the user\u2019s devices, networks,  locations, and usage contexts instead of having a pre-configured static login flow for everyone to follow under all  circumstances.</p> <ul> <li>Try conditional authentication with Asgardeo.</li> <li>Try multi-factor authentication with Asgardeo.</li> </ul>"},{"location":"get-started/asgardeo-use-cases/#user-management","title":"User management","text":"<p>You can manage user identities and its lifecycles securely and efficiently within Asgardeo. This includes applying CRUD operations on users, controlling user activities through permissions, managing groups, defining authentication policies, managing external  user stores, managing manual/automatic logout, and resetting user passwords.</p> <p>Try user management with Asgardeo.</p>"},{"location":"get-started/asgardeo-use-cases/#account-security","title":"Account security","text":"<p>You can secure user accounts in Asgardeo by configuring features such as bot detection, password validation, login-attempts security, token reuse for private key JWT client authentication, etc.</p> <p>Try the account security features in Asgardeo.</p>"},{"location":"get-started/asgardeo-use-cases/#share-applications-with-business-to-business-b2b-organizations","title":"Share applications with Business-to-Business (B2B) organizations","text":"<p>You can create a B2B organization structure in Asgardeo to represent all your partner/customer organizations. You can easily onboard new partner/customer organizations, expose your applications to their users, and allow those organizations to manage their identity and access management requirements.</p> <p>Try a B2B use case in Asgardeo.</p>"},{"location":"get-started/asgardeo-use-cases/#self-service-capabilities","title":"Self-service capabilities","text":"<p>Asgardeo provides self-service interfaces for users to self-register, reset passwords, and manage their user accounts with ease.</p> <p>Try user self-service in Asgardeo.</p>"},{"location":"get-started/asgardeo-use-cases/#consent-management","title":"Consent management","text":"<p>With Asgardeo, your users can select which user attributes they want to share with applications, easily review the consents they have provided for each application, and revoke one or many of them as required.</p> <p>Learn about consent management in Asgardeo.</p>"},{"location":"get-started/asgardeo-use-cases/#branding","title":"Branding","text":"<p>You can customize the user interfaces (UIs) presented to your users during the login, multi-factor authentication (MFA), sign-up (self registration), and account recovery flows according to the theming guidelines of your organization. You can also customize the URLs of Asgardeo-powered interfaces and email templates.</p> <p>Try branding configurations in Asgardeo.</p>"},{"location":"get-started/create-asgardeo-account/","title":"Create your Asgardeo account","text":"<p>First things first! To start off, you need to join an organization in Asgardeo. You can sign up and create your own organization or an administrator may send you an invitation email to join the organization.</p> <p>Let's get you started with Asgardeo!</p>"},{"location":"get-started/create-asgardeo-account/#sign-up","title":"Sign up","text":"<p>Let's sign up and create your first organization.</p> <p>Note</p> <p>An organization in Asgardeo will be your own unique space and it will contain your users and application configurations. Once created, it can be accessed via the Asgardeo Console.</p> <ol> <li> <p>Go to the Asgardeo website and click Sign up for free.</p> </li> <li> <p>Enter your email address and click Register or use one of your social accounts.</p> <p></p> <p>You will receive an email with instructions to proceed with your account creation on Asgardeo.</p> <p></p> </li> <li> <p>From your email, click Confirm and fill in the information requested to create your Asgardeo account.</p> </li> </ol> <p>On successful registration, you will be signed in to the Asgardeo Console. You can now manage your own user account and organization. Learn more.</p>"},{"location":"get-started/create-asgardeo-account/#sign-in-to-the-console","title":"Sign in to the console","text":"<p>Once you have signed up and created your Asgardeo account, you can sign in to Asgardeo. You can use your Asgardeo credentials or one of your existing social accounts.</p> <p></p> <p>When you sign in, you can register your apps and start integrating them with Asgardeo for identity and access management. You can also manage the user accounts in your organization.</p> <p>See the guides to learn more.</p>"},{"location":"get-started/create-asgardeo-account/#create-a-user","title":"Create a user","text":"<p>Let's start by adding the first user to your organization.</p> <ol> <li>On the Asgardeo Console, click Users.</li> <li>Click Add User.</li> <li>Fill in the user's details.     </li> <li> <p>Select Set a password for the user and enter a temporary password for the user. The user will be able to change the password later.</p> </li> <li> <p>Click Next and Finish.</p> </li> </ol> <p>You can now manage this user account from the Asgardeo Console. The user can also self-manage the account. Learn more about user self-service.</p> <p>This user can start using the applications you register in this organization.</p>"},{"location":"get-started/create-asgardeo-account/#whats-next","title":"What's next?","text":"<p>Now that you've set up your own organization and created your first user, you can:</p> <ol> <li>Register your applications with asgardeo</li> <li>Start integrating your apps</li> </ol> <p>See the guides to learn more.</p>"},{"location":"get-started/explore-asgardeo/","title":"Explore Asgardeo","text":"<p>::: WORK IN PROGRESS :::</p> <p>See the topics given below to explore Asgardeo and its components.</p>"},{"location":"get-started/explore-asgardeo/#what-is-asgardeo","title":"What is Asgardeo?","text":"<p>Asgardeo is an identity as a service (IDaaS) solution that provides a fully integrated developer experience to create seamless login experiences in minutes. You can get started with common IAM use cases with no installation or maintenance hassles.</p>"},{"location":"get-started/explore-asgardeo/#asgardeo-console","title":"Asgardeo console","text":"<p>The Asgardeo console is the</p>"},{"location":"get-started/explore-asgardeo/#self-service-portals-my-account","title":"Self-service portals (My Account)","text":"<p>The My Account portal is the self-service portal for Asgardeo users. If you are an owner of an Asgardeo of one or multiple Asgardeo organization, you can manage your personal profile from this portal.</p> <p>Customers of your organizations will have their own My Account portal to manage their personal accounts.</p>"},{"location":"get-started/explore-asgardeo/#developer-tools","title":"Developer tools","text":"<p>If you are an application developer, you can cater your unique and complex identity requirements with the use of our prebuilt SDKs, IDE integration capabilities, and templated scripts. We are secure, simple, and stackable to enable your team to deliver a seamless user experience.</p>"},{"location":"get-started/start-integrating-apps/","title":"Start integrating apps","text":"<p>You can get started by integrating applications with Asgardeo. Try one of the sample applications or integrate your app using the Asgardeo SDKs.</p> <ul> <li>Try a Sample App</li> <li>Try your Own App</li> </ul>"},{"location":"get-started/try-it-application/","title":"Try app login","text":"<p>Now that you have onboarded to Asgardeo, let's see how the application login flow with Asgardeo works.</p>"},{"location":"get-started/try-it-application/#asgardeo-try-it-app","title":"Asgardeo Try It app","text":"<p>We have already set up and configured an application for you, which is the Asgardeo Try It app.</p> <p>Let's try a simple login flow in the Asgardeo Try It application:</p> <ol> <li> <p>On the Asgardeo Console, navigate to Home and click Try login with the Try It app.     !!! note         You need a user account to try out login. A dialog will appear prompting you to create a user account. Note that this dialog only appears if it is your first time.</p> <pre><code>Learn more about various [user accounts in Asgardeo](../../guides/users/).\n</code></pre> </li> <li> <p>If you don't already have a user created, click the link for creating a user and follow the instructions.</p> </li> </ol> <p></p> <ol> <li> <p>When you are ready with the user account, click Continue to proceed.</p> <p>Note</p> <p>The process creates the Asgardeo Try It Application in the Applications section and redirects you to the login page of the application.</p> </li> <li> <p>Use credentials of a user to log in to the application.</p> </li> </ol>"},{"location":"get-started/try-it-application/#customize-the-login-flow","title":"Customize the login flow","text":"<p>To try out a customized login flow:</p> <ol> <li> <p>On the Asgardeo Console, go to Applications, and select the Asgardeo Try It application.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and select the authentication method that you wish to try:</p> <ul> <li>Social login</li> <li>Standard-based login</li> <li>Passwordless login</li> <li>Multi-factor authentication</li> </ul> <p></p> <p>Note</p> <p>Alternatively, to customize the login flow, navigate to Home and click the gear icon that appears next to the Try login with the Try It app card after you have tried the default login at least once.</p> </li> <li> <p>Once you Update the sign-in methods, click Try Login to try the customized login flow.</p> </li> </ol> <p>Note</p> <p>Note that the Try It application is a preview app which allows you to make limited configurations. Learn about all the configurations available in Asgardeo in our guides.</p>"},{"location":"get-started/try-samples/","title":"Index","text":""},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/","title":"Java EE sample web app with OIDC","text":"<p>By following this guide, you will be able to deploy a Java EE web application locally and secure it with OpenID Connect.</p>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#prerequisites","title":"Prerequisites","text":"<ul> <li>Apache tomcat 9.x or 8.x</li> </ul> <p>If you don't have it, install Apache tomcat.</p> <ul> <li>A user account in Asgardeo</li> </ul> <p>If you don't already have one, create a user account in Asgardeo.</p>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#register-the-app","title":"Register the app","text":"<p>Follow the steps given below to register the sample Java EE web application in Asgardeo.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Click New Application and select Traditional Web Application:</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name Give a unique name to identify your application. Protocol Select OpenID Connect. Authorized redirect URLs              The URL to which the user is redirected after a successful login. Use the following URL for this sample app:             <p><code>http://localhost:8080/oidc-sample-app/oauth2client</code></p> </p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li> <p>Go to the Protocol tab and take note of the Client ID and Client secret. You will need them to configure the application later.</p> <p></p> </li> </ol> <p>Note</p> <p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL for the application from the General tab. (For this sample application, the access URL is <code>https://localhost:8080/oidc-sample-app</code>).</p> Why do we recommend this?<ul> <li>It will be used in the application catalog and discovery flows.</li> <li>We will use it to redirect the user back to the application in the following scenarios.<ul> <li>If the login page times out</li> <li>After a password reset</li> <li>After self sign-up verification</li> </ul> </li> <li>If the login flow is failed, we will provide an option for the user to re-initiate the login flow using this URL.</li> </ul>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> <p> </p>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li> <p>Move the  war file that you downloaded to the <code>&lt;TOMCAT_HOME&gt;/webapps</code> folder where <code>&lt;TOMCAT_HOME&gt;</code> is the home directory of your Tomcat server.</p> </li> <li> <p>Open a terminal, navigate to the <code>&lt;TOMCAT_HOME&gt;/bin</code> folder, and start the Tomcat server using the following command:</p> <p>Note</p> <p>This will extract the contents of the war file.    If your Tomcat server is set to auto-deploy applications, you can skip this step.</p> </li> </ol> <p><code>shell script    sh catalina.sh start</code></p> <ol> <li>Go to the <code>&lt;TOMCAT_HOME&gt;/webapps/oidc-sample-app/WEB-INF/classes</code> folder and open the <code>oidc-sample-app.properties</code> file in a text editor.</li> <li> <p>Update the following in the <code>oidc-sample-app.properties</code> file:</p> <p>Note</p> <p>Replace <code>{organization_name}</code> with the name of your organization and apply the client ID and client secret that was generated when you registered the application in Asgardeo.</p> <p><pre><code>consumerKey=&lt;client ID&gt;\nconsumerSecret=&lt;client secret&gt;\nscope=openid,address,email,profile\n\ncallBackURL=http://localhost:8080/oidc-sample-app/oauth2client\ntrustedAudience=http://localhost:8080/oidc-sample-app      \n\nissuer=https://api.asgardeo.io/t/{organization_name}/oauth2/token\nauthorizeEndpoint=https://api.asgardeo.io/t/{organization_name}/oauth2/authorize\nlogoutEndpoint=https://api.asgardeo.io/t/{organization_name}/oidc/logout\ntokenEndpoint=https://api.asgardeo.io/t/{organization_name}/oauth2/token\njwksEndpoint=https://api.asgardeo.io/t/{organization_name}/oauth2/jwks\n#sessionIFrameEndpoint=https://api.asgardeo.io/t/{organization_name}/oidc/checksession\n\nskipURIs=/oidc-sample-app/index.html\nindexPage=index.html\nlogoutURL=logout \nerrorPage=error.jsp\n</code></pre> Configuration Description <code>consumerKey</code>          The client id of the registered application.      <code>consumerSecret</code> The client secret of the registered application. <code>scope</code> <p>The list of OIDC scopes that are used for requesting user information. You can add OIDC scopes such as <code>profile</code> and <code>email</code> in a comma-separated list as follows: </p> <code>scope=openid,address,email,profile</code> <code>issuer</code>          Issuer endpoint of Asgardeo used for id token validation:         <code>https://api.asgardeo.io/t/{organization_name}/oauth2/token</code> <code>authorizeEndpoint</code> The authorization endpoint of your Asgardeo organization:         <code>https://api.asgardeo.io/t/{organization_name}/oauth2/authorize</code> <code>logoutEndpoint</code> The logout endpoint of your Asgardeo organization:       <code>https://api.asgardeo.io/t/{organization_name}/oidc/logout</code> <code>tokenEndpoint</code> The token endpoint of your Asgardeo organization:         <code>https://api.asgardeo.io/t/{organization_name}/oauth2/token</code> <code>jwksEndpoint</code> The jwks endpoint of your Asgardeo organization:         <code>https://api.asgardeo.io/t/{organization_name}/oauth2/jwks</code> </p> </li> <li> <p>On your terminal, navigate to the <code>&lt;TOMCAT_HOME&gt;/bin&gt;</code> folder and run the following commands to restart the Tomcat server for the configurations to take effect:</p> <p><code>shell script  sh catalina.sh stop sh catalina.sh start</code></p> </li> </ol> <p>Follow the steps given below to run the sample.</p> <ol> <li> <p>Access the application using the following URL: <code>http://localhost:8080/oidc-sample-app/index.html</code>.</p> <p></p> </li> <li> <p>Click Login. You will be redirected to the Asgardeo login page.</p> </li> </ol> <p></p> <ol> <li>Enter the credentials of your user account and click Sign In.</li> </ol>"},{"location":"get-started/try-samples/qsg-oidc-webapp-java-ee/#run-the-sample","title":"Run the sample","text":""},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/","title":"Java EE sample web app with SAML","text":"<p>By following this guide, you will be able to deploy a Java EE web application locally and secure it with SAML.</p>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#prerequisites","title":"Prerequisites","text":"<ul> <li>Apache tomcat 9.x or 8.x</li> </ul> <p>If you don't have it, install Apache tomcat.</p> <ul> <li>A user account in Asgardeo</li> </ul> <p>If you don't already have one, create a user account in Asgardeo.</p>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#register-the-app","title":"Register the app","text":"<p>Follow these steps given below to register the sample Java EE web application in Asgardeo.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Click New Application and select Traditional Web Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name          Give a unique name to identify your application.         <p><code>sample-app</code></p> Protocol Select SAML. </p> </li> <li> <p>Select Manual as the configuration type and enter the following details:     !!! note       Learn more about other SAML configuration types.</p> <p> Issuer      Add a unique identifier for the application. This should be used in the SAML authentication request sent from the client. You can't change the issuer after the app is registered.     <p><code>sample-issuer</code></p> Assertion consumer service URLs      The URL to which the user is redirected after login and logout. Use the following URL for this sample app:     <p><code>http://localhost:8080/sample-app/home.jsp</code></p>  5. Click Register to complete the registration.</p> </li> </ol> <p>Note</p> <p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL for the application from the General tab. (For this sample application, the access URL is <code>https://localhost:8080/sample-app</code>)</p> Why do we recommend this?<ul> <li>It will be used in the application catalog and discovery flows.</li> <li>We will use it to redirect the user back to the application in the following scenarios.<ul> <li>If the login page times out</li> <li>After a password reset</li> <li>After self sign-up verification</li> </ul> </li> <li>If the login flow is failed, we will provide an option for the user to re-initiate the login flow using this URL.</li> </ul>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> <p> </p>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li> <p>Move the  war file that you downloaded to the <code>&lt;TOMCAT_HOME&gt;/webapps</code> folder where <code>&lt;TOMCAT_HOME&gt;</code> is the root of your Tomcat server.</p> </li> <li> <p>Open a terminal, navigate to the <code>&lt;TOMCAT_HOME&gt;/bin</code> folder, and start the Tomcat server using the following command:</p> <p>Note</p> <p>This will extract the contents of the war file.    If your Tomcat server is set to auto-deploy applications, you can skip this step.</p> <p><code>shell script  sh catalina.sh start</code></p> </li> <li> <p>Go to the <code>&lt;TOMCAT_HOME&gt;/webapps/sample-app/WEB-INF/classes</code> folder and open the <code>sample-app.properties</code> file in a text editor.</p> </li> <li> <p>Update the following in the <code>sample-app.properties</code> file:</p> <p>Note</p> <ul> <li>Update the SAML2.IdPEntityId parameter with the Asgardeo issuer, which is <code>api.asgardeo.io/t/{organization_name}</code>.</li> <li>Replace <code>{organization_name}</code> with the name of your organization.</li> <li>SAML2.SPEntityId should match the issuer name entered when registering the application in Asgardeo.</li> </ul> <p><pre><code>SAML2.AssertionConsumerURL=http://localhost:8080/sample-app/home.jsp\nSAML2.SPEntityId=sample-issuer\nSAML2.IdPEntityId=api.asgardeo.io/t/{organization_name}\nSAML2.IdPURL=https://api.asgardeo.io/t/{orgaization_name}/samlsso IdPPublicCert={public_cert_of_asgardeo_organization}\nSkipURIs=/sample-app/index.html\n\n#Other properties\nIdPPublicCertAlias=wso2carbon\nEnableSAML2SSOLogin=true\nSAML2.EnableSLO=true\nSAML2.EnableResponseSigning=false\nSAML2.EnableAssertionSigning=false\nSAML2.EnableAssertionEncryption=false\nSAML2.EnableRequestSigning=false\nSAML2.IsPassiveAuthn=false      \nSAML2.SLOURL=logout\nIndexPage=index.html\nErrorPage=/error.jsp\nSAML2SSOURL=samlsso\n</code></pre> Configuration Description <code>SAML2.AssertionConsumerURL</code>        The URL to which the user is redirected after login and logout.       <code>SAML2.SPEntityId</code>          The SAML issuer that is used when registering your application with Asgardeo.        <code>SAML2.IdPEntityId</code>          The issuer name of Asgardeo.         <p><code>api.asgardeo.io/t/{organization_name}</code></p> <code>SAML2.IdPURL</code>          The endpoint of Asgardeo to which login and logout requests should be sent:         <p><code>https://api.asgardeo.io/t/{organization_name}/samlsso</code></p> <code>IdPPublicCert</code> This specifies the public certificate of Asgardeo. You can obtain the public certificate from the Asgardeo Console. See how to get SAML configurations from the Asgardeo Console. <code>skipURIs</code> Defines the web pages in your application that should not be secured and does not require authentication. </p> Other properties<p> Configuration Description <code>EnableSAML2SSOLogin</code>          Specifies whether single sign-on is enabled for this application.        <code> SAML2.EnableSLO</code>          Specifies whether logout is enabled for this application.        <code>SAML2.EnableResponseSigning</code>          If this configuration is set to <code>true</code>, the application validates the signature in the SAML response. You also need to enable response signing from Asgardeo.         If this configuration is set to <code>false</code>, the application does not mandate response signing from Asgardeo.        <code>SAML2.EnableAssertionSigning</code>        If this configuration is set to <code>true</code>, the application validates the signature in the SAML assertion. You also need to enable response signing from Asgardeo.       If this configuration is set to <code>false</code>, the application does not mandate response signing from Asgardeo.      <code>SAML2.EnableAssertionEncryption</code>        If this configuration is set to <code>true</code>, the application expects an encrypted SAML assertion. You also need to enable encryption for SAML assertions from Asgardeo.      <code>SAML2.EnableRequestSigning</code>        If this configuration is set to <code>true</code>, Asgardeo validates the SAML authentication request and logout request. You also need to enable request signing from Asgardeo.      <code>SAML2.IsPassiveAuthn</code>        Specifies whether to enable passive authentication.      <code>KeyStorePassword</code>        Keystore password of your application.      <code>PrivateKeyAlias</code>        Private key alias of your application.      <code>PrivateKeyPassword</code>        Password of the private key of your application.      </p> </li> <li> <p>In the <code>&lt;TOMCAT_HOME&gt;/bin&gt;</code> folder, run the following commands to restart the Tomcat server for the configurations to take effect:</p> <p><code>shell script  sh catalina.sh stop sh catalina.sh start</code></p> </li> </ol>"},{"location":"get-started/try-samples/qsg-saml-webapp-java-ee/#run-the-sample","title":"Run the sample","text":"<p>Follow the steps given below to run the sample.</p> <ol> <li> <p>Access the application using the following URL: <code>http://localhost:8080/sample-app/index.html</code>.</p> <p></p> </li> <li> <p>Click Login. You will be redirected to the Asgardeo login page.</p> <p></p> </li> <li> <p>Enter credentials of your user account and click Sign In.</p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-javascript/","title":"JavaScript sample SPA","text":"<p>By following this guide, you will be able to deploy a Javascript single-page application locally and secure it with OpenID Connect.</p>"},{"location":"get-started/try-samples/qsg-spa-javascript/#prerequisites","title":"Prerequisites","text":"<ul> <li>npm with Node.js</li> </ul> <p>If you don't have it, install npm and node in your local environment.</p> <ul> <li>A user account in Asgardeo</li> </ul> <p>If you don't already have one, create a user account in Asgardeo.</p>"},{"location":"get-started/try-samples/qsg-spa-javascript/#register-the-app","title":"Register the app","text":"<p>Follow the steps given below to register the sample Javascript SPA in Asgardeo.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Click New Application and select Single-Page Application.</p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name Give a unique name to identify your application. Authorized redirect URLs <p>The URL to which the user is redirected after a successful login. Use the following URL for this sample app:</p> <code>https://localhost:3000</code> Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li>Go to the Protocol tab and take note of the Client ID. You will need it to configure the application later.</li> </ol> <p>Note<p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL for the application from the General tab. (For this sample application, the access URL is <code>https://localhost:3000</code>).</p> </p> Why do we recommend this?<pre><code>- It will be used in the application catalog and discovery flows.\n- We will use it to redirect the user back to the application in the following scenarios.\n    - If the login page times out\n    - After a password reset\n    - After self sign-up verification\n- If the login flow is failed, we will provide an option for the user to re-initiate the login flow using this URL.\n</code></pre>"},{"location":"get-started/try-samples/qsg-spa-javascript/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> <p> </p>"},{"location":"get-started/try-samples/qsg-spa-javascript/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li>Unzip the application folder and open the <code>index.html</code> file located at the root of the project in a text editor.</li> <li>Scroll down towards the end of the body and find the <code>&lt;script&gt;</code> tag with the <code>authConfig</code> object.</li> <li> <p>Update the following in the <code>authConfig</code> object:</p> <p>Note</p> <p>Replace <code>{organization_name}</code> with the name of your organization and apply the client ID that was generated when you registered the application in Asgardeo.</p> <pre><code>const authConfig = {\n    clientID: \"{client ID}\",\n    signInRedirectURL: \"https://localhost:3000\",\n    baseUrl: \"https://api.asgardeo.io/t/{organization_name}\",\n    scope: [ \"profile\" ]\n};\n</code></pre> <p> Configuration Description <code>clientID</code>          The client id that you received when you registered the application in Asgardeo.      <code>baseUrl</code> <p>All authentication requests that the client application makes to Asgardeo will be appended to this base URL.:</p> <code>https://api.asgardeo.io/t/{organization_name}</code> <code>scope</code> <p>The list of OIDC scopes that are used for requesting user information. You can add OIDC scopes such as <code>profile</code> and <code>email</code> in a comma-separated list as follows: </p> <code>\"scope\": [\"profile\", \"email\"]</code> <p>Learn more about OIDC scopes in Asgardeo.</p> </p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-javascript/#run-the-sample","title":"Run the sample","text":"<p>Follow the steps given below to run the sample.</p> <ol> <li> <p>On your terminal, navigate to the root of the project and run the command given below to start the sample application:</p> <pre><code>npm install &amp;&amp; npm start\n</code></pre> </li> <li> <p>Once the app is successfully compiled, it is accessible at <code>https://localhost:3000</code>.</p> <p></p> </li> <li> <p>Click Login. You will be redirected to the Asgardeo login page.</p> <p></p> </li> <li> <p>Enter the credentials of your user account and click Sign In.</p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-react/","title":"React sample SPA","text":"<p>By following this guide, you will be able to deploy a React single-page application locally and secure it with OpenID Connect.</p>"},{"location":"get-started/try-samples/qsg-spa-react/#prerequisites","title":"Prerequisites","text":"<ul> <li>npm with Node.js</li> </ul> <p>If you don't have it, install npm and node in your local environment.</p> <ul> <li>A user account in Asgardeo</li> </ul> <p>If you don't already have one, create a user account in Asgardeo.</p>"},{"location":"get-started/try-samples/qsg-spa-react/#register-the-app","title":"Register the app","text":"<p>Follow the steps given below to register the sample React SPA in Asgardeo.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Click New Application and select Single-Page Application</p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Name Give a unique name to identify your application. Authorized redirect URLs <p>The URL to which the user is redirect to after a successful login. Use the following URL for this sample app:</p> <code>https://localhost:3000</code> Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li>Go to the Protocol tab and take note of the Client ID. You will need it to configure the application later.</li> </ol> <p>Note<p>To provide a better experience for the user, it is recommended to configure an access URL for the application. You can set an access URL for the application from the General tab. (For this sample application, the access URL is <code>https://localhost:3000</code>).</p> </p> Why do we recommend this?<pre><code>- It will be used in the application catalog and discovery flows.\n- We will use it to redirect the user back to the application in the following scenarios.\n    - If the login page times out\n    - After a password reset\n    - After self sign-up verification\n- If the login flow is failed, we will provide an option for the user to re-initiate the login flow using this URL.\n</code></pre> <p>:::</p>"},{"location":"get-started/try-samples/qsg-spa-react/#download-the-sample","title":"Download the sample","text":"<p>Click the button below to download the sample. You can also choose to view the source before doing so.</p> <p> </p>"},{"location":"get-started/try-samples/qsg-spa-react/#configure-the-sample","title":"Configure the sample","text":"<p>Follow the steps given below to configure the sample app.</p> <ol> <li> <p>Unzip the application folder.</p> </li> <li> <p>Go to the <code>asgardeo-react-app/src/</code> folder and open the <code>config.json</code> file in a text editor.</p> </li> <li> <p>Update the following in the <code>config.json</code> file:</p> <p>Note</p> <p>Replace <code>{organization_name}</code> with the name of your organization and apply the client ID that was generated when you registered the application in Asgardeo.</p> <pre><code>{\n    \"clientID\": \"{client ID}\",\n    \"baseUrl\": \"https://api.asgardeo.io/t/{organization_name}\",\n    \"signInRedirectURL\": \"https://localhost:3000\",\n    \"signOutRedirectURL\": \"https://localhost:3000\",\n    \"scope\": [ \"profile\" ]\n}\n</code></pre> <p> Configuration Description <code>clientID</code>          The client id that you received when you registered the application in Asgardeo.      <code>baseUrl</code> <p>All authentication requests that the client application makes to Asgardeo will be appended to this base URL.:</p> <code>https://api.asgardeo.io/t/{organization_name}</code> <code>scope</code> <p>The list of OIDC scopes that are used for requesting user information. You can add OIDC scopes such as <code>profile</code> and <code>email</code> in a comma-separated list as follows: </p> <code>\"scope\": [\"profile\", \"email\"]</code> <p>Learn more about OIDC scopes in Asgardeo.</p> </p> </li> </ol>"},{"location":"get-started/try-samples/qsg-spa-react/#run-the-sample","title":"Run the sample","text":"<p>Follow the steps given below to run the sample.</p> <ol> <li> <p>On your terminal, navigate to the root of the project and run the command given below to start the sample application:</p> <pre><code>npm install &amp;&amp; npm start\n</code></pre> </li> <li> <p>Once the app is successfully compiled, it is accessible at <code>https://localhost:3000</code>.</p> <p></p> </li> <li> <p>Click Login. You will be redirected to the Asgardeo login page.</p> <p></p> </li> <li> <p>Enter the credentials of your user account and click Sign In.</p> </li> </ol>"},{"location":"get-started/try-your-own-app/","title":"Index","text":""},{"location":"get-started/try-your-own-app/java-ee-oidc/","title":"Integrate your Java EE webapp with OIDC","text":"<p>Follow the steps given below to authenticate users to your Java EE web application deployed on Tomcat using the Asgardeo Tomcat OIDC Agent which enables OIDC-based login and logout.</p> <p></p>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#prerequisites","title":"Prerequisites","text":"<ul> <li>Download Apache Tomcat 9.x or 8.x in your local environment.</li> <li>Download, and install Apache Maven (3.6.x or higher) as the package manager if you already haven't.</li> <li>You need to have an application registered in Asgardeo. If you don't, see the instructions on registering an OIDC application.</li> </ul>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#install-the-sdk","title":"Install the SDK","text":"<p>To get started with the OIDC agent, you need to add relevant dependencies. By updating the <code>pom.xml</code> file with the following dependency, you can add the OIDC agent to your project.</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;io.asgardeo.tomcat.oidc.agent&lt;/groupId&gt;\n&lt;artifactId&gt;io.asgardeo.tomcat.oidc.agent&lt;/artifactId&gt;\n&lt;version&gt;0.1.27&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>The Agent is hosted at WSO2 Internal Repository. To resolve the dependency mentioned above, point to the repository as follows.</p> <pre><code>&lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;wso2.releases&lt;/id&gt;\n&lt;name&gt;WSO2 internal Repository&lt;/name&gt;\n&lt;url&gt;http://maven.wso2.org/nexus/content/repositories/releases/&lt;/url&gt;\n&lt;releases&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;\n&lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt;\n&lt;/releases&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#initialize-the-sdk","title":"Initialize the SDK","text":"<p>To initialize the OIDC agent, you need a property file with the configurations such as the Asgardeo endpoints. The Asgardeo OIDC agent reads the configurations from this file.</p> <p>Create a file named <code>oidc-sample-app.properties</code> in the /src/main/resources directory, using the content below. <p>Note</p> <p>The <code>skipURIs</code> property defines the web pages in your application that should not be secured, and do not require authentication.</p> <p>Few of the configurations such as <code>callBackURL</code> and <code>skipURIs</code> depends on the context path of your application.</p> <pre><code>consumerKey=&lt;consumerKey&gt;\nconsumerSecret=&lt;consumerSecret&gt;\ncallBackURL=&lt;YOUR_APP_PATH&gt;/oauth2client\nscope=openid\nlogoutURL=logout\nauthorizeEndpoint=https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize\nlogoutEndpoint=https://api.asgardeo.io/t/&lt;organization_name&gt;/oidc/logout\ntokenEndpoint=https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\nissuer=https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\njwksEndpoint=https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/jwks\nskipURIs=&lt;YOUR_APP_PATH&gt;/index.html\n</code></pre> <p>A comprehensive list of the properties used above can be found in the Configuration Catalog .</p> <p>Finally, copy and paste the following configuration to the /src/main/webapp/WEB-INF/web.xml file. <pre><code>&lt;filter&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;filter-class&gt;io.asgardeo.tomcat.oidc.agent.OIDCAgentFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/logout&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/oauth2client&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;OIDCAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;listener&gt;\n&lt;listener-class&gt;io.asgardeo.tomcat.oidc.agent.SSOAgentContextEventListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;context-param&gt;\n&lt;param-name&gt;app-property-file&lt;/param-name&gt;\n&lt;param-value&gt;oidc-sample-app.properties&lt;/param-value&gt;\n&lt;/context-param&gt;\n&lt;listener&gt;\n&lt;listener-class&gt;io.asgardeo.tomcat.oidc.agent.JKSLoader&lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre> <p></p>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#add-login","title":"Add login","text":"<p>In the <code>index.html</code> file, add a login button to redirect the user to secure pages upon successful login.</p> <p>Once the user clicks on the button, the request will be intercepted by the OIDC agent and will initiate the OIDC Login flow if it does not find an authenticated application session.</p> <pre><code>&lt;form action=\"&lt;HOME_PAGE&gt;\" method=\"post\"&gt;\n    &lt;input type=\"submit\" value=\"Log In\"&gt;\n&lt;/form&gt;\n</code></pre> <p></p>"},{"location":"get-started/try-your-own-app/java-ee-oidc/#add-logout","title":"Add logout","text":"<p>Add the following snippet to enable logout.</p> <p>When the user initiates the logout, the local authenticated application session is cleared and the session in Asgardeo is terminated.</p> <pre><code>&lt;form action=\"logout\" method=\"get\"&gt;\n    &lt;input type=\"submit\" value=\"Log Out\"&gt;\n&lt;/form&gt;\n</code></pre> <p>See the Asgardeo Tomcat OIDC Agent documentation for more information on how it works.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/","title":"Integrate your Java EE webapp with SAML","text":"<p>Follow the steps given below to authenticate users to your Java EE web application deployed on Tomcat using the Asgardeo Tomcat SAML Agent which enables SAML-based login and logout.</p> <p></p>"},{"location":"get-started/try-your-own-app/java-ee-saml/#prerequisites","title":"Prerequisites","text":"<ul> <li>Download Apache Tomcat 9.x or 8.x in your local environment.</li> <li>Download and install Apache Maven (3.6.x or higher) as the package manager if you already haven't.</li> <li>You need to have an application already registered in Asgardeo. If you don't, see the instructions on registering a SAML application.</li> </ul>"},{"location":"get-started/try-your-own-app/java-ee-saml/#install-the-sdk","title":"Install the SDK","text":"<p>Follow the steps given below to install the SAML agent.</p> <ol> <li> <p>Add the relevant dependencies.  </p> <p>To get started, you need to enable the SAML agent in your application's project by adding the relevant dependencies to the <code>pom.xml</code> file.</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;io.asgardeo.tomcat.saml.agent&lt;/groupId&gt;\n&lt;artifactId&gt;io.asgardeo.tomcat.saml.agent&lt;/artifactId&gt;\n&lt;version&gt;0.1.31&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>Add the nexus repository.</p> <p>The agent is hosted at WSO2 Internal Repository. Point to this nexus repository to resolve the dependency mentioned above.</p> <pre><code>&lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;wso2.releases&lt;/id&gt;\n&lt;name&gt;WSO2 internal Repository&lt;/name&gt;\n&lt;url&gt;http://maven.wso2.org/nexus/content/repositories/releases/&lt;/url&gt;\n&lt;releases&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;\n&lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt;\n&lt;/releases&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre> </li> </ol> <p>See the reference documentation to learn more.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/#initialize-the-sdk","title":"Initialize the SDK","text":"<p>Follow the steps given below to initialize the SAML agent.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/#create-the-configuration-file","title":"Create the configuration file","text":"<p>To initialize the SAML agent, you need a property file with the configurations such as the Asgardeo endpoints. The Asgardeo SAML agent reads the configurations from this file.</p> <p>Create a file named sample-app.properties inside the /src/main/resources directory, using the content below. <pre><code>SAML2.AssertionConsumerURL=&lt;acs_url&gt;\nSAML2.SPEntityId=&lt;entity_id&gt;\n\n#Asgardeo related configs\nSAML2.IdPEntityId=accounts.asgardeo.io/t/&lt;organization_name&gt;\nSAML2.IdPURL=https://api.asgardeo.io/t/&lt;orgaization_name&gt;/samlsso \nIdPPublicCert=&lt;public_cert_of_asgardeo_organization&gt;\nIdPPublicCertAlias=wso2carbon\n\n#Config properties\nEnableSAML2SSOLogin=true\nSAML2.EnableSLO=true\nSAML2.EnableResponseSigning=false\nSAML2.EnableAssertionSigning=false\nSAML2.EnableAssertionEncryption=false\nSAML2.EnableRequestSigning=false\nSAML2.IsPassiveAuthn=false      \n\nSAML2.SLOURL=logout\nSkipURIs=&lt;YOUR_APP_PATH&gt;/index.html\nIndexPage=index.html\nErrorPage=/error.jsp\nSAML2SSOURL=samlsso\n\n# App keystore related configs\nKeyStorePassword=&lt;app_keystore_password&gt;\nPrivateKeyAlias=&lt;app_private_key_alias&gt;\nPrivateKeyPassword=&lt;app_private_key_password&gt;\n</code></pre> <p>For advanced use cases such as SAML response signing, the Asgardeo SAML Agent uses a keystore with your private key. If your application doesn't have a keystore already, generate a keystore file and copy it to the /src/main/resources directory. Make sure to update KeyStorePassword, PrivateKeyAlias, and PrivateKeyPassword with relevant values. <p>Find the configuration information below:</p> Configuration Description SAML2.AssertionConsumerURL Specifies the URL to redirect to after login and logout. See [See ACS URLs](../../references/app-settings/saml-settings-for-app/#default-assertion-consumer-service-url-default-acs-url) SAML2.SPEntityId This is the unique name of the application used when registering your application with Asgardeo. See [how to register a SAML app manually](../../guides/applications/register-saml-web-app/#register-app-using-manual-configurations) via the Asgardeo Console. SAML2.IdPEntityId This is the issuer of Asgardeo. This is always <code>accounts.asgardeo.io/t/{organization_name}</code>. SAML2.IdPURL This specifies the endpoint of Asgardeo to which login and logout requests should be sent. Note that the organization name should be replaced in the URL with the correct value. <code>https://api.asgardeo.io/t/{organization_name}/samlsso</code>.  IdPPublicCert This specifies the public certificate of Asgardeo. You can obtain the public certificate from the Asgardeo Console. See [how to get SAML configurations from the Asgardeo Console.](../../guides/authentication/saml/discover-saml-configs/#discover-saml-configurations-of-asgardeo) EnableSAML2SSOLogin Specifies whether sign-on is enabled for this application SAML2.EnableSLO Specifies whether logout is enabled for this application SAML2.EnableResponseSigning If this configuration is set to <code>true</code>, the application validates the signature in the SAML response. If this configuration is set to <code>true</code>, then [enable response signing from Asgardeo](../../references/app-settings/saml-settings-for-app/#response-signing).          If this configuration is set to <code>false</code>, the application does not mandate response signing from Asgardeo. SAML2.EnableAssertionSigning If this configuration is set to <code>true</code>, the application validates the signature in the SAML assertion. If this configuration is set to <code>true</code>, then [enable response signing from Asgardeo](../../references/app-settings/saml-settings-for-app/#response-signing).        If this configuration is set to <code>false</code>, the application does not mandate response signing from Asgardeo. SAML2.EnableAssertionEncryption If this configuration is set to <code>true</code>,the application expects an encrypted SAML assertion. If this configuration is set to <code>true</code>, then [enable encryption for SAML assertion](../../references/app-settings/saml-settings-for-app/) from Asgardeo. SAML2.EnableRequestSigning If this configuration is set to <code>true</code>, Asgardeo validates the SAML authentication request and logout request. If this configuration is set to <code>true</code>, then [enable request signing](../../references/app-settings/saml-settings-for-app/) from Asgardeo. SAML2.IsPassiveAuthn Specifies whether to enable passive authentication skipURIs Defines the web pages in your application that should not be secured and does not require authentication KeyStorePassword Keystore password of your application PrivateKeyAlias Private key alias of your application PrivateKeyPassword Password of the private key of your application <p>See the complete list of configuration properties.</p>"},{"location":"get-started/try-your-own-app/java-ee-saml/#configure-the-keystore","title":"Configure the keystore","text":"<p>Copy the following configurations to the /WEB-INF/web.xml file and change the certificate-file parameter to the name of your keystore file. <pre><code>&lt;filter&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;filter-class&gt;io.asgardeo.tomcat.saml.agent.SAML2SSOAgentFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/samlsso&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;SAML2SSOAgentFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/logout&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n\n&lt;listener&gt;\n&lt;listener-class&gt;io.asgardeo.tomcat.saml.agent.SSOAgentContextEventListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;context-param&gt;\n&lt;param-name&gt;property-file&lt;/param-name&gt;\n&lt;param-value&gt;sample-app.properties&lt;/param-value&gt;\n&lt;/context-param&gt;\n&lt;context-param&gt;\n&lt;param-name&gt;certificate-file&lt;/param-name&gt;\n&lt;param-value&gt;KEYSTORE_FILE_NAME&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-saml/#add-login","title":"Add login","text":"<p>In the <code>index.html</code> file, add a login button to be used to redirect users to secure pages.</p> <p>When the user clicks the button, the SAML agent intercepts the request and initiates the SAML login flow if an authenticated session does not already exist.</p> <pre><code>&lt;form action=\"&lt;HOME_PAGE&gt;\" method=\"post\"&gt;\n    &lt;input type=\"submit\" value=\"log in\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/java-ee-saml/#add-logout","title":"Add logout","text":"<p>In the previous steps, you implemented login for your app. Now you need a way to log users out of your application and remove the user sessions from Asgardeo.</p> <p>When the user initiates the logout, the local authenticated application session is cleared and the session in Asgardeo is terminated.</p> <p>Add the following snippet to enable logout.</p> <pre><code>&lt;form action=\"logout?SAML2.HTTPBinding=HTTP-POST\" method=\"get\"&gt;\n    &lt;input type=\"submit\" value=\"Log Out\"&gt;\n&lt;/form&gt;\n</code></pre> <p>See the Asgardeo Tomcat SAML Agent documentation for more information.</p>"},{"location":"get-started/try-your-own-app/javascript/","title":"Integrate your JavaScript app","text":"<p>Follow the steps given below to authenticate users to your JavaScript SPA with OpenID Connect using the Asgardeo JavaScript SDK.</p> <p></p>"},{"location":"get-started/try-your-own-app/javascript/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install npm and node in your local environment.</li> <li>Register an application in Asgardeo.</li> </ul>"},{"location":"get-started/try-your-own-app/javascript/#install-the-sdk","title":"Install the SDK","text":"<p>There are two ways to integrate the <code>@asgardeo/auth-spa</code> SDK into your javascript application.</p>"},{"location":"get-started/try-your-own-app/javascript/#load-from-a-cdn","title":"Load from a CDN","text":"<p>You can pull down the <code>@asgardeo/auth-spa</code> SDK from the <code>unpkg</code> content delivery network (CDN) by adding the following script to the <code>index.html</code> file in your application.</p> <pre><code>&lt;script src=\"https://unpkg.com/@asgardeo/auth-spa@latest/dist/asgardeo-spa.production.min.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#install-using-package-manager","title":"Install using package manager","text":"<p>You can also install the <code>@asgardeo/auth-spa package</code> from <code>npm</code> or <code>yarn</code> package manager.</p> <pre><code>npm install @asgardeo/auth-spa --save\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#configure-asgardeospaclient","title":"Configure <code>AsgardeoSPAClient</code>","text":"<p>You can use the following code within your root component to initialize <code>AsgardeoSPAClient</code> for your application.</p> <p>To initialize the SDK, use the <code>getInstance()</code> function in the SDK and provide the following values to the <code>auth.initialize()</code> function to get the SDK to work with your application:  Parameter Description <code>clientID</code> This is the Client ID of your OIDC app. See how to obtain client ID. <code>baseUrl</code> This is the Asgardeo server's host name along with your organization name. <code>signInRedirectURL</code> This is the URL the app redirects to after user login. See Authorized redirect URLs. <code>signOutRedirectURL</code> This is the URL the app redirects to after user logout. See Authorized redirect URLs. <code>scope</code> The list of OIDC scopes that are used for requesting user information. The <code>openid</code> scope is mandatory to get the ID token. You can add other OIDC scopes such as <code>profile</code> and <code>email</code>. </p> <pre><code>&lt;script&gt;\n// This client is a class and can be instantiated as follows.\nvar auth = AsgardeoAuth.AsgardeoSPAClient.getInstance();\n\n// Once instantiated, the  client can be initialized by passing the relevant parameters such as the server origin, redirect URL, client ID, etc.\nauth.initialize({\nsignInRedirectURL: \"https://localhost:3000\",\nsignOutRedirectURL: \"https://localhost:3000\",\nclientID: \"&lt;clientId&gt;\",\nbaseUrl: \"https://api.asgardeo.io/t/&lt;organization_name&gt;\",\nscope: [ \"openid\",\"profile\" ]\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#use-the-api","title":"Use the API","text":"<p>You can now start using the SDK's API to implement the required authentication logic. Follow the instructions given below to implement each use case.</p> <p>The created instance of the SDK could be used to access the session state that contains information such as the email address of the authenticated user and the methods that are required for implementing authentication.</p>"},{"location":"get-started/try-your-own-app/javascript/#add-login","title":"Add login","text":"<p>The <code>sign-in</code> hook is used to fire a callback function after successful sign-in.</p> <p>To sign in, simply call the <code>signIn()</code> function using the created instance.</p> <p>This method is used to authenticate the users and to get the authorization code and access token.</p> <pre><code>   &lt;button onClick=\"auth.signIn()\"&gt;Log In&lt;/button&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#get-access-token","title":"Get access token","text":"<p>Add the following script to the html file and call it from a button. This is used to get the access token from the SDK.</p> <p>See the SDK reference for more information.</p> <pre><code>&lt;script&gt;\n\nasync function getToken() {\nconst accessToken = await auth.getAccessToken();\nconsole.log(accessToken);\n}\n\n&lt;/script&gt;\n</code></pre> <p>Sample access token is given below: <pre><code>61985b0e-26c3-38b7-acff-b18ad934eafc\n</code></pre></p>"},{"location":"get-started/try-your-own-app/javascript/#get-decoded-id-token","title":"Get decoded ID token","text":"<p>To get the decoded token, call <code>getDecodedIdToken()</code> from a button click as shown below. Decoded ID token is useful to get the user attributes in the form of claims.</p> <p>See the SDK reference for details.</p> <pre><code>&lt;script&gt;\n// Use this function in a button to simply get decoded ID token.\nfunction getDecodedIdToken(){\n\nauth.getDecodedIDToken().then((idToken) =&gt; {\nvar decodedIdToken = idToken;\n// Get claims from the decoded idtoken\nvar email = decodedIdToken.email;\n})\n}\n&lt;/script&gt;\n</code></pre> <p>Sample decoded ID Token object is given below:</p> <pre><code>{\n \"isk\": \"3af75bf6579a88cfb37ee85bd96c34524899857a91989be722e4ba53d392e3f7\",\n \"at_hash\": \"3gTKEUwxlPyxc1FPDmlxMw\",\n \"sub\": \"alica@bifrost.com\",\n \"country\": \"Sri Lanka\",\n \"amr\": [\n   \"BasicAuthenticator\"\n ],\n \"iss\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n \"sid\": \"dd1621a7-bb3e-48cf-adae-861e261410e1\",\n \"aud\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n \"c_hash\": \"b15Dl_wI3rkoK0vukXYJew\",\n \"nbf\": 1625805110,\n \"azp\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n \"exp\": 1625808710,\n \"iat\": 1625805110,\n \"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>You can loop through the  decoded ID token, and get the following values:</p> sub <code>decodedIdToken.sub</code> email <code>decodedIdToken.email</code> country <code>decodedIdToken.country</code>"},{"location":"get-started/try-your-own-app/javascript/#get-user-information","title":"Get user information","text":"<p>In addition to implementing login and logout, your application can also use the SDK to get user information.</p> <p>There are two ways for you to get user information: - Get user information from the decoded ID token. - Use the <code>getBasicUserInfo()</code> API and get basic user information.</p> <p>To get the basic user information from the SDK, copy the following script and call the <code>getBasicUserInfo()</code> from a button. See the SDK reference for details.</p> <pre><code>&lt;script&gt;\n// Use this function in a button to simply get user info.\nfunction getBasicUserInfo(){\nauth.getBasicUserInfo().then((userinfoResponse) =&gt; {\nconsole.log(userinfoResponse); // check userinfo response\nconsole.log(userinfoResponse.email);  // check email\n\n}).catch((error) =&gt; {\nconsole.error(error);\n});\n}\n&lt;/script&gt;\n</code></pre> <p>Sample user info response(<code>userinfoResponse</code>) object is below:</p> <pre><code>{\n \"allowedScopes\": \"openid\",\n \"sessionState\": \"f143343efdd6bcb57fe3d6215d9b740d2b1714df4bee0f506e31a7d75e1c2a8d.sI-dfLfA0yRDiKFvsG89LA\",\n \"username\": \"alica@bifrost.com\",\n \"country\": \"Sri Lanka\",\n \"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>You can loop through the user info response(<code>userinfoResponse</code>), and get the following values:</p> email <code>userinfoResponse.email</code> country <code>userinfoResponse.country</code>"},{"location":"get-started/try-your-own-app/javascript/#add-logout","title":"Add logout","text":"<p>In the previous steps, you implemented login for your app and enabled your app to get some information about the user that is logged in. Now you need a way to log users out of your application and remove the user sessions from Asgardeo.</p> <p>See the signOut API reference for advanced usages.</p> <pre><code>&lt;button onClick=\"auth.signOut()\"&gt;Log Out&lt;/button&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/javascript/#sample-code","title":"Sample code","text":"<p>The following code snippet demonstrates the process of accessing the authenticated user's information together with other functions from the SDK.</p> <pre><code>   &lt;div&gt;\n&lt;!-- Authenticated View ---&gt;\n&lt;div id=\"authenticated-view\" style=\"display: none;\"&gt;\n&lt;ul&gt;\n&lt;li id=\"username\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;button onClick=\"auth.signOut()\"&gt;Log Out&lt;/button&gt;\n&lt;/div&gt;\n&lt;!-- Un-Authenticated View ---&gt;\n&lt;div id=\"unauthenticated-view\" style=\"display: none;\"&gt;\n&lt;button onClick=\"auth.signIn()\"&gt;Log In&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n(async () =&gt; {\nlet user = undefined;\n\n// If there are auth search params i.e code, session_state, automatically trigger login.\n// Else, try to see if there's a session.\nif (AsgardeoAuth.SPAUtils.hasAuthSearchParamsInURL()) {\nuser = await auth.signIn({ callOnlyOnRedirect: true });\n} else {\nuser = await auth.trySignInSilently();\n}\n\n// Update the UI accordingly.\nif (user) {\ndocument.getElementById(\"authenticated-view\").style.display = \"block\";\ndocument.getElementById(\"unauthenticated-view\").style.display = \"none\";\ndocument.getElementById(\"username\").innerHTML = user.username;\n} else {\ndocument.getElementById(\"authenticated-view\").style.display = \"none\";\ndocument.getElementById(\"unauthenticated-view\").style.display = \"block\";\n}\n})();\n&lt;/script&gt;\n</code></pre>"},{"location":"get-started/try-your-own-app/react/","title":"Integrate your React app","text":"<p>Follow the steps given below to authenticate users to your React SPA with OpenID Connect using the Asgardeo React SDK.</p> <p></p>"},{"location":"get-started/try-your-own-app/react/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install npm and node in your local environment.</li> <li>Register an application in Asgardeo.</li> </ul> <p>Note</p> <p>In the tutorial, - your organization name is referred to as <code>&lt;org_name&gt;</code>. - <code>&lt;client_id&gt;</code> refers to the client credential that you obtain once you register your application in Asgardeo.</p>"},{"location":"get-started/try-your-own-app/react/#install-the-sdk","title":"Install the SDK","text":"<p>Run the following command to install the React SDK and the necessary dependencies from the npm registry.</p> <p>Note</p> <p>The <code>react-router-dom</code> package is a peer-dependency of the SDK and it is required for the SDK to work. We are working on making it optional.</p>"},{"location":"get-started/try-your-own-app/react/#configure-the-sdk","title":"Configure the SDK","text":"<p>SDK uses React Context API under the hood to share the data between components. You can easily integrate Asgardeo in your application by using <code>AuthProvider</code> as the wrapper element to inject configurations.</p> <p><code>AuthProvider</code> will provide the session state which contains information such as the authenticated user's display name, email address etc. as well as the methods required to implement authentication in the React app.</p> <p>```js no-line-number import { AuthProvider } from \"@asgardeo/auth-react\"; <pre><code>`AuthProvider` takes a config object as a [prop](https://react.dev/learn/passing-props-to-a-component) which is used to initialize the SDK instance. Copy and use the following code within your root component to configure `AuthProvider` for your application.\n\n!!! note\n    Typically, the root component of a react app is defined in the `index.*` file.\n\n``` js\nimport React from \"react\";\nimport { AuthProvider } from \"@asgardeo/auth-react\";\n\nconst config = {\n     signInRedirectURL: \"https://localhost:3000/sign-in\",\n     signOutRedirectURL: \"https://localhost:3000/sign-out\",\n     clientID: \"&lt;client_id&gt;\",\n     baseUrl: \"https://api.asgardeo.io/t/&lt;org_name&gt;\",\n     scope: [ \"openid\",\"profile\" ]\n};\n\nexport const MyApp = (): ReactElement =&gt; {\n    return (\n        &lt;AuthProvider config={ config }&gt;\n            &lt;App /&gt;\n        &lt;/AuthProvider&gt;\n    )\n}\n</code></pre> Details of the parameters are given below.</p> Parameter Description <code>clientID</code> This is the Client ID of your OIDC app. See [how to obtain client ID](../../guides/applications/register-single-page-app/#get-the-client-id). <code>baseUrl</code> This is the Asgardeo server's host name along with your organization name. <code>signInRedirectURL</code> This is the URL the app redirects to after user login. See [Authorized redirect URLs](../../references/app-settings/oidc-settings-for-app/#authorized-redirect-urls). <code>signOutRedirectURL</code> This is the URL the app redirects to after user logout. See [Authorized redirect URLs](../../references/app-settings/oidc-settings-for-app/#authorized-redirect-urls). <code>scope</code> The list of OIDC scopes that are used for requesting user information. The <code>openid</code> scope is mandatory to get the ID token. You can add other OIDC scopes such as <code>profile</code> and <code>email</code>."},{"location":"get-started/try-your-own-app/react/#access-the-session-state","title":"Access the session state","text":"<p>The <code>useAuthContext()</code> hook provided by the SDK could be used to access the session state that contains information such as the email address of the authenticated user and to access the methods that are required for implementing authentication.</p> <p>Note</p> <p>Once the root component is wrapped with <code>AuthProvider</code>, <code>useAuthContext()</code> hook can be used anywhere within the application.</p> <p>Use the below code segment to import the <code>useAuthContext()</code> hook from <code>@asgardeo/auth-react</code>.</p> <p><pre><code>import { useAuthContext } from \"@asgardeo/auth-react\";\n</code></pre> And then inside your components, you can access the context as follows.  </p> <p><pre><code>const { state, signIn, signOut } = useAuthContext();\n</code></pre> Few common methods that you can access with <code>useAuthContext()</code> are listed below. These will be helpful when implementing authentication capabilities in your application. - <code>state</code> object - This will contain attributes such as whether a user is currently logged in, the username of the currently logged-in user etc. - <code>signIn</code> - Initiate a login request to Asgardeo, process the response to obtain authentication response. - <code>signOut</code> - Logout the user from Asgardeo and clear any authentication data from the SDK storage. - <code>isAuthenticated</code> - Check whether there is an authenticated user session. Based on the result you can decide to change the application view/behaviour. - <code>getBasicUserInfo</code> - Get authenticated user's basic information from the authentication response. - <code>getDecodedIDToken</code> - Get the decoded <code>id_token</code> obtained in the authentication response. From there you can derive more information such as additional user-attributes. - <code>getIDToken</code> - Get the <code>id_token</code> (JWT) obtained in the authentication response. - <code>getAccessToken</code> - Get the <code>access_token</code> obtained in the authentication response. - <code>refreshAccessToken</code> - Get the <code>refresh_token</code> obtained in the authentication response.</p> <p>Note</p> <p>Methods related to the token such as <code>getIDToken</code>, <code>getDecodedIDToken</code>, <code>getAccessToken</code> and <code>refreshAccessToken</code> are only available if the storage mechanism is set to <code>sessionStorage</code> or <code>localStorage</code> in the SDK configuration. If it is set to <code>webWorker</code>, an error is thrown since the token is stored inside the web worker and cannot be accessed by outside party.</p>"},{"location":"get-started/try-your-own-app/react/#use-the-api","title":"Use the API","text":"<p>You can now start using the SDK's API to implement the required authentication logic. Follow the instructions given below to implement each use case.</p>"},{"location":"get-started/try-your-own-app/react/#access-the-state-object","title":"Access the <code>state</code> object","text":"<p>The <code>state</code> object contains attributes of a user. Its structure is as follows.</p> <p>Note</p> <p>The <code>isAuthenticated</code> attribute checks whether a user is currently logged in via Asgardeo or not.</p>"},{"location":"get-started/try-your-own-app/react/#add-login-to-your-application","title":"Add login to your application","text":"<p>You can use the <code>useAuthContext</code> hook from the Asgardeo React SDK to easily authenticate your React application.</p> <p>Implement a login button as follows using the <code>signIn()</code> function in the <code>useAuthContext</code> hook.</p> <p><pre><code>&lt;button onClick={ () =&gt; signIn() }&gt;Login&lt;/button&gt;\n</code></pre> Clicking on the Login button will take the user to the Asgardeo login page. Once <code>signIn()</code> succeeds, the user will be redirected to the app (based on the <code>signInRedirectURL</code> specified in the AuthProvider configuration) and the <code>state.isAuthenticated</code> will be set to <code>true</code>.</p>"},{"location":"get-started/try-your-own-app/react/#get-access-token","title":"Get access token","text":"<p>Once the user is logged in with Asgardeo, the application can get the access token issued by Asgardeo.</p> <p>See the SDK reference for more information.</p> <pre><code>const { getAccessToken } = useAuthContext();\n\nuseEffect(() =&gt; {\ngetAccessToken().then((accessToken) =&gt; {\n//console.log(accessToken);\n}).catch((error) =&gt; {\n//console.log(error);\n});\n}, []);\n</code></pre> <p>Sample access token is given below:</p> <pre><code>61985b0e-26c3-38b7-acff-b18ad934eafc\n</code></pre>"},{"location":"get-started/try-your-own-app/react/#get-user-information","title":"Get user information","text":"<p>In addition to implementing login and logout, you can also use the SDK to get user information.</p> <p>There are two ways for you to get user information: - Get user information from a decoded ID token. - Use the <code>getBasicUserInfo()</code> API and get basic user information.</p> <p><code>getBasicUserInfo()</code> can be used as follows.</p> <pre><code>const { getBasicUserInfo } = useAuthContext();\n\ngetBasicUserInfo().then((basicUserDetails) =&gt; {\nconsole.log(basicUserDetails);\n}).catch((error) =&gt; {\n// Handle the error\n})\n</code></pre> <p><code>basicUserDetails</code> object will have a structure similar to below:</p> <pre><code>{\n\"allowedScopes\": \"openid\",\n\"sessionState\": \"eb0e12f9a113f49ffef887a464c7980d84bb5b11dfeb1774309aee9b88c83c21.8-LXzzHCUSOOa2GeH-LFfA\",\n\"username\": \"alica@bifrost.com\",\n\"country\": \"Sri Lanka\",\n\"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>You can get additional information from the user by requesting user information from Asgardeo using scopes</p>"},{"location":"get-started/try-your-own-app/react/#get-decoded-id-token","title":"Get decoded ID token","text":"<p>Once the user is logged in with Asgardeo, the application can get the ID token issued by Asgardeo.</p> <p>The SDK provides the <code>getDecodedIDToken()</code> API to get the decoded token. You can use this decoded token to obtain user claims as below.</p> <pre><code>const { getDecodedIDToken } = useAuthContext();\n\ngetDecodedIDToken().then((decodedIDToken) =&gt; {\nconsole.log(decodedIDToken);\n}).catch((error) =&gt; {\n// Handle the error\n})\n</code></pre> <p>Sample decoded ID token object is given below:</p> <pre><code>{\n\"isk\": \"329d5bf5732791509edabb093d78a4a2665dbc65d99119f45f1d4db1a2459cf1\",\n\"at_hash\": \"TN1HIyOnt_8shS2DalrdfQ\",\n\"sub\": \"alica@bifrost.com\",\n\"country\": \"Sri Lanka\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"sid\": \"81a61d37-9a6d-487a-8f5f-c7a313c44c31\",\n\"aud\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n\"c_hash\": \"1pWTMQ7ZTxCWSapucJF-bw\",\n\"nbf\": 1627966715,\n\"azp\": \"SmLpPiRube64JmkAf4nhZVD_6V8a\",\n\"exp\": 1627970315,\n\"iat\": 1627966715,\n\"email\": \"alica@bifrost.com\"\n}\n</code></pre> <p>From the decoded ID Token(<code>decodedIDToken</code>) object, you can get the following information:</p> sub <code>decodedIDToken.sub</code> email <code>decodedIDToken.email</code> country <code>decodedIDToken.country</code> <p>You can loop through the <code>decodedIDToken</code> object and get the other claims as well.</p>"},{"location":"get-started/try-your-own-app/react/#add-logout-to-your-application","title":"Add logout to your application","text":"<p>We can use the <code>signOut()</code> method from <code>useAuthContext()</code> hook to implement a logout button.</p> <p><pre><code>&lt;button onClick={ () =&gt; signOut() }&gt;Logout&lt;/button&gt;\n</code></pre> Clicking on the Logout button will sign out the user. The user will then be redirected to the <code>signOutRedirectURL</code> (specified in the AuthProvider configuration) and the <code>state.isAuthenticated</code> will be set to <code>false</code>.</p> <p>:::tip     You can use the <code>state.isAuthenticated</code> attribute to check the authentication status of the user.</p>"},{"location":"get-started/try-your-own-app/react/#add-routing","title":"Add Routing","text":"<p>If your application needs routing, the SDK provides a component called <code>SecureRoute</code>, which is implemented with <code>react-router-dom</code>. This component allows you to easily secure your routes with Asgardeo. You can learn more about routing here.</p>"},{"location":"get-started/try-your-own-app/react/#more-information","title":"More Information","text":"<p>If you want to learn in-depth about the Asgardeo React SDK, you can refer to the Asgardeo React SDK documentation.</p>"},{"location":"guides/","title":"Index","text":""},{"location":"guides/#guides-overview","title":"Guides - Overview","text":"<p>The guides in this section provide the instructions for building identity and access management uses cases and managing them.</p>"},{"location":"guides/#developer-guide","title":"Developer guide","text":"<p>If you are an application developer, you can integrate your applications with Asgardeo to implement identity and access management use cases for your application.</p> <p>See the following sections for details:</p> <ul> <li>Applications</li> <li>Authentication</li> </ul>"},{"location":"guides/#administration-guide","title":"Administration guide","text":"<p>The adminstration guides cover the topics related to managing the users in your organizations and other organization settings.</p> <ul> <li>User Management</li> <li>User Account Management</li> <li>User Self-Service</li> </ul>"},{"location":"guides/#your-asgardeo-guide","title":"Your Asgardeo guide","text":"<p>Manage your Asgardeo organization and your administration user account. See the topics in the Your Asgardeo section for details.</p>"},{"location":"guides/api-authorization/","title":"API authorization","text":"<p>Asgardeo allows organizations to authorize user access to an application's API resources based on the application roles assigned to the users.</p> <p></p> <p>The following are the terms used in the API authorization context:</p> API resources Used to group the API scopes/permissions that your applications can consume. Permissions Interchangeably known as scopes. Permissions represent an action an application can perform on behalf of a user. These are the scopes an application need to request to obtain a token capable of accessing the API resource. Application roles Used to map the permissions of the API resource to a persona in the application. An application role is application specific. Group A collection of users with the same privileges to access resources in an organization. A group is organization specific. <p>The relationship between these entities is as follows: - An API resource has permissions/scopes. - An application has application roles, and the permissions of the API resource authorized to the application can be assigned to an application role. - An Asgardeo organization has user groups with users assigned to each group, and application roles can be assigned to user groups.</p>"},{"location":"guides/api-authorization/#how-it-works","title":"How it works","text":"<p>Administrators in an organization have the authority to either allow unrestricted access or enforce controlled access to the API resources.</p> <p>If administrators choose to skip authorization, all application users will be authorized to access the API resources without any limitations.</p> <p>However, if authorization is mandated for the API resources, the following flow occurs:</p> <ol> <li>The user attempts to access an application with controlled access to API resources.</li> <li>Asgardeo verifies the user's group assignment.</li> <li>Asgardeo retrieves the user's roles by checking the group-to-role mappings.</li> <li>Asgardeo evaluates the permissions associated with the user's roles.</li> <li>Based on the assigned permissions, Asgardeo grants or denies the user with controlled access to the API resources.</li> </ol> <p>To summarize, Asgardeo validates the user's group assignment, determines the roles based on the group-to-role mappings, examines the permissions associated with the roles, and decides whether to permit or restrict the user's access to the API resources.</p>"},{"location":"guides/api-authorization/#register-an-api-resource","title":"Register an API resource","text":"<p>Asgardeo allows administrators to register API resources with scopes/permissions.</p> <p>To register an API resource on Asgardeo,</p> <ol> <li>On the Asgardeo Console, go to API Resources.</li> <li>Click + New API Resource to register a new API resource.</li> <li> <p>Enter the following details:      Parameter Description Identifier This is an identifier for your API resource. This can be any value, but Asgardeo recommends using the URI of the API resource as the identifier. This value will be used as the <code>aud</code> claim in the issued JWT token. Display Name A meaningful name to identify your API resource in Asgardeo. </p> </li> <li> <p>Click Next and enter the following details:      Parameter Description Permission (Scope) The value that acts as the scope when requesting an access token. This value should be similar to the scope value in your application. Display Name A meaningful name for your permission. This will be displayed on your application\u2019s user consent page. Description A description for your permission. This will be displayed on your application\u2019s user consent page. </p> </li> <li> <p>Click + Add Permission. Note that you can add multiple permissions according to your requirements.</p> </li> <li> <p>Click Next and enable Requires authorization if the users consuming your API should be authorized before they get access, else you can proceed without an authorization policy.</p> </li> <li> <p>Click Finish to complete the API resource registration.</p> </li> </ol>"},{"location":"guides/api-authorization/#authorize-the-api-resources-for-an-app","title":"Authorize the API resources for an app","text":"<p>Once you have registered API resources in your organization, you can authorize applications in your organization to access those API resources. This is done by connecting the API resources to the relevant applications. Users of an application will have access to the API resource depending on the authorization settings you have configured. If an API resource requires authorization, RBAC will be applied before granting users access.</p> <p>Asgardeo allows administrators to connect API resources to applications. To authorize an API resource for an application:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select the application to which you wish to authorize the registered API resource and go to API Authorization.</li> <li>Click + Authorize an API Resource.</li> <li> <p>Enter the following details:      Parameter Description API Resource Select the API resource you wish to integrate with your application. Authorized Scopes Select the permissions. Authorization Policy Select the authorization policy. If you have selected Requires Authorization when adding the API resource, RBAC will be selected by default, else you have the option to select between <code>Role-Based Access Control (RBAC)</code> and <code>No Authorization Policy</code>. </p> </li> <li> <p>Click Finish.</p> <p></p> </li> </ol>"},{"location":"guides/api-authorization/#configure-rbac-for-api-resources","title":"Configure RBAC for API resources","text":"<p>If RBAC is enabled as the authorization policy for the API resource, users accessing the API through an application will have role-based access.</p>"},{"location":"guides/api-authorization/#define-permissions-for-an-api-resource","title":"Define permissions for an API resource","text":"<p>If you didn\u2019t specify all the permissions for the API resource when registering the API resource, follow the steps given below to add permissions.</p> <ol> <li>On the Asgradeo Console, go to API Resources.</li> <li>Select the API resource and go to the Permissions tab.</li> <li>Click + Add Permissions and enter the following details:      Parameter Description Permission (Scope) The value that acts as the scope when requesting an access token. This value should be similar to the scope value in your application. Display Name A meaningful name for your permission. This will be displayed on your application\u2019s user consent page. Description A description for your permission. This will be displayed on your application\u2019s user consent page. </li> <li>Click Finish.</li> </ol>"},{"location":"guides/api-authorization/#create-application-roles","title":"Create application roles","text":"<p>The permissions of your API resource should be assigned to a role. These roles are application specific.</p> <p>To create a role and assign permissions to the scope:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select the application to which you wish to authorize the registered API resource and go to Roles.</li> <li>Click + New Role.</li> <li>Enter a Role Name and click Next.</li> <li> <p>Select the permissions you wish to assign for the newly created application role.</p> <p>Note</p> <p>Roles are application-specific but not resource specific. You can add permissions from multiple API resources to a single role.</p> <p> 6. Click Save to add the new application role. </p> </li> </ol>"},{"location":"guides/api-authorization/#assign-roles-to-groups","title":"Assign roles to groups","text":"<p>You need to assign the created application roles to groups so that the business users belonging to a particular group will have permission to access the application with the scopes assigned.</p> <p>To assign roles to groups:</p> <ol> <li>On the Asgardeo Console, go to Groups.</li> <li>Select the group to which you wish to assign roles and go to Roles tab.</li> <li>Click + Assign Roles.</li> <li>Select the application roles you wish to assign to the group.</li> <li>Click Save.</li> </ol>"},{"location":"guides/api-authorization/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below to try out the RBAC flow:</p> <p>Note</p> <p>Note that we are using Asgardeo's React sample application for this scenario.</p>"},{"location":"guides/api-authorization/#request-scopes-for-the-user","title":"Request scopes for the user","text":"<p>To request scopes for the user:</p> <ol> <li> <p>Add the new scopes to the configuration file of your SDK. You need to request these new scopes in addition to the OIDC scopes of your application.</p> <p>To get the scopes:</p> <ol> <li>On the Asgardeo Console, go to Applications and select your application.</li> <li>Copy the scopes listed at the end of the API Authorization section.     </li> </ol> <p>::: tip     When you add scopes to the configuration file of your SDK, add them as comma-separated values.</p> </li> <li> <p>Access the application URL.</p> </li> <li> <p>Try to log in as a user who has a group and has permissions to access the API resource.</p> <p>Upon successful login, you will see the permission/scopes allowed for the user on the user consent page.</p> <p></p> </li> <li> <p>Click Allow. You will now be redirected to the application.</p> <p>You will be able to see the assigned permissions on the <code>allowedScopes</code> parameter of the authentication response.</p> <p></p> </li> </ol>"},{"location":"guides/asgardeo-events/","title":"Asgardeo events","text":"<p>Asgardeo triggers events corresponding to the various user interactions in your Asgardeo organization. You can configure Asgardeo to publish these events to WSO2's integration platform, Choreo. From there, you can define custom business logic that can be executed when an event occurs.</p> <p>Asgardeo publishes the following events under three main categories.</p> <p>Note</p> <p>Note that all events published by Asgardeo are encrypted end-to-end organization-wise until Choreo processes and decrypts them.</p> <ul> <li>Login events - Events related to login flows.</li> <li> <p>Login success event: Published when a user successfully logs in to an application.</p> </li> <li> <p>User operation events - Events related to user operations, profile updates, and account deletes.</p> </li> <li>User account lock event: Published when a user account is locked.</li> <li>User credential update event: Published when a user's credentials are updated.</li> <li>User group update event: Published when users are added or removed from a group.</li> <li>User account unlock event: Published when a user account is unlocked.</li> <li> <p>User delete event: Published when a user's account is deleted.</p> </li> <li> <p>Registration events - Events that occur during user registration flows.</p> </li> <li>Add user event: Published when a user is added to the organization.</li> <li>Accept user invite event: Published when a user accepts an invitation to an organization.</li> <li>Confirm self-signup event: Published when a user completes account verification during self-sign-up.</li> </ul>"},{"location":"guides/asgardeo-events/#configure-asgardeo-to-publish-events","title":"Configure Asgardeo to publish events","text":"<p>Follow the steps below to configure event publishing for Asgardeo.</p> <ol> <li> <p>On the Asgardeo Console, go to Events.</p> </li> <li> <p>Select the events that you wish to publish to Choreo and click Update.</p> <p></p> <p>Note</p> <p>Alternatively, you can invoke the Event Configuration Management API to configure event publishing. See the API Documentation to learn more.</p> </li> </ol>"},{"location":"guides/asgardeo-events/#implement-business-use-cases-for-asgardeo-events-via-choreo","title":"Implement business use cases for Asgardeo events via Choreo","text":"<p>Follow the steps below to define a business logic that will trigger when an Asgardeo event occurs.</p>"},{"location":"guides/asgardeo-events/#prerequisite","title":"Prerequisite","text":"<p>Choreo requires you to have a github repository to host the webhook logic. You can create the webhook from scratch or connect to an existing Ballerina repository. Visit Choreo docs to learn more.</p>"},{"location":"guides/asgardeo-events/#create-a-webhook","title":"Create a webhook","text":"<ol> <li> <p>Navigate to Choreo and create an organization with the same name as your Asgardeo organization, if you don't have it already.</p> <p>Note</p> <p>Organizations in Asgardeo and Choreo will synchronize based on the organization name.</p> </li> <li> <p>Select the Default Project under All Projects. Alternatively, you can create a new project or use an existing project.</p> </li> <li> <p>Start creating a webhook in Choreo from the list of components. Learn more about webhooks in the Choreo documentation.</p> <p>Note</p> <p>If you already have some components in the project, click on +Create button in the component list view.</p> <p></p> </li> <li> <p>Enter a name and a description for your webhook, select External as the Access Mode and click Next.</p> <p></p> </li> <li> <p>Authorize and connect the github repository and the branch. Since the webhook code needs to be placed in the root of the repository, leave the Path parameter as shown.</p> <p></p> </li> <li> <p>Check the Start with a sample checkbox to create a pull request with the starter code required for the webhook and click Next.</p> </li> <li> <p>Select Asgardeo as the Trigger Type and click Next.</p> <p></p> </li> <li> <p>Select one of the Asgardeo event types as the Trigger Channel and click Create. The available options are as follows:       RegistrationService Listens to all user registration events in Asgardeo. UserOperationService Listens to all user operation events in Asgardeo. LoginService Listens to all user login events in Asgardeo. NotificationService Listens to all notification events of the organization from Asgardeo. </p> <p></p> </li> <li> <p>After the webhook is created, Choreo will create a pull request in your connected Github repository with the sample starter code. Go to your repository and merge this code to complete the setup.</p> </li> </ol>"},{"location":"guides/asgardeo-events/#define-the-business-logic","title":"Define the business logic","text":"<p>Let's set up a sample business use case in which Choreo prints a log whenever a registration event is generated in Asgardeo.</p> <ol> <li> <p>Create a webhook with RegistrationService as the Trigger Channel.</p> </li> <li> <p>Navigate to your Github repository and open the webhook.bal file. Your boilerplate code may look as below.</p> <pre><code>import ballerinax/trigger.asgardeo;\nimport ballerina/http;\n\nconfigurable asgardeo:ListenerConfig config = ?;\n\nlistener http:Listener httpListener = new(8090);\nlistener asgardeo:Listener webhookListener =  new(config,httpListener);\n\nservice asgardeo:RegistrationService on webhookListener {\n\nremote function onAddUser(asgardeo:AddUserEvent event ) returns error? {\n//Not Implemented\n}\nremote function onConfirmSelfSignup(asgardeo:GenericEvent event ) returns error? {\n//Not Implemented\n}\nremote function onAcceptUserInvite(asgardeo:GenericEvent event ) returns error? {\n//Not Implemented\n}\n}\n\nservice /ignore on httpListener {}\n</code></pre> </li> <li> <p>Define your business logic in the webhook.bal file.</p> <p>Note</p> <p>The following is a sample code that prints a log in the Choreo console, when a registration event is generated in Asgardeo.</p> <pre><code>import ballerinax/trigger.asgardeo;\nimport ballerina/log;\nimport ballerina/http;\n\nconfigurable asgardeo:ListenerConfig config = ?;\n\nlistener http:Listener httpListener = new(8090);\nlistener asgardeo:Listener webhookListener =  new(config,httpListener);\n\nservice asgardeo:RegistrationService on webhookListener {\n\nremote function onAddUser(asgardeo:AddUserEvent event ) returns error? {\n\nlog:printInfo(event.toJsonString());\n}\n\nremote function onConfirmSelfSignup(asgardeo:GenericEvent event ) returns error? {\n\nlog:printInfo(event.toJsonString());\n}\n\nremote function onAcceptUserInvite(asgardeo:GenericEvent event ) returns error? {\n\nlog:printInfo(event.toJsonString());\n}\n}\n\nservice /ignore on httpListener {}\n</code></pre> </li> <li> <p>Deploy your webhook with the business logic that you defined above.</p> </li> <li> <p>Perform an action in Asgardeo that will generate a registration event,  such as onboarding a user.</p> </li> <li> <p>Proceed to observe logs in your integrated console in Choreo.</p> </li> </ol>"},{"location":"guides/asgardeo-events/#payload-of-an-asgardeo-event","title":"Payload of an Asgardeo event","text":"<p>The payload of an Asgardeo event that is sent to Choreo consists of the following data objects: - Security Data object - The security data object is common to all Asgardeo events. This contains the following security metadata about the event.</p> <p> Property Name Type Description <code>iss</code> String Issuer of the event <code>iat</code> String Event published timestamp. <code>jti</code> String Unique identifier for the event. <code>aud</code> String Audience of the event. </p> <p>Example security data object:</p> <pre><code>{\n\"iss\": \"Asgardeo\",\n\"jti\": \"3b69b103-fa6c-424a-bbf4-a974d0c2d2a3\",\n\"iat\": 1659732032884,\n\"aud\": \"https://websubhub/topics/myorg/REGISTRATIONS\"\n}\n</code></pre> <ul> <li>Event Data object - The event data object contains the details of the event (or the user action). Learn more about event data in the Event data of Asgardeo events section.</li> </ul>"},{"location":"guides/asgardeo-events/#event-data-of-asgardeo-events","title":"Event data of Asgardeo events","text":"<p>This section describes all the Asgardeo events that can be published to Choreo and their respective event payloads.</p>"},{"location":"guides/asgardeo-events/#login-events","title":"Login events","text":"<p>These are events related to login flows. The event data objects of login events are defined below.</p> Login success event <p>When a user successfully logs in to an application, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String Group reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <code>serviceProvider</code> String Application name <p>Example login success event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\",\n\"serviceProvider\": \"My Account\"\n}\n</code></pre>"},{"location":"guides/asgardeo-events/#user-operation-events","title":"User operation events","text":"<p>These are events related to user operations, profile updates and deletes. The event data objects of user operation events are defined below.</p> User account lock event <p>When a user account is locked, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String User reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <p>Example user account lock event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\"\n}\n</code></pre> User credential update event <p>When a user's credentials are updated, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String User reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <p>Example User account Lock event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\"\n}\n</code></pre> User group update event <p>When users are added or removed from a group, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String Group reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>groupId</code> String Group id <code>groupName</code> String Group name <code>userStoreName</code> String User Store name <code>addedUsers</code> List List of added user objects. User object contains userId &amp; userName <code>removedUsers</code> List List of removed user objects. User object contains userId &amp; userName <p>Example user group update event payload:</p> <pre><code>{\n\"ref\": \"https://api.asg.io/t/myorg/scim2/Groups/3b47e4f0-97d0-4b11-86b5-8150105ff32f\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"groupId\": \"3b47e4f0-97d0-4b11-86b5-8150105ff32f\",\n\"groupName\": \"Grouphr\",\n\"userStoreName\": \"DEFAULT\",\n\"addedUsers\": [\n{\n\"userName\": \"tom@gmail.com\",\n\"userId\": \"05c86c29-6e06-4743-8014-0523abd5b6d8\"\n},\n{\n\"userName\": \"smith@gmail.com\",\n\"userId\": \"06405538-49be-46da-8d04-b38da91f56d0\"\n}\n],\n\"removedUsers\": [\n{\n\"userName\": \"david@gmail.com\",\n\"userId\": \"22e46698-7fa7-4497-90fc-e12864e30b77\"\n}\n]\n}\n</code></pre> User account unlock event <p>When a user account is unlocked, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String User reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <p>Example User account Lock event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\"\n}\n</code></pre> User delete event <p>When a user's account is deleted, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String User reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <p>Example User account lock event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\"\n}\n</code></pre>"},{"location":"guides/asgardeo-events/#registration-events","title":"Registration events","text":"<p>These are events related to user registration flows. The event data object of registration events are defined below.</p> Add user event <p>When a user is added to the organization, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String User reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <code>userOnboardMethod</code> String User onboarded method (Admin Initiated, User Invite, Self Sign Up) <code>roleList</code> List User\u2019s Assigned Roles <code>claims</code> Map User Claims <p>Example add user event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\",\n\"userOnboardMethod\": \"SELF_SIGNUP\",\n\"roleList\": [\"Internal/selfsignup\"],\n\"claims\": {\n\"http://wso2.org/claims/created\":\"2022-09-19T05:20:26.346Z\",\n\"http://wso2.org/claims/dob\":\"1996-12-08\",\n\"http://wso2.org/claims/country\":\"United Arab Emirates\",\n\"http://wso2.org/claims/emailaddress\":\"john@gmail.com\",\n\"http://wso2.org/claims/lastname\":\"Doe\",\n\"http://wso2.org/claims/givenname\":\"John\"\n}\n}\n</code></pre> Accept user invite event <p>When a user accepts an invitation to an organization by setting a password for the account, an event with the following data object is created.</p> Property Name Type Description <code>ref</code> String User reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <p>Example accept user invite event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\"\n}\n</code></pre> Confirm self-signup event <p>When a user completes account verification during self sign-up, an event with the following data is created.</p> Property Name Type Description <code>ref</code> String User reference (Scim location) <code>organizationId</code> int Organization Id <code>organizationName</code> String Organization name <code>userId</code> String User id <code>userName</code> String username <code>userStoreName</code> String User Store name <p>Example confirm self-signup event payload:</p> <pre><code>{\n\"ref\": \"https://asgardeo.io/t/myorg/scim2/Users/72774617-8dff-472e-90b5-67069d94d299\",\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"userId\": \"72774617-8dff-472e-90b5-67069d94d299\",\n\"userName\": \"john@gmail.com\",\n\"userStoreName\": \"DEFAULT\"\n}\n</code></pre>"},{"location":"guides/organization-insights/","title":"Organization Insights","text":"<p>Note</p> <p>The feature is in the  stage. We are working on adding more capabilities for this feature.</p> <p>Asgardeo allows administrators and organization owners to view the insights of the organizations they manage.</p> <p>You can view insights into the unique logins, the total successful logins, and the failed login attempts within the specified period. These user login stats are obtained from login attempts for user applications, My Account portal, and Asgardeo Console.</p> <p>Asgardeo provides insights up to the last 30 days.</p> <p>Note</p> <p>Note that the statistics displayed in the graphs are not real-time. There is a maximum latency of 20 minutes between the actual user activity and the information presented. This slight delay ensures accurate data processing and allows for a comprehensive analysis of user logins and login trends.</p> <p>To check your organization's insight:</p> <ol> <li>On the Asgardeo Console, scroll down and go to Insights on the left panel.</li> <li>Select the period from the list.     </li> </ol> <p>You will see the active users and the total logins within the specified period.</p>"},{"location":"guides/organization-insights/#user-engagement-metrics","title":"User engagement metrics","text":"<p>This section of the guide helps you further understand the statistics shown on the graphs.</p>"},{"location":"guides/organization-insights/#active-users","title":"Active Users","text":"<p>This graph represents the number of unique user logins within the selected duration. You can view each day's count by hovering your mouse over a point on the graph. This metric helps measure the daily engagement of users with the platform. </p>"},{"location":"guides/organization-insights/#total-logins","title":"Total Logins","text":"<p>This graph represents the total number of user logins within the selected duration. By hovering your mouse over a point on the graph, you can view the specific count of successful user logins for each day. </p>"},{"location":"guides/organization-insights/#failed-logins","title":"Failed Logins","text":"<p>This graph represents the total number of failed logins within the selected duration. You can view each day's failed login attempt count by hovering your mouse over a point on the graph. </p> <p>Note</p> <p>Note that the graph does not include the failed login attempts made by administrators and collaborators to the Asgardeo Console and the My Account portal.</p>"},{"location":"guides/applications/","title":"Applications","text":"<p>Regardless of the application type or the development technology, you can connect your application with Asgardeo and control the way users log in to your app.</p> <p>Currently, Asgardeo supports integrating two application types. When you select an application type, Asgardeo provides all the recommended configs in place by default which you can change as needed later.</p>"},{"location":"guides/applications/#single-page-applications","title":"Single-page applications","text":"<p>Single-page applications(SPAs) are apps that run on the browser and do not require a page reload with a change in content.</p> <p>The main advantage of a single-page application is its speed. Since content is dynamically updated as the user interacts with it, the user does not need to wait for page reloads. Users can experience a seamless flow with high responsiveness from the application.</p> <p>JavaScript frameworks and libraries, such as React, Angular, Vue.js, are some popular technologies adopted to build SPAs.</p> <ul> <li>Register a single-page application</li> </ul>"},{"location":"guides/applications/#web-applications","title":"Web applications","text":"<p>Web applications(web apps) are the most common type of applications in use. They are usually hosted on a web server and accessed by the browser. Web applications need authentication as they offer functionality dependent on the logged-in user.</p> <ul> <li>Register a web application with OIDC</li> <li>Register a web application  with SAML</li> </ul>"},{"location":"guides/applications/#mobile-applications","title":"Mobile applications","text":"<p>Mobile applications are apps that run on mobile devices. Android and iOS are some of the popular technologies adopted to build Mobile Applications.</p> <ul> <li>Register a mobile application</li> </ul>"},{"location":"guides/applications/#standard-based-applications","title":"Standard-based applications","text":"<p>Standard-based applications allow users to configure the application protocol settings (OIDC or SAML) from scratch.</p> <ul> <li>Register a standard-based application</li> </ul>"},{"location":"guides/applications/#self-service-my-account-portal","title":"Self-Service (My Account) portal","text":"<p>Application users can access the My Account portal for self-service needs. Learn more about the Self-Service portal.</p>"},{"location":"guides/applications/manage-application-roles/","title":"Manage application roles","text":"<p>Application roles are used to map the permissions of the API resource to a persona in the application. An application role is application specific.</p> <p>You can assign  groups to application roles and grant permission for the group's users to access an API resource. See API authorization for more information.</p>"},{"location":"guides/applications/manage-application-roles/#create-an-application-role","title":"Create an application role","text":"<p>To create a role and assign permissions to the scope:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select the application in which you wish to create the new role and go to the Roles tab.</li> <li>Click + New Role.</li> <li>Enter a Role Name and click Next.</li> <li> <p>Select the permissions you wish to assign for the newly created application role.</p> <p>Note</p> <p>Roles are application-specific but not resource specific. You can add permissions from multiple API resources to a single role.</p> <p></p> </li> <li> <p>Click Save to add the new application role.</p> <p></p> </li> </ol>"},{"location":"guides/applications/manage-application-roles/#assign-a-user-group-to-an-application-role","title":"Assign a user group to an application role","text":"<ol> <li>On the Asgardeo Console, go to Roles.</li> <li>Expand the application and click <code>+</code> on the role you wish to assign to the group.</li> <li>On the Groups tab, click + Assign Group.</li> <li>Select the group which should be assigned to the selected application role,</li> <li>Click Assign to complete the role to group assigning.</li> </ol>"},{"location":"guides/applications/manage-application-roles/#assign-an-external-group-to-an-application-role","title":"Assign an external group to an application role","text":"<p>To assign application roles to external groups:</p> <p>Before you begin</p> <p>To get started,</p> <ul> <li>You should register, configure, and create groups for a connection in your sub organization.</li> <li>You should add this connection to the sign-in flow of the application to which the application roles belong.</li> </ul> <ol> <li>On the Asgardeo Console, go to Roles.</li> <li>Expand the application and click <code>+</code> on the role you wish to assign to the group.</li> <li>Go to the External Groups tab and expand the connection from which to wish to get the group.</li> <li>Select the group which should be assigned to the selected application role,</li> <li>Click Assign Group to complete the role to group assigning.</li> </ol>"},{"location":"guides/applications/manage-application-roles/#delete-an-application-role","title":"Delete an application role","text":"<p>To delete an application role:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select the application to which the role belongs and go to the Roles tab.</li> <li>Click on the trash icon next to the role you wish to delete.</li> <li>Select the checkbox and confirm your action.</li> </ol>"},{"location":"guides/applications/register-mobile-app/","title":"Register a mobile app","text":"<p>To add login to your mobile application with Asgardeo, you need to first register your app in Asgardeo.</p> <p>Your app will be registered as an OpenID Connect mobile app and a client ID will be issued. Note that client secrets are not issued for mobile apps since they are public clients. However, the PKCE (Proof Key for Code Exchange) extension is enabled by default as a security measure.</p>"},{"location":"guides/applications/register-mobile-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Click New Application and select Mobile Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Name A unique name to identify your application. Authorized redirect URLs The URL to which the authorization code is sent to upon user authentication and where the user is redirected to upon logout. Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-mobile-app/#get-the-client-id","title":"Get the client ID","text":"<p>When you register your mobile application, a client ID is generated. Your mobile application will identify itself to Asgardeo with this client ID.</p> <p>You can get this client ID from the Protocol tab of the application as shown below.</p> <p></p>"},{"location":"guides/applications/register-mobile-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your mobile app</li> </ul>"},{"location":"guides/applications/register-oidc-web-app/","title":"Register an OpenID Connect web app","text":"<p>To integrate your web application with Asgardeo using OpenID Connect, you need to first register your web application as an OpenID Connect web application in Asgardeo. A cliend ID and client secret are issued to the application upon registration.</p> <p>Follow the instructions given below.</p>"},{"location":"guides/applications/register-oidc-web-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Click New Application and select Traditional Web Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Name A unique name to identify your application. Protocol <p>The access configuration protocol that is used to log in to the application with SSO.</p> Select OpenID Connect. Authorized redirect URLs <p>         The URL to which the authorization code is sent to upon user authentication and where the user is redirected to upon logout.</p><p>To comply with RFC 8252 section 7.3,         the redirect URL in the request does not need to have an exact port match with the authorized redirect URL if it is a loopback redirect URL.         Only URLs with loopback IP addresses (127.0.0.1 and [::1] not localhost) are supported for this feature. </p> Click Add Now if you want to try a sample app.          Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-oidc-web-app/#get-the-client-id-and-secret","title":"Get the client ID and secret","text":"<p>When you register your web application, a client ID and client secret are generated. Your web application will identify itself to Asgardeo with these credentials.</p> <p>You can get this client ID and secret from the Protocol tab of the application as shown below.</p> <p></p>"},{"location":"guides/applications/register-oidc-web-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your web app</li> </ul>"},{"location":"guides/applications/register-saml-web-app/","title":"Register a SAML web app","text":"<p>To integrate your web application with Asgardeo using SAML, you need to first register your application as a SAML application in Asgardeo.</p> <p>There are two ways to provide your SAML application configurations to Asgardeo during registration:</p> <ul> <li>Use a SAML SP metadata file</li> <li>Add SAML SP configurations manually</li> </ul> <p>Follow the instructions given below.</p>"},{"location":"guides/applications/register-saml-web-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> <p></p> </li> <li> <p>Click New Application and select Traditional Web Application.</p> </li> <li>In the Name field, enter a unique name to identify your application.</li> <li>Select the SAML protocol.</li> <li> <p>Select one of the following methods and add the SAML configurations:</p> <p> Manual <p>Use this option to manually specify the required SAML configurations.</p> See Add SAML configs manually. File Based <p>Upload a SAML metadata file with the required configurations.</p> See Use a SAML metadata file. URL Based <p>Point to the endpoint with the SAML metadata.</p> See Use a SAML metadata file. Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-saml-web-app/#add-saml-configs-manually","title":"Add SAML configs manually","text":"<p>If you selected Manual in the previous step, you can manually specify the SAML configurations as follows:</p> <p></p> Parameter Description Issuer The unique identifier of the application. The value added here should be specified in the SAML authentication request as <code>saml:Issuer</code> element sent from the client application. You can't change this <code>issuer</code> configuration after you register the app. Assertion consumer service URLs The URLs to which the browser is redirected to upon successful authentication. This receives the SAML response."},{"location":"guides/applications/register-saml-web-app/#use-a-saml-metadata-file","title":"Use a SAML metadata file","text":"<p>An SP metadata XML file contains the following:</p> <ul> <li>SP certificate</li> <li>The entity ID (also known as issuer)</li> <li>Assertion Consumer Service URLs (ACS URLs)</li> <li>Single Logout Service URLs</li> </ul> <p>There are two ways to use a SAML metadata file during application registration:</p> <ul> <li> <p>Select the File Based option and upload the SAML SP metadata file.</p> <p></p> </li> <li> <p>Select the URL Based option and specify the SAML meta URL, which refers to the endpoint that hosts the SAML metadata file.</p> <p></p> </li> </ul>"},{"location":"guides/applications/register-saml-web-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your web app</li> </ul>"},{"location":"guides/applications/register-single-page-app/","title":"Register an OpenID Connect single-page app","text":"<p>To add login to your single-page application with Asgardeo, you need to first register your app in Asgardeo.</p> <p>Your app will be registered as an OpenID Connect single-page app and a client ID will be issued. Note that client secrets are not issued because single-page apps are public clients. However, the PKCE (Proof Key for Code Exchange) extension is enabled by default as a security measure.</p> <p>Follow the instructions given below.</p>"},{"location":"guides/applications/register-single-page-app/#register-the-app","title":"Register the app","text":"<p>To register the app:</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Click New Application and select Single-Page Application.</p> <p></p> </li> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Name A unique name to identify your application. Authorized redirect URLs The URL to which the authorization code is sent to upon user authentication and where the user is redirected to upon logout.  Click Add Now if you want to try a sample app. Allow sharing with sub-organizations Enable this to share the new application with all or any selected suborganizations that belong to your root organization. </p> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-single-page-app/#get-the-client-id","title":"Get the client ID","text":"<p>When you register your single-page application, a client ID is generated. Your application will identify itself to Asgardeo with this client ID.</p> <p>You can get this client ID from the Protocol tab of the application as shown below.</p> <p></p>"},{"location":"guides/applications/register-single-page-app/#whats-next","title":"What's next?","text":"<ul> <li>Add login to your single-page app</li> </ul>"},{"location":"guides/applications/register-standard-based-app/","title":"Register a standard-based application","text":"<p>When you integrate an application with Asgardeo, the first step is to register your app from the Asgardeo Console. If you choose the standard-based application type when you register your app, it allows you to configure the protocol settings (OIDC or SAML) from scratch.</p> <p>You can also use the standard-based application type in the following scenarios:</p> <ul> <li>Integrate a web/mobile application with the password grant type. The application types for, single- page applications and, traditional web applications and mobile applications do not support password grant type as it is not recommended.</li> <li>Access the management APIs of Asgardeo.</li> </ul> <p>Note</p> <p>Alternatively, you can register using an application type that has configurations optimized for specific applications.</p> <ul> <li>Register an SPA</li> <li>Register an OIDC web application</li> <li>Register a SAML web application</li> </ul>"},{"location":"guides/applications/register-standard-based-app/#register-an-application","title":"Register an application","text":"<p>To register an application:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Click New Application and select Standard-Based Application.     </li> <li> <p>Provide an application name and select the other options based on your requirements.</p> <p>Note</p> <ul> <li>You can choose OIDC or SAML as the standard protocol for your application. See the complete list of OIDC and SAML  configurations.</li> <li>If you use OIDC, you can configure a management app, which can access the management APIs in Asgardeo. Learn about invoking management APIs.</li> </ul> </li> <li> <p>Click Register to complete the registration.</p> <p>Note</p> <p>If you have enabled Allow sharing with sub-organizations while registering the application, you will see a popup window with the following options.</p> <p></p> <p> Option Description Share with all sub-organizations If selected, the application will be shared with all existing suborganizations and any new suborganizations you may create in the future. Share with only selected sub-organizations If selected, you can select the suborganizations you wish to share the application with. </p> </li> </ol>"},{"location":"guides/applications/register-standard-based-app/#whats-next","title":"What's Next?","text":"<ul> <li>Configuring an OIDC application</li> <li>Configuring a SAML application</li> </ul>"},{"location":"guides/authentication/","title":"Authentication","text":"<p>See the topics given below to manage authentication for your applications.</p>"},{"location":"guides/authentication/#design-the-login-flow","title":"Design the login flow","text":"<p>When you register an application, you can customize the login flow.</p> <ul> <li> <p>Configure Asgardeo login for single-page applications with OIDC or web applications with OIDC or SAML.</p> </li> <li> <p>Add social login options such as Google, Facebook, and Github.</p> </li> <li> <p>Add other enterprise identity providers as login options.</p> </li> <li> <p>Configure the number of factors (2FA or MFA) in the login flow to enforce multi-factor authentication.</p> </li> <li> <p>Enforce conditional authentication to dynamically change the login flow of a user based on the user\u2019s devices, networks, locations, or usage contexts.</p> </li> </ul>"},{"location":"guides/authentication/#manage-user-attributes","title":"Manage user attributes","text":"<p>Manage the user attributes you want to share with your application:</p> <ul> <li>Enable user attributes for OpenID Connect apps</li> <li>Enable user attributes for SAML apps</li> </ul>"},{"location":"guides/authentication/#manage-connections","title":"Manage connections","text":"<p>You can define connections to external identity providers (IdPs) and use them to authenticate users who log in to your applications. This process of authenticating users with external IdPs is known as identity federation.</p> <p>Note</p> <p>The external identity provider (IdP) authenticates users and issues the identification information by using security tokens like SAML 2.0, OpenID Connect, OAuth 2.0, and WS-Trust.</p>"},{"location":"guides/authentication/#benefits-of-identity-federation","title":"Benefits of identity federation","text":"<p>There are several benefits of using identity federation:</p> <ul> <li> <p>Allows users to sign in with a user account registered with a trusted IdP without having to manually create accounts for them in Asgardeo.</p> <p>Note</p> <p>If the IdP is configured to use JIT user provisioning, signing in with an external IdP will automatically create a local account for the user in Asgardeo.</p> </li> <li> <p>Give users the convenience of choosing their existing, trusted IdP when they sign in or sign up to your organization in Asgardeo.</p> </li> </ul>"},{"location":"guides/authentication/#supported-external-idps","title":"Supported external IdPs","text":"<p>Asgardeo supports a variety of external identity providers with various open-standard protocols (such as OAuth2.0, OpenID Connect, and SAML).</p> <ul> <li>Social identity providers</li> <li>Enterprise identity providers</li> </ul> <p>You can configure any number of external connections for your application via Asgardeo.</p>"},{"location":"guides/authentication/#add-groups-to-connections","title":"Add groups to connections","text":""},{"location":"guides/authentication/add-login-to-apps/","title":"Add login to Apps","text":"<p>This section gives you instructions for adding login to your Single Page Applications(SPAs) and web applications using OIDC or SAML.</p> <ul> <li> <p>Secure your SPA with OpenID Connect using our SDKs or try it on a sample. See Add login to an SPA.</p> </li> <li> <p>Secure your web application using OpenID Connect or SAML using our SDKs or try it on a sample. For more instructions, see Add login to a webapp.</p> </li> <li> <p>Secure your mobile application with Asgardeo using OIDC. For more instructions, see Add login to a mobile app.</p> </li> </ul>"},{"location":"guides/authentication/add-login-to-mobile-app/","title":"Add login to a mobile app","text":"<p>Mobile applications, by design, cannot maintain any secrets. These kinds of applications are called public clients.</p> <p>Based on the OAuth 2.0 best practices for browser-based apps, Asgardeo recommends securing your mobile apps using the OpenID Connect Authorization Code Flow for public clients with the PKCE (Proof Key for Code Exchange) extension.</p> <p>See the guides given below to add login to your mobile applications with Asgardeo.</p>"},{"location":"guides/authentication/add-login-to-mobile-app/#manually-add-login-to-your-mobile-app","title":"Manually add login to your mobile app","text":"<ul> <li>Implement authorization code flow with PKCE</li> </ul>"},{"location":"guides/authentication/add-login-to-single-page-app/","title":"Add login to an SPA","text":"<p>Single-page apps (SPAs) by design run with the source code exposed in the browser, which means that they cannot maintain any secrets. These kinds of applications are called public clients.</p> <p>Based on the OAuth 2.0 best practices for browser-based apps, Asgardeo recommends securing your SPAs using the OpenID Connect Authorization Code Flow for public clients with the PKCE (Proof Key for Code Exchange) extension.</p> <p>See the guides given below to add login to your SPAs with Asgardeo.</p>"},{"location":"guides/authentication/add-login-to-single-page-app/#try-out-samples","title":"Try out samples","text":"<ul> <li>React SPA Sample</li> <li>JavaScript SPA Sample</li> </ul>"},{"location":"guides/authentication/add-login-to-single-page-app/#use-an-sdk-to-add-login-to-your-spa","title":"Use an SDK to add login to your SPA","text":"<ul> <li>React SDK</li> <li>Javascript SDK</li> </ul>"},{"location":"guides/authentication/add-login-to-single-page-app/#manually-add-login-to-your-spa","title":"Manually add login to your SPA","text":"<ul> <li>Implement authorization code flow with PKCE</li> </ul>"},{"location":"guides/authentication/add-login-to-web-app/","title":"Add login to a web app","text":"<p>Browser-based protocols like SAML and OpenID Connect are most commonly used to integrate web applications with identity providers.</p> <p>See the guides given below to add login to your web apps with Asgardeo using OpenID Connect or SAML.</p>"},{"location":"guides/authentication/add-login-to-web-app/#try-out-samples","title":"Try out samples","text":"<ul> <li>Java EE OIDC sample</li> <li>Java EE SAML sample</li> </ul>"},{"location":"guides/authentication/add-login-to-web-app/#use-an-sdk-to-add-login-to-your-web-app","title":"Use an SDK to add login to your web app","text":"<ul> <li>Java EE OIDC SDK</li> <li>Java EE SAML SDK</li> </ul>"},{"location":"guides/authentication/add-login-to-web-app/#manually-add-login-to-your-web-app","title":"Manually add login to your web app","text":"<ul> <li>Implement authorization code flow</li> </ul>"},{"location":"guides/authentication/jit-user-provisioning/","title":"Configure Just-in-Time (JIT) user provisioning","text":"<p>This guide explains the concept of Just-In-Time user provisioning, why and when to use it, and also the instructions for configuring it.</p>"},{"location":"guides/authentication/jit-user-provisioning/#how-jit-provisioning-works","title":"How JIT provisioning works","text":"<p>Just-in-Time (JIT) user provisioning is a method used to store a user's identity and user claims in the Asgardeo user store when the user is authenticated through an external identity provider (IdP).</p> <p>The flow of JIT user provisioning is as follows:</p> <ol> <li> <p>When an application initiates an authentication request, the user gets redirected to Asgardeo.</p> </li> <li> <p>If the user has used an external identity provider for authentication, Asgardeo redirects the user to the selected external IdP.</p> </li> <li> <p>Asgardeo receives a positive authentication response from the external IdP with the user information.</p> </li> <li> <p>JIT provisioning is triggered and Asgardeo creates a user account in its internal user store along with the user claims obtained from the authentication response.</p> </li> </ol> <p></p> <p>With this process, new user accounts are automatically provisioned to Asgardeo through external IdPs.</p>"},{"location":"guides/authentication/jit-user-provisioning/#prerequisites","title":"Prerequisites","text":"<p>First, the external IdP should be registered in Asgardeo as a connection.</p> <p>Note</p> <p>Learn more about how to enable login to your application using the following external IdPs: - Facebook - Google - Github - OpenID Connect IdPs - SAML IdPs</p>"},{"location":"guides/authentication/jit-user-provisioning/#enabledisable-jit-user-provisioning","title":"Enable/Disable JIT user provisioning","text":"<p>To enable/disable JIT user provisioning for an external Identity provider:</p> <ol> <li> <p>On the Asgardeo Console, click Connections and select the relevant IdP.</p> </li> <li> <p>Go to the Advanced tab of the selected IdP.</p> </li> <li> <p>JIT provisioning is enabled by default. You can uncheck the Just-in-Time (JIT) User Provisioning  checkbox to disable it.     </p> </li> <li> <p>Click Update to save.</p> </li> </ol> <p>Note</p> <ul> <li>When JIT is enabled, Asgardeo will create a user profile and store the user attributes recieved from the external IdP. </li> <li>When JIT is disabled, a user profile is not created. Therefore, there is no location to store the attributes of the user. In such cases, the attributes are directly passed to the application.</li> </ul> <p>Warning</p> <p>If you have configured multi-factor authentication (MFA), disabling JIT user provisioning might break the application login flow. Learn more about troubleshooting sign-in flow errors with JIT.</p>"},{"location":"guides/authentication/jit-user-provisioning/#troubleshoot-sign-in-flow-errors","title":"Troubleshoot sign-in flow errors","text":"<p>If you have disabled JIT provisioning for an IdP, you need to validate its effect on your applications that use multi-factor authentication. This is because certain MFA mechanisms (such as TOTP and EmailOTP) require the login users to have local accounts in Asgardeo. Therefore, the application\u2019s sign-in flow involving JIT-disabled IdPs and the MFA options will break by default.</p> <p>In such scenarios, you will see the following warning in the application\u2019s sign-in flow:</p> <p></p> <p>To avoid such errors, you can use one of the following options: - Conditionally skip MFA</p> <pre><code>You can skip MFA for external connections during the login flow by using the\nfollowing example script:\n\n```js\nvar localAuthenticator = 'LOCAL';\nvar onLoginRequest = function (context) {\n    executeStep(1, {\n        onSuccess: function (context) {\n            var step = context.steps[1];\n            if (step.idp == localAuthenticator) {\n                executeStep(2); // MFA Step\n            }\n        }\n    });\n};\n```\n!!! note\n    For more information on this script, refer the [sign-in option based conditional authentication script](../../guides/authentication/conditional-auth/sign-in-option-based-template/#how-it-works).\n</code></pre>"},{"location":"guides/authentication/manage-consent-for-attributes/","title":"Manage consent for user attributes","text":"<p>If user attributes are enabled for applications registered in Asgardeo, the applications can access these attributes when the user logs in to the app. However, it may be necessary to get the user's consent before sharing the user's information. Learn more about configuring user attributes for applications.</p> <p>In Asgardeo, you can either display a screen to request consent for user attributes or skip this step as explained below.</p>"},{"location":"guides/authentication/manage-consent-for-attributes/#get-consent-for-user-attributes","title":"Get consent for user attributes","text":"<p>Once the user is logged in, Asgardeo requests consent to share the user's attributes with the application.</p> <p></p> <p>If the application requires mandatory attributes for which values are not specified in the user profile, Asgardeo will prompt the user to enter those values during login.</p> <p>The user can do one of the following during login:</p> <ul> <li> <p>Select specific user attributes and click Allow.</p> <p>This will share only the selected user attributes with the application. However, note that the user cannot unselect the mandatory user attributes.</p> </li> <li> <p>If the user does not want to share any of the requested user attributes, they can click Deny.</p> </li> </ul> <p>Asgardeo will not prompt for consent for the allowed attributes again unless a user revokes the provided consent via MyAccount.</p>"},{"location":"guides/authentication/manage-consent-for-attributes/#disable-the-consent-screen","title":"Disable the consent screen","text":"<p>If user consent is not required for your application to access user information, you can disable the consent screen as follows:</p> <ol> <li>Sign in to the Asgardeo Console and select the application for which user consent needs to be disabled.</li> <li>Go to the Advanced tab and enable Skip login consent.</li> </ol> <p></p>"},{"location":"guides/authentication/conditional-auth/","title":"Add conditional authentication","text":"<p>With conditional authentication, the login flow in an application is dependent on the risk factors associated with the user's login request. This allows you to strengthen the authentication flow when the risk is higher. In Asgardeo, conditional authentication is configured using a script.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/#authentication-script","title":"Authentication script","text":"<p>The authentication script for configuring dynamic authentication flows in Asgardeo uses a functional language similar to Javascript. You can configure the script using the script editor in the Asgardeo Console. You can either use a template or write a custom script.</p> <p>This scripting language supports a set of inbuilt functions and objects. A simple conditional authentication script will look like the following:</p> <pre><code>var onLoginRequest = function(context) {\n// Some possible initializations...\nexecuteStep(1);\nif (doStepUp(context) === true) { executeStep(2);\n}\n};\n\nfunction doStepUp(context) {\n// A function that decides whether to enforce second step based on the request context.\nreturn true;\n}\n</code></pre> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/#script-templates","title":"Script templates","text":"<p>The script editor in Asgardeo comes with a set of predefined templates to get you started with some of the most common conditional authentication scenarios. These scripts contain inline comments explaining the conditions that are applied.</p> <p></p> <p>The available templates are categorized as follows: - Access Control - These templates restrict user login to the application based on specified conditions. - Adaptive MFA - These templates prompt two-factor authentication for login attempts based on specific conditions.</p> <p>The pre-defined templates are listed below.</p> Template Description [User-Age-Based](../../guides/authentication/conditional-auth/user-age-based-template/) This configures a login flow where users can log in only if their age is over the configured value. The user's age is calculated using the <code>date of birth</code> attribute. [Group-Based (Access Control)](../../guides/authentication/conditional-auth/group-based-template-access-control/) This login flow allows login only for users who belong to any of the given set of groups [Sign-In-Option-Based](../../guides/authentication/conditional-auth/sign-in-option-based-template/) This login flow prompts two-factor authentication (2FA) only for users who are signing in with a given option. [New-Device-Based](../../guides/authentication/conditional-auth/new-device-based-template/) This login flow sends an email notification and/or prompts two-factor authentication for users who are logged in from a previously unused device. [Group-Based (Adaptive MFA)](../../guides/authentication/conditional-auth/group-based-template/) This login flow prompts two-factor authentication (2FA) for users who belong to any of the given set of groups. [IP-Based](../../guides/authentication/conditional-auth/ip-based-template/) This login flow prompts two-factor authentication for users who log in from outside the given IP range. <p>If required, you can also use the script editor to introduce new functions and fields to an authentication script based on your requirement. See the instructions on writing a custom authentication script.</p>"},{"location":"guides/authentication/conditional-auth/#whats-next","title":"What's next","text":"<ul> <li>Configure conditional authentication</li> <li>Conditional authentication API reference</li> </ul>"},{"location":"guides/authentication/conditional-auth/access-control/","title":"Add access control","text":"<p>Use authentication scripts to control access to your applications.</p> <ul> <li>User age-based access control</li> <li>Group-based access control</li> </ul>"},{"location":"guides/authentication/conditional-auth/adaptive-mfa/","title":"Add adaptive MFA","text":"<p>Use authentication scripts to enforce adaptive MFA in the login flow of your applications.</p> <ul> <li>Group-Based adaptive MFA</li> <li>Sign-in-option-based adaptive MFA</li> <li>New-device-based adaptive MFA</li> <li>IP-based adaptive MFA.</li> <li>Adaptive MFA based on API calls</li> </ul>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/","title":"Add MFA based on advanced conditions (using WSO2 Choreo)","text":"<p>You can secure your applications' login flow based on data from an API hosted on WSO2 Choreo. Choreo by WSO2 is an integration platform as a service (iPaaS) for innovation, productivity, and simplicity\u2014designed in the cloud for the cloud.</p>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#scenario","title":"Scenario","text":"<p>Consider a scenario where the login flow of the application should be stepped up after an API call to a service endpoint hosted on Choreo. The API call should be executed after the first authentication step is successfully completed. The second authentication step should be prompted based on the decision made by the service during the API call.</p> <p>Let's consider an API hosted on Choreo that reads an IP address from the request body, retrieves geolocation from the IP address, evaluates the risk of the login attempt, and sends back the result in the <code>hasRisk</code> parameter in the response. And the second authentication step should be prompted if the <code>hasRisk</code> is <code>true</code>.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Get an API key from ipgeolocation. For more information, refer to ipgeolocation documentation.</p> </li> </ul>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#define-the-mfa-conditions","title":"Define the MFA conditions","text":"<p>To define the MFA conditions with Choreo, you need to:</p> <ol> <li> <p>Design your MFA condition in a REST API</p> </li> <li> <p>Integrate your REST API with Choreo</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#desgin-the-rest-api","title":"Desgin the REST API","text":"<p>You need to implement your REST API in Ballerina or any other language and containerize it. You can use the Ballerina VS code extension to develop the REST API in Ballerina. Learn more.</p> <p>To implement your REST API to fit the explained scenario:</p> <ol> <li> <p>On the VS Code editor, create a <code>.bal</code> file and add the following code segment.</p> <p>??? note \"Code snippet\"</p> <pre><code>  ```js\n  import ballerina/http;\n\n  type RiskResponse record {\n  boolean hasRisk;\n  };\n\n  type RiskRequest record {\n  string ip;\n  };\n\n  type ipGeolocationResp record {\n  string ip;\n  string country_code2;\n  };\n\n  final string geoApiKey = \"&lt;API key from ipgeolocation.io&gt;\";\n\n  service / on new http:Listener(8090) {\n  resource function post risk(@http:Payload RiskRequest req) returns RiskResponse|error? {\n\n       string ip = req.ip;\n       http:Client ipGeolocation = check new (\"https://api.ipgeolocation.io\");\n       ipGeolocationResp geoResponse = check ipGeolocation-&gt;get(string `/ipgeo?apiKey=${geoApiKey}&amp;ip=${ip}&amp;fields=country_code2`);\n\n       RiskResponse resp = {\n            // hasRisk is true if the country code of the IP address is not the specified country code.\n            hasRisk: geoResponse.country_code2 != \"&lt;Specify a country code of your choice&gt;\"\n       };\n       return resp;\n  }\n  }\n  ```\n</code></pre> </li> <li> <p>Update the following details:       Parameter Description <code>geoApiKey</code> The API key obtained from ipgeolocation. <code>geoResponse.country_code2</code> Country code you would like to allow login attempts. </p> </li> <li> <p>Upload the file to your GitHub repository.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#integrate-the-rest-api-with-choreo","title":"Integrate the REST API with Choreo","text":"<p>To create the REST API component and integrate it with your REST API:</p> <ol> <li> <p>Create an application on WSO2 Choreo to integrate your REST API with your Asgardeo app.</p> <p>!!! note</p> <pre><code>  Note the **Consumer Key** and **Consumer Secret**.\n</code></pre> </li> <li> <p>Create a REST API component on Choreo.</p> </li> <li> <p>Deploy and publish the REST API.</p> </li> <li> <p>Subscribe the application you created on Choreo to the REST API.</p> <p>!!! note       The Choreo application exposes the REST API to external clients. Therefore, you can connect to this application from Asgardeo and invoke the REST API.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#configure-the-login-flow","title":"Configure the login flow","text":"<p>Follow the steps given below.</p> <ol> <li> <p>On the Asgardeo Console, click Develop &gt; Applications.</p> </li> <li> <p>Select the application for which the conditional login flow should apply and go to the Sign-in Method tab.</p> </li> <li> <p>Click Add TOTP as a second factor to define the login flow, starting with <code>username and password</code> and stepping up with <code>TOTP</code>.</p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle.</p> </li> </ol> <p></p> <p>You can now define your conditional authentication script.</p> <ol> <li> <p>Add the following authentication script.</p> <p>!!! warning Important       As a security measure, Asgardeo does not allow the usage of two consecutive full stops (<code>..</code>) in authentication scripts.</p> <pre><code>var connectionMetadata = {\n\"url\": \"&lt;Choreo API URL&gt;\",\n\"consumerKey\": \"&lt;Consumer key of the Choreo application&gt;\",\n\"consumerSecret\": \"&lt;Consumer secret of the Choreo application&gt;\"\n};\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function(context) {\n// Set the IP address of the authentication request as the body of the API call.\nvar requestPayload = {\n\"ip\": context.request.ip\n};\nLog.info(\"Calling the API hosted in Choreo!\");\ncallChoreo(connectionMetadata, requestPayload, {\nonSuccess: function(context, data) {\nLog.info('Received risk:' + data.hasRisk);\nif (data.hasRisk === true) {\n// Prompt the second authentication factor if the hasRisk is true.\nexecuteStep(2);\n}\n},\nonFail: function(context, data) {\nLog.info('Failed to call Choreo API. Stepping up authentication by default.');\nexecuteStep(2);\n},\nonTimeout: function(context, data) {\nLog.info('Call to Choreo API timed out. Stepping up authentication by default.');\nexecuteStep(2);\n}\n});\n}\n});\n};\n</code></pre> </li> <li> <p>Update the following parameters in the script.       Parameter Description <code>url</code> The URL of the Choreo API. <code>consumerKey</code> The consumer key of the Choreo application. <code>consumerSecret</code> The consumer secret of the Choreo application. </p> <p>??? note \"Use a stored <code>Secret</code>\"            If you don't want to enter the <code>consumerkey</code> and <code>consumerSecret</code> obtained from the Choreo application every time you use the conditional authentication script, you can store them as **Secret**s on Asgardeo.</p> <pre><code>       - **Using a stored `consumer key` and `consumer secret` in the conditional authentication script.**\n\n            If you are using a stored `consumerSecret`, replace the `connectionMetadata` object of the conditional authentication script as follows:\n            ```js\n            var connectionMetadata = {\n                 \"url\": \"&lt;Choreo API URL&gt;\",\n                 \"consumerKeyAlias\": \"&lt;The name of the secret that stores the consumer key of Choreo application&gt;\",\n                 \"consumerSecretAlias\": \"&lt;The name of the secret that stores the consumer secret of Choreo application&gt;\"\n            };\n            ```\n\n       - **Add a stored `consumer key` and `consumer secret` to the script.**\n\n            Select the location in the script where the secret should be inserted, click the key icon above the script, and use one of the following options:\n            ![Add secret to script](../../../assets/img/guides/secret/add-secret-to-script.png)\n\n            - If you are adding an existing secret, click \"+\" next to the secret in the drop-down menu.\n            - If you need a new secret, you can first [create a new secret](../../guides/authentication/conditional-auth/configure-conditional-auth/#create-a-new-secret-on-the-console).\n                 Now the new secret will be listed when you click the key icon. You can click \"+\" to add it to the script.\n</code></pre> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#how-it-works","title":"How it works","text":"<p>Let's look at how this script works.</p> <ol> <li> <p>The <code>connectionMetadata</code> object specifies the required values obtained from the WSO2 Choreo application.</p> </li> <li> <p>On successful completion of the authentication step one, <code>onSuccess()</code> callback function is called.</p> </li> <li> <p><code>onSuccess</code> callback function calls the <code>callChoreo()</code> function, which sends an API call to the API hosted on Choreo.</p> </li> <li> <p>If the API call is successful, the <code>onSuccess</code> callback function passed as an argument to the <code>callChoreo( )</code> function is called.</p> <ol> <li>If the <code>hasRisk</code> value in the response is <code>true</code>, step two of the authentication flow is executed.</li> <li>If the API call fails or times out, step 2 of the authentication flow will be executed by default.</li> </ol> </li> </ol>"},{"location":"guides/authentication/conditional-auth/add-authentications-based-on-api-calls/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Try to log in from an IP address within the allowed geolocation. You will successfully log in to the application.</p> </li> <li> <p>Log out of the application.</p> </li> <li> <p>Login from an IP address outside the allowed geolocation. TOTP authentication is prompted.      </p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/","title":"Configure conditional authentication","text":"<p>Given below are the high-level steps for enabling conditional authentication in your application.</p>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#enable-conditional-authentication","title":"Enable conditional authentication","text":""},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#add-conditional-authentication-script","title":"Add conditional authentication script","text":"<p>There are two ways to add a conditional authentication script:</p> <ul> <li>Use a predefined template.</li> <li>Write a new conditional auth script.</li> </ul>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#add-a-secret-to-the-script","title":"Add a secret to the script","text":"<p>Secrets securely store values associated with external APIs. These secret values are used in conditional authentication scripts when Asgardeo is required to interact with an external API (service endpoint) during the authentication process. You can securely store these secret values on the Asgardeo Console and retrieve them whenever required for conditional authentication.</p>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#create-a-new-secret","title":"Create a new secret","text":"<ol> <li> <p>Enable conditional authentication and click the key icon above the script to create a new secret. </p> </li> <li> <p>Click Create new secret from the drop-down menu.</p> </li> <li> <p>Enter the following details:     </p> <p> Parameter Description Secret Name A meaningful name for the secret. This name is not changeable. Secret Value You can enter the secret value that is <code>1</code> to <code>2048</code> bits in length. Secret Description A short description for the secret. </p> </li> <li> <p>Click Finish to complete the creation.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/configure-conditional-auth/#delete-an-existing-secret","title":"Delete an existing secret","text":"<ol> <li> <p>Enable conditional authentication and click the key icon above the script to delete a secret. </p> </li> <li> <p>Click the trash icon next to the secret you wish to delete.</p> </li> <li> <p>Select the checkbox and confirm your action.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/","title":"Add group-based access control","text":"<p>To control access to your application based on the user's group, you can apply the Group-Based conditional authentication template (which is in the Access Control section). Users are redirected to an error page if the user does not belong to any of the groups configured in the template.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#scenario","title":"Scenario","text":"<p>Consider a scenario with two user groups, <code>manager</code> and <code>employee</code>. Login should be allowed to users assigned to these groups.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Create two user groups named <code>manager</code> and <code>employee</code> and assign user accounts to them. For instructions, see the following:</p> <ul> <li>Managing groups</li> <li>Managing users</li> </ul> </li> </ul>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#configure-the-login-flow","title":"Configure the login flow","text":"<ol> <li> <p>Select the Access Control &gt; Group-Based template.</p> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>groupsToAllowAccess</code> An array of user groups that can access the application. For this scenario, enter <code>manager</code> and <code>employee</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the group-based conditional authentication template for access control.</p> <pre><code>// This script will allow access for any user who belongs\n// to one of the given groups.\n// If the user is a member of the following groups, user will be given access.\nvar groupsToAllowAccess = ['manager','employee'];\n\n// Error page to redirect unauthorized users,\n// can be either an absolute url or relative url to server root, or empty/null\n// null/empty value will redirect to the default error page\nvar errorPage = '';\n\n// Additional query params to be added to the above url.\n// Hint: Use i18n keys for error messages\nvar errorPageParameters = {\n'status': 'Unauthorized',\n'statusMsg': 'You are not authorized to login to this application.'\n};\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated subject from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groupsToAllowAccess);\nif (!isMember) {\nsendError(errorPage, errorPageParameters);\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When the first step of the authentication flow is complete, the onLoginRequest function retrieves the user from the context.</li> <li>The user and the configured list of groups are passed to the <code>isMemberOfAnyOfGroups</code> function.</li> <li>The <code>isMemberOfAnyOfGroups</code> function, which is available in Asgardeo by default, verifies whether the given user belongs to any of the listed groups.</li> <li>If the user belongs to any of the configured groups, the user will be able to log in successfully.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template-access-control/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in as a user who belongs to the specified groups. This user will successfully log in to the application.</li> <li>Log out of the application.</li> <li>Log in again as a user who does not belong to the specified groups. The user will see the following error.     </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template/","title":"Add MFA based on user group","text":"<p>You can enable a more secure login flow for users that belong to specific groups by applying the Group-Based conditional authentication template for Adaptive MFA. This template enables two-factor authentication with TOTP for users who belong to the user groups you specify.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario with two user groups, <code>manager</code> and <code>employee</code>. For users assigned to these groups, the login flow in applications should be stepped up with TOTP as follows:</p> <ol> <li>Username and password</li> <li>TOTP</li> </ol> <p></p>"},{"location":"guides/authentication/conditional-auth/group-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Create two user groups named <code>manager</code> and <code>employee</code> and assign user accounts to them. For instructions, see the following:</p> </li> <li>Managing groups</li> <li>Managing users</li> </ul>"},{"location":"guides/authentication/conditional-auth/group-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<ol> <li>Select the Adaptive MFA &gt; Group-Based template.</li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP</li> </ul> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>groupsToStepUp</code> <p>Comma separated list of user groups. Two-factor authentication should apply to users from these groups.</p> For this example scenario, enter <code>manager</code> and <code>employee</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/group-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the group-based conditional authentication template.</p> <pre><code>var groupsToStepUp = ['manager', 'employee'];\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated subject from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groupsToStepUp);\nif (isMember) {\nLog.info(user.username + ' is a member of one of the groups: ' + groupsToStepUp.toString());\nexecuteStep(2);\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When step 1 of the authentication flow is complete, the onLoginRequest function retrieves the user from the context.</li> <li>The user and the configured list of groups are passed to the following function: <code>isMemberOfAnyOfGroups</code>.</li> <li>This function (which is available in Asgardeo by default) verifies whether the given user belongs to any of the listed groups.</li> <li>If the user belongs to any of the configured groups, authentication step 2 (TOTP) is prompted.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/group-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in with a user who does not belong to any of the configured groups (manager or employee). You will    successfully sign in to the application.</li> <li>Log out of the application.</li> <li>Log in with a user who belongs to the <code>manager</code> or <code>employee</code> group or both. TOTP authentication is prompted.     </li> </ol>"},{"location":"guides/authentication/conditional-auth/ip-based-template/","title":"Add MFA based on IP address","text":"<p>You can secure the login flow based on the user's IP address by applying the IP-Based conditional authentication template to your application. This template prompts two-factor authentication for users who log in from outside a given IP range (such as external networks or other geographical locations).</p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where the internal IPs of an organization are as follows: <code>192.168.1.0/24, 10.100.0.0/16</code>. The login flow should be stepped up with TOTP when users log in from outside this IP range as follows:</p> <ol> <li>Username and password</li> <li>TOTP</li> </ol> <p>Users who log in from the internal network should be allowed to simply log in with their username and password.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#prerequisites","title":"Prerequisites","text":"<p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<ol> <li> <p>Select the Adaptive MFA &gt; IP-Based template.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP</li> </ul> </li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>corpNetwork</code> Comma separated list of IP addresses. Two-factor authentication should apply when users log in from outside this range. The default values in the template are <code>192.168.1.0/24</code> and <code>10.100.0.0/16</code>. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the IP-based conditional authentication template.</p> <pre><code>// Configure the network ranges here\nvar corpNetwork = ['192.168.1.0/24', '10.100.0.0/16'];\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar user = context.currentKnownSubject;\n// Extracting the origin IP of the request\nvar loginIp = context.request.ip;\nLog.info('User: ' + user.username + ' logged in from IP: ' + loginIp);\n// Checking if the IP is within the allowed range\nif (!isCorporateIP(loginIp, corpNetwork)) {\nexecuteStep(2);\n}\n}\n});\n};\n\n// Function to convert ip address string to long value\nvar convertIpToLong = function(ip) {\nvar components = ip.split('.');\nif (components) {\nvar ipAddr = 0, pow = 1, i = 3;\nreturn getIpAddrInLong(ipAddr, i, pow, components);\n} else {\nreturn -1;\n}\n};\n\n// Function to convert ip address string to long value\nvar getIpAddrInLong = function(ipAddr, i, pow, components) {\nif (i &gt;= 0) {\nipAddr += pow * parseInt(components[i]);\npow *= 256;\ni -= 1;\nreturn getIpAddrInLong(ipAddr, i, pow, components);\n} else {\nreturn ipAddr;\n}\n};\n\n// Function to check if the ip address is within the given subnet\nvar isCorporateIP = function (ip, subnets, i) {\nif (i === undefined) {\ni = 0;\n}\nif (i &lt; subnets.length) {\nvar subnetComponents = subnets[i].split('/');\nvar minHost = convertIpToLong(subnetComponents[0]);\nvar ipAddr = convertIpToLong(ip);\nvar mask = subnetComponents[1];\nif (subnetComponents &amp;&amp; minHost &gt;= 0) {\nvar numHosts = Math.pow(2, 32 - parseInt(mask));\nif ((ipAddr &gt;= minHost) &amp;&amp; (ipAddr &lt;= minHost + numHosts - 1)) {\nreturn true;\n}\n}\ni++;\nreturn isCorporateIP(ip, subnets, i);\n} else {\nreturn false;\n}\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li> <p>The convertIpToLong function converts and returns the provided IP address as a long value.</p> </li> <li> <p>The isCorporateIP function returns whether the user's IP address is in the given range. This method accepts two inputs. The first argument is the IP address that should be validated and the second argument is the allowed IP range.</p> </li> <li> <p>When step 1 of the authentication flow is complete, the onLoginRequest function retrieves the IP address of the user from the context.</p> </li> <li> <p>This IP address is passed to the isCorporateIP function along with the configured IP address range.</p> </li> <li> <p>If the IP address of the logged-in user is not in the configured IP range, step 2 of the authentication flow is executed.</p> </li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/ip-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Try to log in with a user whose IP address is in the configured range. You will successfully log in to the application.</p> </li> <li> <p>Log out of the application.</p> </li> <li> <p>Log in with a user who does not belong to the configured IP address range. TOTP authentication is prompted.    </p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/","title":"Add MFA based on user device","text":"<p>You can apply the New-Device-Based conditional authentication template to your application to enable a more secure login flow for users who log in from a previously unused device.</p> <p>When the user signs in from a previously unused device, this template enables two-factor authentication and/or sends an email notification when the user passes the first authentication step. A cookie is used to identify whether the device has been used before. When the cookie expires (this expiry time is specified in the template), the same browser or device is considered a new device.</p>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where users who log in to an application from a new device or browser should be prompted with TOTP as a second authentication step. The two authentication steps are as follows:</p> <ol> <li>Username and password</li> <li>TOTP</li> </ol> <p>An email should also be sent to the user with details of the login attempt.</p>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#prerequisites","title":"Prerequisites","text":"<p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<ol> <li> <p>Select the Request &gt; Device-Based template.</p> </li> <li> <p>Verify that the login flow is now updated with the following two authentication steps:</p> <ul> <li>Step 1: Username and Password</li> <li>Step 2: TOTP</li> </ul> </li> <li> <p>Update the following parameters in the script.      Parameter Description <code>sendNotification</code> <p>Specifies whether email notifications should be sent to users.</p> For this scenario, set this parameter to <code>true</code>. <code>cookieName</code> A user-defined cookie name to be used for device identification. <code>deviceRememberPeriod</code> <p>The length of time in seconds for which this device should be remembered as a trusted device. Once this time period passes, login attempts are considered as new device logins.</p>For example, you can specify two years as follows: <code>60 * 60 * 24 * 365 * 2</code> </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the device-based conditional authentication template.</p> <pre><code>// This script will step up authentication and send email notification in case of\n// a user being logging in from a new device (identified by a cookie).\n\n// Amount of time in seconds to remember a device. Set to 2 years below.\nvar deviceRememberPeriod = 60 * 60 * 24 * 365 * 2;\n\n// Cookie name to be set\nvar cookieName = 'deviceAuth';\n\n// Whether to send a notification on new device login\nvar sendNotification = true;\n\n// Whether to step up authentication for new device login\nvar stepUpAuthentication = true;\n\n// Email template to be used for new device login notification\nvar emailTemplate = 'UnseenDeviceLogin';\n\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nsubject = context.currentKnownSubject;\nif (!validateCookie(context, subject)) {\nLog.debug('New device login with ' + subject.uniqueId);\n\nif (sendNotification === true) {\nvar templatePlaceholders = {\n'username': subject.uniqueId,\n'login-time': new Date().toUTCString()\n};\nvar isSent = sendEmail(subject, emailTemplate, templatePlaceholders);\nif (isSent) {\nLog.debug('New device login notification sent to ' + subject.uniqueId);\n} else {\nLog.debug('New device login notification sending failed to ' + subject.uniqueId);\n}\n}\n\nif (stepUpAuthentication === true) {\nLog.debug('Stepping up authentication due to a new device login with ' + subject.uniqueId);\nexecuteStep(2, {\nonSuccess: function (context) {\nsetCookie(context.response, cookieName, subject.uniqueId, {\n'sign': true,\n'max-age': deviceRememberPeriod,\n'sameSite': 'LAX'\n});\n}\n});\n}\n}\n}\n});\n};\n\n//Validate if the user has a valid cookie with the value as subject's username\nvar validateCookie = function(context, subject) {\nvar cookieVal = getCookieValue(context.request, cookieName, {'validateSignature': true});\nreturn subject.uniqueId === cookieVal;\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li> <p>The validateCookie function verifies whether the user has a valid cookie for the logged-in user. This function calls the getCookieValue(request, name, properties) function. The cookie name is configured with the cookieName parameter.</p> </li> <li> <p>When step 1 of the authentication flow is complete, the onLoginRequest function validates the deviceAuth cookie.</p> </li> <li> <p>If there is no valid cookie found, the function checks whether the sendNotification and stepUpAuthentication parameters are enabled.</p> </li> <li> <p>If the sendNotification property is enabled, the sendEmail(user, templateId, placeholderParameters) function is called to send the notification email with the login timestamp. The email template is set as UnseenDeviceLogin in the emailTemplate variable.</p> </li> <li> <p>If the stepUpAuthentication parameter is enabled, step 2 of the authentication flow is executed.</p> </li> <li> <p>On the successful execution of step 2 of the authentication flow, the setCookie(response, name, value, properties) function is called to set a deviceAuth cookie.</p> </li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/new-device-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL from a new device/browser.</p> </li> <li> <p>Try to log in to the application. TOTP authentication is prompted and the configured email of the user receives the email notification.     </p> </li> <li> <p>Log out of the application.</p> </li> <li> <p>Log in with the same user from the same device/browser. You will successfully log in to the application with only the basic authentication.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/sign-in-option-based-template/","title":"Add MFA based on user sign-in option","text":"<p>You can enable a more secure sign-in flow (based on the user's sign-in method) by applying the Sign-In-Option-Based conditional authentication template to your application.</p>"},{"location":"guides/authentication/conditional-auth/sign-in-option-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where your application has multiple authentication methods configured as the first authentication step. You need to secure the sign-in flow for users signing in through a selected method of authentication (ex: basic authentication). If the user sign-in with the specified authentication method, the second authentication step is prompted. Users signing in from an authentication method which is not specified in the script can simply sign in using only the first step.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/sign-in-option-based-template/#prerequisites","title":"Prerequisites","text":"<p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p>"},{"location":"guides/authentication/conditional-auth/sign-in-option-based-template/#configure-the-sign-in-flow","title":"Configure the sign-in flow","text":"<p>Follow the steps given below.</p> <ol> <li>On the Asgardeo Console, click Applications.</li> <li>Select the application for which you wish to apply a conditional login flow and go to its Sign-in Method tab.</li> <li>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</li> <li> <p>Add other authenticators alongside username and password for step one in the sign-in flow.</p> <p>::: tip \"Example\"     For example:  <code>username and password</code> + <code>Google</code> + <code>Facebook</code></p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle.</p> </li> </ol> <p></p> <p>You can now define your conditional authentication script.</p> <p>!!! warning Important    As a security measure, Asgardeo does not allow the usage of two consecutive full stops (<code>..</code>) in authentication scripts.    :::</p> <ol> <li>Select the Adaptive MFA &gt; Sign-In-Option-Based template.</li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>signInOptionToStepUp</code> Parameter to define the sign-in option to which the second authentication step should apply. It can be configured as follows:                 <ul> <li>For basic authentication using username and password use <code>LOCAL</code> as the parameter value.</li> <li>For federated IdPs use the name of the IdP as the parameter value (Ex: <code>Facebook</code>, <code>Google</code>, <code>Github</code>).</li> </ul> </p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/sign-in-option-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the script of the sign-in-option-based conditional authentication template.</p> <pre><code>// This script will step up authentication and prompt TOTP in case when\n// user sign-in with configured sign-in option.\n// Set the required sign-in option that requires step up authentication.\nvar signInOptionToStepUp = 'LOCAL';\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar step = context.steps[1];\nif (step.idp == signInOptionToStepUp) {\nexecuteStep(2);\n}\n}\n});\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>When step 1 of the authentication flow is complete, the onLoginRequest function retrieves the first authentication method from the context.</li> <li>The function verifies whether the given authentication method belongs to the method mentioned in <code>signInOptionToStepUp</code>.</li> <li>If the first authentication method is the authentication method in <code>signInOptionToStepUp</code>, authentication step 2 (TOTP) is prompted.</li> </ol>"},{"location":"guides/authentication/conditional-auth/sign-in-option-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to sign in to the application with an authenticator that is not specified in the script. You will successfully sign in to the application.</li> <li>Log out of the application.</li> <li>Sign in with the authenticator specified in the script. TOTP authentication is prompted.    </li> </ol>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/","title":"Add user age-based access control","text":"<p>To control access to your application based on the user's age, you can apply the Age-Based conditional authentication template. The age of the user is calculated using the <code>date of birth</code> attribute in the user's profile. Users are redirected to an error page if the date of birth is not specified in the user profile or if the user's age is below the minimum age configured in the template.</p>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#scenario","title":"Scenario","text":"<p>Consider a scenario where users who are younger than 18 years should be prevented from signing in to an application and redirected to an error message.</p> <p></p>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Go to the user's profile and update the birth date so that the current age is below 18 years. For instructions, see Manage user profiles.</p> </li> </ul>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#configure-the-login-flow","title":"Configure the login flow","text":"<ol> <li>Select the Access Control &gt; Age-Based template.</li> <li> <p>Update the following parameter in the script.</p> <p> Parameter Description <code>ageLimit</code> <p>Minimum age required for the user to log in to the application.</p>For this example scenario, enter <code>18</code> as the value. <code>errorPage</code> The error page to which users are redirected if the age limit is below age limit. The default error page is used if this parameter is not configured. <code>errorPageParameters</code> Parameters to be passed to the error page. This information will display on the error page. </p> </li> <li> <p>Click Update to confirm.</p> </li> </ol>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#how-it-works","title":"How it works","text":"<p>Shown below is the user age-based conditional authentication template.</p> <pre><code>// This script will only allow login to application if the user's age is over configured value\n// The user will be redirected to an error page if the date of birth is not present or user is below configured value\n\nvar ageLimit = 18;\n\n// Error page to redirect unauthorized users,\n// can be either an absolute url or relative url to server root, or empty/null\n// null/empty value will redirect to the default error page\nvar errorPage = '';\n\n// Additional query params to be added to the above url.\n// Hint: Use i18n keys for error messages\nvar errorPageParameters = {\n'status': 'Unauthorized',\n'statusMsg': 'You need to be over ' + ageLimit + ' years to login to this application.'\n};\n\n// Date of birth attribute at the client side\nvar dateOfBirthClaim = 'http://wso2.org/claims/dob';\n\n// The validator function for DOB. Default validation check if the DOB is in YYYY-MM-dd format\nvar validateDOB = function (dob) {\nreturn dob.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n};\n\nvar onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar underAge = true;\n// Extracting user store domain of authenticated subject from the first step\nvar dob = context.currentKnownSubject.localClaims[dateOfBirthClaim];\nLog.debug('DOB of user ' + context.currentKnownSubject.uniqueId + ' is : ' + dob);\nif (dob &amp;&amp; validateDOB(dob)) {\nvar birthDate = new Date(dob);\nif (getAge(birthDate) &gt;= ageLimit) {\nunderAge = false;\n}\n}\nif (underAge === true) {\nLog.debug('User ' + context.currentKnownSubject.uniqueId + ' is under aged. Hence denied to login.');\nsendError(errorPage, errorPageParameters);\n}\n}\n});\n};\n\nvar getAge = function(birthDate) {\nvar today = new Date();\nvar age = today.getFullYear() - birthDate.getFullYear();\nvar m = today.getMonth() - birthDate.getMonth();\nif (m &lt; 0 || (m === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {\nage--;\n}\nreturn age;\n};\n</code></pre> <p>Let's look at how this script works.</p> <ol> <li>The validateDOB function validates whether the provided date of birth is correct.</li> <li>The getAge function calculates the age based on the configured birth date.</li> <li>When step 1 of the authentication flow is complete, the onLoginRequest function checks whether the age of the user is above the configured age limit.</li> <li>If the age is below the configured limit, the user is directed to the configured error page.</li> </ol> <p>Note</p> <p>Find out more about the scripting language in the Conditional Authentication API Reference.</p>"},{"location":"guides/authentication/conditional-auth/user-age-based-template/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Try to log in as a user who is above 18 years of age. This user will successfully log in to the application.</li> <li>Log out of the application.</li> <li>Log in again with a user who is below 18 years. The user will see the following error.     </li> </ol>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/","title":"Write a custom authentication script","text":"<p>Follow this guide to write a conditional authentication script from scratch and to understand its internals.</p>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#scenario","title":"Scenario","text":"<p>Let's consider the following simplified set of requirements for your business application:</p> <ul> <li>User tries to log in to an application with username and password authentication.</li> <li>If the user belongs to the manager or employee group, they can access the application. Other users should not be allowed to access the application.</li> </ul> <p></p>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Customize the login flow in your application and enable <code>Username and Password</code> authentication.</p> </li> <li> <p>Create two user groups named <code>manager</code> and <code>employee</code> and assign user accounts to them. For instructions, see the following:</p> </li> <li>Managing groups</li> <li>Managing users</li> </ul>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#start-with-the-default-script","title":"Start with the default script","text":"<p>To start off, configure conditional authentication for your application and check the default script once you enable the two steps authentication.</p> <p><pre><code>var onLoginRequest = function(context) {\nexecuteStep(1);\n};\n</code></pre> The above scripts do not have any conditional authentication. It allows all users to access the application after successful authentication through <code>username and password</code>.</p>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#implement-onsuccess-callback","title":"Implement onSuccess callback","text":"<p>Now, let's implement what happens when username and password authentication is successful. You can use the onSuccess eventCallback.</p> <pre><code>var onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Implement what to do when Step 1 authentication is success.\n}\n});\n};\n</code></pre>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#get-user-object","title":"Get user object","text":"<p>If username and password authentication is successful, let's get the user from the context. You can use <code>context.currentKnownSubject</code>.</p> <pre><code>var groups = ['employee', 'manager'];\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated user from the first step.\nvar user = context.currentKnownSubject;\n}\n});\n};\n</code></pre>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#check-membership-of-the-user","title":"Check membership of the user","text":"<p>Now, let's check whether the user is a member of <code>manager</code> or <code>employee</code>. You can use the isMemberOfAnyOfGroups(user, groups) utility function.</p> <p>Refer the inbuilt functions to get to know more existing functions.</p> <pre><code>var groups = ['employee', 'manager'];\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated user from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groups);           }\n});\n};\n</code></pre>"},{"location":"guides/authentication/conditional-auth/write-your-first-script/#fail-authentication","title":"Fail authentication","text":"<p>If the user is not a member, fail the authentication and redirect the user to the application with some error code.</p> <pre><code>var groups = ['employee', 'manager'];\nvar errorCode = 'access_denied';\nvar errorMessage = 'You do not have access to login to this app';\n\nvar onLoginRequest = function (context) {\nexecuteStep(1, {\nonSuccess: function (context) {\n// Extracting authenticated user from the first step.\nvar user = context.currentKnownSubject;\n// Checking if the user is assigned to one of the given groups.\nvar isMember = isMemberOfAnyOfGroups(user, groups);\nif (!isMember) {\nfail({'errorCode': errorCode, 'errorMessage': errorMessage});\n}  }\n});\n};\n</code></pre> <p>You have now written a conditional authentication script for the group-based access control scenario.</p> <p>Similarly, you can build your own scripts to handle many scenarios using the API references.</p>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/","title":"Sign-In With Ethereum","text":"<p>Sign-In With Ethereum is an open standard for authentication that enables users to control their digital identity with their Ethereum account. The integration uses the open-source OIDC Provider built by Login.xyz which is hosted under oidc.signinwithethereum.org.</p> <p>Follow this guide for instructions on how to set up Sign-In With Ethereum in Asgardeo.</p>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#register-asgardeo-in-sign-in-with-ethereum","title":"Register Asgardeo in Sign-In With Ethereum","text":"<p>You need to register Asgardeo as an OIDC client application in <code>oidc.signinwithethereum.org</code>.</p> <p>Note</p> <p>Follow the Sign-In With Ethereum documentation for detailed instructions.</p> <ol> <li> <p>To register a new OIDC client, use the following <code>curl</code> command.</p> <p>Note</p> <p>Replace {organization_name} with the name of your organization.</p> <pre><code>curl -X POST https://oidc.signinwithethereum.org/register\n-H 'Content-Type: application/json' -d  '{\"redirect_uris\": [\"https://api.asgardeo.io/t/{organization_name}/commonauth\"]}'\n</code></pre> </li> <li> <p>Take a note of the <code>client_id</code> and <code>client_secret</code> returned from the response.</p> <p>The following is an example response:</p> <pre><code>{\n\"client_id\": \"9b49de48-d198-47e7-afff-7ee26cbcbc95\",\n\"client_secret\": \"{secret}\",\n\"registration_access_token\": \"{access_token}\",\n\"registration_client_uri\": \"https://oidc.signinwithethereum.org/client/9b49de48-d198-47e7-afff-7ee26cbcbc95\",\n\"redirect_uris\": [\"https://api.asgardeo.io/t/&lt;organization_name&gt;/commonauth\"]\n}\n</code></pre> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#register-the-sign-in-with-ethereum-idp","title":"Register the Sign-In With Ethereum IdP","text":"<p>Follow the steps below to register the Sign-In With Ethereum IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li>Click Create Connection and select Sign-In With Ethereum.</li> <li> <p>Enter the following details of the Sign-In With Ethereum identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Sign-In With Ethereum identity provider. Client ID The client ID obtained from oidc.signinwithethereum.org. Client secret The client secret obtained from oidc.signinwithethereum.org. </p> </li> <li> <p>If required, enable JIT provisioning.</p> <p>Note</p> <p>If JIT provisioning is enabled, when a user successfully logs in with Sign-In With Ethereum for the first time, a user account is created in the Asgardeo Console with the wallet ID. This new user account will be managed by Ethereum. Note that JIT provisioning is disabled by default.</p> </li> <li> <p>In the created connection, go to the Settings tab and see the list of scopes to which Sign-In With Ethereum has granted permissions.</p> <ul> <li>openid: Engages the OpenID flow.</li> <li>profile: Allows to view the user's basic profile data.</li> </ul> <p>Note</p> <p>Asgardeo needs these scopes to get user information. Asgardeo checks the attribute configurations of the application and sends the relevant attributes received from Sign-In With Ethereum to the app.</p> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#enable-sign-in-with-ethereum","title":"Enable Sign-In With Ethereum","text":"<p>The following guide shows you how to enable Sign-In With Ethereum in an application.</p> <p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Select your application and go to its Sign-in Method tab.</p> </li> <li> <p>If you haven't defined a sign-in flow for the application, click Start with Default configuration to define a login flow with a username and a password.</p> </li> <li> <p>Click Add Authentication in the same step as the default configuration.</p> </li> <li> <p>From the list of connections that appear, select the Sign-In With Ethereum connection that you created and click Add.     </p> </li> <li> <p>Click Update to save the changes.</p> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application that you previously registered with Asgardeo.</li> <li>Click Login to redirect to the Asgardeo login page.</li> <li> <p>On the Asgardeo login page, choose the Sign-In With Ethereum IdP to log in.</p> <p>Note</p> <p>You will be redirected to the login interface of Sign-In With Ethereum.</p> <p></p> </li> <li> <p>Click Sign-In With Ethereum again to log in.</p> <p></p> </li> <li> <p>Select a preferred Ethereum wallet.</p> <p></p> </li> <li> <p>Sign the login request to log in to the application.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/decentralized-login/sign-in-with-ethereum/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/","title":"Add login with an OpenID Connect identity provider","text":"<p>You can add standard OpenID Connect login  to your applications using an external OpenID Connect (OIDC) identity provider (IdP) and enable users to log in to your applications while maintaining their accounts in the external identity providers.</p> <p>Follow this guide to register an OIDC IdP in Asgardeo and add it to the login flow of your application.</p>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#register-asgardeo-in-the-idp","title":"Register Asgardeo in the IdP","text":"<p>You need to register an OpenID Connect application with the external identity provider. Follow the identity provider's documentation to know how to register an OIDC application.</p> <p>You can use the following URL as the callbackURL of the application.</p> <p><pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/commonauth\n</code></pre> Once you register an application, you will receive the following:</p> <ul> <li>client_id (also known as <code>app_id</code> or <code>application_id</code>)</li> <li>client_secret (also known as <code>app_secret</code>)</li> </ul> <p>Check the documentation of the OIDC identity provider and get the following endpoints:</p> <ul> <li>Authorization Endpoint URL</li> <li>Token Endpoint URL</li> <li>User Info endpoint (optional)</li> <li>Logout endpoint (optional)</li> </ul>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#register-the-oidc-idp","title":"Register the OIDC IdP","text":"<p>Now, let's register the OIDC IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, click Connections.</li> <li>Click Create Connection and select Standard-Based IdP.</li> <li> <p>Provide a unique identity provider name, select OpenID Connect, and click Next.    </p> </li> <li> <p>Enter the following details of the external OIDC identity provider and click Next:</p> <p> Parameter Description Client ID The client ID obtained from the external identity provider. Client secret The client secret obtained from the external identity provider. Authorization endpoint URL The authorization endpoint of the external identity provider. Token endpoint URL The token endpoint of the external identity provider. </p> </li> <li> <p>(Optional) Provide the mode of certificate configuration.</p> <p>Note</p> <p>You can either configure a JWKS endpoint or upload a certificate of the external party. This helps to validate the signature of the assertions sent by the external identity provider.</p> <ul> <li>JWKS endpoint: The JWKS endpoint of the external identity provider.</li> <li> <p>Use PEM certificate : Upload or paste the public certificate of the external identity provider. The certificate should be in PEM format.</p> If you have certificate in other formats such as <code>.crt</code>, <code>.cer</code> or <code>.der</code>, expand here to see how you can convert them to PEM format using OpenSSL<p>Convert CRT to PEM <pre><code>openssl x509 -in cert.crt -out cert.pem\n</code></pre> Convert CER to PEM: <pre><code>openssl x509 -in cert.cer -out cert.pem\n</code></pre> Convert DER to PEM: <pre><code>openssl x509 -in cert.der -out cert.pem\n</code></pre></p> </li> </ul> </li> <li> <p>Click Finish to complete the registration.</p> </li> </ol> <p>Note</p> <p>Once the OIDC identity provider is created, you can configure additional OIDC settings from the Settings tab.</p> <p>Asgardeo requests for the openid scope from the external identity provider. If you need more attributes from the external identity provider, you can configure scopes from the Settings tab.</p>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#enable-the-oidc-idp-for-login","title":"Enable the OIDC IdP for login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li> <p>On the Asgardeo Console, click Applications.</p> </li> <li> <p>Open your application from the list and go to the Sign-in Method tab.</p> </li> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the step, select your OIDC identity provider, and click Add.</p> <p>Note</p> <p>Asgardeo recommends adding your social and enterprise connections to the first authentication step as they are used for identifying the user.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#how-it-works","title":"How it works","text":"<p>To provide this login capability, Asgardeo uses the standard OpenID Connect with authorization code flow  underneath. For an application, this flow works as follows:</p> <p></p>"},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/enterprise-login/add-oidc-idp-login/#related-links","title":"Related links","text":"<ul> <li>Configure JIT user provisioning</li> <li>Configure OIDC IdP settings</li> </ul>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/","title":"Add login with a SAML identity provider","text":"<p>You can add standard SAML login to your applications using an external SAML identity provider (IdP) and enable users to log in to your applications while maintaining their accounts in the external identity providers.</p> <p></p> <p>Follow this guide to register a SAML IdP in Asgardeo and add it to the login flow of your application.</p>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#register-asgardeo-in-the-idp","title":"Register Asgardeo in the IdP","text":"<p>You need to register Asgardeo as a SAML application in the external identity provider. Follow the identity provider's documentation to know how to register a SAML application.</p> <p>You can use the following URL as the Assertion Consumer Service URL (also known as callback URL/ redirect URL/ ACS URL) in the application that represents Asgardeo.</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/commonauth\n</code></pre> <p>After you register the app, you should get the required configurations as explained below.</p> <ul> <li> <p>If you are manually applying the IdP configurations to Asgardeo, you need the following configurations:</p> <ul> <li>Issuer (also known as entityId)</li> <li>Single sign on URL of the identity provider (also known as login URL)</li> <li>Identity Provider Certificate</li> </ul> </li> <li> <p>If you are using metadata to apply the IdP configurations to Asgardeo, you need the following:</p> <ul> <li>SAML IdP metadata file of the identity provider</li> <li>Identity Provider Certificate</li> </ul> </li> </ul>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#register-the-saml-idp","title":"Register the SAML IdP","text":"<p>Now, let's register the SAML IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, click Connections.</li> <li>Click New Connections and select Standard-Based IdP.</li> <li> <p>Provide a unique identity provider name, select SAML, and click Next.    </p> </li> <li> <p>Select one of the following methods and add the SAML configurations:</p> <p> File Based Configuration <p>Upload a SAML metadata file with the required configurations.</p> See Use a SAML metadata file. Manual Configuration <p>Use this option to manually specify the required SAML configurations.</p> See Add SAML configs manually. </p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#add-saml-configs-manually","title":"Add SAML configs manually","text":"<p>If you selected Manual Configuration in the previous step, follow the steps given below.</p> <ol> <li> <p>Enter the following details and click Next.</p> <p></p> <p> Parameter Description Service provider entity ID  This value will be used as the <code>saml2:Issuer</code> in the SAML requests initiated from Asgardeo to the external identity provider (IdP). Identity provider Single Sign-On URL This vlaue specifies the single sign-on URL of the external IdP. This is where Asgardeo will send its authentication requests. You need to get this value from the external IdP. Identity provider entity ID This is the <code>saml2:Issuer</code> value specified in the SAML responses issued by the external IdP. You need to get this value from the external IdP. </p> </li> <li> <p>(Optional) Upload the public certificate of the identity provider.</p> </li> <li>Click Finish to complete the registration.</li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#use-a-saml-metadata-file","title":"Use a SAML metadata file","text":"<p>If you selected File Based Configuration in the previous step, follow the steps given below.</p> <p>Note</p> <p>A SAML IdP metadata file contains the following: - IdP identifiers (<code>entityID</code> or <code>Issuer</code>) - Endpoints (single sign-on URLs, single logout URLs, etc) - Supported bindings</p> <ol> <li> <p>Specify the service provider entity ID.</p> <p>Note</p> <p>This value will be used as the <code>saml2:Issuer</code> in the SAML requests initiated from Asgardeo to the external identity provider (IdP).</p> </li> <li> <p>Upload the IdP metadata file and click Next.</p> <p></p> </li> <li> <p>(Opional) Upload the public certificate of the identity provider.</p> </li> <li>Click Finish to complete the registration.</li> </ol> <p>Note</p> <p>Once the SAML identity provider is created, you can configure additional SAML settings from the Protocol tab.</p>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#enable-the-saml-idp-for-login","title":"Enable the SAML IdP for login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the Asgardeo Console, click Applications.</li> <li>Open your application from the list and go to the Sign-in Method tab.</li> <li>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</li> <li> <p>Click Add Authentication on the step, select your SAML identity provider, and click Add.</p> <p>Note</p> <p>Asgardeo recommends adding your social and enterprise connections to the first authentication step as they are used for identifying the user.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#configure-user-attributes","title":"Configure user attributes","text":"<p>Configuring attributes for an identity provider involves mapping the attributes available in the external SAML IdP to attributes that are local to Asgardeo. This is done so that Asgardeo can identify the user attributes in the response sent from the external SAML IdP.</p> <ol> <li>On the Asgardeo Console, click Connections.</li> <li>Select the SAML IdP connection from the list and click Set up.</li> <li>Go to the Attributes tab and click Add IdP Attributes.     </li> <li> <p>Provide the following values and click Add Attribute Mapping.</p> <p></p> <p> Parameter Description External IdP Attribute The attribute from the external IdP that should be mapped to the local attribute. Maps to The local attribute to which the external IdP attribute is mapped. </p> </li> <li> <p>Select one of the mapped attributes as the subject attribute for your application and click Update.</p> <p></p> <p>Note</p> <p>By default, Asgardeo uses the subject attribute sent by the external SAML IdP as the subject identifier. To configure a different attribute as the subject, enable the Find user ID from requests from the Settings tab of the SAML IdP.</p> </li> </ol>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#how-it-works","title":"How it works","text":"<p>Consider a scenario where a SAML IdP returns the authenticated user's nickname and profile updated time to Asgardeo in the SAML authentication response as follows:</p> <ul> <li>http://schemas.idp.com/nickname   : nickname</li> <li>http://schemas.idp.com/updated_at : profile updated time</li> </ul> <p>You may want to convert them to the local attribute URI so that the application can receive them in the local attribute URI. If you don't do that mapping, the application will receive the attributes as sent by the external IdP.</p> <p>A sample IdP attribute mapping done from the Asgardeo Console:</p> <p></p> <p>Sample attributes in the SAML assertion of the integrated SAML app:</p> <pre><code>&lt;saml2:AttributeStatement&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/modified\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;Mon Aug 30 2021 07:26:40 GMT+0000 (Coordinated Universal Time)&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/nickname\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;John&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;/saml2:AttributeStatement&gt;\n</code></pre> <p>Sample subject attribute in the assertion looks as shown below:</p> <pre><code>&lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;John&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"jimhbeljflkppacldhnjcfjkhoobkddhngnkamom\"\nNotOnOrAfter=\"2021-08-30T09:49:21.336Z\"\nRecipient=\"http://localhost:8081/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;/saml2:Subject&gt;\n</code></pre>"},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/enterprise-login/add-saml-idp-login/#related-links","title":"Related links","text":"<ul> <li>Configure JIT user provisioning</li> <li>Configure SAML IdP settings</li> </ul>"},{"location":"guides/authentication/mfa/","title":"Add multi-factor authentication","text":"<p>Multi-Factor Authentication (MFA) allows you to grant access to your resources by using two (2-Factor) or more (Multi-Factor) factors to authenticate users. If one factor is compromised or broken, an attacker still has at least one more barrier to breach before successfully breaking into the resource. MFA provides an additional layer of security to the resource.</p> <p>Authentication factors in MFA rely on two or more independent credentials of the three categories given below.</p> <ul> <li>Knowledge factor  - Something you know, such as a password or a PIN.</li> <li>Possession factor - Something you have, such as a FIDO key or an ATM card.</li> <li>Inherence factor  - Something you are, such as your fingerprint or your iris pattern.</li> </ul> <p>On Asgardeo, the default authentication mechanism is username and password.</p> <p></p> <p>The Asgardeo Console allows configuring multi-step authentication where you can define an authentication chain containing different authenticators in each step. By adding different authenticators, you can achieve a login flow secured by multiple factors.</p> <p></p> <p>You can choose to replace the username and password authentication with social or enterprise logins and add a few more authenticators to build your authentication chain.</p>"},{"location":"guides/authentication/mfa/#configure-multi-factor-authentication","title":"Configure multi-factor authentication","text":"<p>Given below are the main steps you will follow when enabling MFA in your login flow.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications and select the application to which MFA needs to be added.</p> </li> <li> <p>Go to the Sign-in Method tab where the application login flow is defined.</p> </li> <li> <p>Select Add Authentication and add the required authenticators that should be enforced at each step.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/mfa/#whats-next","title":"What's next?","text":"<p>Learn how to enable MFA using the following authenticators:</p> <ul> <li>TOTP</li> <li>Email OTP</li> <li>SMS OTP</li> </ul>"},{"location":"guides/authentication/mfa/add-emailotp-login/","title":"Add MFA with Email OTP","text":"<p>Email OTP is a One-Time Password (OTP) sent to the user's verified email address, which the user must submit during login (as an additional authentication step). This password is typically valid for a very short period of time.</p> <p>During Email OTP authentication, the user is required to access the verified email account within a short time span to get the OTP. This prevents unauthorized users from accessing the OTP, and thereby adds an extra layer of security to the authentication process.</p> <p>Follow the instructions given below to configure Multi-Factor Authentication (MFA) using Email OTP in Asgardeo.</p>"},{"location":"guides/authentication/mfa/add-emailotp-login/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <p>Info</p> <p>You can use Email OTP for multi-factor authentication only if a previous authentication step is configured with username and password or another factor that can validate user credentials.</p>"},{"location":"guides/authentication/mfa/add-emailotp-login/#set-up-email-otp","title":"Set up Email OTP","text":"<p>Asgardeo has some default settings for email OTP, which are sufficient for most cases. If required, you can change the default settings as explained below.</p> <p>To update the default Email OTP settings:</p> <ol> <li>On the Asgardeo Console, go to Connections and select Email OTP.</li> <li> <p>Update the following parameters in the Settings tab:</p> <p></p> <p> Email OTP expiry time Specifies the expiry time of the OTP. The generated OTP will not be valid after this expiry time. Use only numeric characters for OTP          Specifies whether to use only numeric characters in the OTP. If this is selected, the generated OTP contains only digits (0-9).         If this option is not selected, the OTP will contain alphanumeric characters.      Email OTP length Specifies the number of characters allowed in the OTP.  3. Once you update the Email OTP settings, click Update.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-emailotp-login/#enable-email-otp-for-an-app","title":"Enable Email OTP for an app","text":"<p>To enable Email OTP for MFA, you need to add Email OTP in the authentication flow of the application.</p> <p>Follow the steps given below.</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select the application to which you wish to add Email OTP.</li> <li> <p>Go to the Sign-in Method tab of the application and:</p> <ul> <li> <p>If you don't have a customized login flow, you can click Add Email OTP as a second factor.</p> <p></p> <p>This opens the customized login flow with TOTP as a second-factor authenticator:</p> </li> <li> <p>If you have an already customized login flow, you can add a second step and add TOTP as the authenticator.</p> <p></p> </li> </ul> <p>Enable backup codes</p> <p>Once the Email OTP authenticator is added, select Enable backup codes. This allows users to use their backup codes to log in to the application when they cannot obtain the required MFA codes.</p> <p></p> <p>Learn more about configuring backup codes for business users.</p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-emailotp-login/#how-it-works","title":"How it works","text":"<p>When Email OTP is enabled in the login flow of your application, the application user will be prompted with the Email OTP authentication step once the first authentication step is completed. Given below are the high-level steps that follow:</p> <ol> <li>Asgardeo sends the OTP to the user's verified email address.</li> <li>Asgardeo prompts the user to enter the OTP code.    </li> <li>If required, the user can request Asgardeo to resend the OTP. The new OTP invalidates the previously sent OTP.</li> <li>The user enters the OTP and clicks Continue.</li> <li>If the authentication is successful, the user can access the application.</li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/","title":"Add MFA with SMS OTP","text":"<p>SMS OTP is a One-Time Password (OTP) sent to the user's registered mobile number on Asgardeo. The OTP is typically valid for a short period, preventing unauthorized users from accessing the OTP and thereby adding an extra layer of security to the authentication process.</p> <p>Follow the instructions below to configure MFA using SMS OTP in Asgardeo.</p>"},{"location":"guides/authentication/mfa/add-smsotp-login/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <p>Note</p> <ul> <li>You can use SMS OTP for multi-factor authentication only if a previous authentication step is configured with <code>username and password</code>, <code>magic link</code>, or any federated authenticator.</li> <li>SMS OTP cannot be used as the first step in your login flow.</li> <li>Asgardeo SMS OTP uses Asgardeo events to publish the OTP Notification data.</li> </ul>"},{"location":"guides/authentication/mfa/add-smsotp-login/#set-up-sms-otp","title":"Set up SMS OTP","text":"<p>To enable SMS OTP for the organization:</p> <ol> <li>On the Asgardeo Console, go to Connections and select SMS OTP.</li> <li> <p>Update the following parameters in the Settings tab:</p> <p></p> <p> SMS OTP expiry time The generated OTP will not be valid after this expiry time. Use only numeric characters for OTP If this checkbox is checked, the generated OTP will only contain digits (0-9).         If the checkbox is unchecked, the OTP will contain alphanumeric characters.      SMS OTP length Specifies the number of characters allowed in the OTP. </p> </li> <li> <p>Click update to save your configurations.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#add-sms-otp-for-an-app","title":"Add SMS OTP for an app","text":"<p>To add SMS OTP to the authentication flow of the app:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select the application to which you wish to add SMS OTP.</li> <li> <p>Go to the Sign-in Method tab of the application and:</p> <ul> <li>If you don't have a customized login flow, you can click Add SMS OTP as a second factor.</li> </ul> <p></p> <p>This opens the customized login flow with TOTP as a second-factor authenticator:</p> <ul> <li>If you have an already customized login flow, you can add a second step and add TOTP as the authenticator.</li> </ul> <p></p> <p>Note</p> <p>Once the SMS OTP authenticator is added, select Enable backup codes. This allows users to use their backup codes to log in to the application when they cannot obtain the required MFA codes.</p> <p></p> <p>Learn more about configuring backup codes for business users.</p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#create-a-webhook-to-consume-otp-notifications","title":"Create a webhook to consume OTP notifications","text":"<p>Asgardeo's SMS OTP authenticator uses Asgardeo events to publish the OTP Notification data. You can consume these notifications by creating webhooks in Choreo.</p> <p>To create a webhook on Choreo:</p> <ol> <li> <p>Create an organization in Choreo with the same name and email address you used to create your Asgardeo organization.</p> <p>Note</p> <p>Organizations in Asgardeo and Choreo will synchronize based on the organization name.</p> </li> <li> <p>Select the Default Project under All Projects. Alternatively, you can create a new project or use an existing project.</p> </li> <li> <p>Start creating a webhook in Choreo from the list of components. Learn more about webhooks in the Choreo documentation.</p> <p></p> </li> <li> <p>Provide general details of the webhook and click Next</p> <p></p> </li> <li> <p>Authorize and connect the Github repository that you want your webhook code to be hosted on and click Next.</p> <p>Note</p> <p>Be sure to select Start with a sample, which will create a pull request in your Github repository with the starter code required for the webhook.</p> <p></p> </li> <li> <p>Select Asgardeo as the Trigger Type and click Next.</p> <p></p> </li> <li> <p>Select NotificationService as the Trigger Channel and click Create.</p> <p>Note</p> <p>The <code>NotificationService</code> trigger channel listens to all notification events from the organization in Asgardeo</p> <p></p> </li> <li> <p>After the webhook is created, Choreo will create a pull request in your connected Github repository with the sample starter code. Go to your repository and merge this code to complete the setup.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#define-the-business-logic","title":"Define the business logic","text":"<ol> <li> <p>Navigate to your connected Github repository and open the webhook.bal file. Your boilerplate code may look as below.</p> <pre><code>import ballerinax/trigger.asgardeo;\nimport ballerina/http;\n\nconfigurable asgardeo:ListenerConfig config = ?;\n\nlistener http:Listener httpListener = new(8090);\nlistener asgardeo:Listener webhookListener =  new(config,httpListener);\n\nservice asgardeo:NotificationService on webhookListener {\n\nremote function onSmsOtp(asgardeo:SmsOtpNotificationEvent event ) returns error? {\n//Not Implemented\n}\n}\n\nservice /ignore on httpListener {}\n</code></pre> </li> <li> <p>Define your business logic in the webhook.bal file.</p> <p>Note</p> <p>The following sample logic is defined on an Asgardeo webhook that uses the <code>NotificationService</code> trigger channel. This webhook is programmed to send the SMS Message via an SMS Gateway.</p> <pre><code>import ballerinax/trigger.asgardeo;\nimport ballerina/http;\nimport ballerina/log;\nimport wso2/choreo.sendsms;\n\nconfigurable asgardeo:ListenerConfig config = ?;\n\nlistener http:Listener httpListener = new(8090);\nlistener asgardeo:Listener webhookListener =  new(config,httpListener);\n\nsendsms:Client sendSmsClient = check new ();\n\nservice asgardeo:NotificationService on webhookListener {\n\nremote function onSmsOtp(asgardeo:SmsOtpNotificationEvent event) returns error? {\n\n//logging the event.\nlog:printInfo(event.toJsonString());\n\n//read required data from the event.\nasgardeo:SmsOtpNotificationData? eventData = event.eventData;\nstring toNumber = &lt;string&gt; check eventData.toJson().sendTo;\nstring message = &lt;string&gt; check eventData.toJson().messageBody;\n\nstring response = check sendSmsClient -&gt; sendSms(toNumber, message);\nlog:printInfo(response);\n} }\n\nservice /ignore on httpListener {}\n</code></pre> SmsOtpNotificationEvent Metadata<p>The payload of the <code>SmsOtpNotificationEvent</code> contains the following metadata:</p> <ul> <li>Security Data object: The security data object is the same as all other Asgardeo events. This contains the following security metadata about the event.  Property Name Type Description <code>iss</code> String Issuer of the event <code>iat</code> String Event published timestamp. <code>jti</code> String Unique identifier for the event. <code>aud</code> String Audience of the event. </li> </ul> <p>Sample security data object:</p> <pre><code>{\n\"iss\": \"Asgardeo\",\n\"jti\": \"3b69b103-fa6c-424a-bbf4-a974d0c2d2a3\",\n\"iat\": 1659732032884,\n\"aud\": \"https://websubhub/topics/myorg/NOTIFICATIONS\"\n}\n</code></pre> <ul> <li>Event Data object - The event data object contains the details of the event. This contains the following metadata about the notification event.</li> </ul> <p> Property Name Type Description <code>organizationId</code> int Organization Identifier <code>organizationName</code> String Organization name <code>sendTo</code> String Mobile number receiving the SMS OTP. <code>messageBody</code> String Content of the SMS OTP Message </p> <p>Sample event data object:</p> <pre><code>{\n\"organizationId\": 3,\n\"organizationName\": \"myorg\",\n\"sendTo\": \"+1234567890\"\n\"messageBody\": \"Your one-time password for the myapp is 075052. This expires in 5 minutes.\",\n}\n</code></pre> </li> <li> <p>Once you have defined your logic, you can deploy your webhook to capture Asgardeo notification events.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-smsotp-login/#how-it-works","title":"How it works","text":"<p>When SMS OTP is enabled for the organization and added to the login flow of your application, the application user will be prompted with the SMS OTP authentication step once the first authentication step is completed. Given below are the high-level steps that follow:</p> <ol> <li>Asgardeo sends the OTP to the user's registered mobile number.</li> <li>Asgardeo prompts the user to enter the OTP code.    </li> <li>If required, the user can request Asgardeo to resend the OTP. A new OTP will be sent if the current resend attempt count is less than the maximum allowed resend attempt count. The new OTP invalidates the previously sent OTP.</li> <li>The user enters the OTP and clicks Continue.</li> <li>On successful authentication, the user can access the application.</li> </ol>"},{"location":"guides/authentication/mfa/add-totp-login/","title":"Add MFA with TOTP","text":"<p>The Time-based One-Time Password (TOTP) is a temporary passcode, generated by an algorithm, which can be used only once. The algorithm that generates each password uses the current time of the day, which ensures that each password is unique. TOTP is considered more secure because the passcode is valid only for a short window of time. The TOTP generated by Asgardeo is valid for 30 seconds.</p> <p>To use TOTP as a multi-factor authentication(MFA) option, application users need to have an authenticator app that can scan the QR code and generate a one-time password. Some authenticator apps are: - Google Authenticator - Authy</p> <p>Note</p> <p>TOTP authenticators use the TOTP specification to calculate access tokens based on the current time and the secret key shared between the user and the identity provider.</p>"},{"location":"guides/authentication/mfa/add-totp-login/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>To get started, you need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Download and install one of the authenticator apps mentioned above.</p> </li> </ul> <p>Note</p> <ul> <li>You can use TOTP for multi-factor authentication only if a previous authentication step is configured with username and password or another factor that can validate user credentials.</li> <li>TOTP cannot be used as the first step of your login flow.</li> <li>Federated users (users who are authenticated using external IdPs) can log in with TOTP MFA option.</li> </ul>"},{"location":"guides/authentication/mfa/add-totp-login/#enable-totp-for-an-app","title":"Enable TOTP for an app","text":"<p>Follow the steps given below to enable TOTP as the second factor in the login flow of your application.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Select the application for which TOTP needs to be added.</p> </li> <li> <p>Go to the Sign-in Method tab of the application and:</p> <ul> <li>If you don't have a customized login flow, you can click Add TOTP as a second factor.   </li> </ul> <p>This opens the customized login flow with TOTP as a second-factor authenticator:</p> <ul> <li>If you have an already customized login flow, you can add a second step and add TOTP as the authenticator.   </li> </ul> <p>Enable backup codes</p> <p>Once the TOTP authenticator is added, select Enable backup codes. This allows users to use their backup codes to log in to the application when they cannot obtain the required MFA codes.</p> <p></p> <p>Learn more about configuring backup codes for business users.</p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-totp-login/#disable-enrolling-in-totp-during-first-login","title":"Disable enrolling in TOTP during first login","text":"<p>TOTP enrollment during the first login is enabled by default for all applications.</p> <p>Administrators of an organization can configure their business applications to disable TOTP enrollment during the login flow of the users.</p> <p>To disable TOTP enrollment during login:</p> <ol> <li>On the Asgardeo Console, enable TOTP  for a selected application.</li> <li>Turn on Conditional Authentication by switching the toggle.</li> <li> <p>Add the following authentication script.</p> <p>Note</p> <p>The <code>authenticatorParams</code> method has been added to <code>executestep(2)</code> assuming that TOTP is configured in step 2 of the authentication process. If you have configured TOTP in a different step, add the <code>authenticatorParams</code> method to the relevant step.</p> <pre><code>var enrolUserInAuthenticationFlow = \"false\";\n\nvar onLoginRequest = function (context) {\nexecuteStep(1);\nexecuteStep(2, {\nauthenticatorParams: {\ncommon: {\n'enrolUserInAuthenticationFlow': enrolUserInAuthenticationFlow\n}\n}\n}, {\nonSuccess: function (context) {\nLog.info(\"Successfully managed login flow\");\n}\n});\n};\n</code></pre> <p>Note</p> <p>To enable enrolling in TOTP the first time a user logs in, use any of the following approaches:</p> <ul> <li>Update the value of <code>enrolUserInAuthenticationFlow</code> parameter to <code>true</code>.     <pre><code>var enrolUserInAuthenticationFlow = \"true\";\n</code></pre></li> <li>Turn off Conditional Authentication by switching the toggle.</li> </ul> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/mfa/add-totp-login/#try-it-out","title":"Try it out","text":"<p>Application users can enroll for TOTP authentication when they log in to the business application for the first time. Given below are the steps that a user will follow:</p> <ol> <li>Download an authenticator app to a mobile device.</li> <li>Try to log in to the application by providing credentials. The user is prompted with a QR code.</li> <li> <p>Scan the QR code using the authenticator app, select the checkbox, and click Continue.</p> <p>Note</p> <ul> <li>This step is prompted only when the user attempts to log in for the first time.</li> <li>This step will not be prompted, if you have disabled enrolling in TOTP during first login.</li> </ul> <p></p> </li> <li> <p>Check the authenticator app and see that the TOTP is generated.     </p> </li> <li>Enter the TOTP:     </li> <li>Click Continue to continue login.</li> </ol> <p>Note</p> <p>If the QR code is deleted from the authenticator app, there is no way to recover it from the application. In such a scenario, the user should re-enroll for TOTP through the Multi Factor Authentication option in the My Account portal.    Learn more about enrolling TOTP from My Account.</p>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/","title":"Add user-preferred MFA login","text":"<p>Asgardeo users have the option to select their preferred MFA option. Once chosen, Asgardo remembers the choice and prompts the chosen MFA option as a second factor when users log into applications.</p> <p>Note</p> <p>Currently, you can only configure user-preferred MFA login by using the SCIM2/Me API of Asgardeo.</p>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/#configure-application-login-for-user-preferred-mfa","title":"Configure application login for user-preferred MFA","text":"<p>Follow the steps given below to configure the application login to prompt the user with the preferred MFA option.</p> <ol> <li>On the Asgardeo console, click Develop &gt; Applications.</li> <li>Select your application and go to the Sign-in Method tab.</li> <li>Click Start with default configuration to define the login flow starting with <code>username and password</code>.</li> <li> <p>Add a second authentication step with the following authenticators.</p> <ul> <li>TOTP</li> <li>Email OTP</li> <li>SMS OTP</li> </ul> <p></p> </li> <li> <p>Turn on Conditional Authentication by switching the toggle.          You can now define your conditional authentication script.</p> <p>Warning<p>As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p> </p> </li> <li> <p>Add the following adaptive authentication script.     <pre><code>var onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar preferredClaimURI = 'http://wso2.org/claims/identity/preferredMFAOption';\nvar user = context.steps[1].subject;\nvar preferredClaim = user.localClaims[preferredClaimURI];\n\nvar jsonObj = JSON.parse(preferredClaim);\nvar authenticationOption = jsonObj.authenticationOption;\nLog.info(\"preferredClaim authenticationOption \" + authenticationOption);\n\nif(preferredClaim != null) {   executeStep(2, {authenticationOptions: [{authenticator: authenticationOption}]}, {});\n} else {\nexecuteStep(2);\n}\n}\n});  };\n</code></pre></p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/authentication/mfa/user-preferred-mfa-login/#set-preferred-mfa-options-for-users","title":"Set preferred MFA options for users","text":"<p>To set preferred MFA options for users:</p> <ol> <li> <p>Collect information from your application users on their preferred MFA option.</p> <p>Note</p> <p>The following authentication options are available for users:  Connection Name Authenticator TOTP <code>totp</code> Email OTP <code>email-otp-authenticator</code> SMS OTP <code>SMSOTP</code> </p> </li> <li> <p>Set the preferred MFA option for each user using a SCIM2/Me patch API call.</p> <p>Note</p> <p>Update the <code>preferredMFAOption.authenticationOption</code> value for each user according to their choice in step 1.</p> Sample API call to add the user's preferred MFA option<pre><code>curl -v -k --header \n'Authorization: Bearer &lt;access_token&gt;' \n--data '\n    {\"Operations\":[\n        {\n            \"op\":\"replace\",\"value\":\n                {\"name\":\n                    {\"givenName\":\"liya\"}\n                }\n        },\n        {\n            \"op\":\"replace\",\n            \"value\":\n            {\n                \"name\":\n                {\"familyName\":\"shaggy\"}\n            }\n        },\n        {\n            \"op\":\n                \"replace\",\n                \"value\":{\"phoneNumbers\":[]}\n        },\n        {\n            \"op\":\n            \"replace\",\n            \"value\":\n                {\"urn:scim:wso2:schema\":\n                    {\n                        \"country\":\"Andorra\",\n                        \"dateOfBirth\":\"\",\n                        \"preferredMFAOption\":\"\n                            {\\\"authenticationOption\\\":\\\"email-otp-authenticator\\\"}\"\n                    }\n                }\n        }\n    ],\n    \"schemas\":[\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n    ]\n}' \n--header \"Content-Type:application/json\" https://api.asgardeo.io/t/&lt;org_name&gt;/scim2/Me\n</code></pre> </li> </ol>"},{"location":"guides/authentication/oidc/","title":"Configure OIDC Flows","text":"<p>Learn how to discover the OIDC endpoints in your Asgardeo organization and then use them to implement OIDC flows in your applications.</p>"},{"location":"guides/authentication/oidc/#discover-the-oidc-endpoints","title":"Discover the OIDC endpoints","text":"<p>This section covers how you can configure OIDC-based login for your single page application by discovering the required OIDC endpoints and configuring them in the Asgardeo Console.</p> <p>Discover OIDC endpoints has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#implement-authorization-code-grant-in-apps","title":"Implement authorization code grant in apps","text":"<p>The guides listed below will help you understand the OIDC login flow using the authorization code flow.</p> <ul> <li> <p>Implement authorization code flow</p> </li> <li> <p>Implement authorization code flow with PKCE</p> </li> <li> <p>Implement private key JWT client authentication for OIDC</p> </li> </ul>"},{"location":"guides/authentication/oidc/#validate-id-tokens","title":"Validate ID tokens","text":"<p>This section explains how the signature and the claims are verifieed in the ID token that is sent by Asgardeo to an application.</p> <p>Validate ID tokens has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#request-user-information","title":"Request user information","text":"<p>When Asgardeo sends the ID token to an application, there is user information encoded within it. This can be obtained using the userinfo endpoint.</p> <p>Request user information has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#token-validation-by-resource-servers","title":"Token validation by resource servers","text":"<p>Asgardeo provides the '/oauth2/introspect' endpoint to perform token validation. Using this, the resource server can verify the access token before authorizing the access.</p> <p>Token validation by resource servers has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#revoke-access-tokens","title":"Revoke access tokens","text":"<p>The token revocation endpoint can revoke any access granted to both confidential clients such as web apps and public clients such as the SPAs or mobile apps.</p> <p>Revoke access tokens has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/#add-logout-to-application","title":"Add logout to application","text":"<p>The logout endpoint is used to terminate the user session at Asgardeo and to log the user out.</p> <p>Add logout to application has detailed instructions on this.</p>"},{"location":"guides/authentication/oidc/add-logout/","title":"Add logout with OIDC to application","text":"<p>OpenID Connect provides OpenID Connect RP-Initiated Logout to terminate user sessions. The logout endpoint is used to terminate the user session at Asgardeo and to log the user out. When a user is successfully logged out, the user is redirected to the <code>post_logout_redirect_uri</code> sent in the logout request.</p> <p>Logout endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oidc/logout\n</code></pre> <p>Sample URL</p> <pre><code>https://api.asgardeo.io/t/bifrost/oidc/logout?id_token_hint=&lt;id_token&gt;&amp;post_logout_redirect_uri=&lt;redirect URI&gt;&amp;state=&lt;state&gt;\n</code></pre> <p>The logout request has the following parameters:</p> <p>Note</p> <p>See RP-initiated logout request for more details.</p> <p> Request Parameter Description <code>id_token_hint</code> The ID token returned by Asgardeo (in response to the token request) is passed to the logout endpoint with a hint about the user's current authenticated session on the application. <code>post_logout_redirect_uri</code>      The URL to be redirected to during user logout. The value defined here should be added as one of the authorized redirect URLs. This should be passed along with the <code>id_token_hint</code>.     If the <code>post_logout_redirect_uri</code> parameter is not passed, the user will be routed to Asgardeo's common page after logout.      <code>state</code> The parameter passed from the application to Asgardeo to maintain state information. If an application sends this parameter, Asgardeo will return this information in the response. </p> <p>Sample response</p> <pre><code>http://myapp.com?state=state-param\n</code></pre> <p></p>"},{"location":"guides/authentication/oidc/discover-oidc-configs/","title":"Discover OpenID Connect endpoints of Asgardeo","text":"<p>When you build OpenID Connect login in your application using Asgardeo as your identity provider, you need to get the OpenID Connect endpoints and configurations from Asgardeo.</p> <p>You can do this by invoking the discovery endpoint API or by using the Asgardeo Console as explained below.</p>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#prerequisite","title":"Prerequisite","text":"<p>To get started, you need to have an application registered in Asgardeo:</p> <ul> <li>Register a single-page app with OIDC.</li> <li>Register a web app with OIDC.</li> </ul>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#use-the-discovery-endpoint","title":"Use the discovery endpoint","text":"<p>OpenID Connect Discovery  allows you to discover the metadata such as endpoints, scopes, response types, claims, and supported client authentication methods of identity providers such as Asgardeo.</p> <p>Applications can dynamically discover the OpenID Connect identity provider metadata by calling the OpenID Connect discovery  endpoint. The structure of the request URL is as follows: <code>&lt;issuer&gt;/.well-known/openid-configuration</code>.  </p> <p>Issuer of Asgardeo <pre><code>api.asgardeo.io\n</code></pre></p> <p>Discovery endpoint of Asgardeo <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token/.well-known/openid-configuration\n</code></pre></p> <p>Sample request</p> <p> <p> <pre><code>curl --location --request GET 'https://api.asgardeo.io/t/bifrost/oauth2/token/.well-known/openid-configuration'\n</code></pre> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/bifrost/oauth2/token/.well-known/openid-configuration\",\n\"method\": \"GET\",\n\"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\n\nvar config = {\nmethod: 'get',\nurl: 'https://api.asgardeo.io/t/bifrost/oauth2/token/.well-known/openid-configuration',\nheaders: {}\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p></p> <p></p> <p></p> <p>Sample response <pre><code>{\n\"introspection_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/introspect\",\n\"end_session_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oidc/logout\",\n\"registration_endpoint\" : \"https://api.asgardeo.io/t/bifrost/api/identity/oauth2/dcr/v1.0/register\",\n\"token_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"jwks_uri\" : \"https://api.asgardeo.io/t/bifrost/oauth2/jwks\",\n\"revocation_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/revoke\",\n\"authorization_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/authorize\",\n\"issuer\" : \"https://api.asgardeo.io/t/bifrost/oauth2/token\"\n}\n</code></pre></p>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#get-endpoints-from-the-console","title":"Get endpoints from the console","text":"<p>Some applications and SDKs are not capable of dynamically resolving endpoints from OpenID Connect discovery. For such applications, you need to configure endpoints manually.</p> <p>You can get the endpoints from the console as follows:</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Select an OIDC application from the list.</p> </li> <li> <p>Go to the Info tab of the application and find the server endpoints to your organization.    </p> </li> </ol>"},{"location":"guides/authentication/oidc/discover-oidc-configs/#whats-next","title":"What's next?","text":"<p>Explore how OpenID Connect endpoints are used when you implement login to your applications:</p> <ul> <li>Implement login for single-page applications using the authorization code flow with PKCE.</li> <li>Implement login for traditional web applications using the authorization code flow.</li> </ul>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/","title":"Implement login using the Authorization Code flow and PKCE","text":"<p>See the instructions given below to implement login with OpenID Connect in your application by using the authorization code flow and PKCE. This method is most suitable for public clients, which are applications that cannot keep the client credentials securely.</p> <p>Single-page applications and mobile applications are some examples for public clients.</p> <p>For public clients, it is recommended to use PKCE along with the authorization code grant to mitigate code interception attacks.</p> <p>The following diagram explains how this flow works with Asgardeo.</p> <p></p> <p>As shown above, you need to configure your application to get the authorization code from Asgardeo, and then exchange it for the required tokens.</p>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to have an application registered in Asgardeo. If you don't already have one, register a single-page application or mobile application.</p> <p>Note</p> <p>Note that only users can log in to business applications. Therefore, to test login on your application, you need a user account.</p>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/#get-authorization-code","title":"Get authorization code","text":"<p>First, your app must initiate a login request to Asgardeo. After redirecting to Asgardeo, the user is prompted with a login page if the user is not already authenticated.</p> <p>Authorization endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize\n</code></pre> <p>Request format</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}&amp;code_challenge=&lt;code_challenge&gt;&amp;code_challenge_method=&lt;code_challenge_method&gt;\n</code></pre> <p>Sample request</p> <pre><code>https://api.asgardeo.io/t/bifrost/oauth2/authorize?scope=openid&amp;response_type=code&amp;redirect_uri=https://localhost:5000&amp;client_id=fv_LScHaB83PN4VPX1cHufphtHQa&amp;code_challenge_method=S256&amp;code_challenge=IMbNq8j9HZBlbLuZ4nHcYOv1ZkRF5TVNAfVIGyeUsi0\n</code></pre> <p></p> <p>This authorization request takes the following parameters.</p> <p>Note</p> <p>See  Authorization Request with PKCE for details.</p> <p></p> Request Parameter Description <code>response_type</code> The required grant type. Use <code>code</code> to represent the authorization code grant type. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. This needs to be the same as one of the URLs given in the registered apps. <code>client_id</code> The client ID that was generated when registering the application in Asgardeo. <code>scope</code> For OpenId Connect login, use <code>openid</code> as one of the scopes. There can be additional scopes as well. Scopes should be space separated. Example: <code>openid email profile</code> <code>code_challenge</code> The client creates and records a secret cryptographical random string (<code>code_verifier</code>), which is then encoded using URL safe base64 encoding to transform it into the <code>code_challenge</code>. The <code>code_challenge</code> is required for the authorization code flow with PKCE.       You can use some tools to generate the <code>code_challenge</code> and <code>code_verifier</code>. <code>code_challenge_method</code> This is the method used for transforming the <code>code_verifier</code> into the <code>code_challenge</code>. Asgardeo supports <code>S256</code> and <code>plain</code>. This is required for the authorization code flow with PKCE. <p>When the user is authenticated, Asgardeo redirects to the <code>redirect_uri</code> with the authorization code.</p> <p>Sample response</p> <pre><code>https://localhost:5000/?code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d&amp;session_state=a0c3bc89849ba0f236791f7fe76a837b7b4422fdc9aca16db394d19a28724a29.wQc7eSHSRrGNfECJRMhSAw\n</code></pre> <p></p> <p></p>"},{"location":"guides/authentication/oidc/implement-auth-code-with-pkce/#get-tokens","title":"Get tokens","text":"<p>After receiving the authorization code, the application has to exchange it to get the below tokens:</p> <ul> <li><code>access_token</code></li> <li><code>id_token</code></li> <li><code>refresh_token</code> (only if the <code>refresh_token</code> grant type is enabled for the application registered in Asgardeo)</li> </ul> <p>Token endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\n</code></pre> <p>Token request</p> <p> <pre><code>curl --location --request POST '{token_endpoint_url}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri={redirect_uri}' \\\n--data-urlencode 'code_verifier={pkce_code_verifier}' \\\n--data-urlencode 'client_id={client_id}'\n</code></pre> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"code\": \"{authorization_doe}\",\n\"grant_type\": \"authorization_code\",\n\"redirect_uri\": \"{redirect_uri}\",\n\"code_verifier\": \"{pkce_code_verifier}\",\n\"client_id\": \"{client_id}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'code': '{authorization_doe}',\n'grant_type': 'authorization_code',\n'redirect_uri': '{redirect_uri}',\n'code_verifier': '{pkce_code_verifier}',\n'client_id': '{client_id}'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://api.asgardeo.io/t/bifrost/oauth2/token',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata: data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p> </p> <p>Sample token request</p> <p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/bifrost/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri=https://localhost:5000' \\\n--data-urlencode 'code_verifier=zYYoWc9LNIahfonUKyKZcpDc0oWV0zGbn-gTkrr4lkw' \\\n--data-urlencode 'client_id=fv_LScHaB83PN4VPX1cHufphtHQa'\n</code></pre> <p></p> <p>This token request takes the following parameters.</p> <p>Note</p> <p>See  Token request with PKCE for details.</p> <p> Request Parameter Description <code>grant_type</code> The grant type. Here we are using the authorization_code grant. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. This needs to be the same as one of the URLs given in the registered apps. <code>code</code> The authorization code received from the authorization request. <code>code_verifier</code> The plain text cryptographical random string that was used to generate the <code>code_challenge</code>. This is required for the authorization code flow with PKCE. <code>client_id</code> The client ID obtained when registering the application in Asgardeo. </p> <p>Sample response:</p> <pre><code>{\n\"access_token\": \"54bd024f-5080-3db5-9422-785f5d610605\",\n\"refresh_token\": \"7024af0f-9216-3b8f-a249-edf6db7f72ab\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiJlYzU2N2M1YmE4NmM3NmJiYjY2ZGNiZTM5YzYzNGFlNTNhNTNiNzgwNjM1OGQwY2ZjMzE4YWNiYmFlZWIyOTRmIiwiYXRfaGFzaCI6IkpvV0hGOEExemYxcG9pUlB3aTU0TWciLCJhdWQiOiJmdl9MU2NIYUI4M1BONFZQWDFjSHVmcGh0SFFhIiwiY19oYXNoIjoiaVRqd0NIblM5aTNTOHhPdTFzbFBidyIsInN1YiI6InVzZXIxQGJpZnJvc3QuY29tIiwibmJmIjoxNjE4ODE2NzI1LCJhenAiOiJmdl9MU2NIYUI4M1BONFZQWDFjSHVmcGh0SFFhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MTg4MjAzMjUsImlhdCI6MTYxODgxNjcyNSwic2lkIjoiMGI2ZjE5M2MtNWEyOS00OGYxLThmYzAtYWNkOWU5NGQ3ODQ1In0.aWin4g0qi-KuE3UGInKun5z-0R2mEP3S-lrWhAijylNJocTgYpStgrm2nH_mI6WR4PN_e9ClVjx40EGUOdSqNlJq4OvWdGT9N6x9ei6D0IkFNcd-ad5ZKgWbJNjejcTfBgRJCa_XbCpntFvwYbrOiCm9ivdUTafMx1lL8ihl-5c04UOsZe7iwb44xTWtFj1WfrVCXiCdcu5NyNn5SKICCUeO9p1sqjLXsbGRwN6TN0H7oVBoK7Q6o9R6gYPWR_hBk9uxpt3CyKej1uCVsmxcoGGqPXMQugIz5sU2wwo685XNAv6Q9TlTEqFBWpbSpYZ0g73YjnhTvaaaHdasgE1VCw\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3600\n}\n</code></pre> <p></p> <p>To get a refresh token, you need to enable the <code>Refresh Token</code> grant type for the application. By default, it is enabled for the single-page application template.</p>"},{"location":"guides/authentication/oidc/implement-auth-code/","title":"Implement login using the Authorization Code flow","text":"<p>See the instructions given below to implement login with OpenID Connect in your application by using the authorization code flow. This method is suitable for confidential clients such as traditional web applications.</p> <p>The following diagram explains how this flow works with Asgardeo:</p> <p></p> <p>As shown above, you need to configure your application to get the authorization code from Asgardeo, and then exchange it for the required tokens.</p>"},{"location":"guides/authentication/oidc/implement-auth-code/#prerequisites","title":"Prerequisites","text":"<p>To get started, you need to have an application registered in Asgardeo. If you don't already have one, register a web app with OIDC.</p> <p>Note</p> <p>Note that only users can log in to business applications. Therefore, to test login on your application, you need a user account.</p>"},{"location":"guides/authentication/oidc/implement-auth-code/#get-the-authorization-code","title":"Get the authorization code","text":"<p>First, your app must initiate a login request to the authorization endpoint of Asgardeo. After redirecting to Asgardeo, the user should be prompted with a login page if the user is not authenticated.</p> <p>Authorization endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize\n</code></pre> <p>Request format</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}\n</code></pre> <p>Sample request</p> <pre><code>https://api.asgardeo.io/t/bifrost/oauth2/authorize?response_type=code&amp;client_id=z8RB6ysdDZhe4QO0zJAQzKbi6P4a&amp;scope=openid&amp;redirect_uri=http%3A%2F%2Flocalhost%3A5000\n</code></pre> Request Parameter Description <code>response_type</code> Required grant type. Use <code>code</code> to represent the authorization code grant type. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. This needs to be the same as one of the URLs given in the registered apps. <code>client_id</code> The client ID obtained when registering the application in Asgardeo. <code>scope</code> For OpenId Connect login, use <code>openid</code> as one of the scopes. There can be additional scopes as well. Scopes should be space separated. Example: <code>openid email profile</code> <p>Once the user is successfully authenticated, Asgardeo redirects the user to the <code>redirect_uri</code> with the authorization code.</p> <p>Sample response</p> <pre><code>https://localhost:5000/?code=97c85a59-a758-3a56-95cd-e71a505b493d&amp;session_state=a0c3bc89849ba0f236791f7fe76a837b7b4422fdc9aca16db394d19a28724a29.wQc7eSHSRrGNfECJRMhSAw\n</code></pre> <p></p>"},{"location":"guides/authentication/oidc/implement-auth-code/#get-tokens","title":"Get tokens","text":"<p>After receiving the authorization code, the application has to exchange it to get the tokens given below:</p> <ul> <li><code>access_token</code></li> <li><code>id_token</code></li> <li><code>refresh_token</code> (only if the <code>refresh_token</code> grant type is enabled for the application registered in Asgardeo)</li> </ul> <p>Token endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\n</code></pre> <p>Token request</p> <p>When your application is a confidential client, it needs to identify itself to the token endpoint by submitting its credentials. There are several ways to implement client authentication at the token endpoint:</p> <p>Note</p> <p>See the list of client authentication methods in the OIDC specification. :::</p> <ul> <li>Use client_secret_post: The <code>client_id</code> and <code>client_secret</code> are both sent as body parameters in the POST message. See the example given below.</li> </ul> <p> <p> <p><pre><code>curl --location --request POST 'https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'client_id={client_id}' \\\n--data-urlencode 'client_secret={client_secret}' \\\n--data-urlencode 'redirect_uri={redirect_uri}'\n</code></pre> </p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"code\": \"{authorization_code}\",\n\"grant_type\": \"authorization_code\",\n\"client_id\": \"{client_id}\",\n\"client_secret\": \"{client_secret}\",\n\"redirect_uri\": \"{redirect_uri}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'code': '{authorization_code}',\n'grant_type': 'authorization_code',\n'client_id': '{client_id}',\n'client_secret': '{client_secret}',\n'redirect_uri': '{redirect_uri}'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://api.asgardeo.io/t/&lt;orgaization_name&gt;/oauth2/token',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata : data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p> </p> <ul> <li>Use client_secret_basic: The client secret is sent as an authorization header in the request (<code>Authorization: Basic BASE46_ENCODING&lt;client_id:client_secret&gt;</code>). See the example given below.</li> </ul> <p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/bifrost/oauth2/token' \\\n--header 'Authorization: Basic ejhSQjZ5c2REWmhlNFFPMHpKQVF6S2JpNlA0YTp6MEM3OXpsb3B4OGk3QnlPdzhLMTVBOWRwbFlh' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=97c85a59-a758-3a56-95cd-e71a505b493d' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri=https://myfirstwebapp.io/login'\n</code></pre> <p></p> <ul> <li>Use a private key JWT: A secured JWT assertion with the data required for client authentication is sent in the token request. See the example given below.</li> </ul> <p>!!! note    Learn more about private key JWT client authentication in Asgardeo.    :::</p> <p> <pre><code>--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\\\n--data-urlencode 'client_assertion={jwt_assertion}' \\\n--data-urlencode 'redirect_uri={redirect_uri}'\n</code></pre> <p></p> <p>The token request has the following parameters in addition to the credentials for authentication:</p> Request Parameter Description <code>code</code> The authorization code received from the authorization request. <code>grant_type</code> The grant type. Here we are using the <code>authorization_code</code> grant. <code>redirect_uri</code> This is where the response is redirected to at the end of the process. <code>client_assertion_type</code> This parameter is only used for client authentication using a private JWT key. <p>Sample response will be as follows:</p> <pre><code>{\n\"access_token\": \"54bd024f-5080-3db5-9422-785f5d610605\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiI4ZTQyYjgzOTQzYWViYTkwMGU3MjJkMWI5NzU3Nzc3OTAyOGRhM2NiZWJmZjhhZTQxMDVhZTA5OTRiZjU5ZDYxIiwiYXRfaGFzaCI6IlZETXZUaWFsbjRRWEk4VUlJUjVlbnciLCJhdWQiOiJ6OFJCNnlzZERaaGU0UU8wekpBUXpLYmk2UDRhIiwiY19oYXNoIjoiOXRMaHJvQnV6Z0I4aDlIWWV6cTBpZyIsInN1YiI6InVzZXIxQGJpZnJvc3QuY29tIiwibmJmIjoxNjIwNzAzODA5LCJhenAiOiJ6OFJCNnlzZERaaGU0UU8wekpBUXpLYmk2UDRhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjA3MDc0MDksImlhdCI6MTYyMDcwMzgwOSwic2lkIjoiYWQ3M2NlZGMtMzM3Ny00NDU3LWExYjUtNTZjODgyMTg1MzZmIn0.RSSL3InOFlvt_xQWFDKZY4FjKFFxh8rqGAlm1vKxleP6dKVlDAT4E0sudCJV5paJ-HdxVMd8MveWwpxrIL5NJw9XCa_sCEfso2fsMgRzQyEn1gjKLmr6Fj8Up3BoPnzPzn1cqVd-pKeXomzciM_ZDwsLr8qAEgVp663D4fg_F6pjVdDr17JRCUgO96yyjHRC5Eiqd7MP20Xhb-ZCMe0OhAlJlCmXB0FZV3nOTbza-jGvG8e_k80g3KVPFO7USek2Px3dCYfcbcA3k3cVzbTN8r8PIY3CEIIHtu5RyO_m1v3A0fjKvSaatfN0K2sndnlRpXFtOosIKQDYsy94wGnWkQ\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3600\n}\n</code></pre> <p>To get a refresh token, you need to enable the Refresh Token grant type for the application. By default, it is enabled for traditional web application templates.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/","title":"Implement private key JWT client authentication for OIDC","text":"<p>See the instructions below to implement private key JWT (JSON Web Token) client authentication for your OIDC application. This method can be used for confidential client applications that are implemented on secure servers. These clients must identify themselves with the token endpoint of Asgardeo (authorization server) before acquiring an access token.</p> <p>Typically, when you implement a grant type using OIDC in an application, there are several ways to implement client authentication at the token endpoint. With private key JWT client authentication, the client application uses a JWT to identify itself to the token endpoint. Note that the following two parameters are sent in the token request for this purpose: <code>client_assertion_type = urn:ietf:params:oauth:client-assertion-type:jwt-bearer</code> and the JWT that is set as the <code>client_assertion</code>.</p> <p>Note</p> <p>See the list of client authentication methods in the OIDC specification.</p> <p>Listed below are the high-level steps in the private key JWT client authentication process.</p> <ol> <li>Prepare a private key and public key pair for the client.</li> <li>Prepare the JSON payload and sign it using the client's private key.</li> <li>Share the public key with the authorization server (Asgardeo).</li> <li>Client application sends the JWT and the signature in the token request to the authorization server.</li> <li>The authorization server verifies the JWT using the public key.</li> <li>The authorization server extracts the signature using the public key and authenticates the client.</li> <li>The access token is granted if the client is successfully authenticated.</li> </ol> <p>Follow the steps given below to implement private key JWT client authentication.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#register-the-client-app-in-asgardeo","title":"Register the client app in Asgardeo","text":"<p>Register the client application in Asgardeo as follows:</p> <ol> <li> <p>Create an OIDC application:</p> </li> <li> <p>Standard-based OIDC application</p> </li> <li> <p>OIDC web application</p> </li> <li> <p>Go to the Protocol tab of the new application and configure the required grant type.</p> </li> </ol> <p></p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#prepare-the-private-key-and-public-key","title":"Prepare the private key and public key","text":"<p>Generate a public key and private key for the client application. Follow the steps given below.</p> <ol> <li>Open a terminal and execute the following keytool command to create the client keystore.</li> </ol> <p>!!! note     Replace the following values:     - <code>&lt;clinet_ID&gt;</code>: Specify the client ID generated when registering the client application in Asgardeo.     - <code>&lt;keystore_name&gt;</code>: Specify the name of the keystore you are creating.</p> <pre><code>keytool -genkey -alias &lt;client_ID&gt; -keyalg RSA -keystore &lt;keystore_name&gt;.jks\n</code></pre> <ol> <li>Convert the <code>.jks</code> keystore to <code>PKCS#12</code> format.</li> </ol> <p>!!! note     Replace <code>&lt;dest_keystore_name&gt;</code> to specify a name for the new keystore in <code>PKCS#12</code> format.</p> <pre><code>keytool -importkeystore -srckeystore &lt;keystore_name&gt;.jks -destkeystore &lt;dest_keystore_name&gt;.p12 -deststoretype PKCS12\n</code></pre> <ol> <li>Export the public key from the <code>.p12</code> keystore.</li> </ol> <p>!!! note     Replace <code>&lt;pub_key_name&gt;</code> to specify a name for the public key certificate file.</p> <pre><code>openssl pkcs12 -in &lt;dest_keystore_name&gt;.p12 -nokeys -out &lt;pub_key_name&gt;.pem\n</code></pre> <ol> <li>Export the private key from the <code>.p12</code> keystore.</li> </ol> <p>!!! note     Replace <code>&lt;private_key_name&gt;</code> to specify a name for the private key certificate file.</p> <pre><code>openssl pkcs12 -in &lt;dest_keystore_name&gt;.p12 -nodes -nocerts -out &lt;private_key_name&gt;.pem\n</code></pre>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#upload-the-public-key-to-asgardeo","title":"Upload the public key to Asgardeo","text":"<p>Go to the Certificate section in the Protocol tab of your application registered in Asgardeo and add the public key certificate of your client application.</p> <p>Note</p> <p>See the instructions on adding certificates to applications.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#prepare-the-jwt-payload","title":"Prepare the JWT payload","text":"<p>Prepare the JSON payload required by the authorization server for client authentication. Given below is a sample payload with only the required data. The complete list of required and optional claims that can be used is defined in the OpenID Connect specification.</p> <p>Note</p> <p>Note that the audience (<code>aud</code>) is the token endpoint URL of the authorization server, and the issuer (<code>iss</code>) and the subject (<code>sub</code>) is the client ID generated for your application by the authorization server in the previous step.</p> <pre><code>{\n\"iss\": \"RN0I55bldQftY97uNq9iIXQA21wa\",\n\"sub\": \"RN0I55bldQftY97uNq9iIXQA21wa\",\n\"exp\": 1643650350,\n\"iat\": 1643650346,\n\"jti\": \"10003\",\n\"aud\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\"\n}\n</code></pre> <p>Once you have created the payload, generate a signature for it using the client application's private key. This JWT is known as the client_assetion.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#get-the-access-token","title":"Get the access token","text":"<p>Listed below are the main steps for invoking the token endpoint and acquiring an access token using the JWT.</p> <ol> <li> <p>Client application sends the JWT and the signature in the token request to the authorization server.</p> <p>Note</p> <p>Note the following two parameters that should be set in the token request: - <code>client_assertion</code>: The authentication token (JWT assertion) must be sent as the value of this parameter. - <code>client_assertion_type</code>: The value of this parameter must be <code>urn:ietf:params:oauth:client-assertion-type:jwt-bearer</code>.</p> </li> <li> <p>The authorization server verifies the JWT using the public key.</p> </li> <li>Authorization server extracts the signature using the public key and authenticates the client.</li> <li>The access token is granted if the client is successfully authenticated.</li> </ol> <p>Let\u2019s look at how this works for different grant types.</p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#authorization-code-flow","title":"Authorization code flow","text":"<p>If you are implementing the authorization code flow, you have enabled code as the grant type when registering your application. You can now send the following requests to get the access token.</p> <ol> <li>First, invoke the authorization endpoint in Asgardeo and get an authorization code.</li> </ol> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}\n</code></pre> <ol> <li>Invoke the token endpoint and get the access token.</li> </ol> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/{organization_name}/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code={authorization_code}' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\\\n--data-urlencode 'client_assertion={jwt_assertion}' \\\n--data-urlencode 'redirect_uri={redirect_uri}'\n</code></pre> <p>Be sure to replace the following values in the request:</p> <p> <code>{organization_name}</code>              Name of the organization that you are accessing.          <code>{authorization_code}</code>              The authorization code that was received by invoking the authorization endpoint.          <code>{jwt_assertion}</code>              The JWT assertion that was created for your client application.          <code>{redirect_uri}</code>              The callback URL of your client application.          </p>"},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#client-credential-flow","title":"Client credential flow","text":"<p>If you are implementing the client credentials flow, you have enabled client credentials as the grant type when registering your application. You can now send the following requests to get the access token.</p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=client_credentials\u2019 \\\n--data-urlencode 'client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\\\n--data-urlencode 'client_assertion={jwt_assertion}\u2019\n</code></pre> <p>Be sure to replace the following values in the request:</p> <code>{organization_name}</code>              Name of the organization that you are accessing.          <code>{jwt_assertion}</code>              The JWT assertion that was created for your client application."},{"location":"guides/authentication/oidc/private-key-jwt-client-auth/#reuse-tokens-optional","title":"Reuse tokens (optional)","text":"<p>The <code>jti</code> (JWT ID) claim is a unique identifier included in the JWT token, which controls the reuse of the access token. By default, token reuse is disabled in Asgardeo. If you enable token reuse, the <code>jti</code> can be reused within its expiration period.</p> <p>To enable token reuse in Asgardeo.</p> <ol> <li>On the Asgardeo Console, go to Account Security &gt; Private Key JWT Client Authentication for OIDC.</li> <li>Click Configure and use the toggle to enable token reuse.</li> </ol> <p></p>"},{"location":"guides/authentication/oidc/request-user-info/","title":"Request user information","text":"<p>User information is encoded inside the ID token returned along with the access token. In addition to that, OpenID Connect provides the userinfo endpoint  to obtain user information as a payload. The application should send a request with the access token to invoke the userinfo endpoint.</p> <p>Userinfo endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/userinfo\n</code></pre> <p>Sample request</p> <p> <pre><code>curl --location --request GET 'https://api.asgardeo.io/t/{organization}/oauth2/userinfo' \\\n--header 'Authorization: Bearer {your_access_token}'\n</code></pre> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/{organization}/oauth2/userinfo\",\n\"method\": \"GET\",\n\"timeout\": 0,\n\"headers\": {\n\"Authorization\": \"Bearer {your_access_token}\"\n},\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\n\nvar config = {\nmethod: 'get',\nurl: 'https://api.asgardeo.io/t/{organization}/oauth2/userinfo',\nheaders: {\n'Authorization': 'Bearer {your_access_token}'\n}\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p> </p> <p>Default sample response Asgardeo returns only the <code>sub</code> claim if there are no user attributes shared with the application.</p> <pre><code>{\n\"sub\": \"user1@bifrost.com\"\n}\n</code></pre> <p>You can customize the user information in the response by configuring user attributes on the registered application. </p>"},{"location":"guides/authentication/oidc/revoke-tokens/","title":"Revoke tokens","text":"<p>OAuth2.0 supports token revocation to revoke any access granted by them. This token endpoint can revoke access tokens and refresh tokens.</p> <p>Confidential clients such as web apps can keep the client credentials securely. Those clients need to prove their identity when they access the revocation endpoint to revoke access tokens.</p> <p>Public clients such as SPAs, mobile apps can't store credentials securely. Those apps need to submit only their client ID to identify the apps during token revocation.  </p> <p>Note</p> <ul> <li>Revoking a refresh token via the revocation endpoint will not revoke the respective access token.</li> <li>Revoking an access token via the revocation endpoint will not revoke the respective refresh token.</li> </ul> <p>Token revocation endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/revoke\n</code></pre>"},{"location":"guides/authentication/oidc/revoke-tokens/#token-revocation-by-confidential-clients","title":"Token revocation by confidential clients","text":"<p>When your application is a confidential client, it needs to identify itself to the token endpoint by submitting the <code>client_id</code> as well as the <code>client_secret</code>. You can use one of the following methods:</p> <ul> <li>Use client_secret_post: The <code>client_id</code> and <code>client_secret</code> are both sent as body parameters in the POST message.</li> <li>Use client_secret_basic: The client secret is sent as an authorization header in the request (<code>'Authorization: Basic BASE64_ENCODE&lt;client_id:client_secret&gt;'</code>).</li> </ul> <p>Apart from client authentication, the revocation request has some other parameters as well.</p> <p> Request Parameter Description <code>token</code> The token you want to revoke. <code>token_type_hint</code> The type of token. If the token is an access token, the type should be <code>access_token</code>. For a refresh token, the type should be <code>refresh_token</code>. </p>"},{"location":"guides/authentication/oidc/revoke-tokens/#client-secret-post-based-authentication","title":"Client secret post based authentication","text":"<p>In this method, the app can send the <code>client_id</code> and <code>client_secret</code> as body params in the revocation request.</p> <p>The sample request is given below.</p> <p> <p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/bifrost/oauth2/revoke' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token={token}' \\\n--data-urlencode 'token_type_hint={token_type}' \\\n--data-urlencode 'client_id={client_id}' \\\n--data-urlencode 'client_secret={client_secret}'\n</code></pre> </p> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/revoke\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"token\": \"{token}\",\n\"token_type\": \"{token_type}\",\n\"client_id\": \"{client_id}\",\n\"client_secret\": \"{client_secret}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <p><pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'token': '{token}',\n'token_type_hint': '{token_type}',\n'client_id': '{client_id}',\n'client_secret': '{client_secret}',\n});\nvar config = {\nmethod: 'post',\nurl: 'https://api.asgardeo.io/t/&lt;orgaization_name&gt;/oauth2/revoke',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata : data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> </p> <p></p>"},{"location":"guides/authentication/oidc/revoke-tokens/#client-secret-basic-authentication","title":"Client secret basic authentication","text":"<p>In client secret basic authentication, the application has to do base64 encoding on the client ID and client secret and pass that as a basic authorization header in the revocation request.</p> <p>The authorization header should look as follows:</p> <p><code>Basic BASE46_ENCODING&lt;your_client_id:your_client_secret&gt;</code></p> <p>:::tip Tips To perform base64 encoding for the client ID and secret, you can use a tool, or you can run the below command. <code>echo -n '&lt;your_client_id:your_client_secret&gt;' | base64</code></p> <p>:::</p> <p>Sample request</p> <p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/bifrost/oauth2/revoke' \\\n--header 'Authorization: Basic ejhSQjZ5c2REWmhlNFFPMHpKQVF6S2JpNlA0YTp6MEM3OXpsb3B4OGk3QnlPdzhLMTVBOWRwbFlh' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token_type_hint=access_token' \\\n--data-urlencode 'token=292896cf-5525-3551-b9e2-1787f1114924'\n</code></pre> </p> <p>When the token is revoked, you will get a <code>200 OK</code> response.</p>"},{"location":"guides/authentication/oidc/revoke-tokens/#token-revocation-by-public-clients","title":"Token revocation by public clients","text":"<p>Since public clients cannot store credentials securely and they do not need to perform authentication when revoking a token. However, they need to submit their client ID.</p> <p>Sample request</p> <p> <p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/bifrost/oauth2/revoke' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token={token}' \\\n--data-urlencode 'token_type_hint={token_type}' \\\n--data-urlencode 'client_id={client_id}'\n</code></pre> </p> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/revoke\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"token\": \"{token}\",\n\"token_type\": \"{token_type}\",\n\"client_id\": \"{client_id}\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <p><pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'token': '{token}',\n'token_type_hint': '{token_type}',\n'client_id': '{client_id}'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://api.asgardeo.io/t/&lt;orgaization_name&gt;/oauth2/revoke',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata : data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> </p> <p></p> <p>This token revocation request for public clients takes the following parameters:  Request Parameter Description <code>token</code> The token (access token or refresh token) you want to inspect. <code>token_type_hint</code> The type of the token. If the token is an access token, the type should be <code>access_token</code>. For a refresh token, the type should be <code>refresh_token</code>. <code>client_id</code> The client ID of the application. </p> <p>When the token is revoked, you will get a <code>200 OK</code> response.</p> <p>Note</p> <p>You will always get a <code>200 OK</code> response when you try to revoke an invalid token, expired, or already revoked. This helps to prevent any information leaks.</p>"},{"location":"guides/authentication/oidc/token-validation-resource-server/","title":"Token validation by resource servers","text":"<p>A resource server is responsible for protecting resources such as APIs via OAuth2 access tokens. Access tokens are intended for authorizing the access of a resource. The resource server should be able to verify the access token sent by the application. If the application sends a self-contained JWT access token, then the resource server can validate the access token without interacting with the authorization server. OAuth2.0 supports token introspection to inspect the access tokens and refresh tokens using authorization servers.</p> <p>Asgardeo provides the <code>/oauth2/introspect</code> endpoint to perform token validation. A resource server can inspect tokens using Asgardeo and know the information related to the tokens. On Asgardeo, the resource server has to use client secret basic authentication to authenticate with the token introspection endpoint. You have to send it as the authorization header in the request: <code>Authorization: Basic BASE46_ENCODING&lt;client_id:client_secret&gt;</code></p> <p>Token introspection endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/introspect\n</code></pre> <p>::: tip Tips  To perform base64 encoding for the client ID and client secret, you can use a tool, or you can run the below command.</p> <p><code>echo -n '&lt;client_id:client_secret&gt;' | base64</code> :::</p> <p>Request format</p> <pre><code>curl --location --request POST '{introspection_endpoint_url}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Authorization: Basic V3NvcTh0NG5IVzgwZ1NuUGZ5RHZSYmlDX19FYTp6MEM3OXpsb3B4OGk3QnlPdzhLMTVBOWRwbFlh' \\\n--data-urlencode 'token={access_token}'\n</code></pre> <p>Sample request</p> <p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/{organization}/oauth2/introspect' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Cookie: atbv=646b0ed2-c501-4b17-9251-94112013a718' \\\n--header 'Authorization: Bearer 54bd024f-5080-3db5-9422-785f5d610605' \\\n--data-urlencode 'token=94e325b7-77c8-32c2-a6ff-d7be430bf785'\n</code></pre> </p> <p>This introspection request takes the following parameters:</p> <p>Note</p> <p>See the OAuth2.0 introspection request for details. :::</p> Request Parameter Description <code>token</code> The token(access token or refresh token) you want to inspect. <p>Sample response</p> <p>The following response will be returned for the provided access token: <pre><code>{\n\"aut\": \"APPLICATION_USER\",\n\"nbf\": 1629961093,\n\"scope\": \"openid profile\",\n\"active\": true,\n\"token_type\": \"Bearer\",\n\"exp\": 1629968693,\n\"iat\": 1629961093,\n\"client_id\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Eb\",\n\"username\": \"DEFAULT/Alica@gmail.com@bifrost\"\n}\n</code></pre></p> <p>The following response will be returned for the provided refresh token:</p> <pre><code>{\n\"nbf\": 1629961093,\n\"scope\": \"openid profile\",\n\"active\": true,\n\"token_type\": \"Refresh\",\n\"exp\": 1630047493,\n\"iat\": 1629961093,\n\"client_id\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"username\": \"DEFAULT/Alica@bifrost.com@bifrost\"\n}\n</code></pre> <p>If the token you used is invalid, you will get the following response:</p> <pre><code>{'active':false}\n</code></pre> <p></p>"},{"location":"guides/authentication/oidc/validate-id-tokens/","title":"Validate ID tokens","text":"<p>The ID token is a security token that is sent by Asgardeo to the application when a token is requested with OpenID scopes. This ID token contains information about the authenticated user.</p> <p>Sample ID token</p> <pre><code>eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiIzYzdlNDIyZGFkNTk1MDc3ZTAyYTYzNjRjYzViN2M5YTE2NzFkNzhmYWQ1MmZmZTVlNmE0MzcwOTRiNGNhOWZmIiwiYXRfaGFzaCI6IklVdEVuNHRLQWlzVWVXRDhIWGZwRXciLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiY19oYXNoIjoic3ZicjU1SEVIUGo3emt3Z2VuSkgxUSIsInN1YiI6IkFsaWNhQGJpZnJvc3QuY29tIiwibmJmIjoxNjI5OTY4MzQ0LCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYXBpLmFzZ2FyZGVvLmlvXC90XC9iaWZyb3N0XC9vYXV0aDJcL3Rva2VuIiwiZXhwIjoxNjI5OTcxOTQ0LCJpYXQiOjE2Mjk5NjgzNDQsInNpZCI6ImY3OGY1ZjRjLTE4NjItNDIwOS04NWEzLWUyMmMyYTljMDY4ZCJ9.D9-lJ8vtC8Hj5mJvUm1ld9w0rifPzjHc6UyCbENtWbno0zTYB_ki3_z-x7zI_-72ixiDpsjzwLbmKKWw8tFtqWM36WvdwBH6mBDVB_K7cy8NqrACLOjFgBrRa3HXwHkwAgwHp6Vpgbs35aAbwf0OTBxeohnbEA4y84D0pFILHm-u_iFG1-tS-QKKh6s8SBR0MNA6dJqj95R3NVF-tk4aztHI5GB63aaw2E883Xd6r2k4MIi3vQoB35-T_zFSebypaheyW3IXCPNsXjsyy4toMRfE4KEeI-j20vixxtIB22OlOWBMie7ce9Atzu6op0R0eJz3f3Ch6OrPxcvT3ghSJQ\n</code></pre> <p>Decoded sample ID token <pre><code>{\n\"isk\": \"3c7e422dad595077e02a6364cc5b7c9a1671d78fad52ffe5e6a437094b4ca9ff\",\n\"at_hash\": \"IUtEn4tKAisUeWD8HXfpEw\",\n\"aud\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"c_hash\": \"svbr55HEHPj7zkwgenJH1Q\",\n\"sub\": \"Alica@bifrost.com\",\n\"nbf\": 1629968344,\n\"azp\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"exp\": 1629971944,\n\"iat\": 1629968344,\n\"sid\": \"f78f5f4c-1862-4209-85a3-e22c2a9c068d\"\n}\n</code></pre></p> <p>Use the following methods to validate the ID token:</p>"},{"location":"guides/authentication/oidc/validate-id-tokens/#verify-the-signature-in-the-id-token","title":"Verify the signature in the ID token","text":"<p>To validate the signature on the ID token, you need the public key of Asgardeo. The signature of ID tokens can be validated using the JWKS endpoint in Asgardeo. </p> <p>Asgardeo exposes the public key information through the standard JWKS endpoint.</p> <p>By using a signature validation library, you can validate the signature of the ID token using the JWKS endpoint.</p> <p>JWKS endpoint</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/jwks\n</code></pre> <p>Sample request</p> <p> <pre><code>curl --location --request GET 'https://api.asgardeo.io/t/bifrost/oauth2/jwks'\n</code></pre> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/bifrost/oauth2/jwks\",\n\"method\": \"GET\",\n\"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\n\nvar config = {\nmethod: 'get',\nurl: 'https://api.asgardeo.io/t/bifrost/oauth2/jwks',\nheaders: {}\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p> </p> <p>Sample response</p> <pre><code>{\n\"keys\": [\n{\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"use\": \"sig\",\n\"kid\": \"Yzc5OTgwZTE3MWQzMWEzNDFmNzVhM2NiOTBlNjcwNTI5OGM0MmQ1YjkwYjg2MTIwZWMwNzM4Mzg1ZGIyZDg3ZA_RS256\",\n\"alg\": \"RS256\",\n\"n\": \"i_i34CgF8IZd8e27sY3lJkX6MyW7e2oIH0f_OlnwftTdS-SAmmIMm06QdyhDr0fycTuNR9hjsEhSm9ecS5kZh9qsuffLb1N041Ml37VE6qeOKP4AocvYmr0rtpH0TUgqXndDeFAAF3oLVhUTokw9Ik-T23cEPDA8gMCmQf7Nje7fNsQ6aCuzzvfUekXvRnDl_7ZAHgbw_0gyujIJ11NlKiNbmCdKMATn68TwQ4U5RJD9-IT0zizWm1ciV-ZOc12L8AsUI-QFjLnUlM4S42X1oj0Tao1oL9V8QGASHHIGKqJ9YxvvnuxaHd42NFFHJcwB4oLlirjOyI5HfKZRFE4FzQ\"\n}\n]\n}\n</code></pre> <p></p>"},{"location":"guides/authentication/oidc/validate-id-tokens/#verify-claims-in-the-id-token","title":"Verify claims in the ID token","text":"<p>Applications should verify the claims in the ID token before consuming it. You can either use some libraries, or you can manually verify the claims.  </p> <p>Given below are some claims that are sent in the ID token. These need to be verified by the application.</p> Claim Description <code>iss</code> <p>(issuer)</p> This should match the <code>https://api.asgardeo.io/t/organization_name/oauth2/token</code> value. <code>aud</code> <p>(audience)</p> This should match the client ID of the application. <code>iat</code> <p>(issued at time)</p> This indicates when the ID token was issued. Applications can reject tokens that were issued too long ago. <code>exp</code> <p>(expiry time)</p> This indicates the time at which the ID token will expire. Applications should reject the expired tokens."},{"location":"guides/authentication/passwordless-login/","title":"Add passwordless login","text":"<p>These sections provide instructions on how to add passwordless login to your SPAs or web applications.</p>"},{"location":"guides/authentication/passwordless-login/#magic-link-login","title":"Magic link login","text":"<p>Magic link lets users log in by clicking a link sent to their email instead of entering a password.</p> <p>Add Magic Link login has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/#fido2-login","title":"FIDO2 login","text":"<p>FIDO2 is a standard that lets users use hardware security keys or biometrics to log in.</p> <p>Add login with FIDO2 has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/#hypr-login","title":"HYPR login","text":"<p>HYPR is a FIDO-certified platform that lets users use biometrics to log in.</p> <p>Add login with HYPR has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/#email-otp-login","title":"Email OTP login","text":"<p>Email OTP allows users to log in by providing a one-time passcode sent to their email instead of entering a password.</p> <p>Add Email OTP login has detailed instructions on this.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/","title":"Add Email OTP login","text":"<p>Email OTP is a form of passwordless authentication. It allows users to log in by providing a one-time passcode sent to their email instead of entering a password.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>To get started, you need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>You need to have a user account in Asgardeo. If you don't already have one, create a user account in Asgardeo.</p> <p>Note</p> <p>You cannot use an administrator account to log in to an application.</p> </li> </ul>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/#enable-email-otp-login-for-an-app","title":"Enable Email OTP login for an app","text":"<p>Follow the steps given below to enable Email OTP login to the login flow of your application.</p> <ol> <li> <p>On the Asgardeo Console, use one of the following options to start:</p> <ul> <li>Option 1: Go to Develop &gt; Applications.</li> <li>Option 2: Go to Connections &gt; Passwordless and for the Email OTP connection, click Set up.</li> </ul> </li> <li> <p>Select the application for which Email OTP login needs to be enabled.</p> </li> <li> <p>Go to the Sign-in Method tab:</p> <ul> <li> <p>If you haven\u2019t already built a login flow for your application, select Add Email OTP login to build one.     </p> </li> <li> <p>If you have an already built login flow, add the <code>Email OTP</code> authenticator as the first authentication step.     </p> </li> </ul> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-email-otp/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the Asgardeo login page.</li> <li>On the Asgardeo login page, enter your username and press Continue.          You will be redirected to the below email OTP page.     </li> <li>Check your inbox for the email containing the one-time passcode. The email reads as follows.     </li> <li>Enter the received passcode in the email OTP page and click on Continue.</li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/","title":"Add FIDO2 login","text":"<p>FIDO2 adds passwordless login to your applications, which allows users to replace traditional passwords with FIDO2-supported hardware security keys or built-in authenticators on their devices.</p> <p>There are two types of authenticators that you can use with FIDO2 passwordless authentication in Asgardeo. - Platform authenticators (also known as <code>internal</code> authenticators): Authenticators like fingerprint scanners, TouchID, FaceID or Windows Hello which are bound to a particular device. - Roaming authenticators (also known as <code>cross-platform</code> or <code>external</code> authenticators): Authenticators like hardware security keys which are external and not bound to any specific device.</p> <p>!!! note What is FIDO2?   The FIDO Alliance, whose mission is to reduce the world\u2019s reliance on passwords, introduced its latest specifications, collectively called FIDO2. FIDO2 specifications are the World Wide Web Consortium\u2019s (W3C) Web Authentication specification (WebAuthn) and FIDO alliance\u2019s corresponding Client to Authenticator Protocol (CTAP).</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>To get started, you need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>Application users need to register their security keys/biometrics via the My Account app prior to using passwordless login. Be sure to educate your users on how to register a security key/biometrics via My Account.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#enable-passwordless-login-for-an-app","title":"Enable passwordless login for an app","text":"<p>Follow the steps given below to enable passwordless login for your application.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Select the application to which you wish to add Magic link login.</p> </li> <li> <p>Go to the Sign-in Method tab and do one of the following:</p> <ul> <li>If you haven\u2019t already built a login flow for your application, select FIDO2 to build one.</li> </ul> <p></p> <ul> <li>If you have an already built login flow, you can add FIDO2 as an additional authenticator for the first step.</li> </ul> <p></p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#fido2-passkeys","title":"FIDO2 passkeys","text":"<p>A main drawback of classic FIDO2 passwordless authentication is that FIDO2 credentials are bound to a single device.</p> <p>Passkeys resolve this issue by allowing FIDO2 credentials to sync across multiple devices. With passkeys, users can log in to applications from any device even if their credentials are stored in another.</p> <p>If your devices sync through the cloud, major vendors have the following passkey implementations: - If you are an Apple user, your passkeys will be synced across all the devices signed into the same Apple ID and iCloud Keychain. Refer to the Apple documentation for more information.</p> <ul> <li>If you are an Android user, your  passkeys will be synced across all the devices signed into your Google account. Refer to the Google documentation for more information.</li> </ul> <p>If your devices do not sync through the cloud, you can use your device with passkeys to scan a QR code generated in the device from which you are trying to log in. - For example, if you want to log in to a web application from your PC, and your FIDO2 credentials are stored in a mobile device, you can scan a QR code and select the relevant passkey from the mobile device to log in.</p> <p>Refer to the passkeys documentation to stay up-to-date with the device support for FIDO2 passkeys.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-fido/#try-it-out","title":"Try it out","text":"<p>Note</p> <ul> <li>FIDO2 passwordless login with platform authenticators will NOT work on the Firefox browser in macOS Catalina, Big Sur and Monterey due to browser limitations.</li> <li>FIDO2 passwordless login with roaming authenticators will NOT work on the Firefox browser as the browser doesn't support CTAP2 (Client to Authenticator Protocol 2) with PIN.</li> </ul> <ol> <li>Access the application URL.</li> <li>Click Login to open the Asgardeo login page.</li> <li>On the Asgardeo login page, click Sign In With Security Key. You will be redirected to the FIDO2 login page.     </li> <li>Follow the instructions given by your browser or device to login.     </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/","title":"Add HYPR login","text":"<p>HYPR is a passwordless authentication method that allows users to log in to applications using biometrics on their devices. As a FIDO-certified platform, HYPR eliminates risks prevalent in password-based authentication such as phishing, and password reuse.</p> <p>This guide explains how you can use  HYPR to add passwordless login to applications registered in your Asgardeo organization.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#prerequisites","title":"Prerequisites","text":"<p>You need to configure the HYPR environment and have access to the HYPR control center. Learn how to do it in the HYPR documentation.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#register-application-in-hypr","title":"Register application in HYPR","text":"<p>Follow the steps below to register your application in the HYPR control center.</p> <p>Note</p> <p>You can follow the HYPR documentation for detailed instructions.</p> <ol> <li> <p>Go to the HYPR control center and click Add Application.     </p> </li> <li> <p>Select Web as the channel and click Next.     </p> </li> <li> <p>Select Custom Solution as the IdP provider and click Next.     </p> </li> <li> <p>Enable push notifications and click Next.     </p> </li> <li> <p>Add your Firebase configurations and click Next.</p> <p>Note</p> <p>To enable push notifications, you need to configure Firebase and obtain a project ID and an API key. To learn how to do this, follow the guide in HYPR.</p> </li> <li> <p>Complete the app details form and click Done to create the application.</p> </li> <li> <p>Select your application from the Choose an App menu and note down the App ID.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#create-an-api-token-in-hypr","title":"Create an API token in HYPR","text":"<p>When you register HYPR as a connection in Asgardeo, you need to provide an API token, which Asgardeo can use to access HYPR APIs.</p> <p>Follow the steps below to obtain an API token.</p> <ol> <li> <p>Go to the HYPR control center and select your application.</p> </li> <li> <p>Under Advanced Config, click Access Tokens.     </p> </li> <li> <p>Click Create Token, provide a unique name for your token, select API Token as the token type, and click Next.     </p> </li> <li> <p>Select User Management and Authentication as the permission types and click Next.     </p> </li> <li> <p>Take a note of the API token that you have created.</p> <p>Warning</p> <p>The token is only shown once.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#register-hypr-in-asgardeo","title":"Register HYPR in Asgardeo","text":"<p>Follow the steps below to register HYPR as a connection in Asgardeo.</p> <ol> <li> <p>On the Asgardeo Console, go to Connections.</p> </li> <li> <p>Click Create Connection and select HYPR.</p> </li> <li> <p>Enter the following details and click Finish:     </p> <p> Parameter Description Name A unique name to identify the connection. Relying Party App ID The App ID you receive when you         register your app in HYPR. Base URL The base URL of your HYPR server deployment. API Token The token you recieve when you create an API token in HYPR. </p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#enable-hypr-login","title":"Enable HYPR login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Open your application from the list and go to the Sign-in Method tab.</p> </li> <li> <p>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</p> </li> <li> <p>Click Add Authentication on the same step and select your HYPR connection.</p> <p></p> </li> <li> <p>Enable Conditional Authentication and add the following script.</p> <pre><code>var onLoginRequest = function onLoginRequest(context) {\n\nvar fedUser;\nexecuteStep(1,\n{\nonSuccess: function (context) {\nvar idpName = context.steps[1].idp;\n\nif (idpName === \"HYPR\") {\nfedUser = context.currentKnownSubject;\n\nvar associatedUser = getAssociatedLocalUser(fedUser);\nif (associatedUser == null) {\nvar claimMap = {};\nclaimMap[\"http://wso2.org/claims/username\"] = fedUser.username;\nvar storedLocalUser = getUniqueUserWithClaimValues(claimMap, context);\nif (storedLocalUser !== null) {\ndoAssociationWithLocalUser(fedUser, storedLocalUser.username, storedLocalUser.tenantDomain, storedLocalUser.userStoreDomain);\n}\n}\n}\n}\n});\n};\n</code></pre> </li> <li> <p>Click Update to save the sign-in flow.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-hypr/#try-it-out","title":"Try it out","text":"<p>Note</p> <ul> <li>Make sure you have a user account in the application registered in the HYPR control center.</li> <li>Download the HYPR app to your mobile device and pair the device to your user account in HYPR.  See HYPR documentation for more details.</li> </ul> <p>Follow the steps given below:</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Click Login to open the Asgardeo login page.</p> </li> <li> <p>On the Asgardeo login page, click Sign In With HYPR.</p> <p></p> </li> <li> <p>Enter the username of an existing HYPR user.</p> </li> <li> <p>Use the HYPR mobile application to complete the log in.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/","title":"Add Magic Link login","text":"<p>Magic link is a form of passwordless authentication. It allows users to log in by clicking a link sent to their email instead of entering a password.</p>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>To get started, you need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> </li> <li> <p>You need to have a user account in Asgardeo. If you don't already have one, create a user account in Asgardo.</p> <p>Note</p> <p>You cannot use an administrator account to log in to an application.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/#enable-magic-link-login-for-an-app","title":"Enable Magic link login for an app","text":"<p>Follow the steps given below to enable Magic link login to the login flow of your application.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications.</p> </li> <li> <p>Select the application to which you wish to add Magic link login.</p> </li> <li> <p>Go to the Sign-in Method tab and do one of the following:</p> <ul> <li>If you haven\u2019t already built a login flow for your application, select Add Magic Link login to build one.</li> </ul> <p></p> <ul> <li>If you have an already built login flow, add the <code>Magic Link</code> authenticator as the first authentication step.</li> </ul> <p></p> </li> <li> <p>Click Update to save your changes.</p> </li> </ol>"},{"location":"guides/authentication/passwordless-login/add-passwordless-login-with-magic-link/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the Asgardeo login page.</li> <li> <p>On the Asgardeo login page, enter your username and press Continue.          You will be redirected to the below page.     </p> </li> <li> <p>Check your inbox for the magic link email. The email reads as follows.     </p> </li> <li> <p>Open the magic link by clicking Sign In on the same browser as your application.</p> </li> </ol>"},{"location":"guides/authentication/saml/","title":"Configure SAML flows","text":"<p>Learn how to discover the SAML configurations in your Asgardeo organization and then use them to implement SAML flows in your applications.</p> <ul> <li>Discover SAML configurations</li> </ul>"},{"location":"guides/authentication/saml/discover-saml-configs/","title":"Discover SAML endpoints and configs in Asgardeo","text":"<p>You can follow this document to obtain required information and the configurations to: - Integrate sign in with Asgardeo for your SAML web application - Build login with Asgardeo using a SAML supported library</p> <p>When configuring SAML based sign in with Asgardeo, you need to know:</p> <ol> <li>SAML IdP endpoints of Asgardeo</li> <li>Issuer of Asgardeo</li> <li>The public certificate of Asgardeo</li> </ol> <p></p>"},{"location":"guides/authentication/saml/discover-saml-configs/#prerequisite","title":"Prerequisite","text":"<p>To get started, you need to have an application registered in Asgardeo. If you don't have an app registered, go to Asgardeo Console to register a SAML application.</p>"},{"location":"guides/authentication/saml/discover-saml-configs/#get-saml-configs","title":"Get SAML configs","text":"<p>You need to know the SAML IdP configurations of Asgardeo if you want to add SAML login to your application.</p> <p>There are two options for a SAML application to get the SAML IdP configurations of Asgardeo:</p> <ol> <li>Use SAML IdP metadata of Asgardeo</li> <li>Get SAML IdP configurations of Asgardeo from Console</li> </ol>"},{"location":"guides/authentication/saml/discover-saml-configs/#use-saml-metadata","title":"Use SAML metadata","text":"<p>SAML metadata is an XML document which contains information necessary to integrate a SAML application with a with SAML supported identity provider.</p> <p>The SAML IdP metadata document contains:</p> <ol> <li> <p>Endpoints (single sign-on URLs, single logout URLs, etc)</p> </li> <li> <p>Supported bindings</p> </li> <li> <p>IdP identifiers (entityID or sometimes called Issuer)</p> </li> <li> <p>Public certificate</p> </li> </ol> <p>Sample SAML IdP metadata of Asgardeo</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;EntityDescriptor\nxmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"accounts.asgardeo.io/t/{organization_name}\"&gt;\n&lt;IDPSSODescriptor WantAuthnRequestsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\" validUntil=\"2021-07-07T07:01:06.536Z\"&gt;\n&lt;KeyDescriptor use=\"signing\"&gt;\n&lt;KeyInfo\nxmlns=\"http://www.w3.org/2000/09/xmldsig#\"&gt;\n&lt;X509Data&gt;\n&lt;X509Certificate&gt;MIIC/jCCAeagAwIBAgIECXIstjANBgkqhkiG9w0BAQQFADBBMRAwDgYDVQQDDAdiaWZyb3N0MQ0w\nCwYDVQQLDAROb25lMQ8wDQYDVQQKDAZOb25lIEwxDTALBgNVBAYTBE5vbmUwHhcNMjEwMzIwMDYz\nNTU5WhcNMzEwNDE3MDYzNTU5WjBBMRAwDgYDVQQDDAdiaWZyb3N0MQ0wCwYDVQQLDAROb25lMQ8w\nDQYDVQQKDAZOb25lIEwxDTALBgNVBAYTBE5vbmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQCL+LfgKAXwhl3x7buxjeUmRfozJbt7aggfR/86WfB+1N1L5ICaYgybTpB3KEOvR/JxO41H\n2GOwSFKb15xLmRmH2qy598tvU3TjUyXftUTqp44o/gChy9iavSu2kfRNSCped0N4UAAXegtWFROi\nTD0iT5PbdwQ8MDyAwKZB/s2N7t82xDpoK7PO99R6Re9GcOX/tkAeBvD/SDK6MgnXU2UqI1uYJ0ow\nBOfrxPBDhTlEkP34hPTOLNabVyJX5k5zXYvwCxQj5AWMudSUzhLjZfWiPRNqjWgv1XxAYBIccgYq\non1jG++e7Fod3jY0UUclzAHiguWKuM7Ijkd8plEUTgXNAgMBAAEwDQYJKoZIhvcNAQEEBQADggEB\nAEIeJ9o5QYlRV2KJN5bLL7s6GV3hkYMIrzDoxHFgSvEt2XJULHWj3yvKe1hk/HzEII79fYYKS6xJ\nv7MORegQP/zFCD8oAHt/3lnhrG1yM/SQDe60Kd5emWqLqMxNQBmmaYQDTY7F5PIdC9KJ/EeKIoz2\nP2QlT5TNOcj9chtRHtsohNNv6Nkew6HZ49Xlm4BsFxhP6J5YPExV4bBw+RsHeiNdcxXNGaNtD5n2\nL4KOHbmKddsL1x/KZ4Q67xzaS50IhNnfC84pOFxmYT2FsB02ZuVv97UsNF+8xv+GIN3qc+pIJEWd\nHFY29KP4da//BDdQrftzYCATe37Um09id/0KMGs=&lt;/X509Certificate&gt;\n&lt;/X509Data&gt;\n&lt;/KeyInfo&gt;\n&lt;/KeyDescriptor&gt;\n&lt;ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlartresolve\" index=\"1\"/&gt;\n&lt;SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlsso\" ResponseLocation=\"https://api.asgardeo.io/t/{organization_name}/samlsso\"/&gt;\n&lt;SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlsso\" ResponseLocation=\"https://api.asgardeo.io/t/{organization_name}/samlsso\"/&gt;\n&lt;SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlsso\" ResponseLocation=\"https://api.asgardeo.io/t/{organization_name}/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlsso\"/&gt;\n&lt;SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://api.asgardeo.io/t/{organization_name}/samlsso\"/&gt;\n&lt;/IDPSSODescriptor&gt;\n&lt;/EntityDescriptor&gt;\n</code></pre> <p>There are two ways to get the SAML IdP metadata of Asgardeo.</p> <ol> <li>File based metadata</li> <li>URL based metadata</li> </ol> <p>Based on the capability of your SAML application or library, you can choose either approach.</p> Use File Based Metadata <p>To download the SAML metadata file of your organization in Asgardeo,</p> <ol> <li> <p>In the Asgardeo Console, Select Applications.</p> </li> <li> <p>Select the SAML application from the application view.</p> </li> <li> <p>Go to the Info section.</p> </li> <li> <p>Click Download IdP Metadata to download the metadata xml file.     </p> </li> </ol> Use URL Based Metadata <p>You can use below endpoint URL to get the SAML IdP metadata information.</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/identity/metadata/saml2\n</code></pre> <p>Sample endpoint URL <pre><code>https://api.asgardeo.io/t/bifrost/identity/metadata/saml2\n</code></pre></p> <p>Note</p> <p>When integrating Asgardeo as a SAML IdP in Salesforce, be sure to add the SAML metadata URL to the Salesforce remote site settings to recognize it as an authorized network address. :::</p> <p> </p>"},{"location":"guides/authentication/saml/discover-saml-configs/#get-saml-configurations-of-asgardeo-from-console","title":"Get SAML configurations of Asgardeo from Console","text":"<p>Some applications and SDKs do not have the capability to dynamically resolve endpoints from  SAML metadata file. You need to configure endpoints manually to support them.</p> <p>You can login to Asgardeo Console and get endpoints of Asgardeo.</p> <ol> <li> <p>In the Asgardeo Console, click Applications.</p> </li> <li> <p>Select the SAML application from the application view.</p> </li> <li> <p>Go to the Info section of the application and finds the below server information related to your organization:</p> <ul> <li>Issuer : Issuer name of Asgardeo</li> <li>Single Sign-On : Sign-on URL of Asgardeo</li> <li>Single Logout : Logout URL of Asgardeo</li> <li>IdP certificate : Public certificate of Asgardeo    </li> </ul> </li> <li> <p>You can download the certificate of Asgardeo from IdP certificate.</p> </li> </ol> <p></p>"},{"location":"guides/authentication/saml/discover-saml-configs/#whats-next","title":"What's next?","text":"<p>Now you've integrated your SAML web application. You also can: - Configure SAML settings</p>"},{"location":"guides/authentication/social-login/add-apple-login/","title":"Add Apple login","text":"<p>You can add Apple login to your applications using Asgardeo and enable users to log in with their Apple IDs.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-apple-login/#register-asgardeo-on-apple","title":"Register Asgardeo on Apple","text":"<p>Note</p> <p>You need a paid subscription to get access to an Apple developer account.</p> <p>To register Asgardeo on Apple, you need to create the following components on Apple's Developer Portal:</p> Step 1: Register an App ID<p>To register an App ID:</p> <ol> <li>On the Apple Developer portal, go to Program resources &gt; Certificates, Identifiers &amp; Profiles &gt; Identifiers.     </li> <li>Click <code>+</code> to register an App ID.</li> <li>Select App IDs and click Continue.</li> <li>Select App as the type and click Continue.</li> <li>Enter the values for the following parameters.      Parameter Definition Description A description for the services ID. Bundle ID A unique identifier for the application. It is usually a string of characters in reverse domain name notation.  Example: <code>io.asgardeo.myorg</code> </li> <li>Under the Capabilities tab, select Sign in with Apple.</li> <li>Click Continue and then click Register.</li> </ol> Step 2: Register a Services ID<p>To register a services ID:</p> <ol> <li> <p>On the Apple Developer portal, go to Program resources &gt; Certificates, Identifiers &amp; Profiles &gt; Identifiers.     </p> </li> <li> <p>Click <code>+</code> and select Services IDs and click Continue.</p> </li> <li>Enter values for the following parameters:      Parameter Definition Description A description for the services ID. Identifier A unique identifier for the application. It is usually a string of characters in reverse domain name notation. This value is considered the client ID of the application. Example: <code>io.asgardeo.myorg</code> </li> <li>Click Continue and then click Register.</li> <li>Go back to the Identifiers section and click on the Services ID you created.</li> <li>Enable Sign in with Apple and click Configure.</li> <li>Under Web Authentication Configuration, select the App ID you created as the Primary App ID.</li> <li>Enter the following values under Register Website URLs.      Parameter Value Domain <code>api.asgardeo.io</code> Return URL <code>https://api.asgardeo.io/t/{organization_name}/commonauth</code> </li> <li>Click Continue and then click Save.</li> </ol> Step 3: Register a new key<p>To register a new key:</p> <ol> <li>On Apple Developer portal, go to Program resources &gt; Certificates, Identifiers &amp; Profiles &gt; Keys.     </li> <li>Click <code>+</code> to register a new key.</li> <li>Enter a name for the key, enable Sign in with Apple, and click Configure.</li> <li>Under Configure Keys, select the App ID you created previously and click Save. Then click Continue.</li> <li> <p>Click Register.</p> <p>Note</p> <p>You will now see that your app's Private key is ready to be downloaded. Download and save it securely, as you cannot download it again. Also, take note of the Key ID that is displayed on this page.</p> </li> <li> <p>Click Done.</p> </li> </ol> <p>Note down the Team ID displayed in the top right corner under your name.</p> <p>You can follow the Apple documentation for detailed instructions.</p> <p>::: tip A client secret is required to integrate the Apple application with Asgardeo. Usually, the external IdP generates a client secret, but in this scenario, Apple expects Asgardeo to generate the client secret. :::</p>"},{"location":"guides/authentication/social-login/add-apple-login/#register-the-apple-idp","title":"Register the Apple IdP","text":"<p>Now, let's register the Apple IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li>Click New Connections and select Apple.</li> <li> <p>Enter the following details of the Apple identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Apple identity provider. Services ID The services ID obtained from Apple.. Team ID Apple developer team ID obtained from Apple. Key ID Key identifier of the private key generated for the app. Private Key Private key generated for the app. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local Asgardeo account uses the same email address to log in through an external identity provider, Asgardeo syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of Asgardeo, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use Asgardeo's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After creating the Apple identity provider, go to the Settings tab and see the list of scopes to which Apple has granted permissions.</p> <ul> <li>email: Allows to view the user's email address.</li> <li>name: Allows to view the user\u2019s name fields.</li> </ul> <p>Note</p> <p>Asgardeo needs these scopes to get user information. Asgardeo checks the attribute configurations of the application and sends the relevant attributes received from Apple to the app. You can read the Apple documentation to learn more.</p> Update the client secret validity period<p>Asgardeo generates a client secret for the IdP. This client secret has the default maximum validity period of six months.</p> <p>If you wish to reduce the validity period:</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li>Click Setup on your Apple IdP.</li> <li>On the Settings tab update the value of the Client Secret Validity Period.</li> </ol>"},{"location":"guides/authentication/social-login/add-apple-login/#enable-apple-login","title":"Enable Apple login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Open your application from the list and go to the Sign-in Method tab.</li> <li> <p>Click Add Authentication on the step, select your Apple identity provider, and click Add.</p> <p>Note</p> <p>Asgardeo recommends adding your social and enterprise connections to the first authentication step as they are used for identifying the user.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/social-login/add-apple-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Click Login to open the Asgardeo login page.</p> </li> <li> <p>On the Asgardeo login page, click Sign in with Apple.</p> <p></p> </li> <li> <p>Log in to Apple with an existing Apple ID.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Apple for the first time,</p> <ul> <li>Apple will prompt you to create an account for the Apple IDP application.</li> <li>A user account is created in the Asgardeo Console with the Apple username. Apple will manage this new user account.</li> </ul>"},{"location":"guides/authentication/social-login/add-apple-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/social-login/add-apple-login/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/social-login/add-facebook-login/","title":"Add Facebook login","text":"<p>You can add Facebook login to your applications using Asgardeo and enable users to log in with their Facebook account.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-facebook-login/#register-asgardeo-on-facebook","title":"Register Asgardeo on Facebook","text":"<p>You need to register Asgardeo as an app on Facebook.</p> <p>Note</p> <p>You can follow the Facebook Documentation for detailed instructions.</p> <p>To register an app on Facebook:</p> <ol> <li> <p>Log in to the Facebook developer portal and click Create App.  </p> </li> <li> <p>Select Consumer as the app type and click Next.  </p> </li> <li> <p>Provide Display Name and click Create App to create an application.  </p> </li> <li> <p>Under Add products to your app, click Set up on the Facebook Login card.  </p> </li> <li> <p>Select Web type and provide the following Site URL with your organization name:     <pre><code>https://api.asgardeo.io/t/{organization_name}\n</code></pre> </p> </li> <li> <p>Save the changes and click Continue.</p> </li> <li> <p>On the left panel, under Facebook Login, go to Settings and add the following as the Valid OAuth Redirect URIs:    <pre><code>https://api.asgardeo.io/t/{organization_name}/commonauth\n</code></pre></p> </li> <li> <p>Enable Client OAuth Login and Web OAuth Login (these are enabled by default) and save the changes.     </p> </li> <li> <p>On the main panel, go to Settings &gt; Basic and take note of the App ID and App Secret.       </p> </li> </ol>"},{"location":"guides/authentication/social-login/add-facebook-login/#register-the-facebook-idp","title":"Register the Facebook IdP","text":"<p>Now, let's register the Facebook IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li>Click Create Connection and select Facebook.</li> <li> <p>Enter the following details of the Facebook identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Facebook identity provider. App ID App ID obtained from Facebook. App Secret The app secret obtained from Facebook. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local Asgardeo account uses the same email address to log in through an external identity provider, Asgardeo syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of Asgardeo, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use Asgardeo's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After the Facebook identity provider is created, go to the Settings tab and see the list of permissions granted by Facebook to Asgardeo.</p> <ul> <li>email: Grants read access to a user's primary email address.</li> <li>public_profile: Grants read access to a user's default public profile details.  </li> </ul> <p>Note</p> <p>Asgardeo needs these permissions to get user information. Asgardeo checks the attribute configurations of the application and sends the relevant attributes received from Facebook to the app. You can read the Facebook documentation to learn more.</p>"},{"location":"guides/authentication/social-login/add-facebook-login/#enable-facebook-login","title":"Enable Facebook login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Open your application from the list and go to the Sign-in Method tab.</li> <li>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</li> <li> <p>Click Add Authentication on the step, select your Facebook identity provider, and click Add.</p> <p>Note</p> <p>Asgardeo recommends adding your social and enterprise connections to the first authentication step as they are used for identifying the user.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/social-login/add-facebook-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Click Login to open the Asgardeo login page.</p> </li> <li> <p>On the Asgardeo login page, click Sign in with Facebook.</p> </li> </ol> <p></p> <ol> <li> <p>Log in to Facebook with an existing user account.</p> </li> <li> <p>The user is now redirected to the application and logged in.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Facebook for the first time, a user account is created in the Asgardeo Console with the Facebook username. This new user account will be managed by Facebook.</p>"},{"location":"guides/authentication/social-login/add-facebook-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/social-login/add-facebook-login/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/social-login/add-github-login/","title":"Add Github login","text":"<p>You can add Github login to your applications using Asgardeo and enable users to log in with their Github account.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-github-login/#register-asgardeo-on-github","title":"Register Asgardeo on Github","text":"<p>You need to register Asgardeo as an OAuth app on Github.</p> <p>Note</p> <p>You can follow the Github documentation for detailed instructions.</p> <ol> <li>Log in to Github, click your profile icon, and click Settings.</li> <li>On the left panel of the Settings page, click Developer settings.</li> <li> <p>Under OAuth apps, click Register a new application.  </p> </li> <li> <p>Give the application a name and the following URLs:</p> <ul> <li>Homepage URL <pre><code> https://api.asgardeo.io/t/{organization_name}\n</code></pre></li> <li>Authorization callback URL <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/commonauth\n</code></pre> </li> </ul> </li> <li> <p>Click Register application.</p> </li> <li>Generate a new client secret and take note of the Client ID and Client secret.</li> </ol>"},{"location":"guides/authentication/social-login/add-github-login/#register-the-github-idp","title":"Register the Github IdP","text":"<p>Now, let's register the Github IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li>Click New Connections and select Github.</li> <li> <p>Enter the following details and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Github identity provider. Client ID The client ID obtained from Github. Client secret The client secret obtained from Github. </p> </li> <li> <p>If required, you can disable JIT user provisioning.</p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local Asgardeo account uses the same email address to log in through an external identity provider, Asgardeo syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of Asgardeo, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use Asgardeo's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After the Github identity provider is created, go to the Settings tab and see the list of scopes to which Github has granted permissions.</p> <ul> <li>email: Grants read access to a user's primary email address.</li> <li>public_profile: Grants read access to a user's default public profile details.  </li> </ul> <p>Note</p> <p>Asgardeo needs these scopes to get user information. Asgardeo checks the attribute configurations of the application and sends the relevant attributes received from Github to the app. You can read the Github Documentation to learn more.</p>"},{"location":"guides/authentication/social-login/add-github-login/#enable-github-login","title":"Enable Github login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Open your application from the list and go to the Sign-in Method tab.</li> <li>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</li> <li>Click Add Authentication on the step, select your Github identity provider, and click Add.</li> </ol> <p>!!! note Recommendations       Asgardeo recommends adding your social and enterprise connections to the first authentication step as they are used for identifying the user.</p> <p></p>"},{"location":"guides/authentication/social-login/add-github-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Access the application URL.</p> </li> <li> <p>Click Login to open the Asgardeo login page.</p> </li> <li> <p>On the Asgardeo login page, Sign in with Github.</p> </li> </ol> <p></p> <ol> <li>Log in to Github with an existing user account.</li> </ol> <p>Note</p> <p>When a user successfully logs in with Github for the first time, a user account is created in the Asgardeo Console with the Github username. This new user account will be managed by Github.</p>"},{"location":"guides/authentication/social-login/add-github-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/social-login/add-github-login/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/social-login/add-google-login/","title":"Add Google login","text":"<p>You can add Google login to your applications using Asgardeo and enable users to log in with their Google account.  </p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-google-login/#register-asgardeo-on-google","title":"Register Asgardeo on Google","text":"<p>You need to register Asgardeo as an OAuth2.0 application on Google.</p> <p>Note</p> <p>You can follow the Google documentation for detailed instructions.</p> <ol> <li> <p>Go to the Google Developer console, create a new project or select an existing project.</p> </li> <li> <p>If the APIs &amp; services page isn't already open, do the following:</p> <ol> <li> <p>Open the navigation menu and click View all products.    </p> </li> <li> <p>Under Management, click APIs &amp; Services.    </p> </li> </ol> </li> <li> <p>Go to the Credentials page, click Create Credentials, and select Oauth client ID.     </p> </li> <li> <p>Configure your consent screen by clicking Configure Consent Screen and return to Create OAuth client ID screen once you are done.</p> <p>Note</p> <p>For more information, see User Consent</p> </li> <li> <p>Select the Web application as the application type.</p> </li> <li>Provide a name for your app and the following URL as the Authorized Redirect URI of the application:     <pre><code>https://api.asgardeo.io/t/{organization_name}/commonauth\n</code></pre></li> <li>Take note of the client ID and client secret generated for the application.</li> </ol>"},{"location":"guides/authentication/social-login/add-google-login/#register-the-google-idp","title":"Register the Google IdP","text":"<p>Now, let's register the Google IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li>Click New Connections and select Google.</li> <li> <p>Enter the following details of the Google identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Google identity provider. Client ID The client ID obtained from Google. Client secret The client secret obtained from Google. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local Asgardeo account uses the same email address to log in through an external identity provider, Asgardeo syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of Asgardeo, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use Asgardeo's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After the Google identity provider is created, go to the Settings tab and see the list of scopes to which Google has granted permissions.</p> <ul> <li>email: Allows to view the user's email address.</li> <li>openid: Allows authentication using OpenID Connect and to obtain the ID token.</li> <li>profile: Allows to view the user's basic profile data.</li> </ul> <p>Note</p> <p>Asgardeo needs these scopes to get user information. Asgardeo checks the attribute configurations of the application and sends the relevant attributes received from Google to the app. You can read the Google documentation to learn more.</p>"},{"location":"guides/authentication/social-login/add-google-login/#enable-google-login","title":"Enable Google login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Open your application from the list and go to the Sign-in Method tab.</li> <li>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</li> <li> <p>Click Add Authentication on the step, select your Google identity provider, and click Add.</p> <p>Note</p> <p>Asgardeo recommends adding your social and enterprise connections to the first authentication step as they are used for identifying the user.</p> <p></p> </li> </ol>"},{"location":"guides/authentication/social-login/add-google-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the Asgardeo login page.</li> <li> <p>On the Asgardeo login page, Sign in with Google.</p> <p></p> </li> <li> <p>Log in to Google with an existing user account.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Google for the first time, a user account is created in the Asgardeo Console with the Google username. This new user account will be managed by Google.</p>"},{"location":"guides/authentication/social-login/add-google-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/social-login/add-google-login/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/social-login/add-microsoft-login/","title":"Add Microsoft login","text":"<p>You can add Microsoft login to your applications using Asgardeo and enable users to log in with their Microsoft account.</p> <p>Follow this guide for instructions.</p>"},{"location":"guides/authentication/social-login/add-microsoft-login/#register-asgardeo-on-microsoft","title":"Register Asgardeo on Microsoft","text":"<p>You need to register Asgardeo as an OAuth2.0 application on Microsoft.</p> <p>Note</p> <p>You can follow the Microsoft documentation for detailed instructions.</p> <ol> <li> <p>Sign in to the Azure Portal using an account with administrator permission.</p> <p>Note</p> <p>You must use an account in the same Microsoft 365 subscription (tenant) with which you intend to register the app.</p> </li> <li> <p>On the Azure portal, go to Azure Services &gt; Azure Active Directory.     </p> </li> <li> <p>Click Add and select App registration from the list.</p> </li> <li> <p>Provide the required information for app registration.     </p> <p> Parameter Description Name Enter a meaningful name for your application. Supported Account Type Select the supported account type. Value: <code>Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)</code> Redirect URI Select a platform according to your application and enter the redirect URI. Value: <code>https://api.asgardeo.io/t/{organization_name}/commonauth</code> </p> </li> <li> <p>Click Register to create the application.</p> <p>Note</p> <p>Take note of the client ID after the application is created.</p> </li> </ol> <p>Now, let's generate a client secret for the application.</p> <ol> <li>Go to Certificates &amp; secrets on the left navigation and click + New client secret.</li> <li>Enter a description for the client secret and select the expiry time.</li> <li> <p>Click Add to add the client secret.</p> <p>Note</p> <p>Take note of the generated Secret ID. Azure will allow copying this value only once.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-microsoft-login/#register-the-microsoft-idp","title":"Register the Microsoft IdP","text":"<p>Now, let's register the Microsoft IdP in Asgardeo.</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li>Click New Connections and select Microsoft.</li> <li> <p>Enter the following details of the Microsoft identity provider and click Finish:</p> <p></p> <p> Parameter Description Name A unique name for this Microsoft identity provider. Client ID The client ID obtained from Microsoft. Client secret The client secret obtained from Microsoft. </p> </li> </ol> Claim syncing for JIT-provisioned users<p>JIT user provisioning is enabled by default for your external identity provider. If required, you can disable JIT user provisioning.</p> <p>When a user with a local Asgardeo account uses the same email address to log in through an external identity provider, Asgardeo syncs the claims from the JIT-provisioned user account and the local account.</p> <p>According to the default behavior of Asgardeo, when JIT user provisioning is enabled, the user claims of the local user account are overridden by the user claims received from the external identity provider.</p> <p>You can use Asgardeo's identity provider APIs to configure claim syncing between the external identity provider and the local user accounts. This gives you the flexibility to customize the claim syncing behavior according to your specific requirements.</p> <p>After the Microsoft identity provider is created, go to the Settings tab and see the list of scopes to which Microsoft has granted permissions.</p> <ul> <li>email: Allows to view the user's email address.</li> <li>openid: Allows authentication using OpenID Connect and to obtain the ID token.</li> <li>profile: Allows to view the user's basic profile data.</li> </ul> <p>Note</p> <p>Asgardeo needs these scopes to get user information. Asgardeo checks the attribute configurations of the application and sends the relevant attributes received from Microsoft to the app. You can read the Microsoft documentation to learn more.</p>"},{"location":"guides/authentication/social-login/add-microsoft-login/#enable-microsoft-login","title":"Enable Microsoft login","text":"<p>Note</p> <p>You need to register an application with Asgardeo. You can register your own application or use one of the sample applications provided.</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Open your application from the list and go to the Sign-in Method tab.</li> <li>If you haven't already defined a sign-in flow, click Start with Default configuration to get started.</li> <li> <p>Click Add Authentication on the step, select your Microsoft identity provider, and click Add.</p> <p>Note</p> <p>Asgardeo recommends adding your social and enterprise connections to the first authentication step as they are used for identifying the user.</p> <p></p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/authentication/social-login/add-microsoft-login/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below.</p> <ol> <li>Access the application URL.</li> <li>Click Login to open the Asgardeo login page.</li> <li> <p>On the Asgardeo login page, Sign in with Microsoft.</p> <p></p> </li> <li> <p>Log in to Microsoft with an existing user account.</p> </li> </ol> <p>Note</p> <p>When a user successfully logs in with Microsoft for the first time, a user account is created in the Asgardeo Console with the Microsoft username. Microsoft will manage this new user account.</p>"},{"location":"guides/authentication/social-login/add-microsoft-login/#add-groups-to-the-connection","title":"Add groups to the connection","text":""},{"location":"guides/authentication/social-login/add-microsoft-login/#delete-a-connection","title":"Delete a connection","text":""},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/","title":"Enable user attributes for OpenID Connect apps","text":"<p>Asgardeo can share user attributes with applications. This guide explains how you share user attributes with OpenID Connect applications.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#configure-user-attributes-to-share","title":"Configure user attributes to share","text":"<p>Follow the steps given below to configure the user attributes from the Asgardeo Console and to share them with the application.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#select-user-attributes","title":"Select user attributes","text":"<p>You need to first specify the user attributes required for an application. This ensures that when a user logs in, the application can only get access to the user information exposed through these attributes.</p> <p>The user attributes are grouped by their specific scopes to ease the user attribute configuration process. You can add user attributes individually or all the attributes in the scope at once.</p> <p>To add user attributes to the app:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select your application and go to its User Attributes tab. Here the user attributes are listed under their relevant scopes.</li> </ol> <p></p> <ol> <li> <p>You can add user attributes using the following methods:</p> </li> <li> <p>Add a group of user attributes by selecting the checkbox in front of the required scope. This will add all the user attributes grouped under the selected scope.</p> <p></p> </li> <li> <p>Add a single user attribute by expanding the required scope and selecting the user attribute you need from the expanded list.</p> <p></p> </li> <li> <p>Click Update once you are done.</p> </li> </ol>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#define-mandatory-user-attributes","title":"Define mandatory user attributes","text":""},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#how-it-works","title":"How it works","text":"<p>Let's see how this flow works in Asgardeo.</p> <p>Once you have configured the user attributes that are required for your application, Asgardeo implements the following process when a user tries to log in to your app.</p> <p></p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#application-requests-attributes","title":"Application requests attributes","text":"<p>When the user logs in to the app, a request is sent to Asgardeo with the relevant scopes.</p> <p>Applications can use scopes to request access to a group of user attributes.</p> <p>Note</p> <p>Learn more about managing scopes in Asgardeo.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#asgardeo-checks-for-mandatory-attributes","title":"Asgardeo checks for mandatory attributes","text":"<p>Asgardeo verifies whether the user's profile has values for all the mandatory attributes that are requested by the application. If there are missing values, Asgardeo will prompt the user to enter the missing values.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#requests-user-consent","title":"Requests user consent","text":"<p>By default, Asgardeo requests the user's consent to share the user attributes with the application.</p> <p>Note</p> <p>Learn more about managing user consent.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-oidc-app/#shares-attributes-with-the-app","title":"Shares attributes with the app","text":"<p>If the user consents to share attributes with the application, Asgardeo returns the requested user attributes as well as the subject attribute to the application in the ID token.</p> Subject Attribute <p>The subject attribute is the unique identifer for a user. The application receives this value via the subject attribute parameter in the ID token. In Asgardeo, the user ID is used as the subject attribute.</p> ID token <p>Once the application calls the token endpoint, Asgardeo sends the ID token in the response.</p> <p>All the user attributes that are requested by scopes are returned as claims in the ID token. The application can decode the ID token to view the claims.</p> <p>A sample ID token is given below:</p> <pre><code>{\n\"isk\": \"69b37037a2349763dc48e2a30a62c3feebf0b5823cf869e149352737ddc0ca63\",\n\"at_hash\": \"7qgloEmkz3kGBTtH7RI4qw\",\n\"sub\": \"user@sample.com\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://api.asgardeo.io/t/bitfrost/oauth2/token\",\n\"given_name\": \"alice\",\n\"sid\": \"5580be2b-a12d-43a4-823a-9d1352b88269\",\n\"aud\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n\"c_hash\": \"VlKxb3UhuYtFEG_VftAa0g\",\n\"nbf\": 1625557031,\n\"azp\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n\"nickname\": \"nick\",\n\"exp\": 1625560631,\n\"iat\": 1625557031,\n\"family_name\": \"john\"\n}\n</code></pre> Userinfo response <p>In addition to getting attributes from the ID token, the application can invoke the userinfo endpoint and get user attributes along with the subject attribute.</p> <p>A sample userinfo response is given below:</p> <pre><code>{\n\"sub\": \"user@sample.com\",\n\"nickname\": \"nick\",\n\"given_name\": \"alice\",\n\"family_name\": \"john\"\n}\n</code></pre>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/","title":"Enable user attributes for SAML apps","text":"<p>Asgardeo can share user attributes with applications. The following guide shows how to share user attributes with SAML applications.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#prerequisite","title":"Prerequisite","text":"<p>The Enable Attribute Profile setting should be enabled for the application in Asgardeo.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#configure-user-attributes-to-share","title":"Configure user attributes to share","text":"<p>Follow the steps given below to configure the user attributes from the Asgardeo Console and to share them with the application.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#select-user-attributes","title":"Select user attributes","text":"<p>You need to first specify the user attributes required for an application. This ensures that when a user logs in, the application can only get access to the user information exposed through these attributes.</p> <p>To add user attributes to the app:</p> <ol> <li>On the Asgardeo Console, go to Applications.</li> <li>Select your application and go to the User Attributes tab.</li> <li> <p>Click Add User Attribute if you don't have any attributes already added.    </p> </li> <li> <p>Select the required attributes from the list as shown below.    </p> </li> <li> <p>Click Save to return to the User Attributes tab and then click Update.</p> </li> </ol>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#map-user-attributes","title":"Map user attributes","text":"<p>In the user attribute configurations, you can either choose default attribute names or define application-specific user attribute names.</p> <p>To configure application-specific attribute names, you need to map the selected user attributes to application-specific user attributes.</p> <p>To perform mapping:</p> <ol> <li>Click Enable Mapping in the User Attributes section.</li> <li>Change the Mapped user attribute for the selected attribute.    </li> </ol> <p>This ensures that the application receives attributes based on the name that is configured.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#define-mandatory-user-attributes","title":"Define mandatory user attributes","text":""},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#select-the-subject-attribute","title":"Select the subject attribute","text":"<p>The subject attribute is used for exchanging information about the user. The subject is represented by the subject attribute in the SAML assertion.</p> <p>By default, Asgardeo shares username as the subject. You can define any user attribute as the subject.</p> <p>To define a different attribute as the subject:</p> <ol> <li>Select it as a user attribute.</li> <li> <p>Go to the Subject section under User Attributes.    </p> </li> <li> <p>Select an attribute as the subject from the Subject attribute list.</p> </li> <li>Click Update.</li> </ol>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#how-it-works","title":"How it works","text":"<p>Let's see how this flow works in Asgardeo.</p> <p>Once you have configured the user attributes that are required for your application, Asgardeo implements the following process when a user tries to log in to your app.</p> <p></p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#asgardeo-checks-for-mandatory-attributes","title":"Asgardeo checks for mandatory attributes","text":"<p>Asgardeo verifies whether the user's profile has values for all the mandatory attributes that are requested by the application. If there are missing values, Asgardeo will prompt the user to enter the missing values.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#requests-user-consent","title":"Requests user consent","text":"<p>By default, Asgardeo requests the user's consent to share the user attributes with the application.</p> <p>Note</p> <p>Learn more about managing user consent.</p>"},{"location":"guides/authentication/user-attributes/enable-attributes-for-saml-app/#shares-attributes-with-the-app","title":"Shares attributes with the app","text":"<p>Asgardeo will share these user attributes with an application given the user has provided consent. User attributes along with the subject attribute are shared via SAML assertions.</p> Subject attribute <p>The subject attribute is shared via the <code>&lt;saml2:Subject&gt;</code> element based on the configured subject attribute.</p> <p>A sample Subject element found in a SAML assertion is given below:</p> <pre><code>&lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;alice@bifrost.com&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"immfmmacmiaomepphphhlfokfggpffkleokajfbg\"\nNotOnOrAfter=\"2021-07-13T06:09:33.594Z\"\nRecipient=\"http://localhost:8081/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n\n&lt;/saml2:Subject&gt;\n</code></pre> Attribute statement <p>If the user gives consent to share attributes with the application, Asgardeo returns the requested user attributes via the <code>&lt;saml2:AttributeStatement&gt;</code> element</p> <p>A sample attribute statement element found in a SAML assertion is given below: <pre><code>&lt;saml2:AttributeStatement&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/country\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;Sri Lanka&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;saml2:Attribute Name=\"http://wso2.org/claims/emailaddress\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;alice@bifrost.com&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;/saml2:AttributeStatement&gt; </code></pre></p> Attribute statement with attribute mapping <p>If you have done any custom attribute mapping via the Enable mapping setting, the attributes will contain those application-specific names in the SAML assertion.</p> <p>A sample attribute statement element with custom attribute mapping is given below:</p> <pre><code>&lt;saml2:AttributeStatement&gt;\n&lt;saml2:Attribute Name=\"country\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;Sri Lanka&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;saml2:Attribute Name=\"emailaddress\"\nNameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n&gt;\n&lt;saml2:AttributeValue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:type=\"xsd:string\"\n&gt;alice@bifrost.com&lt;/saml2:AttributeValue&gt;\n&lt;/saml2:Attribute&gt;\n&lt;/saml2:AttributeStatement&gt;\n</code></pre>"},{"location":"guides/branding/","title":"Branding","text":"<p>By default, the business applications of your organization in Asgardeo are presented to your users with Asgardeo branding. You have the option of using your own branding as follows:</p> <ul> <li>Customize the user interfaces (UIs) of the user login, sign-up, and account recovery flows.</li> <li>Customize the domain name. </li> <li>Customize email notifications</li> </ul>"},{"location":"guides/branding/configure-custom-domains/","title":"Configure custom domains","text":"<p>Warning</p> <p>You need a paid Asgardeo subscription to use this feature. If you don\u2019t already have one, view the available subscription plans and contact the Asgardeo sales team.</p> <p>By default, the Asgardeo interfaces presented to your users (during the login, sign-up, and account recovery flows), as well as the back-end services (such as APIs), are served by Asgardeo on the following domains:</p> <ul> <li>User interfaces: <code>https://accounts.asgardeo.io/t/&lt;org_name&gt;</code></li> <li>Services: <code>https://api.asgardeo.io/t/&lt;org_name&gt;</code></li> </ul> <p>With domain branding, you can customize the above endpoints to have hostnames specific to your organization. For example, if your organization is Foo, you can have the following custom domains:</p> <ul> <li>User interfaces: <code>https://accounts.foo.com</code></li> <li>Services: <code>https://api.foo.com</code></li> </ul> <p>Note</p> <p>If you have configured  suborganizations, note that the custom domain you configure for your root organization also applies to your suborganizations.</p> <p>If you have a paid Asgardeo subscription and wish to implement a custom domain for your organization, contact Asgardeo support through the  WSO2 cloud support portal or send a request email to <code>asgardeo-help@wso2.com</code> and the team will get back to you with instructions. Note that email and support portal requests should be sent from the respective account of an administrator.</p>"},{"location":"guides/branding/configure-email-providers/","title":"Configure the email provider","text":"<p>You can configure a custom email provider to send emails with your own email address to your organization users during the flows such as sign-up and account recovery.</p> <p>By configuring a custom email provider with your organization domain, users will get a familiar email address as the sender when they receive emails from your Asgardeo organization.</p>"},{"location":"guides/branding/configure-email-providers/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You need to have an organization in Asgardeo. Create an organization if you don\u2019t have one.</p> </li> <li> <p>You need to have a custom email provider (SMTP server), which you have control over and can use to send emails to your users.</p> </li> </ul>"},{"location":"guides/branding/configure-email-providers/#update-the-email-provider","title":"Update the email provider","text":"<p>Follow the steps given below to configure the email provider for your organization.</p> <ol> <li> <p>On the Asgardeo Console, go to Email Provider.</p> <p></p> </li> <li> <p>Update the following fields with the configuration information provided by your email provider.</p> <p> Parameter Description Server Host              This is the address of the server that handles outgoing emails. Your email service provider provides it and typically starts with <code>smtp.</code> followed by the domain name.          Server Port              This is the specific network port used for communication with the email server.             Default ports include <code>25</code>, <code>587</code>, or <code>465</code>, but the exact port number can vary depending on your email service provider's configuration.          From Address              This is the email address that appears as the sender of your outgoing emails. Make sure to provide a valid and correctly formatted email address that you have access to and control over.          Reply-to Address              This is the email address that recipients can use to respond to your emails. It allows you to specify a different email address than the one in the <code>From</code> field for receiving replies.          Username              This is used to authenticate and verify your identity when connecting to the email server. It is typically your email address, but certain email service providers may provide a unique username.          Password              This is a security credential used to authenticate and protect access to your email account when sending emails through the email server.          Display Name              This is the name that recipients will see when they receive an email from you. It is typically your name or the name of your organization.             The display name helps recipients quickly identify the sender of the email.          </p> </li> </ol>"},{"location":"guides/branding/configure-email-providers/#revert-email-provider-configurations","title":"Revert email provider configurations","text":"<p>To revert your email provider configurations,</p> <ol> <li>Scroll down to the Danger Zone and click Revert.</li> <li>Select the checkbox to confirm your action.</li> <li>Click Confirm.</li> </ol> <p></p> <p>The email provider configurations will now be restored to Asgardeo's default configurations.</p>"},{"location":"guides/branding/configure-ui-branding/","title":"Configure UI branding","text":"<p>You can customize the user interfaces (UIs) presented to your users during the login, sign-up, and account recovery flows, and on the My Account portal according to the theming guidelines of your organization.</p> <p>Note</p> <p>If you have created  suborganizations , note that the branding you configure for your root organization also applies to your suborganizations.</p> <p>By branding these interfaces, users will get a familiar and consistent user experience.</p> <p>Note</p> <p>See the complete list of UI branding options currently available in Asgardeo.</p> <p></p>"},{"location":"guides/branding/configure-ui-branding/#prerequisites","title":"Prerequisites","text":"<p>You need to have an organization in Asgardeo. Create an organization if you don\u2019t have one.</p>"},{"location":"guides/branding/configure-ui-branding/#update-branding","title":"Update branding","text":"<p>Follow the steps given below to configure the branding preferences for your organization.</p> <ol> <li> <p>On the Asgardeo Console, go to Branding.</p> <p></p> </li> <li> <p>Update the UI branding options in the General, Design, and Advanced tabs.</p> </li> </ol> <p>!!! note Note       - If you leave any of the branding preferences empty, Asgardeo defaults will be used.       - The real-time preview will show you a sample view as you update the values.</p> <ol> <li>Click Save &amp; Publish to publish your branding configurations.</li> </ol> <p>The email templates of the organization will be automatically updated according to your branding preferences if the preferences are in the published state. See Branding email templates for more information.</p> <p>Note</p> <p>For free-tier subscriptions, the Powered by Asgardeo label will display on the Asgardeo-powered interfaces when branding is published.</p>"},{"location":"guides/branding/configure-ui-branding/#disable-branding","title":"Disable branding","text":"<p>You can temporarily disable your branding preferences by clicking Unpublish in the Danger Zone. Your progress will be preserved up to the point and you can choose to publish them again later by clicking on the Save &amp; Publish button.</p> <p>When disabled, Asgardeo\u2019s default branding will apply to the interfaces in your application's login, user registration, account recovery flows, and My Account portal.</p>"},{"location":"guides/branding/configure-ui-branding/#revert-branding","title":"Revert branding","text":"<p>If you want to revert your branding preferences, scroll down to the Danger Zone and click Revert to default.</p> <p>Warning</p> <p>Note that this permanently removes all the branding options that you have saved and the Asgardeo defaults will immediately apply.</p>"},{"location":"guides/branding/configure-ui-branding/#preview-branding","title":"Preview branding","text":"<p>You can preview how your branding preferences will look once they are saved and published.</p> <p>To preview your branding configurations for different flows, on the Preview window, select the screen you wish to preview from the Screen list.</p> <p></p>"},{"location":"guides/branding/configure-ui-branding/#extend-branding","title":"Extend branding","text":"<p>When you go to Develop &gt; Branding on the Asardeo console, you will see the list of branding preferences that are supported for your user interfaces by default.</p> <p>If you require any of the extended branding capabilities (explained below), you can contact the Asgardeo team at asgardeo-help@wso2.com . Note that you need to send the request from an administrator account.</p>"},{"location":"guides/branding/configure-ui-branding/#ui-branding-preferences","title":"UI branding preferences","text":"<p>Listed below are the branding preferences that you can use to customize the Asgardeo interfaces (UIs) presented to your users.</p>"},{"location":"guides/branding/configure-ui-branding/#general-preferences","title":"General preferences","text":"<p>Listed below are general branding preferences you can apply to the interfaces.</p> Site Title The site title may appear in browser tabs, search engine results, social shares, etc. You can use any meaningful text here. Copyright Text The copyright text is a short description that informs users about the copyright law protecting your applications.       In Asgardeo, the copyright text will appear on the footer of the login screens and on the footer of emails.        Contact Email This email address will appear on emails, error pages and, other pages where users would require support from the organization admin."},{"location":"guides/branding/configure-ui-branding/#design-preferences","title":"Design preferences","text":"<p>Listed below are the design changes you can apply to the user registration and login interfaces.</p> Layout variations <p>Select one of the available layouts for your login interfaces. Asgardeo uses the Centered layout by default.</p> <p>Note</p> <p>If you want to use the Custom layout from the list (shown below), contact Asgardeo support through the  WSO2 cloud support portal or send a request email to <code>asgardeo-help@wso2.com</code> and the team will get back to you with instructions.</p> <p></p> <p>Note that these requests should be sent from the account of an administrator in the organization.</p> Theme variations <p>Select from either Dark or Light theme variations to modify the styling of your login screens. Asgardeo uses the Light theme by default.</p> Theme preferences <p>The following design preferences apply to the theme you select. You can configure and save separate design preferences for each of the themes.</p> Note <p>You can configure the Asgardeo logo, My Account logo, and favicon for the theme you selected.</p> Logo  This is the logo that appears above the login box in login screens and in emails sent by the organization. Update the following values to set the logo:          <ul> <li>URL: You can update the logo by specifying the URL of a hosted image.</li> <li>Alt Text: The 'Alt text' or 'alternative text' is a short description of an image. This text is useful to make sense of the image when it can't be viewed for some reason. A descriptive alt text is always a good practice to improve accessibility.</li> </ul>          Use an image that\u2019s at least 600x600 pixels and less than 1MB in size for better performance.        Favicon Browsers that provide favicon support typically display a page's favicon in the browser's address bar and next to the page's name in a list of bookmarks.       You can update the favicon by specifying the URL of a hosted image (of type png, ico, etc.).       Use an image with a square aspect ratio that\u2019s at least 16x16 pixels in size for better results.        My Account Logo  This is the logo that appears in the header of the My Account portal. Update the following values to set the logo:          <ul> <li>URL: You can update the logo by specifying the URL of a hosted image.</li> <li>Alt Text: The 'Alt text' or 'alternative text' is a short description of an image. This text is useful to make sense of the image when it can't be viewed for some reason. A descriptive alt text is always a good practice to improve accessibility.</li> <li>Logo Title: The text shown beside the Logo.</li> </ul>          Use an image that\u2019s at least 250x50 pixels and less than 1MB in size for better performance.        <p>Note</p> <p>Be sure that the hosted image you use will properly return Content-Type headers. Without these headers, the image will not correctly render and you will experience a 403 error. You can use static image hosting services to ensure these headers are properly returned. :::</p> Note <p>This is the primary color palette for your interfaces. Click the color swatch and apply colors that match your organization\u2019s style guide.</p> Primary Color           The color that appears dominantly in primary actions, anchor tags, emails, etc.          By default, Asgardeo uses an orange shade as the primary color for both Light and Dark themes        Secondary Color           The color that appears in secondary actions and other emphasized content.          By default, Asgardeo uses a lighter gray shade as the secondary color.        Body background Main Background Color           This is the main background color used in the UIs. This will be used as the background color for login, sign-up, and account recovery flows, and on the My Account portal.        Surface background Main Surface Background Color           The main background color used in surface elements like cards, popups, panels, etc.        Light Surface Background Color           A lighter variation of the background color used in specific parts of the surface elements like cards, popups, panels, etc.        Dart Surface Background Color           A darker variation of the background color used in specific parts of the surface elements like cards, popups, panels, etc.        Inverted Surface Background Color           The inverted variation of the background color used in surface elements like the application header in the My Account portal.        Outlines Default Outline Color           The default outline color used in elements like cards, tooltips, dropdowns, etc.        Text Colors Primary Text Color           The primary text color used in the user interface. Select a color that provides good contrast against the background color and is easy to read.        Secondary Text Color           The secondary text color used in the user interface. Select a color that compliments the primary color and enhances the visual hierarchy of your design.        Alerts Neutral Alert Background Color           The color of the message boxes that appears to convey non-critical information or feedback.        Info Alert Background Color           The color of the message boxes that appears to convey informative messages such as tips or additional information.        Warning Alert Background Color           The color of the message boxes that appears to convey warning messages such as potential risks or notifications that require your attention.        Error Alert Background Color           The color of the message boxes that appears to convey error messages such as system failures or critical errors.        Illustrations Primary Color           This is the primary color used for the SVG illustrations in My Account portal.        Secondary Color           This is the secondary color used for the SVG illustrations in My Account portal.        Accent Color 1           This is the primary accent color used for the SVG illustrations. Choose a color that will draw attention to specific elements of your illustration and highlight key features of your user interface design.        Accent Color 2           This is the secondary accent color used for the SVG illustrations. Choose an alternate accent color that harmonizes with your design aesthetic and enhances the overall visual appeal of your SVG illustration.        Accent Color 3           This is the tertiary accent color used for the SVG illustrations. Choose an accent color that harmonizes with your design aesthetic and enhances the overall visual appeal of your SVG illustration.        <p>:::</p> Note <p>Decide how you want the footer to look in the login screens by modifying the following attributes:</p> Border Color           The color of the top border of the footer that appears on the login screens.          By default, the Default Outline Color from the Color Palette will be used until a value for this is defined.        Font Color           The font color of the texts and links that appear on the footer.          By default, the Primary Text Color from the Color Palette will be used until a value for this is defined.        <p>:::</p> Note <p>Use one of the following options to override the default font for the theme you selected.</p> Use a web-safe font Font Family           The list of available web-safe fonts to select from.          By default, Asgardeo uses Montserrat as the font family.        Import a font Font Import URL           Get the URL of a hosted font from the font service and add it here.          E.g., <code>https://fonts.googleapis.com/css2?family=Poppins&amp;display=swap</code> Font Family           This is the font family corresponding to the font imported using the URL  (specified in the Font Import URL field).          E.g., <code>Poppins</code>, <code>Sans-serif</code> <p>:::</p> Note <p>These preferences decide the look and feel of  <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>, and <code>h6</code> elements on the login screens.</p> Font Color           This is the font color of the headings that appear on the login screens.          By default, the Default Outline Color from the Color Palette will be used until a value for this is defined.        <p>:::</p> Note <p>These preferences change the look and feel of buttons that appear on the login screens.</p> Primary Button Font Color           This is the font color of the text inside the primary action buttons.          By default, Asgardeo uses white as the font color for primary buttons.        Border Radius           This is the border radius of the primary action buttons.          By default, Asgardeo uses four pixels as the border-radius for primary buttons.        Secondary Button Font Color           This is the font color of the text inside the secondary action buttons.          By default, Asgardeo uses a dark gray shade as the font color for secondary buttons.        Border Radius           This is the border radius of the secondary action buttons.          By default, Asgardeo uses four pixels as the border-radius for secondary buttons.        External Connection Button <p>These preferences change the look and feel of buttons used for linking external identity providers (Facebook, Google, etc.) from the login screens.</p> Background Color           This is the background color for external-connection buttons.          By default, Asgardeo uses a light gray shade as the font color for external-connection buttons.        Font Color           This is the font color of the text inside the external-connection buttons.          By default, Asgardeo uses a dark gray shade as the font color for external-connection buttons.        Border Radius           This is the border radius of the external-connection buttons.          By default, Asgardeo uses four pixels as the border-radius for external-connection buttons.        <p>:::</p> Note <p>These preferences change the look and feel of input fields, checkboxes, etc. on the login screens.</p> Background Color           This is the background color of the inputs on the login screens.          By default, Asgardeo uses white as the background color for the inputs.        Font Color           This is the font color of the inputs on the login screens.          By default, the Primary Text Color from the Color Palette  will be used until a value for this is defined.        Border Color           This is the border color of the inputs on the login screens.          By default, the Default Outline Color from the Color Palette will be used until a value for this is defined.        Border Width           This is the border radius of the inputs on the login screens.          By default, Asgardeo uses <code>four</code> pixels as the border-radius for the login box.        Border Radius           This is the border radius of the login box.          By default, Asgardeo uses 12 pixels as the border-radius for the login box.        Input Labels Font Color           This is the font color of the input labels on the login screens.          By default, the page font color will be used until a value for this is defined.        <p>:::</p> Note <p>These are the specific design preferences you can update specifically for login, sign-up, account recovery flows. If these are not set, the values will be inferred from the color palette.</p> Background Color           This is the background color that appears on the login, sign-up, account recovery screens.          By default, the Main Background Color from the Color Palette will be used until a value for this is defined.        Font Color           The font color of the text that appears on the login, sign-up, account recovery screens.          By default, the Primary Text Color from the Color Palette will be used until a value for this is defined.        <p>:::</p> Note <p>These preferences change how the login box appears on the screens.</p> Background Color           This is the background color of the login box.          By default, the Main Surface Background Color from the Color Palette will be used until a value for this is defined.        Font Color           This is the font color of the text inside the login box.          By default, the Primary Text Color from the Color Palette will be used until a value for this is defined.        Border Color           This is the border color of the login box.          By default, the Default Outline Color from the Color Palette will be used until a value for this is defined.        Border Width           This is the border width of the login box.          By default, Asgardeo uses one pixel as the border width for the login box.        Border Radius           This is the border-radius of the login box.          By default, Asgardeo uses <code>12</code> pixels as the border-radius for the login box.        <p>:::</p>"},{"location":"guides/branding/configure-ui-branding/#advanced-preferences","title":"Advanced preferences","text":"<p>Listed below are some advanced branding preferences you can apply to the user registration and login interfaces.</p> Privacy Policy           This is a link to a statement or a legal document that states how your organization collects, handles, and processes the data of your users and visitors.          Once you configure a valid URL, Asgardeo will show this on the footer of the login screens.        Terms of Service           This is a link to an agreement that your users must agree to and abide by in order to use your organization's applications or other services.          Once you configure a valid URL, Asgardeo will show this on the footer of the login screens.        Cookie Policy           This is a link to a document or a webpage with detailed information on all cookies used by your applications and the purpose of each of them."},{"location":"guides/branding/customize-email-templates/","title":"Customize email templates","text":"<p>The following topics explain how you can customize email notifications that are sent to users of your Asgardeo organization.</p>"},{"location":"guides/branding/customize-email-templates/#customize-email-branding","title":"Customize email branding","text":"<p>Once you publish your branding preferences on Asgardeo, the branding preferences are automatically applied to emails sent to the users of your organization.</p> <p>Note</p> <p>This feature was onboarded on 20th September 2022. Email template branding will not be applied to email templates of organizations created before this date.</p> <p>If you need to apply organization branding to your emails, contact the Asgardeo team at asgardeo-help@wso2.com.</p> <p>The branding variables that affect the email templates are as follows:</p> <p>Note</p> <p>If you have  suborganizations  configured, note that the email branding you configure for your root organization also applies to your suborganizations.</p> <p></p> Template variable Branding preference 1 Organization Logo Design &gt; Theme Preferences &gt; Images &gt; Logo URL Logo alternative text Design &gt; Theme Preferences &gt; Images &gt; Logo Alt Text 2 Primary color Design &gt; Theme Preferences &gt; Color Palette &gt; Primary Color 3 Email background color Design &gt; Theme Preferences &gt; Color Palette &gt; Body Background &gt; Main Background Color 4 Email body color Design &gt; Theme Preferences &gt; Color Palette &gt; Surface Background &gt; Main Surface Background Color 5 Email font Design &gt; Theme Preferences &gt; Font &gt; Font Family 6 Email body font color Design &gt; Theme Preferences &gt; Color Palette &gt; Text Colors &gt; Primary Text Color 7 Email button font color Design &gt; Theme Preferences &gt; Buttons &gt; Primary Button &gt; Font Color 8 Copyright text General &gt; Copyright Text 9 Support email General &gt; Contact Email"},{"location":"guides/branding/customize-email-templates/#customize-email-content","title":"Customize email content","text":"<p>You can tailor the subject, body, and footer of email notifications to your preferences by following the steps below.</p> <ol> <li>On the Asgardeo Console, go to Develop &gt; Email Templates.</li> <li> <p>Select the email template and the relevant locale that you wish to modify.     </p> </li> <li> <p>Make your modifications in the Content tab and use the Preview tab for a real-time preview.</p> </li> <li> <p>Click Save to publish your changes.</p> </li> </ol> <p>Alternatively, you can customize the content of email templates using the Email Templates API provided by Asgardeo.</p> <p>Note</p> <p>Learn more about email templates and the available email literals in the Email templates documentation.</p>"},{"location":"guides/branding/customize-email-templates/#customize-email-settings","title":"Customize email settings","text":"<p>You can customize the default settings set by Asgardeo for parameters such as from address and replyTo by contacting the Asgardeo team at asgardeo-help@wso2.com.</p>"},{"location":"guides/fragments/manage-app/conditional-auth/configure-conditional-auth/","title":"Configure conditional auth","text":"<p>Follow the steps given below.</p> <ol> <li>On the Asgardeo Console, click Applications.</li> <li>Select the application for which you wish to apply a conditional login flow and go to its Sign-in Method tab.</li> <li>Click Start with default configuration to define the login flow starting with the <code>username and password</code> login.</li> <li>Turn on Conditional Authentication by switching the toggle on. You can define your conditional authentication script in the editor.</li> </ol> <p></p> <p>!!! warning Important       As a security measure, Asgardeo does not allow the usage of two consecutive periods (<code>..</code>) in authentication scripts.</p>"},{"location":"guides/fragments/manage-app/discover-endpoints/discover-from-discovery-endpoint/","title":"Discover from discovery endpoint","text":"<p>OpenID Connect Discovery  provides the capability to discover the metadata such as endpoints, scopes, response types, claims, supported client authentication methods of Identity providers such as Asgardeo.</p> <p>Application can dynamically discover the OpenID Connect identity provider metadata by calling the OpenID Connect discovery  endpoint, which follows the structure given below. <code>&lt;issuer&gt;/.well-known/openid-configuration</code>.  </p> <p>Issuer of Asgardeo: <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\n</code></pre></p> <p>Discovery endpoint of Asgardeo: <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token/.well-known/openid-configuration\n</code></pre></p> <p>Sample request:</p> <p> <p> <pre><code>curl --location --request GET 'https://api.asgardeo.io/t/bifrost/oauth2/token/.well-known/openid-configuration'\n</code></pre> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/bifrost/oauth2/token/.well-known/openid-configuration\",\n\"method\": \"GET\",\n\"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\n\nvar config = {\nmethod: 'get',\nurl: 'https://api.asgardeo.io/t/bifrost/oauth2/token/.well-known/openid-configuration',\nheaders: {}\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p></p> <p></p> <p></p> <p>Sample response: <pre><code>{\n.\n.\n\"introspection_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/introspect\",\n\"end_session_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oidc/logout\",\n\"registration_endpoint\" : \"https://api.asgardeo.io/t/bifrost/api/identity/oauth2/dcr/v1.0/register\",\n\"token_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"jwks_uri\" : \"https://api.asgardeo.io/t/bifrost/oauth2/jwks\",\n\"revocation_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/revoke\",\n\"authorization_endpoint\" : \"https://api.asgardeo.io/t/bifrost/oauth2/authorize\",\n\"issuer\" : \"https://api.asgardeo.io/t/bifrost/oauth2/token\"\n.\n.\n}\n</code></pre> </p>"},{"location":"guides/fragments/manage-app/discover-endpoints/discover-oidc-endpoints-from-console/","title":"Discover oidc endpoints from console","text":"<ol> <li>On the Asgardeo Console, go to Develop &gt; Application.</li> <li>Select an OIDC application from the application view.</li> <li>Go to the Info section of the application and find the server endpoints to your organization.    </li> </ol>"},{"location":"guides/fragments/manage-app/manage-user-attributes/disable-user-consent/","title":"Disable user consent","text":"<p>Asgardeo prompts users with a consent page. From the consent page, users can select the attributes that can be shared with the application or deny the consent request.</p> <p>If you don't want to provide that control to users, you can disable the consent screen as follows:</p> <ol> <li>Sign in to the Asgardeo Console and select the application for which user consent needs to be disabled.</li> <li>Go to the Advanced tab and enable Skip login consent.</li> </ol> <p></p>"},{"location":"guides/fragments/manage-app/manage-user-attributes/get-user-consent/","title":"Get user consent","text":"<p>Once the user is logged in to Asgardeo, Asgardeo requests consent from the end user to share user attributes with the application.</p> <p>If the user does not have the attribute details in the user profile, Asgardeo will prompt the user to enter the mandatory user attributes during login.  </p> <p>The user can do one of the following during login:</p> <ul> <li> <p>Select specific user attributes and click Allow.</p> <p>This will share only the selected user attributes with the application. However, note that the user cannot unselect the mandatory user attributes.</p> </li> <li> <p>If the user does not want to share any of the requested user attributes, they can click Deny.</p> </li> </ul> <p>Asgardeo will not prompt for consent for the allowed attributes again unless a user revokes the provided consent via MyAccount.</p>"},{"location":"guides/fragments/manage-app/manage-user-attributes/select-mandatory-attributes/","title":"Select mandatory attributes","text":"<p>You can configure the mandatory attributes that are essential for application functionalities. That is, when a user logs in, the user information linked to these attributes are required to be shared with the application.</p> <p>If the user does not have this information entered in the user profile, the user will be prompted to enter the information during the login flow.</p> <p>From the attributes that are enabled for the application in the Attributes tab, you can expand the scopes and select the attributes that are mandatory for the application:</p>"},{"location":"guides/fragments/manage-app/oidc-settings/access-token/","title":"Access token","text":"Token type <p>In additional to usual opaque tokens, Asgardeo supports self-contained JWT tokens as well.</p> <ol> <li>Opaque: These types of tokens are plain text tokens. If a resource server wants to know information related to opaque token, it has to query introspection endpoint and get the information related to tokens.</li> </ol> <pre><code>{\n\"access_token\": \"9fac7747-bb2d-46be-bef2-a95b2f69f8b2\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiJhYjdlMDNlMGQ3MzlkNmVlNmQxYTJkMGYwMTk0NDJiZDJiMDE5MDQyNjhiYzY5ZTkyYTg3OTViMjViYmU1NTdkIiwiYXRfaGFzaCI6IkNYb2hyLU9kZ1pISTF6VElvNHF6cmciLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiY19oYXNoIjoiajBhd1lkTGtOVF9mdVBzNVcwZ2VFUSIsInN1YiI6IkFsaWNhQGJpZnJvc3QuY29tIiwibmJmIjoxNjIzOTA0ODgzLCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjM5MDg0ODMsImlhdCI6MTYyMzkwNDg4M30.XHNsUSAcaRAFvOmWB366fdhbQzQxsDiJC0ADD1kiWpiFentvl6fh3h1ITN-x92623cJDYZbC-YK_OdeZ3X7hYLHOK6UXu_gEA4GIaExl7B3iWB9XLukdbU67AX-QpqPFbPgYLqq3CIyyYUxjDC9F22CQreWREc8neLkMW0ejMvZSK7q3hNtuxh6Ox2yhoIJT4KgCygZO259L8xzp6ZuCNDp39nIRsj4zjTOuvz92Md6DC_eauS1BF0SaIZO4YG1PW-FVfmOppcqE0P3MCH8D3EOvmSj2ZqSJRy5hki8E7LOmBhUp4O6yLPWEgFf8QGNa2xAIWK2YqX4kezEyj6Iftw\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3522\n}\n</code></pre> <ol> <li>JWT token: JWT tokens are self-contained verifiable access tokens. They contain information related to tokens. If a resource server wants to know the information related to that token, it can decode the token and get the required information without any additional network calls.</li> </ol> <p><pre><code>{\n\"access_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJBbGljYUBiaWZyb3N0LmNvbSIsImF1dCI6IkFQUExJQ0FUSU9OX1VTRVIiLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwibmJmIjoxNjIzOTA0ODA1LCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwic2NvcGUiOiJvcGVuaWQiLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjM5MDg0MDUsImlhdCI6MTYyMzkwNDgwNSwianRpIjoiOWZhYzc3NDctYmIyZC00NmJlLWJlZjItYTk1YjJmNjlmOGIyIn0.ETimDfsoXiV2wqkCy7ZWZ-cO3mK8VaGKXvbBeFd8hh5TceGppRvrOs_0Kxez6p8gVRTrCbv-iBIrJFikl_I_euqTk30-JfPxvh0ox5RxY_4nsXs8GGycJwL40XfssE5BLlFSff2YIsbvy6Mbih8_Jerb-RA6j7cAZSII_T-4ATD7mk9DeXmK_-jwqBoyH0UNtAxJKLgfIs8G2yIiioaS4rSnX8tEGGvPvcaDzeTdNx2RNKod_EYlWDNJVtJHUf61lstu4WSA0pdHyP5_Fpbhe4pu_FaXeSMyAwsHYIENWVarB8kknvyUnL51lkoOrIJaSHRjqIbSNteIJ3QyEQ-a8Q\",\n\"scope\": \"openid\",\n\"id_token\": \"eyJ4NXQiOiJZemM1T1Rnd1pURTNNV1F6TVdFek5ERm1OelZoTTJOaU9UQmxOamN3TlRJNU9HTTBNbVExWWprd1lqZzJNVEl3WldNd056TTRNemcxWkdJeVpEZzNaQSIsImtpZCI6Ill6YzVPVGd3WlRFM01XUXpNV0V6TkRGbU56VmhNMk5pT1RCbE5qY3dOVEk1T0dNME1tUTFZamt3WWpnMk1USXdaV013TnpNNE16ZzFaR0l5WkRnM1pBX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJpc2siOiJhYjdlMDNlMGQ3MzlkNmVlNmQxYTJkMGYwMTk0NDJiZDJiMDE5MDQyNjhiYzY5ZTkyYTg3OTViMjViYmU1NTdkIiwiYXRfaGFzaCI6IjZSWkQ4a2lZYkFpZkh4OENldWJUcXciLCJhdWQiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiY19oYXNoIjoiWjVPXzk5cmZFSkFabjJSUl9yTEhxZyIsInN1YiI6IkFsaWNhQGJpZnJvc3QuY29tIiwibmJmIjoxNjIzOTA0ODA1LCJhenAiOiJXc29xOHQ0bkhXODBnU25QZnlEdlJiaUNfX0VhIiwiYW1yIjpbIkJhc2ljQXV0aGVudGljYXRvciJdLCJpc3MiOiJodHRwczpcL1wvYWNjb3VudHMuYXNnYXJkZW8uaW9cL3RcL2JpZnJvc3RcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2MjM5MDg0MDUsImlhdCI6MTYyMzkwNDgwNSwic2lkIjoiOTE3MzQzOGQtNDFlNy00MmFhLWFmZTctNjlkNDM3Njk1NTRlIn0.f9rTgJtDD6VAUQ1fXZCbiUtg66B0Q5nNSgGTIbrCI6aBC8sn2QmhI4YFqXntj72b2T7-TTYXiY4k6iQH665Oc_KfhxJIwrCW4X96h6dMMHcDMQYuP5blZNMuP8fi42sFAVgAUcs4B5Lfq-nIiPrqO90XGJVyrzJEdSoGsgbX9fg6HWbx016Shla2oKeVzsvZra6uflk4S1bsEVnk5gmRjZ25Vueqtb5qJW291i38-dKhO6FDEkAJyw_QWG6nK_ZpOMx4GW6qj0GTEKrC_TuUTp5hUX1xUnpLRFHcN8WAQoe7_g6JyLOUQzQSFTr-CniwwftwnK0DcGq916bRPvTEjw\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3600\n}\n</code></pre> </p> User access token expiry time <p>This provides the validity period of access tokens issued to a user in seconds. The default expiry time is 3600 seconds.</p> Application access token expiry time <p>This specifies the validity period of the access tokens issued to an application with the <code>Client Credentials</code> grant in seconds.</p>"},{"location":"guides/fragments/manage-app/oidc-settings/allowed-origin/","title":"Allowed origin","text":"<p>For security reasons, browsers restrict cross-origin HTTP requests initiated from browser scripts. Cross Origin Resource Sharing(CORS) allows your application to do cross-origin HTTP requests.</p> <p>Allowed origins are the set of URLs that are allowed to access Asgardeo APIs from javascript. By pre-registering the application origin as an allowed one, applications can access APIs of Asgardeo: - Token endpoint - JWKS endpoint - Userinfo endpoint - Other APIs</p>"},{"location":"guides/fragments/manage-app/oidc-settings/authorized-urls/","title":"Authorized urls","text":"<p>Authorized redirect URLs determine where Asgardeo will redirect users after authentication and logout. An application can have multiple Authorized redirect URLs.</p>"},{"location":"guides/fragments/manage-app/oidc-settings/id-token/","title":"Id token","text":"Audience <p>Specifies the recipient(s) that this ID token is intended for. By default, the client ID of this application is added as an audience. You can add multiple audiences in the ID token.</p> <p>Sample default ID token:  <pre><code>{\n\"isk\": \"c37e33a87f794f9db4e43eeec5596dd0f64ba43c2c8a6e35eb4bd09e8a09d58a\",\n\"at_hash\": \"sXH3BGop66MmXp0CCWDk2A\",\n\"aud\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"c_hash\": \"IgFIyrsoOeTwjdAaG3y3OQ\",\n\"sub\": \"Alice@bifrost.com\",\n\"nbf\": 1623843889,\n\"azp\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"exp\": 1623847489,\n\"iat\": 1623843889\n}\n</code></pre></p> <p>Sample ID token when <code>sample_app</code> is added as a audience value:</p> <p><pre><code>{\n\"isk\": \"1f77c2907c1c2670d73909d3dad38cd02ecda3c21a343dec9d75b51630ca5418\",\n\"at_hash\": \"a387Ursh5iNxeMmNViWT2A\",\n\"aud\": [\n\"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"sample_app\"\n],\n\"c_hash\": \"tz02tie7nYsK4__SFj2uKQ\",\n\"sub\": \"Alice@bifrost.com\",\n\"nbf\": 1623908834,\n\"azp\": \"Wsoq8t4nHW80gSnPfyDvRbiC__Ea\",\n\"amr\": [\n\"BasicAuthenticator\"\n],\n\"iss\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"exp\": 1623912434,\n\"iat\": 1623908834\n}\n</code></pre> </p> Enable encryption <p>Specifies whether to enable encryption for the ID token when the token is issued. The public key of your application is used for encryption.</p> <p>To enable encryption, you should configure the certificate of your application from the Certificates section.</p> Algorithm <p>A single-use AES secret key, called the Content Encryption Key (CEK), is generated to encrypt the ID token payload.</p> <p>Asgardeo uses the public Key of the application (obtained from the certificate) and the asymmetric encryption algorithm specified here to encrypt the generated CEK. The selected algorithm is mentioned as the \"alg\" in the ID token header.</p> Encryption Method <p>The encryption method defines a symmetric encryption algorithm for encrypting ID tokens.</p> <p>Asgardeo uses a generated CEK value and the symmetric encryption algorithm specified here to encrypt the ID token. The selected encryption method is mentioned as the \"enc\" in the id token header.</p> ID Token expiry time <p>Provides the validity period of ID token in seconds. The default value is 3600 seconds.</p>"},{"location":"guides/fragments/manage-app/oidc-settings/pkce-mandatory/","title":"Pkce mandatory","text":"<p>By enabling this option, Asgardeo mandates an application to use PKCE with the authorization code flow. The application has to send a <code>code challenge</code> in the authorization request and the corresponding <code>code verifier</code> in the token request. Asgardeo supports <code>SHA-256</code> and <code>plain</code>.</p> <p>Sample authorization request <pre><code>https://api.asgardeo.io/t/bifrost/oauth2/authorize?scope=openid&amp;response_type=code&amp;redirect_uri=&lt;redirect_uri&gt;&amp;client_id=&lt;client_id&gt;&amp;code_challenge=&lt;code_challenge&gt;&amp;code_challenge_method=&lt;code_challenge_method&gt;\n</code></pre></p> <p>Sample token request:</p> <p> <pre><code>curl --location --request POST 'https://api.asgardeo.io/t/bifrost/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri=https://localhost:5000' \\\n--data-urlencode 'code_verifier=WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO' \\\n--data-urlencode 'client_id=fv_LScHaB83PN4VPX1cHufphtHQa'\n</code></pre> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"code\": \"60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d\",\n\"grant_type\": \"authorization_code\",\n\"redirect_uri\": \"https://localhost:5000\",\n\"code_verifier\": \"WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO\",\n\"client_id\": \"fv_LScHaB83PN4VPX1cHufphtHQa\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'code': '60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d',\n'grant_type': 'authorization_code',\n'redirect_uri': 'https://localhost:5000',\n'code_verifier': 'WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO',\n'client_id': 'fv_LScHaB83PN4VPX1cHufphtHQa'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://api.asgardeo.io/t/bifrost/oauth2/token',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata: data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p> </p>"},{"location":"guides/fragments/manage-app/oidc-settings/pkce-plain-text/","title":"Pkce plain text","text":"<p>If this configuration is selected, the applications can use <code>plain</code> algorithm. i.e,<code>code_challenge = code_verifier</code>. But this is not recommended due to security best practises.</p> <p>```  https://api.asgardeo.io/t/bifrost/oauth2/authorize?response_type=code&amp;client_id=Wsoq8t4nHW80gSnPfyDvRbiC__Ea&amp;scope=openidprofile&amp;redirect_uri=http%3A%2F%2Flocalhost%3A5000&amp;code_challenge_method=plain&amp;code_challenge=nAkA5m0EKlFbHFvF_V53Icig9gSnqr-HxH44Lvkne2c <pre><code>_Sample token request_:\n\n&lt;CodeGroup&gt;\n&lt;CodeGroupItem title=\"cURL\" active&gt;\n\n```bash\ncurl --location --request POST 'https://api.asgardeo.io/t/bifrost/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'code=60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'redirect_uri=https://localhost:5000' \\\n--data-urlencode 'code_verifier=nAkA5m0EKlFbHFvF_V53Icig9gSnqr-HxH44Lvkne2c' \\\n--data-urlencode 'client_id=fv_LScHaB83PN4VPX1cHufphtHQa'\n</code></pre></p> <p></p> <p> <pre><code>var settings = {\n\"url\": \"https://api.asgardeo.io/t/bifrost/oauth2/token\",\n\"method\": \"POST\",\n\"timeout\": 0,\n\"headers\": {\n\"Content-Type\": \"application/x-www-form-urlencoded\"\n},\n\"data\": {\n\"code\": \"60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d\",\n\"grant_type\": \"authorization_code\",\n\"redirect_uri\": \"https://localhost:5000\",\n\"code_verifier\": \"WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO\",\n\"client_id\": \"fv_LScHaB83PN4VPX1cHufphtHQa\"\n}\n};\n\n$.ajax(settings).done(function (response) {\nconsole.log(response);\n});\n</code></pre> <p></p> <p> <pre><code>var axios = require('axios');\nvar qs = require('qs');\nvar data = qs.stringify({\n'code': '60cb4ba7-b7b2-3f2f-8319-58122f1b2f5d',\n'grant_type': 'authorization_code',\n'redirect_uri': 'https://localhost:5000',\n'code_verifier': 'WAOqjmxMpCnjME0mRpd8pDZNT8bEIpCdHgMKFqxoAVtEb4LhJ0KSg8Rl0z0O3pySx4HGp53R87bckxOxrXk2oNav0fgWzFdOyBRrvA8ZTgCG7MlQcY9mfamCM8SWnGgO',\n'client_id': 'fv_LScHaB83PN4VPX1cHufphtHQa'\n});\nvar config = {\nmethod: 'post',\nurl: 'https://api.asgardeo.io/t/bifrost/oauth2/token',\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded'\n},\ndata: data\n};\n\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <p> </p>"},{"location":"guides/fragments/manage-app/oidc-settings/public-client/","title":"Public client","text":"<p>A public client is an application which cannot keep the client credentials in secure way. It is recommended to use authorization code grant type for public clients. In addition to that, PKCE should be used along with authorization code to mitigate code interception attacks. A public client does not need to authenticate to Asgardeo with <code>client_secret</code>.</p>"},{"location":"guides/fragments/manage-app/oidc-settings/refresh-token/","title":"Refresh token","text":"<p>These configurations are enabled only if refresh token grant type is added as an allowed grant type.</p> Renew refresh token <p>Asgardeo issues a new refresh token each time when access token is refreshed with refresh token grant type. The previous token gets invalidated.</p> <p>If the application does not want to get a new refresh token for each request, you can clear the Renew refresh token checkbox. Then, the same refresh token will be issued with refresh token grant type until the refresh token expires.</p> <p></p> Refresh token expiry time <p>Provides the validity period of refresh token in seconds. The default value is 86400 seconds.</p>"},{"location":"guides/fragments/manage-app/register-app/configure-web-app-oidc-in-asgardeo/","title":"Configure web app oidc in asgardeo","text":"<ol> <li>In the Asgardeo Console, Select the Develop &gt; Applications.</li> <li>Select New Application and select Traditional Web Application type.    </li> <li>Provide the following details.</li> <li>Name: A unique name to identify your application.</li> <li>Protocol: The access configuration protocol which will be used to log in to the application using SSO. Select OpenID Connect since we need to secure the app with OIDC.</li> <li>Authorized Redirect URLs: The authorized redirect URLs determine where the authorization code is sent to once the user is authenticated.      </li> <li>Click Register .</li> </ol>"},{"location":"guides/fragments/manage-connection/add-groups/","title":"Add groups","text":"<p>To add groups to a connection on Asgardeo:</p> <ol> <li>On the Asgardeo Console, go to Connections.</li> <li> <p>Select your connection and go to the Groups tab.</p> <p>Note</p> <p>Note that the Groups tab is only available for enterprise and social login connections.</p> </li> <li> <p>Enter the name of the connection's group attribute you wish to map to the group attribute of Asgardeo.     </p> </li> <li>Click Update.</li> <li>Click + New Group and enter the group name. Ensure that the name matches the configuration in the federated connection.     </li> <li>Click Finish to add the group information.</li> </ol>"},{"location":"guides/fragments/manage-connection/delete-connection/","title":"Delete connection","text":"<p>Note</p> <p>If your connection has applications associated with it, you will not be able to delete the connection.</p> <p> Before deleting such connections:</p> <ol> <li>Check the associated applications from the Connected Apps tab of the connection.</li> <li>Click on an application that uses the connection and you will be redirected to the Sign-in Method tab of the respective application.</li> <li>Remove the connection from the sign-in flow of the associated applications.</li> <li>Repeat steps 2 and 3 for all listed applications.</li> <li>Proceed to delete the connection.</li> </ol> <p>To delete a connection that does not have any applications using it: 1. On the Asgardeo Console, go to Connections. 2. Click Set up and navigate to the General tab. 3. At the bottom of the page, click the button in the Delete connection.</p> <pre><code>!!! note\n    You cannot delete connections that are available by default.\n</code></pre> <ol> <li> <p>Select the checkbox and confirm your action.</p> <p></p> </li> </ol>"},{"location":"guides/fragments/self-service/change-password/","title":"Change password","text":"<p>Note</p> <p>Users onboarded from a read-only remote user store do not have the capability of changing their password on the My Account portal.</p> <p>To change the current password via My Account, the account owner should follow these steps. Alternatively, the account owner can reset the password from the application login page.</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Security &gt; Change Password.</li> <li>Click Change your password.    </li> <li>Enter Current password and New password.</li> <li>Click Submit.</li> </ol>"},{"location":"guides/fragments/self-service/export-profile-information/","title":"Export profile information","text":"<p>The account owner can export the profile information via the My Account portal.</p> <p>Given below are the steps to follow.</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Personal Info &gt; Export Profile.</li> <li>Click Download the profile to export the user profile information as a <code>.json</code> file.    </li> </ol>"},{"location":"guides/fragments/self-service/manage-consents/","title":"Manage consents","text":"<p>When a user logs in to applications, Asgardeo prompts for the user's consent to access the user attributes the application requires. The user can view the consents given to applications and revoke them if needed.</p> <p>Given below are the steps to follow.</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Security &gt; Manage Consents.</li> <li>View the applications for which consent is given.</li> <li>Select an application and click See more. The attributes shared with the selected application are listed.    </li> <li>You can do one of the following:<ul> <li>Clear the attributes individually and click Update. This removes access to the unselected user attributes for the given application.</li> <li>Click Revoke to revoke all the user attributes shared with that application.</li> </ul> </li> </ol> <p>If consent is revoked for a user attribute, the user will be prompted for consent in the next login attempt to that application.</p>"},{"location":"guides/fragments/self-service/manage-linked-social-accounts/","title":"Manage linked social accounts","text":"<p>The account owner can view one's linked social accounts and remove them if needed.</p> <p>Given below are the steps to follow.</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Personal Info &gt; External Logins.</li> <li>To remove any of the linked accounts, click Remove.    </li> </ol>"},{"location":"guides/fragments/self-service/manage-login-sessions/","title":"Manage login sessions","text":"<p>The account owner can self-manage active sessions via My Account as follows:</p> <ol> <li>Sign in to the My Account portal.</li> <li>Click Security &gt; Active Sessions. All the active login sessions of the user are listed.</li> <li>Click See more for a session to get more details.    </li> <li>Click Terminate to terminate a selected session.</li> <li>Click Terminate all at the upper-right to terminate all the active sessions.</li> </ol>"},{"location":"guides/fragments/self-service/update-profile/","title":"Update profile","text":"<p>The user details displayed in a user's profile corresponds to the default attributes that are enabled for the organization.</p> <p>To update profile information via My Account, the account owner should follow these steps.</p> <ol> <li>Sign in to the My Account portal.</li> <li> <p>Click Personal Info to see the profile information.    </p> </li> <li> <p>If required, update the editable information.</p> </li> </ol>"},{"location":"guides/organization-management/","title":"Organization management","text":"<p>When you create an account in Asgardeo, you define your first organization, which functions as the super organization or tenant in your Asgardeo subscription. From thereon, you (the account owner) or other delegated administrators can create multiple organizations via the Asgardeo Console and switch between them.</p> <p>Listed below are the main characteristics of an organization. - An organization contains applications, external identity providers, and user identities belonging to a single domain. - Users or applications created in one organization cannot access the resources of another organization unless they are onboarded to that organization. - The administrator who creates the organization is the owner of the organization.</p> <p>The organizations you create in Asgardeo can be structured according to your business needs as follows:</p> <p>B2C organizations</p> <p>In a B2C scenario,</p> <ul> <li> <p>you will create an organization to represent your business.</p> </li> <li> <p>the organization manages the identity and access management requirements of your B2C applications and the user identities of your direct consumers.</p> </li> <li> <p>You may create separate organizations to replicate the environments of the application development lifecycle.</p> </li> </ul> <p>B2B organizations</p> <p>In a B2B scenario,</p> <ul> <li> <p>you will create an organization to represent your business, which functions as your primary organization.</p> </li> <li> <p>you will create subordinate organizations to onboard other business organizations (partners, suppliers, customer organizations, etc.) to your platform.</p> </li> <li> <p>administrators of each subordinate organization manage the respective organization\u2019s user base and define login experiences for applications according to the organization\u2019s requirements.</p> </li> </ul>"},{"location":"guides/organization-management/manage-environments/","title":"Manage environments","text":"<p>You can manage the development lifecycle of your applications by setting up the required environments as separate organizations.</p> <p>For example, you may require a development environment and a preprod environment in addition to your organization's production environment. These environments will be used during the development and testing phases before you go into production.</p>"},{"location":"guides/organization-management/manage-environments/#define-your-environments","title":"Define your environments","text":"<p>Follow the steps below to create a separate organization to represent each environment you require.</p> <ol> <li> <p>Go to the organization list and click New.</p> </li> <li> <p>Enter a name and description for your organization and click Create.</p> <p>Use unique organization names to identify the environments. For example, if your business organization is Bifrost, you may use the following convention:</p> <p> Business environment Bifrost Preprod environment BifrostPreProd Dev environment BifrostDev </p> </li> <li> <p>Onboard the required users to each environment.</p> <ul> <li> <p>As the owner, you can onboard the required administrators to each environment. Learn more about onboarding administrators.</p> <p>Note</p> <p>Note that some administrators may be needed in multiple environments. They can easily switch between the environments on the Asgardeo Console.</p> </li> <li> <p>Business users can be onboarded to each environment depending on the requirements. Learn more about onboarding users.</p> <p>Note</p> <p>Note that your actual business users (consumers) should only be onboarded to the business environment.</p> </li> </ul> </li> </ol>"},{"location":"guides/organization-management/manage-environments/#move-artifacts-between-environments","title":"Move artifacts between environments","text":"<p>The applications and other artifacts you develop should be migrated between environments after each phase of the development lifecycle until they are live in the business environment.</p> <p></p> <p>For example, once applications and artifacts are developed and tested in the BifrostDev environment, they need to be migrated to the BifrostPreprod environment for further testing and then moved to the live business environment.</p> <p>You can do this manually by recreating the artifacts in the higher environments.</p> <p>Note</p> <p>Some configurations, such as client IDs, secrets, URLs, and connection configurations, will be specific to the business environment, while other functional attributes, such as adaptive authentication scripts, remain the same in all environments.</p>"},{"location":"guides/organization-management/manage-organizations/","title":"Manage organizations","text":"<p>If you have a B2C (Business-to-Consumer) platform offering services to direct consumers, you can use an Asgardeo organization to manage the identities and access requirements of your users. Note that your first organization on Asgardeo is created when you sign up to Asgardeo.</p> <p>Note</p> <p>If you have a B2B platform, this will also be the primary organization of your platform. Your primary organization will work with other businesses to make your applications available to their users. Such businesses should be defined as sub organizations in your primary organization.</p> <p>The following guides explain how you can create and manage these organizations in Asgardeo.</p>"},{"location":"guides/organization-management/manage-organizations/#create-a-new-organization","title":"Create a new organization","text":"<p>To create a new organization in Asgardeo:</p> <ol> <li>Select the organization list and click New Organization.     </li> <li>Enter a name for your organization and click Create.     </li> </ol> <p>The new organization is now available in the organization list.</p> <p>Note</p> <p>If you a have B2B platform, you can now onboard your sub organizations. See the instructions on setting up sub organizations and build your B2B organization structure.</p>"},{"location":"guides/organization-management/manage-organizations/#switch-between-organizations","title":"Switch between organizations","text":"<p>When you have multiple organizations, you can switch between them on the Asgardeo Console by selecting the required organization from the list.</p> <p>The list of primary organizations will show all the organizations you own or to which you have administrator access.</p> <p></p>"},{"location":"guides/organization-management/manage-organizations/#delete-organizations","title":"Delete organizations","text":"<p>You cannot remove organziations using the Asgardeo Console. If you have such a requirement, contact the Asgardeo team at asgardeo-help@wso2.com. If you are a B2B platform and you want to remove a sub organization in your primary organization, see the instructions on deleting sub organizations.</p> <p>Note</p> <p>Note the following before you proceed to delete a primary organization:  - A deleted organization cannot be restored. Proceed with caution. - Only an organization owner can request a primary organization to be deleted. - Be sure to use the same email address of your owner user account to send the request. - If you remove all the primary organizations you own in Asgardeo, your user account will also be deleted from Asgardeo. </p> <p>To remove any of your primary organizations, send an email to <code>asgardeo-help@wso2.com</code> with the required details listed below. This information will help the Asgardeo team confirm the authenticity of your request. - The name of the organization you want to delete. - The first name, last name, and email address of your (owner\u2019s) Asgardeo user account.</p>"},{"location":"guides/organization-management/manage-organizations/#whats-next","title":"What\u2019s next?","text":"<ul> <li>Learn about managing administrators and users of an organization in the user management section.</li> <li>Learn about managing the environments of your SDLC.</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/","title":"Manage B2B organizations","text":"<p>If you have a business that offers Business-to-Business (B2B) solutions, you need to define the structure of your organization in Asgardeo so as to represent all your partner/supplier organizations. You can then share your applications and services with your partner/supplier organizations and allow them to manage their own identity and access management requirements.</p> <ul> <li> <p>All partner/supplier organizations of your business should be set up as sub organizations of your primary organization in Asgardeo.</p> <p>Note</p> <p>See Manage sub organizations for instructions.</p> </li> <li> <p>Once the sub organizations are set up, you should onboard administrators to them. These Administrators can then use a separate administration portal created using Asgardeo's B2B APIs to manage their respective sub organizations.</p> <p>Note</p> <p>See Manage administration for instructions.</p> </li> <li> <p>The primary business organization needs to share applications with its sub organizations so that the users managed by the sub organizations can log in and use them.</p> <p>Note</p> <p>See Share applications for instructions.</p> </li> <li> <p>Try out a complete B2B use case.</p> <p>Note</p> <p>See  Try a B2B use case for instructions.</p> </li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/","title":"API authorization for sub organizations","text":"<p>Asgardeo allows organizations to authorize user access to an application's API resources based on the API permissions, application roles, and groups assigned to the users. See API authorization for more information.</p> <p>API resources are created and authorized for applications on the root organization. If the application consuming the API resources is shared with the sub organization, all application-specific configurations of API resources are inherited by the sub organization.</p> <p></p>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#prerequisites","title":"Prerequisites","text":"<p>You need to configure your API resources on the root organization</p> <ol> <li>Register an API resource</li> <li>Authorize the API resource to an app</li> <li>Create application roles</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-sub-organization-user-groups-to-application-roles","title":"Assign sub organization user groups to application roles","text":"<p>Note</p> <p>The shared application will inherit the permission to role assignments from the application of the root organization.</p> <p></p> <p>Role-to-group assigning should be done separately for the sub organization, as the sub organization does not inherit the groups from the root organization.</p> <p>Application roles are application-specific and inherited from the root organization's application.</p> <p>You do not have permission to create new application roles, but you can assign these application roles to your sub organization groups.</p> <p>sub organizations maintain the following three types of groups, and you can assign your application roles to any of these groups. - Groups - A collection of sub organization users. - External Groups - These groups are federated from connections on the sub organization. For example, groups federated from the Google connection. - Invited User Groups - These are the user groups invited from the root organization to the sub organization.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-user-groups-to-application-roles","title":"Assign user groups to application roles","text":"<p>To assign application roles to user groups of the sub organization:</p> <ol> <li>On the Asgardeo Console, switch to the sub organization.</li> <li>Go to Roles &gt; Application Roles and click Configure.</li> <li>Expand the shared application and click <code>+</code> on the application role you wish to assign to a group.</li> <li>Go to Groups and click + Assign Groups.</li> <li>Select the group which should be assigned to the selected application role,</li> <li>Click Assign to complete the role to group assigning.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-external-groups-to-application-roles","title":"Assign external groups to application roles","text":"<p>To assign application roles to External Groups:</p> <p>Note</p> <p>To get started, - You should register, configure, and create groups for a connection in your sub organization. - You should add this connection to the sign-in flow of the application to which the application roles belong.</p> <ol> <li>On the Asgardeo Console, switch to the sub organization.</li> <li>Go to Roles &gt; Application Roles and click Configure.</li> <li>Expand the fragmented application and click <code>+</code> on the application role you wish to assign to a group.</li> <li>Go to the External groups tab and expand the connection from which you select groups.</li> <li>Select the group which should be assigned to the selected application role.</li> <li>Click Assign Group to complete the role to group assigning.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#assign-invited-user-groups-to-application-roles","title":"Assign invited user groups to application roles","text":"<p>Asgardeo provides support for inviting users from the parent organization to manage sub organization operations. Currently, this invitation flow can be implemented using API calls.</p> <p>To invite a root organization's user group and assign it to a role:</p> <ol> <li>Create a group in the root organization and assign the users that should be invited.</li> <li>Get the required access tokens to call the API.</li> <li> <p>Use the access token and the sub organization ID obtained after executing step 2 and execute the following cURL:     <pre><code>curl --location --request PATCH 'https://api.authz-dv.cloudservices.wso2.com/o/&lt;sub-org-id&gt;/applications/&lt;shared-app-id&gt;/roles/&lt;role-name&gt;/cross-org-group-mapping' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer &lt;access-token&gt;' \\\n--data '{\n    \"added_groups\": [\n        {\n            \"name\": \"&lt;userstore&gt;/&lt;group-name-in-root-org&gt;\",\n            \"organization\": \"&lt;root-org-id&gt;\"\n        }\n    ],\n    \"removed_groups\": []\n}'\n</code></pre>     Replace the following variables in the above request.</p> <p> Request Parameter Description <code>sub-org-id</code> The organization ID of the sub organization you are inviting the user group to. <code>shared-app-id</code> The application ID of the shared application in the sub organization. <code>role-name</code> The role name of the sub organization to which you wish to assign the invited user group. <code>access-token</code> The access token obtained for the sub organization. <code>userstore</code> The user store to which the user group belongs. The primary user store of Asgardeo is <code>DEFAULT</code>. <code>group-name-in-root-org</code> The name of the user group you wish to invite to the sub organization. <code>root-org-id</code> The organization ID of the root organization. </p> </li> </ol> <p>Once the above cURL is executed successfully, the application role of the sub organization will be assigned to the invited user group from the sub organization.</p> <p>To view the group-to-role assignment:</p> <ol> <li>On the Asgardeo Console, switch to the sub organization.</li> <li>Go to Roles &gt; Application Roles and click Configure.</li> <li>Expand the shared application and click <code>+</code> on the application role to which you assigned the invited user group.</li> <li>Go to the Invited User Groups tab. You will now see the invited user group assigned to the application role.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/api-authorization-for-b2b/#try-it-out","title":"Try it out","text":"<p>Follow the steps given below to try out the RBAC flow:</p> <p>Note</p> <p>Note that we are using Asgardeo's B2B Guardio insurance application for this scenario.</p> <p>To request scopes for the user:</p> <ol> <li> <p>Add the new scopes to the <code>APIScope</code> parameter of the <code>config.js</code> file of the sample application. You need to request these new scopes in addition to the OIDC scopes of your application.</p> <p>To get the scopes:</p> <ol> <li>On the Asgardeo Console, switch to the root organization.</li> <li>Go to Applications and select your application.</li> <li> <p>Copy the scopes listed at the end of the API Authorization section</p> <p></p> </li> </ol> </li> </ol> <p>::: tip When you add scopes to the configuration file, add them as comma-separated values. :::</p> <ol> <li>Access the application URL.</li> <li> <p>Try to log in as a user with a group and permission to access the API resource.</p> <p>Upon successful login, you will see the permission/scopes allowed for the user on the user consent page.</p> </li> <li> <p>Click Allow. You will now be redirected to the application.     You will be able to see the assigned permissions on the <code>allowedScopes</code> parameter of the authentication response.</p> </li> </ol> <p>Note</p> <p>If the user switches the organization to another sub organization, the scopes will be updated according to the roles assigned to the user in the switched organization.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/","title":"Administration of sub organizations","text":"<p>The following guides explain how to manage the administration tasks of sub organizations.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#prerequisites","title":"Prerequisites","text":"<p>Only sub organization creators can onboard administrators for their sub organizations using the Asgardeo Console.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#onboard-sub-organization-administrators","title":"Onboard sub organization administrators","text":"<p>Follow the steps given below to onboard sub organization administrators using the Asgardeo Console.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#step-1-create-a-user","title":"Step 1: Create a user","text":"<p>To create a new sub organization user:</p> <ol> <li> <p>Switch to the sub organization on the Asgardeo Console.</p> </li> <li> <p>Go to Users and click Add User.</p> </li> <li> <p>Enter the following details:      Email (Username) A unique email address to identify the user. First Name First name of the user. You can add/change this later. Last Name Last name of the user. You can add/change this later. </p> </li> <li> <p>You can either request the user to set the password or set one on the user's behalf.</p> <ul> <li> <p>Invite user to set their own password: If this option is selected, an email with a confirmation link will be sent to the provided email address for the user to set their own password.</p> </li> <li> <p>Set a temporary password for the user: If this option is selected, the administrator can set a temporary password for the user.</p> </li> </ul> </li> <li> <p>Click Finish to add the new user.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#step-2-assign-the-user-to-the-administrator-role","title":"Step 2: Assign the user to the Administrator role","text":"<p>The Administrator role is available in sub organizations by default. To assign the created user to this role:</p> <ol> <li> <p>Switch to the sub organization on the Asgardeo Console.</p> </li> <li> <p>Go to Roles and click Configure in the Organization Roles section.</p> </li> <li> <p>Select the Administrator role and go to the Users tab.</p> </li> <li> <p>Click the edit button to open the Manage Users dialog box.</p> </li> <li> <p>Assign the user to the role by selecting the user and moving to the box on the right.</p> <p>Note</p> <p>See details of all the available administrator permissions you are granting the sub organization administrator.</p> <p></p> </li> <li> <p>Click Save.</p> </li> </ol> <p>You have now onboarded an administrator to the sub organization. From thereon, the sub organization administrator can manage that organization's identity and access management requirements.</p> <p>Note</p> <p>Note that sub organization administrators do not have access to the Asgardeo Console as they are not direct users of Asgardeo. A separate administration portal is required to carry out these functions. Learn more about implementing an administration portal.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#implement-an-administration-portal","title":"Implement an administration portal","text":"<p>Sub organization administrators do not have access to the Asgardeo Console. Therefore, you should expose administrative functions to administrators through a separate administration portal in your application.</p> <p>The administration portal of your application should use Asgardeo's sub organization APIs to perform administrative operations.</p> <p>Note</p> <p>To access management APIs in Asgardeo, you need to register your application as a management application. Learn how to register a management application in Asgardeo</p> <p>The following are some of the features that your administration portal should contain.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#manage-users","title":"Manage users","text":"<p>The sub organization administrator should be able to onboard new users (administrators and consumers) to the sub organization. The identities of these users are stored in the default Asgardeo user store.</p> <p>The identity and access management requirements of these users will be managed by Asgardeo.</p> <p>The administration portal in your application should use the User management - SCIM2 API to create user operations.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#onboard-identity-providers","title":"Onboard identity providers","text":"<p>A sub organization may have an external identity provider (IdP) to manage the user identities of its employees and customers. Such an IdP may be already being used for the following purposes:</p> <ul> <li>Authenticating user logins to various applications.</li> <li>Branding the login interfaces to suit the organization.</li> <li>Enabling custom login experiences to different user groups.</li> </ul> <p>The sub organization administrator can onboard such corporate IdPs to the sub organization in Asgardeo as a connection. These IdPs can then be set as a login option in your application.</p> <p>The administration portal in your application should use the identity provider API to manage external IdPs.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#define-application-login-flows","title":"Define application login flows","text":"<p>Sub organization administrators should be able to customize the login flows of the application to suit business needs.</p> <p>For example, the administrator should be able to define the number of authentication steps that the application login flow needs and what login options should be available for each step.</p> <p>The administration portal in your application should use the application management API to manage application login flows.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-b2b-administration/#extend-administration-tasks","title":"Extend administration tasks","text":"<p>Explore the sub organization APIs of Asgardeo that are available for you to enable all the required administration capabilities from your administration portal.</p> <p>Note</p> <p>See the instructions on enabling organization login to try out a B2B organization login use case.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/","title":"Set up sub organizations","text":"<p>If you are a business having a B2B (Business-to-Business) platform, you can create sub organizations to manage other businesses that are partnered with you.</p> <p>Note</p> <p>Explore how you can structure Asgardeo organizations to fit your business model.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#prerequisites","title":"Prerequisites","text":"<p>To create sub organizations:</p> <ul> <li>You need to first have your primary business organization defined.</li> <li>You need to be an administrator in the primary business organization.</li> </ul>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#create-a-sub-organization","title":"Create a sub organization","text":"<p>Follow the steps given below to create a sub organization.</p> <ol> <li>First, select your primary organization from the list.</li> <li>On the Asgardeo Console, go to Sub Organizations and click Add Sub Organization.</li> <li>In the Add Sub Organization dialog box that opens, enter a name and description for your organization.     </li> <li> <p>Click Register to add the new sub organization. You will now see your sub organization listed as below.</p> <p></p> </li> <li> <p>Click the Switch icon next to the sub organization to go to the sub organization console.</p> </li> </ol> <p>Note</p> <p>As the creator of the sub organization, you will be assigned to the Administrator role of the sub organization by default, which grants you the following privileges from the console. - Update / Delete users. - Create a group and assign users. - Create identity providers. - Update the login options and general information of the applications shared from the primary organization. Learn more about shared applications.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#add-sub-organization-attributes","title":"Add sub organization attributes","text":"<p>Asgardeo lets you maintain additional data about the sub organization.</p> <p>For example, you can add information about the organization's location, country, number of employees, etc.</p> <p>To add additional information about your sub organizations:</p> <ol> <li>Switch to the primary organization and go to Sub Organizations.</li> <li>Select the sub organization to which you wish to add additional attributes.</li> <li>Go to the Attributes tab and add attributes by entering a Name and Value.</li> <li>Click + to add the new organization attribute.     </li> <li>Click Update to save the configurations.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#switch-between-sub-organizations","title":"Switch between sub organizations","text":"<p>When you have multiple sub organizations for your primary business organization, you can switch between them on the Asgardeo Console by selecting the required sub organization from the list as shown below.</p> <p></p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#create-a-sub-organization-for-your-sub-organization","title":"Create a sub organization for your sub organization","text":"<p>Warning</p> <p>You need a paid Asgardeo subscription to use this feature. If you don\u2019t already have one, view the available subscription plans and contact the Asgardeo sales team.</p> <p>Sub organization admins can create new sub organization for their organizations.</p> <p>To create a new sub organization for your sub organization:</p> <ol> <li>On the Asgardeo Console, switch to your suborganization.</li> <li>Go to Sub Organizations and click + Add Sub Organization.</li> <li>In the Add Sub Organization dialog box that opens, enter a unique name and description for your sub organization.</li> <li>Click Register to add the new sub organization.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#branding-for-sub-organizations","title":"Branding for sub organizations","text":"<p>Sub organizations will inherit the UI branding, email branding, and custom domain branding configurations from the root organization.</p> <p>Note</p> <p>See the instructions on: - how to configure UI branding for organizations. - how to configure custom domains for organizations. - how to customize email branding for organizations.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/manage-suborganizations/#delete-sub-organizations","title":"Delete sub organizations","text":"<p>You can delete any of the sub organizations of your primary organization as follows:</p> <ol> <li>Switch to your primary organization on the Asgardeo Console.</li> <li>Go to Sub Organizations to view the list of sub organizations.</li> <li>Click the delete icon next to the sub organization you want to delete.     </li> <li>Select the checkbox and confirm your action.</li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/share-applications/","title":"Share applications with sub organizations","text":"<p>Applications in the primary business organization will become available to sub organizations when you share them. Once an application is shared with a sub organization, its users can log in to the application using Organization Login.</p> <p>Follow the steps below to share your primary applications with sub organizations.</p> <ol> <li>Switch to your primary organization on the Asgardeo Console.</li> <li>Go to Applications and select the application that you want to share with your sub organizations.</li> <li> <p>Go to the Shared Access tab and select Share with only selected sub organizations.</p> <p>Note</p> <p>Select Share with all sub organizations if you want to share your application with all existing sub organizations and any new sub organizations you may create in the future.</p> </li> <li> <p>Select the sub organizations you wish to share your application with.</p> <p></p> </li> <li> <p>Click Update to save the configurations.</p> </li> <li> <p>Go to the Protocol tab of the application, be sure that the following grant types are allowed, and click Update.</p> <p>Note</p> <p>Note that the <code>Organization Switch</code> grant will only be visible after you share the application with sub organizations.</p> <ul> <li>Client Credential</li> <li>Code</li> <li>Organization Switch</li> </ul> </li> </ol> <p>Note the following: - Go to the Sign-in Method tab of the application and ensure that the Organization Login authenticator is added.</p> <pre><code>!!! note\n    This adds the **Sign in with Organization Login** option to the application login screen so that sub organization users can log in using their credentials.\n\n![Sign-in-method-options](../../assets/img/guides/organization/manage-organizations/organization-login-signin-method.png)\n</code></pre> <ul> <li> <p>Switch to the relevant sub organization and ensure that your application is available under Applications as a shared app.     </p> </li> <li> <p>Go to the Sign-in Method tab of the shared app and see that login with username and password is enabled.</p> </li> </ul> <p>Once an application is shared with a sub organization, its users can use the Sign In with Organization Login option to log in using their credentials.</p> <p>To try out a complete use case, see Try a B2B use case.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/","title":"Try a B2B use case (with organization login)","text":"<p>The following guide is a complete end-to-end use case on how to manage B2B (Business-to-Business) applications in Asgardeo.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#scenario","title":"Scenario","text":"<p>You are an administrator of Guardio Insurance, which is a company that provides its services to other business organizations.</p> <p>Best Car Mart has a partnership with Guardio Insurance to provide life insurance policies to its employees. Guardio Insurance exposes its services to Best Car Mart\u2019s employees through its Guardio Insurance App.</p> <p>The employees of Best Car Mart should be able to log in to the Guardio Insurance App to consume its services. The administrators of Best Car Mart will manage the users of its organization and also determine the login experience that their users should have.</p> <p></p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#prerequisites","title":"Prerequisites","text":"<p>You should create an organization. For this example we have created an organization named <code>Guardio Insurance</code>.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#set-up-the-sub-organization","title":"Set up the sub organization","text":"<p>As the administrator of Guardio Insurance, you need to first set up a sub organization.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-1-onboard-the-sub-organization","title":"Step 1: Onboard the sub organization","text":"<p>Create a sub  organization on the Asgardeo Console with <code>Best Car Mart</code> as the Sub organization Name.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-2-onboard-a-sub-organziation-administrator","title":"Step 2: Onboard a sub organziation administrator","text":"<p>Onboard an administrator to the Best Car Mart organization using the values given below.</p> Username (Email) Enter an email address as the user name. First Name Enter the first name of the user. <code>Alex</code> Last Name Enter the last name of the user. <code>Doe</code> Password Set a temporary password for the user."},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#set-up-the-app","title":"Set up the app","text":"<p>The following guides explain how you can share an application with sub organizations and allow sub organization users to log in to it using Organization Login.</p> <p>Let's use the sample application, Guardio Insurance app, to explore this use case.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-1-register-the-app-on-asgardeo","title":"Step 1: Register the app on Asgardeo","text":"<p>Follow the steps given below to register the Guardio Insurance App with Asgardeo.</p> <ol> <li>Switch to the primary organization.</li> <li> <p>Register a standard-based application in your primary organization with the following settings:</p> <p> Application Name Add a name for the application. <code>guardio-app</code> Protocol The authentication protocol to use. <code>OAuth2.0 OpenID Connect</code> Management Application Select this checkbox to indicate that the application has access to Asgardeo's management APIs. </p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-2-share-the-app-with-sub-organizations","title":"Step 2: Share the app with sub organizations","text":"<p>Share the Guardio Insurance app with your Best Car Mart sub organization. See instructions on how to share applications with sub organizations.</p> <p>By doing so, you enable Sign In with Organization Login as a login option in the application login screen, which sub organization users can use to log in.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-3-configure-the-app-on-asgardeo","title":"Step 3: Configure the app on Asgardeo","text":"<p>To configure the registered application on Asgardeo:</p> <ol> <li>On the Asgardeo Console, go to Applications and select the application you registered.</li> <li> <p>Go to the Protocol tab of the application, configure the following values.</p> <p>Note</p> <p>Note that the <code>Organization Switch</code> grant will only be visible after you share the application with sub organizations.</p> <p> Allowed Grant Types  Select the following grant types:             <ul> <li>Client Credential</li> <li>Code</li> <li>Organization Switch</li> </ul> Authorization Redirect URL Enter the URLs of the application to which users should be redirected after login and logout. <ul> <li><code>http://localhost:3000/api/auth/callback/wso2is</code></li> <li><code>http://localhost:3000</code></li> </ul> Allowed Origins Enter the allowed origins. <code>http://localhost:3000</code> </p> <p>Take note of the <code>client_id</code> and <code>client_secret</code> generated for your application.</p> </li> <li> <p>Click Update to save your configurations.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#step-4-set-up-the-client-app","title":"Step 4: Set up the client app","text":"<p>Open the <code>config.json</code> file found in the <code>b2b-sample/guardio-insurance-sample-application</code> folder and update the following parameters:</p> Parameter Description Value <code>BaseOrganizationUrl</code> The base URL of the organization. <code>https://api.asgardeo.io/t/{organization-name}</code> <code>ClientId</code> The client ID of the application created on Asgardeo. Client ID copied from step 1 above. <code>ClientSecret</code> The client secret of the application created on Asgardeo. Client secret copied from step 1 above. <code>HostedUrl</code> The URL of the client application. <code>http://localhost:3000</code> <code>APIScopes</code> The scopes required by the application to access user resources. <code>openid</code>, <code>email</code>, <code>internal_login</code>, etc. <code>Branding.name</code> The branding name of your application. <code>Guardio Insurance</code> <code>Branding.tag</code> A branding tag line for your apllication. <code>Anytime . Anywhere</code> <code>SharedApplicationName</code> The application name you used to register the application in Asgardeo. <code>Guardio Insurance App</code> <code>ImageBaseUrl</code> Add the URL of Asgardeo Console to load images required for the sample application. <code>https://console.asgardeo.io</code> <p>Note</p> <p>Remove the <code>SampleOrganization</code> section from the <code>config.json</code> file as it is not required for Asgardeo configurations.</p> <ol> <li> <p>To start the application, open a terminal, navigate to the <code>b2b-sample/guardio-insurance-sample-application</code> folder and execute the following commands:</p> <pre><code>npm install\n</code></pre> <pre><code>npm run dev\n</code></pre> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#try-it-out","title":"Try it out","text":"<p>The following guides explain how a sub organization user can log in to the sample application, Guardio Insurance App and how a sub organization administrator can use the built-in administration portal.</p>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#try-out-organization-login","title":"Try out organization login","text":"<p>Follow the steps below to see how organization login works for a user in the Best Car Mart sub organization when logging into Guardio Insurance App.</p> <ol> <li> <p>Open the application by copying the following URL to your browser: <code>http://localhost:3000/</code> </p> </li> <li> <p>Click Sign In and see that you are diverted to the Asgardeo login screen.</p> </li> <li> <p>Click Sign In with Organization Login to specify the organization to which you are signing in.</p> </li> <li> <p>Enter Best Car Mart as the organization name and click Submit.     </p> </li> <li> <p>Enter the username and password of a user who you have onboarded to Best Car Mart.</p> </li> <li> <p>Click Sign in and grant permission for the application to access your user attributes.</p> <p>You have successfully logged into the Guardio Insurance App as a user of the Best Car Mart organization.</p> </li> </ol>"},{"location":"guides/organization-management/manage-b2b-organizations/try-a-b2b-use-case/#try-out-the-administration-portal","title":"Try out the administration portal","text":"<p>Note</p> <p>Learn how to build an administration portal for your B2B application in the implement an administration portal section.</p> <p>Best Car Mart needs to manage its employees through an external IdP. As the administrator of Best Car Mart, Alex, is tasked with enabling login from the external IdP for Best Car Mart employees.</p> <p>To configure an identity provider for Guardio Insurance App:</p> <ol> <li> <p>Log in to the application with the credentials of Alex.</p> </li> <li> <p>On the application, go to Settings &gt; Identity Providers and click Add Identity Provider.</p> <p></p> </li> <li> <p>Select Google if you are onboarding a Google IdP or Enterprise if you are onboarding an enterprise IdP.     </p> </li> <li> <p>Provide the details specific to your IdP and click Create.</p> </li> <li> <p>Click Add to login flow to enable this IdP as the login option for Best Car Mart users in the application.</p> </li> </ol>"},{"location":"guides/organization-settings/attributes/","title":"Attributes and attribute mappings","text":"<p>Information directly related to users in an organization such as username, email, address, etc., is stored as user attributes in Asgardeo. You can manage the attributes within your organization. This includes viewing the attributes, updating them, and deciding if and how they would appear in a user's profile.</p> <p>You can also map your OpenID Connect claims or SCIM2 attributes to user attributes in your organization.</p>"},{"location":"guides/user-accounts/","title":"Account management","text":"<p>This section explains how owners can create multiple organizations in the Asgardeo Console, switch between them, manage user attributes, perform account recovery, provide users with self-service capabilities, and mitigate risks via configuring security measures for user accounts.</p> <ul> <li> <p>Organization owners can manage the resources within their organizations.</p> <p>See Manage multiple organizations for instructions.</p> </li> <li> <p>User attributes represent a user's information within an organization. These default attributes can either be mapped to OpenID Connect claims or SCIM 2 attributes.</p> <p>See Manage user attributes for instructions.</p> </li> <li> <p>In Asgardeo, accounts can be recovered by administrators or by the users themselves. Users can recover their forgotten passwords using the self-service passwords recovery option.</p> <p>See Configure password recovery for instructions.</p> </li> <li> <p>Users can self-register to an organization in Asgardeo via an application\u2019s login page.</p> <p>See Configure self-registration for instructions.</p> </li> <li> <p>When you onboard several users onto your organization, it is of utmost importance to secure their accounts from unauthorized logins or other unfavorable misuses. Some popularly effective methods include locking the account on consecutive failed login attempts and using reCAPTCHA to detect bots.</p> </li> </ul> <p>See the following sections for instructions on configuring these security measures:</p> <ul> <li>Configure login-attempts security</li> <li>Configure bot detection</li> </ul>"},{"location":"guides/user-accounts/configure-self-registration/","title":"Configure self-registration","text":"<p>Users can self-register to an organization in Asgardeo via an application\u2019s login page. This creates a new user account in the organization.</p>"},{"location":"guides/user-accounts/configure-self-registration/#enabledisable-self-registration","title":"Enable/Disable self-registration","text":"<p>To disable this capability in your organization or to change the default configurations, see the following instructions:</p> <ol> <li> <p>On the Asgardeo Console, click Self Registration.     </p> <p>The Self Registration section indicates whether or not it is already enabled.</p> </li> <li> <p>Click Configure to open the Self Registration page.</p> </li> <li> <p>Configure the below settings.</p> <ul> <li>To disable self-registration, turn off the toggle.</li> <li>To configure self-registration, update the following settings and click Update.      Account verification                      Enables email verification at self-registration. That is, an email will be sent to the user's specified email address requesting account confirmation.                     Note that if you also have the Activate account immediately configuration enabled, users will be signed in to the application without waiting for the email confirmation. However, you have the option of using the account verification status to control the user experience and access level that should be granted to the user.                     Learn more.                  Account verification link expiry time Specifies account verification link expiry time in minutes. If you enter 60 min, the account verification email expires after 60 min. Activate account immediately                      Activates the account without waiting for account verification.                     However, you have the option of using the account verification status to control the user experience and access level that should be granted to the user.                     Learn more.                  Enable auto login Once a user self-registers,                        <ul> <li>if MFA is not configured, the user is redirected straight into the application without having to log in.</li> <li>if MFA is configured, the authentication flow will bypass the first level and proceed to the next.</li> </ul>                     Note that it is mandatory to enable Activate account immediately if you need to enable auto login while Account Verification is enabled.                  </li> </ul> </li> </ol>"},{"location":"guides/user-accounts/configure-self-registration/#configure-self-registration-methods","title":"Configure self-registration methods","text":"<p>A user is able to self-register to your organization using the same ways that you have configured as sign-in methods for your applications.</p> <p>Refer to the documentation on how to configure sign-in options for your application.</p> <p>Note</p> <p>Currently, Asgardeo does not support Magic Links for self-registration.</p> <p>During user self-registration, the available methods are displayed to the user as shown below.</p> <p></p> <p>For information on how a user can self-register, refer to Try self-registration.</p>"},{"location":"guides/user-accounts/configure-self-registration/#customize-the-self-registration-form","title":"Customize the self-registration form","text":"<p>If a user decides to self-register using email, the default form that is presented to the user is as follows.</p> <p></p> <p>Follow the instructions below to customize the attributes that the form requests during self-registration.</p> <ol> <li>On the Asgardeo Console, click Attributes and under the Manage Attributes section, click Attributes again.</li> <li> <p>Click Edit on the attribute that you want to customize.</p> <p></p> </li> <li> <p>Select Display this attribute on the user's profile. The attribute will now appear on the self-registration form presented to the user.</p> </li> <li>Select Make this attribute required on the user's profile if you want to make the attribute mandatory for self-registration.</li> </ol> <p>Note</p> <p>Learn more about user attributes.</p>"},{"location":"guides/user-accounts/configure-self-registration/#get-the-verification-status-of-user-accounts","title":"Get the verification status of user accounts","text":"<p>The verification status of a user account indicates whether or not the user has confirmed the account through email verification. When you develop your application, you can implement some logic based on this parameter setting.</p> <p>This capability is beneficial when you have self-registered users. For example, you may want self-registered users with unverified accounts only to get read access to your application, whereas they should get full access once account verification is completed.</p> <p>::: tip To implement this scenario, you must enforce account verification for self-registered users and also allow the same users to access your applications before account verification is completed. That is, both Account verification and Activate account immediately configurations should be enabled for self-registration in your organization. :::</p> <p>You can get the account verification status of users through the SCIM2 API in Asgardeo. Invoke the following SCIM2 endpoints:</p> <ul> <li> <p>To get your own information, invoke the <code>/scim2/Me</code> endpoint:</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/scim2/Me\n</code></pre> </li> <li> <p>To get information about other users in your organization, invoke the <code>/scim2/Users/&lt;user_id&gt;</code> endpoint:</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/scim2/Users/&lt;user_id&gt;\n</code></pre> </li> </ul> <p>Note the following details in the response payload:</p> <p>Note</p> <ul> <li>If the <code>role.display</code> parameter is set to <code>selfsignup</code>, the user has self-registered.</li> <li>Under the <code>urn:scim:wso2:schema</code> schema, if the <code>emailVerified</code> parameter is available, the user has already verified the account through email. This parameter will have the following values:</li> <li><code>true</code> - User has successfully verified the account.</li> <li><code>false</code> - User's account verification attempt has failed.</li> <li>Under the <code>urn:scim:wso2:schema</code> schema, the <code>accountConfirmedTime</code> parameter will only be available when email verification is successful for self-registered users.</li> </ul> <pre><code>\"roles\": [\n    {\n        \"display\": \"selfsignup\",\n        \"value\": \"a85d4baf-2e7a-37b1-a722-d4d427039736\",\n        \"$ref\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;/scim2/Roles/16ba9acb-fa30-42ef-8e25-29b557862124\"\n    },\n    ......\n    ],\n\"urn:scim:wso2:schema\": {\n    \"emailVerified\": \"true\",\n    \"accountConfirmedTime\": \"2023-02-16T03:07:34.392293Z\"\n    .....\n}\n</code></pre> <p>Once you have identified the <code>emailVerified</code> status of the user and the method by which the user is onboarded (self-registration or onboarded by an administrator), you can enforce any access restrictions for that user through your application logic.</p>"},{"location":"guides/user-accounts/configure-self-service-portal/","title":"Configure the self-service portal for users","text":"<p>Users in your organization can access self-service features from the My Account self-service portal in Asgardeo. See the complete list of self-service capabilities.</p> <p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p>"},{"location":"guides/user-accounts/configure-self-service-portal/#access-my-account-portal","title":"Access My Account portal","text":"<p>The URL for the My Account portal is as follows:</p> <pre><code>https://myaccount.asgardeo.io/t/{organization_name}\n</code></pre> <p>For example, if your organization name is bifrost, the URL is as follows:</p> <pre><code>https://myaccount.asgardeo.io/t/bifrost\n</code></pre>"},{"location":"guides/user-accounts/configure-self-service-portal/#enabledisable-my-account-portal","title":"Enable/Disable My Account portal","text":"<p>Follow the steps given below to grant/deny access to the My Account portal for users in your organization.</p> <ol> <li> <p>On the Asgardeo Console, go to Applications, and you will see the My Account portal listed as the first application.</p> <p></p> </li> <li> <p>Click the settings icon to open the My Account configuration page.</p> </li> <li>Switch the toggle to enable or disable the My Account portal for your organization.</li> </ol> <p>Warning</p> <p>The My Account portal is in preview mode, and it is recommended to disable it when your organization goes into production. When the My Account portal is disabled, users in your organization will not be able to access self-service features via the My Account portal.</p>"},{"location":"guides/user-accounts/configure-self-service-portal/#enable-2fa-for-the-my-account-portal","title":"Enable 2FA for the My Account portal","text":"<p>Follow the steps below to configure Two-Factor Authentication (2FA) for the My Account portal of your organization.</p> <ol> <li>In the Asgardeo Console, go to Self-Service Portal.</li> <li>Click Configure to open the My Account page.</li> <li> <p>Select the 2FA options that you need to configure for the My Account Portal.</p> <p>Note</p> <p>The SMS OTP authentication option will only be enabled when your organization's SMS OTP connection is set up. If you have not already set up the SMS OTP connection, see the instructions on setting up the SMS OTP connection.</p> <p> 4. Click Update to apply configuration changes.</p> </li> </ol>"},{"location":"guides/user-accounts/configure-self-service-portal/#enable-totp-enrollment-during-login","title":"Enable TOTP enrollment during login","text":"<p>Administrators of the organization can enable TOTP enrollment during login for the My Account portal.</p> <p>To enable TOTP enrollment during login:</p> <ol> <li>On the Asgardeo Console, go to Self-Service Portal.</li> <li>Click Configure to open the My Account page.</li> <li>Select Enable TOTP.</li> <li> <p>Select Allow TOTP enrollment during login.     </p> <p>Disable TOTP enrollment during login</p> <p>If you do not want to enable TOTP enrollment during login, keep the option unchecked. At user login, if the users have not enrolled the TOTP authenticator, they will be instructed to contact the organization admin for assistance.</p> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/user-accounts/configure-self-service-portal/#enable-backup-codes-for-login","title":"Enable backup codes for login","text":"<p>My Account portal users can use backup codes to log in to applications when they cannot obtain the required MFA codes.</p> <p>To enable backup codes for My Account portal login:</p> <p>Note</p> <p>To enable backup codes, you need to enable at least one 2FA option for the login flow.</p> <ol> <li>On the Asgardeo Console, go to Self-Service Portal.</li> <li>Click Configure to open the My Account page.</li> <li>Select Enable Backup Codes.</li> <li>Click Update to save the configurations.</li> </ol>"},{"location":"guides/user-accounts/password-recovery/","title":"Configure password recovery","text":"<p>Asgardeo provides the support for self-service password recovery option for users on the login page. The user will receive a password reset link via email upon request. This guide walks you through setting up password recovery for users to recover a lost or forgotten password.</p> <p>To configure password recovery:</p> <ol> <li>On the Asgardeo Console, click Account Recovery.</li> </ol> <p>The Password Recovery section indicates whether or not it is already enabled.</p> <ol> <li>Click Configure to open the Password Recovery page.</li> <li>Turn on Enabled to enable this configuration.     </li> <li>Configure the below settings if you want to change the default password recovery configurations.      Notify on successful recovery Specifies whether to notify the user via an email when password recovery is successful. Recovery link expiry time Specifies password recovery link expiry time in minutes. If you enter 60 min, the password recovery email notification will expire after 60 min. </li> <li>Click Update once you configure the required settings.  </li> </ol> <p>Try self-service password recovery.</p>"},{"location":"guides/user-accounts/account-login/username-validation/","title":"Configure username validation","text":"<p>Your Asgardeo organization could allow a user to log in with a custom alphanumeric username instead of an email address.</p> <p>Follow the steps given below to change the username type for the users.</p> <ol> <li>On the Asgardeo Console, go to Account Login.</li> <li>Click Configure to open the Username Validation page.</li> <li>Select Alphanumeric and configure the minimum and maximum length for a username.</li> <li>Click Update to save the changes.</li> </ol> <p></p> <p>Warning</p> <p>If you select Alphanumeric as the username type, and not make the Email attribute mandatory for users, the following features will not be available for users who do not configure an email address. - Email Notifications - Password recovery - Authentication with Magic Link, Email OTP</p> <p>Learn how to update attribute properties.</p>"},{"location":"guides/user-accounts/account-security/bot-detection/","title":"Configure bot detection","text":"<p>Asgardeo uses reCAPTCHA to detect bots that attempt unauthorized login or other types of internet abuse. This is a free service provided by Google that verifies whether a user is a human or a robot. It comes in the form of a widget.</p> <p>When bot detection is enabled, Asgardeo enforces reCAPTCHA validation in the following scenarios: - User login - User password recovery - User self-registration</p> <p>To configure reCAPTCHA:</p> <ol> <li>On the Asgardeo Console, click Account Security.</li> </ol> <p>The Bot Detention section indicates whether or not it is already enabled.</p> <ol> <li>Click Configure to open the Bot Detection security page.</li> <li>Turn the toggle on or off to enable or disable reCAPTCHA for your organization.    </li> </ol>"},{"location":"guides/user-accounts/account-security/login-attempts-security/","title":"Configure login-attempts security","text":"<p>You can protect user accounts in Asgardeo from password brute-force attacks by locking the account on consecutive failed login attempts. By default, this setting is disabled.</p> <p>You can configure the number of consecutive failed login attempts that should be allowed for users in an organization. When a user exceeds this number of attempts, the account is automatically locked and the user is informed via email. The account will be activated automatically after the specified lock duration.</p>"},{"location":"guides/user-accounts/account-security/login-attempts-security/#enable-login-attempts-security","title":"Enable login attempts security","text":"<p>To configure login attempts security:</p> <ol> <li>On the Asgardeo Console, click Account Security.</li> </ol> <p>The Login Attempts section indicates whether or not it is already enabled.</p> <ol> <li>Click Configure to open the Login Attempts Security page.</li> <li>Switch to Enabled to enable this configuration. </li> <li>Configure the settings below if you want to change how login attempts security works by default.     Number of consecutive failed login attempts Specifies the number of consecutive failed login attempts allowed before the account is locked.                If you enter 5 as the value, the user's account is locked when five login attempts fail consecutively. Account lock duration Specifies the initial duration that the account will be locked for. The account is automatically unlocked after this time period.               If you enter 5 minutes as the value, the user's account is locked for 5 minutes starting from the last login attempt. The user can log in again after 5 minutes. Account lock duration increment factor Specifies the factor by which the account lock duration should be incremented on further failed login attempts after the account is locked. </li> <li>Click Update once you configure the required settings.</li> </ol>"},{"location":"guides/user-accounts/account-security/login-attempts-security/#how-it-works","title":"How it works","text":"<p>Admin has configured the below settings: - Number of consecutive failed login attempts: 5 - Account lock duration: 5 min - Account lock duration increment factor: 2</p> <p>Based on the above settings, let's see how account lock happens in Asgardeo when a user tries to log in with an incorrect password.</p> <ol> <li>User tries to log in with an incorrect password in 5 consecutive attempts (Number of consecutive failed login attempts).</li> <li>User account will be locked for 5 minutes (Account lock duration).</li> <li>After 5 minutes, the account will be unlocked.</li> <li>If the user enters the correct password, the user can successfully log in.</li> <li>If the user tries an incorrect password, the account will be locked for a duration of period incremented by 2 times(Account lock duration increment factor) the previous lock duration.         - That is, the account will be locked for 2 x (5 ^ 1)= 10 minutes.         - If the user attempts to log in with an incorrect password again after the wait time(10min) has elapsed, and the account is unlocked, the account will be locked for 2 * (5 ^ 2)= 50 minutes.</li> </ol> <pre><code>Account unlock timeout = Account lock duration * (Account lock duration increment factor ^ failed login attempts)\n</code></pre>"},{"location":"guides/user-accounts/account-security/login-attempts-security/#disable-login-attempts-security","title":"Disable login attempts security","text":"<p>To disable login attempts security:</p> <ol> <li>On the Asgardeo Console, click Account Security.</li> <li>Go to Login Attempts Security.</li> <li>Click Configure and switch to Disabled to disable this security. </li> </ol>"},{"location":"guides/user-accounts/account-security/password-validation/","title":"Configure password validation","text":"<p>User accounts in Asgardeo can be secured from password attacks by defining password validation rules.</p> <p>When a user configures a password that does not abide by the validation rules, they will be requested to re-enter a password.</p> <p>To configure password validation:</p> <ol> <li> <p>On the Asgardeo Console, go to Account Security.</p> <p>The Password Validation section indicates whether or not it is already enabled.</p> </li> <li> <p>Click Configure to open the Password Validation page.</p> <p></p> </li> <li> <p>Enter values to update the following parameters according to the requirements of your password policies.</p> <p> Parameter Description Password Expiration The number of days after which the password expires. If a user attempts to log in using an expired password, the user will be redirected to reset the password. Password History Count <code>[Optional]</code> This field identifies the number of new unique passwords that must be set before an old password can be reused again.   Example:  If you assign <code>3</code> as the password history count, the user cannot use the last three passwords they have used. Number of characters You can add the minimum and maximum length of the password users should use. Mandatory characters By default, a user password should contain at least one of the following characters.             <ul> <li>Numbers</li> <li>Upper-case characters: </li> <li>Lower-case characters</li> <li>Special characters</li> </ul> Number of unique characters <code>[Optional]</code> This field identifies the number of unique (non-repeated) characters the password should contain. Number of repeated characters <code>[Optional]</code>This field identifies the number of characters that can be repeated consecutively in a user password.   Example:  If you assign <code>1</code> as the number of repeated characters, the password cannot contain any repeated characters consecutively.  The password <code>aa1@Znlq</code> is incorrect as it has the character <code>a</code> appearing consecutively. </p> </li> <li> <p>Click Update to save your password validation rules.</p> </li> </ol>"},{"location":"guides/user-self-service/","title":"User self-service","text":"<p>You can incorporate self-service capabilities into your business application by invoking the self-service APIs provided by Asgardeo.</p> <p>Asgardeo also provides a built-in self-service portal, which in currently in <code>Preview</code> mode, where users can manage their own Asgardeo accounts using the My Account portal </p> <p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p>"},{"location":"guides/user-self-service/#self-service-capabilities-for-users","title":"Self-service capabilities for users","text":"<p>Listed below are self-service features that are available for the user in the My Account portal</p> <ul> <li>Update profile information</li> <li>Change password</li> <li>View and revoke consents given to applications</li> <li>Enroll TOTP</li> <li>Enroll backup codes</li> <li>Manage linked social accounts</li> <li>Export profile information</li> <li>View and revoke login sessions</li> <li>Update the account recovery email</li> <li>Discover and maintain applications</li> <li>Register FIDO2 security key/biometrics</li> </ul>"},{"location":"guides/user-self-service/build-self-service-capabilities/","title":"Build self-service capabilities for your application","text":"<p>Developers can use Asgardeo's REST APIs to implement self-service capabilities for the users on their business applications.</p> <p>Here are some capabilities you may want to enable when you implement self-service capabilities in your business app. - Allow users to update their user profiles - Allow users to change passwords - Allow users to enable MFA - Allow users to manage consents given to applications</p> <p>Once the user logs in to the business application, you can make these capabilities available to the user from the business application itself.</p>"},{"location":"guides/user-self-service/build-self-service-capabilities/#self-service-apis","title":"Self-service APIs","text":"<p>You can use the following Asgardeo APIs to enable self-service capabilities in your business application. - SCIM/Me Endpoint   - List user details   - Update user profile   - Update user password</p> <pre><code>!!! note\n  To update the password of a user, update the `value` parameter of the API payload as follows:\n  ``` curl \n  {\n    \"schemas\": [\n      \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n    ],\n    \"Operations\": [\n      {\n        \"op\": \"add\",\n        \"value\": {\n          \"nickName\": \"shaggy\"\n        }\n      }\n    ]\n  }\n  ```\n</code></pre> <ul> <li>Manage MFA settings and recovery</li> <li>TOTP</li> <li>Backup codes</li> <li>Export user profile</li> <li>Manage consent of users</li> </ul>"},{"location":"guides/user-self-service/build-self-service-capabilities/#prerequisites","title":"Prerequisites","text":"<p>You need an application that [integrates login with Asgardeo](../../guides/authentication/add-login-to-apps.md over OpenID connect standards.</p> <p>Learn more about registering OIDC applications on Asgardeo. - SPA - Traditional Web application - Mobile appliction</p>"},{"location":"guides/user-self-service/build-self-service-capabilities/#invoke-the-self-service-apis","title":"Invoke the self-service APIs","text":"<p>To invoke the self-service APIs from your application:</p> <ol> <li>Once the user logs into your application, get an access token on behalf of the user.</li> <li>Use the obtained <code>access_token</code> as a bearer token to invoke the APIs.</li> </ol> <p>Given below is a sample API request for a client sending a <code>PATCH</code> request sent to the <code>/scim2/Me</code> endpoint to update the user password.</p> <pre><code>URL:  https://api.asgardeo.io/t/&lt;org_name&gt;/scim2/Me\nHTTP Method: PATCH\nHeaders:\n'Content-Type: application/scim+json'\n 'Authorization: Bearer &lt;access_token&gt;'\nData:\n{\n  \"schemas\": [\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n  ],\n  \"Operations\": [\n    {\n      \"op\": \"add\",\n      \"value\": {\n        \"password\": \"&lt;new-password&gt;\"\n      }\n    }\n  ]\n}\n</code></pre> <p>??? note If you are using Asgardeo's React SDK You can use the <code>httpRequest</code> method to invoke the APIs on Asgardeo's React SDK.</p> <p>A sample of how to use the <code>httpRequest</code> method in Asgardeo's React SDK is given below:</p> <pre><code>import { useAuthContext, HttpRequestConfig } from \"@asgardeo/auth-react\";\nconst {httpRequest } = useAuthContext();\n\nconst requestConfig: HttpRequestConfig = {\n// Add API content here\nheaders: {\n\"Accept\": \"application/json\",\n\"Content-Type\": \"application/scim+json\"\n},\nattachToken: true,\nmethod: \"GET\",\nurl: \"https://api.asgardeo.io/t/&lt;org_name&gt;/scim2/Me\"\n};\nhttpRequest(requestConfig).then((response: any) =&gt; {\nconsole.log(\u201crequest response : \u201d+response.data);\n}).catch((error) =&gt; {\nconsole.log(\"request error: \" + error);\n})\n</code></pre> <p>You can replace the body of <code>const requestConfig: HttpRequestConfig = {}</code> with the API you wish to invoke. :::</p>"},{"location":"guides/user-self-service/change-password/","title":"Change password","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p></p>"},{"location":"guides/user-self-service/customer-password-recovery/","title":"Password recovery for users","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p>Users can recover a forgotten password by following the instructions on the Asgardeo sign-in page.</p> <p>Alternatively, if the account owner is already signed in to the self-service portal, the password can be updated using the My Account portal.</p>"},{"location":"guides/user-self-service/customer-password-recovery/#prerequisites","title":"Prerequisites","text":"<p>Password recovery should be enabled for business users in the organization.</p>"},{"location":"guides/user-self-service/customer-password-recovery/#recover-password","title":"Recover password","text":"<p>Note</p> <p>Users onboarded from a read-only remote user store do not have the capability of recovering their password on the My Account portal.</p> <p>To reset the password, the account owner should follow these steps.</p> <ol> <li>Go to the login page via a business application or the My Account portal.</li> </ol> <p></p> <ol> <li>Click Forgot password?</li> <li>Enter your username and click Send Reset Link.    </li> </ol> <p>An email notification is sent to your email address.</p> <ol> <li>Open the email you received and click Reset Password.    </li> <li>Enter new password and Proceed.</li> </ol> <p>Now you have reset your password and can sign in using your new password.</p>"},{"location":"guides/user-self-service/customer-password-recovery/#check-password-recovery-email","title":"Check password recovery email","text":"<p>Users can also check the email address to which their password recovery information is sent to.</p> <ol> <li>In the user's MyAccount portal, navigate to Security &gt; Account Recovery.     </li> <li>Click the eye icon, to check the recovery email address.    !!! warning The recovery email address will be the user's email address. This cannot be updated.</li> <li>Click Done.</li> </ol>"},{"location":"guides/user-self-service/customer-self-service-portal/","title":"Self-service portal for users","text":"<p>Users in your organization can access self-service features from the My Account self-service portal in Asgardeo. See the complete list of self-service capabilities.</p> <p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p>"},{"location":"guides/user-self-service/discover-applications/","title":"Discover applications","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p>Users can discover applications that they can access within the organization by following the steps below.</p> <p>Note</p> <p>For an app to be discoverable by a user in the My Account portal, an organization owner or an administrator should enable the Discoverable application option in the General tab of an application registered in Asgardeo.</p> <ol> <li>In the user's MyAccount portal, navigate to Applications.     </li> <li>In the All Applications section, users can view all the applications discoverable to them.</li> <li>Users can click on any application and get redirected to its landing page.</li> </ol>"},{"location":"guides/user-self-service/enable-totp/","title":"Enroll TOTP via My Account","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p>Users can set up an authenticator app of their choice from the My Account Portal so that the app can generate TOTPs for multi-factor authentication flows in Asgardeo.</p>"},{"location":"guides/user-self-service/enable-totp/#initial-setup","title":"Initial setup","text":"<p>Follow the steps given below to set up TOTP using My Account.</p> <ol> <li> <p>In the user's MyAccount portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the + icon next to Authenticator App and a QR code will be displayed to you.</p> </li> <li> <p>Scan the QR code using your preferred authenticator application.</p> <p></p> </li> <li> <p>Enter the TOTP displayed in your authenticator app and click Verify.</p> </li> </ol>"},{"location":"guides/user-self-service/enable-totp/#access-the-qr-code","title":"Access the QR code","text":"<p>The user can view the QR code via the My Account Portal by following the steps below.</p> <ol> <li> <p>In the user's MyAccount portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the eye icon next to Authenticator App to view the QR code.</p> <p></p> </li> </ol>"},{"location":"guides/user-self-service/enable-totp/#regenerate-the-qr-code","title":"Regenerate the QR code","text":"<p>If the user has accidentally deleted the QR code from the authenticator app, follow the steps below to generate a new QR code and add the authentication application again to the My Account portal.</p> <ol> <li> <p>In the user's MyAccount portal, go to Security &gt; Additional Authentication.</p> <p></p> </li> <li> <p>Click the eye icon next to Authenticator App and click Regenerate to get a new QR code.</p> <p></p> </li> <li> <p>Enter the TOTP code obtained after scanning the QR code and click Verify.</p> <p></p> </li> </ol>"},{"location":"guides/user-self-service/export-profile-information/","title":"Export profile information","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p></p> <p>??? note Sample JSON file    This is a sample of the exported <code>json</code> with a business user's profile information.</p> <p><pre><code>{\n\"user_profile\": {\n\"accountState\": \"UNLOCKED\",\n\"emailVerified\": \"true\",\n\"country\": \"SriLanka\",\n\"givenname\": \"firstname\",\n\"created\": \"2021-04-07T15:07:58.001440Z\",\n\"modified\": \"2023-04-25T04:31:05.838894Z\",\n\"emailaddress\": \"tom@wso2.com\",\n\"userid\": \"36d2dd61-6e58-4b54-bfbe-f8621236c88b\",\n\"username\": \"tom@wso2.com\",\n\"lastname\": \"Jerry\"\n}\n}\n</code></pre>    :::</p>"},{"location":"guides/user-self-service/manage-backup-codes/","title":"Configure backup codes","text":"<p>Users can use backup codes to log in to applications when they cannot obtain the required MFA codes.</p>"},{"location":"guides/user-self-service/manage-backup-codes/#enable-backup-codes","title":"Enable backup codes","text":"<p>To enable backup codes:</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li>Click <code>+</code> to add backup codes.     You will see a popup window with ten backup codes. Each backup code can be used only once.     </li> <li>Click Download Codes or Copy Codes and save the copied or downloaded backup codes securely, as the codes will only be shown once.</li> <li>After saving the backup codes, click Close.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/user-self-service/manage-backup-codes/#regenerate-backup-codes","title":"Regenerate backup codes","text":"<p>In case you have lost these backup codes or have used them all, follow the steps below to generate a new set of backup codes.</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li>Click on the refresh icon to regenerate the backup codes.     </li> <li>On the confirmation window, click Regenerate to confirm your action.     You will see a popup window with ten backup codes. Each backup code can be used only once.     </li> <li>Click Download Codes or Copy Codes and save the copied or downloaded backup codes securely, as the codes will only be shown once.</li> <li>After saving the backup codes, click Close.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/user-self-service/manage-backup-codes/#remove-backup-codes","title":"Remove backup codes","text":"<p>To remove the backup codes:</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li>Click on the trash icon to remove the existing backup codes.     </li> <li>On the confirmation window, click Remove to confirm your action.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/user-self-service/manage-consents/","title":"Manage consents given to applications","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p></p>"},{"location":"guides/user-self-service/manage-linked-accounts/","title":"Manage linked social accounts","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p></p>"},{"location":"guides/user-self-service/manage-login-sessions/","title":"Manage login sessions","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p></p>"},{"location":"guides/user-self-service/register-security-key/","title":"Register FIDO2 security key/biometrics for passwordless login","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p>Application users need to register their security key/biometrics via MyAccount prior to using passwordless login in applications.</p> <ol> <li>In the user's My Account portal, go to Security &gt; Additional Authentication.     </li> <li>Plug your FIDO2 security key into your device. Skip this step if you are using built-in biometrics.</li> <li>Click the + icon and follow the instructions given by the browser to register the security key/biometrics.</li> <li>Once it\u2019s done, you will get the following prompt.     </li> <li>Provide a name for your device and click Save.</li> </ol>"},{"location":"guides/user-self-service/self-register/","title":"Self-register as a user","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p>A user can only self-register to Asgardeo organizations that have enabled Self-registration.  </p>"},{"location":"guides/user-self-service/self-register/#self-registration-methods","title":"Self-registration methods","text":"<p>There are two ways that a user can self-register to an organization in Asgardeo.</p>"},{"location":"guides/user-self-service/self-register/#via-my-account-portal","title":"via My Account portal","text":"<p>To self-register from the My Account portal, the user should follow these steps.</p> <ol> <li>Go to the My Account Portal </li> <li>Click Create an account.</li> <li>Follow the steps to sign-up using an email.</li> </ol>"},{"location":"guides/user-self-service/self-register/#via-a-business-application","title":"via a business application","text":"<p>To self-register from a business application, the user should follow these steps.</p> <ol> <li>Access the application URL.</li> <li>Click Create an account</li> <li>Select one of the following options to sign up:</li> <li>Click Continue with email and follow the steps to sign up using an email.</li> <li> <p>Sign-up using any of the other authenticators as shown below.</p> <p></p> </li> </ol>"},{"location":"guides/user-self-service/self-register/#sign-up-using-an-email","title":"Sign up using an email","text":"<p>A user can sign-up to an organization in Asgardeo using an email, via My Account portal or via a business application.</p> <p>To sign up using an email:</p> <ol> <li>Click Continue with email on the sign-up screen and proceed.</li> <li>Enter the email address, password, and any other information that the application requests.</li> </ol> <p></p> <p>!!! note       - The user information requested when signing up can be changed by configuring user attributes.       - By default, the user's username will be the Email.       - Instead of using the email as the username, you can configure the username to be an alphanumeric. Then,       <ul> <li>          the user will be asked to enter an alphanumeric username between the configured minimum and maximum lengths.          </li> <li>the user's email can no longer be used as the username.</li> </ul></p> <ol> <li>Click Sign Up to create the account.</li> </ol> <p>!!! note       If Account Verification is enabled for self-registration in your organization, an email is sent to the user's registered email address.</p> <ol> <li>If Account Verification is enabled, the user can confirm the account from the email.</li> </ol> <p></p> <p>Now, the user can log in to the My Account portal or any business applications in your organization. The email address is the username.</p> <p>If the user tries to log in with an unverified email address, Asgardeo will show an error message saying that the account has not been verified and shows options to resend verification. This is applicable only if Account Verification is enabled for self registration.</p> <p></p>"},{"location":"guides/user-self-service/update-profile-info/","title":"Update profile information","text":"<p>Warning</p> <p>The My Account portal is in  mode. We are working on adding more features to enhance the experience of the user.</p> <p>The user details displayed in a user's profile corresponds to user attributes that are enabled for the organization.</p> <p>Note</p> <ul> <li>Administrators in the organization can configure the list of attributes that should be available in a user profile. See the instructions on updating attributes for details.</li> <li>Users onboarded from a read-only remote user store do not have the capability of updating their own profiles on the My Account portal.</li> </ul> <p>To update profile information via My Account, the account owner should follow these steps.</p> <ol> <li>Sign in to the My Account portal.</li> <li> <p>Click Personal Info to see the profile information.    </p> </li> <li> <p>If required, update the editable information.</p> </li> </ol>"},{"location":"guides/users/","title":"User management","text":"<p>The users in Asgardeo are the digital representations of the identities of physical users who interact with your organization. With Asgardeo, the identity lifecycle of each of these users can be easily managed by the admins of the organization.</p> <p>The admins can grant users access to resources in your organization and control user access. Admins can also manage various user operations via the Asgardeo Console and SCIM APIs.</p> <p>Shown below are some main user management capabilities available in Asgardeo.</p> <p></p>"},{"location":"guides/users/#user-accounts","title":"User accounts","text":"<p>Asgardeo supports a set of user account types based on their relationship to the organization.</p> <p>Given below are the types of user accounts you can have in an Asgardeo organization.</p>"},{"location":"guides/users/#owner","title":"Owner","text":"<p>This is the owner of the organization who self-registers to Asgardeo by creating an organization. The owner has all the administrative rights in the organization.</p> <p>The owner can access the Asgardeo Console and manage the organization.</p> <p>An owner can perform the following actions: - Onboard users - Create organizations - Manage users and groups - Manage applications - Enforce password reset</p> <p>The owner account cannot be deleted once it is created. There can be only one owner for an organization. By default, it\u2019s the user who created the organization.</p> <p>An owner is always assigned the Administrator role. It cannot be changed by other admins either.</p>"},{"location":"guides/users/#administrator","title":"Administrator","text":"<p>An administrator can manage the organization and has access to the organization\u2019s administrative operations. An administrator can be invited to the organization and assigned with the Administrator user role.</p> <p>Refer Managing administrators for more information.</p>"},{"location":"guides/users/#user","title":"User","text":"<p>A user registered in an organization can consume and access applications in that organization.</p> <p>Refer Managing users for more information.</p>"},{"location":"guides/users/#comparing-user-accounts","title":"Comparing User Accounts","text":"<p>The following table compares the different user account types available in Asgardeo.</p> <p>Based on your requirements, you can choose user types and create them via the Asgardeo Console.</p> <p>The source of the user account determines which entity manages the user's credentials and details.</p> <ul> <li>Accounts managed by Asgardeo can persist across multiple organizations. That is, the same user account can be associated with other organizations as an owner or an administrator. When removed from one organization, these associations with other organizations continue to persist.</li> <li>Accounts managed by an organization are confined to that organization. When removed from that organization, the account is completely deleted from Asgardeo. </li> </ul> User Accounts Managed By Capabilities Owner Asgardeo <li>Onboard users</li> <li>Create organizations</li> <li>Manage users and groups</li> <li>Manage applications</li> Administrator Asgardeo      By default, administrators are assigned all administration capabilities:       <li>Onboard users</li> <li>Create organizations</li> <li>Manage users and groups</li> <li>Manage applications</li> User Organization <li>Consume business applications</li>"},{"location":"guides/users/#whats-next","title":"What's next?","text":"<p>Following are the main components that are required for user management. - Groups - Roles</p>"},{"location":"guides/users/manage-collaborators/","title":"Manage administrators","text":"<p>This guide walks you through the steps of managing an administrator account. If you are the owner or an existing administrator in the organization, you can onboard new administrators or delete existing administrator accounts.</p> <p>Note</p> <p>You cannot manage the user profiles of other administrators or update their passwords from the Asgardeo Console. Administrators must manage their own profiles and passwords using the My Account portal.</p>"},{"location":"guides/users/manage-collaborators/#onboard-an-administrator","title":"Onboard an administrator","text":"<p>There are two ways to onboard an administrator: - An administrator can onboard new administrators by sending an email invitation. - An administrator can assign existing users administrative privileges.</p>"},{"location":"guides/users/manage-collaborators/#invite-an-external-administrator","title":"Invite an external administrator","text":"<p>Let's look at how administrators can onboard another administrator by sending an email invitation.</p> <p>To onboard an administrator:</p> <ol> <li> <p>On the Asgardeo Console, go to Administrators.</p> </li> <li> <p>Click Add Administrator and provide the required details.</p> <p>Note</p> <p>Note that if your organization allows you to assign admin privileges to business users, you will see the following options when you click Add Administrator.</p> <p></p> <p>You need to select Invite admins to Asgardeo from this list to proceed with inviting an external admin.</p> <p></p> <p> Field name Description Email Address Provide the email address to which the invitation email should be sent. This email address will be used as the admin's username in Asgardeo. Note that a username is always unique to the organization, and you can't change it once it is created. Role The Administrator role is assigned by default. For details on the available user roles and the permissions assigned to them, see Asgardeo User Roles. </p> </li> <li> <p>Click Invite to send the invitation.</p> </li> </ol> <p>The administrator can access the Asgardeo Console by accepting the invitation and setting a password for the new administrator account.</p>"},{"location":"guides/users/manage-collaborators/#assign-admin-privileges-to-users","title":"Assign admin privileges to users","text":"<p>You can assign admin privileges to existing business users only if it is allowed in your organization. Follow the instructions given below.</p> <p>First, configure administrator settings for the organization:</p> <ol> <li> <p>On the Asgardeo Console, go to Administrators.</p> </li> <li> <p>Click the settings icon next to + Add Administrator to open the Administrator Settings page.</p> </li> <li> <p>Switch on the Enable users to manage the organization toggle.</p> <p></p> </li> <li> <p>Go back to the Administrators page and see that the + Add Administrator list is updated as follows:     </p> </li> </ol> <p>Now, let's assign admin privileges to a user:</p> <ol> <li>On the Administrator page, click +Add Administrator &gt; Assign admins from users.</li> <li>Select the user you want to add as an administrator and click Add.</li> </ol> <p>The new administrator can now access the Asgardeo Console using the following URL:</p> <p>Note</p> <p>Be sure to replace <code>{org_name}</code> with the relevant organization name.</p> <pre><code>https://console.asgardeo.io/t/{org_name}\n</code></pre> <p>Note</p> <p>Currently, only privileged users onboarded from the internal user store and remote user stores can log in to the Asgardeo Console.</p>"},{"location":"guides/users/manage-collaborators/#view-administrators","title":"View administrators","text":"<p>To view the administrators of your organization:</p> <p>On the Asgardeo Console, go to Administrators. You will see the list of administrators presented in two tabs as follow.</p> Asgardeo This includes administrators whose identity is managed by Asgardeo. {org_name} organization This includes administrators whose identity is managed by the <code>{org_name}</code> organization."},{"location":"guides/users/manage-collaborators/#delete-an-administrator","title":"Delete an administrator","text":"<p>Warning</p> <p>Note the following:</p> <ul> <li>If the administrator you delete is a business user with admin privileges, you will only be revoking the administrator privileges from the user. Deleting this administrator does not delete the user account.</li> <li>If the administrator is not a business user, you will be deleting the user account from the organization. This action is irreversible.</li> </ul> <p>To delete an administrator:</p> <ol> <li>On the Asgardeo Console, click Administrators.</li> <li>Click Delete for the administrator you want to remove.</li> <li>Select the checkbox to confirm your action.</li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/manage-customers/","title":"Manage users","text":"<p>This guide walks you through the process of managing a user account. An owner or an administrator can manage user accounts.</p>"},{"location":"guides/users/manage-customers/#onboard-a-user","title":"Onboard a user","text":"<p>There are three ways to onboard a user: - The user can self-register via the My Account portal or the login page of an application if self-registration is enabled in the organization. Learn how to configure self-registration. - An administrator can onboard users from an on-premise user store by connecting a remote user store to Asgardeo.</p> <p>!!! note       If the remote user store access type is read-only, you cannot update the user profiles of users onboarded from this read-only user store.</p> <ul> <li>An administrator can onboard users from the Asgardeo Console.</li> </ul> <p>Let's look at how administrators can onboard users from the Asgardeo Console.</p> <ol> <li>On the Asgardeo Console, click Users.</li> <li>Click  Add User and provide the following details:    <ul> <li>Email (Username): A unique email address to identify the user.</li> <li>First Name: First name of the user. You can add/change this later.</li> <li>Last Name: Last name of the user. You can add/change this later.</li> </ul> </li> </ol> <p>!!! note       - A username is always unique to the organization and you can't change the username once it is created.       - Instead of using the email as the username, you can configure the username to be an alphanumeric. Then, you will be asked to enter an alphanumeric username between the configured minimum and maximum lengths.       - The existing users who have already registered with their email address as the username can continue to use it to access applications, instead of having to create a new username.</p> <ol> <li> <p>You can either request the user to set the password or set one on the user's behalf.</p> <ul> <li> <p>Invite user to set their own password:</p> <ul> <li> <p>Invite via email: If this option is selected, an email with a confirmation link will be sent to the provided email (username). The user can use the confirmation link to set up a new password.</p> </li> <li> <p>Invite offline: If this option is selected, the administrator will receive an invite link at the end of user registration. This link can be shared with the user.</p> <ul> <li>Set a password for the user: If this option is selected, the administrator can set a password for the user. The user can change this password from the My Account Portal.</li> </ul> </li> <li>Add the user to a group in the next step. You will not see this option if you haven't created any groups in Asgardeo.</li> <li>Click Finish.</li> </ul> </li> </ul> </li> </ol> <p>!!! note       If you have selected Invite offline or decided to set a password for the user, you can copy the corresponding information at the Summary page of the wizard and share with the user.</p>"},{"location":"guides/users/manage-customers/#assign-groups","title":"Assign groups","text":"<p>A user can be assigned to different groups in the organization. Groups can be used to restrict the user's access to resources.</p> <p>To assign users to groups:</p> <ol> <li>On the Asgardeo Console, click Users.</li> <li>Click Edit for the user.</li> <li>Go to Groups and assign groups.</li> </ol> <p>!!! note       The Groups tab for a user account will only appear after you create one or more groups in the organization. Learn how to create a group</p> <p></p>"},{"location":"guides/users/manage-customers/#manage-user-profiles","title":"Manage user profiles","text":"<p>A user profile consists of attributes that represent the details of the user such as username, email address, contact information, other custom attributes, etc.</p> <p>Note</p> <p>Administrators in the organization can configure the list of attributes that should be available in a user profile. See Manage attributes for details.</p>"},{"location":"guides/users/manage-customers/#view-profile-details","title":"View profile details","text":"<p>Administrators can view the user profile of any user as follows:</p> <ol> <li>On the Asgardeo Console, click Users.</li> </ol> <p>!!! note       If you have connected a remote user store, and want to filter the users in your remote user store, select your user store from the drop-down menu.</p> <ol> <li>Select the user to view the profile.</li> </ol> <p></p>"},{"location":"guides/users/manage-customers/#update-the-profile","title":"Update the profile","text":"<p>An administrator can update the profile of a user via the Asgardeo Console.</p> <p>To update the user profile:</p> <ol> <li>On the Asgardeo Console, click Users.</li> <li>Find the user's account and click Edit.</li> <li>Update the information on the user profile.</li> </ol> <p></p> <ol> <li>Click Update to save.</li> </ol>"},{"location":"guides/users/manage-customers/#reset-the-users-password","title":"Reset the user's password","text":"<p>Administrators can reset a user's password or initiate the password reset process from the Asgardeo Console.</p> <p>To reset the password:</p> <ol> <li>Click Reset password at the bottom of the user's profile.   </li> <li>Select a method to reset the user password:</li> <li>Invite user to set their own password:     If this option is selected, a password reset request can be sent to the user via email. The user can then use the instructions in the email to reset the password.  </li> <li>Set a temporary password for the user:    If this option is selected, the owner or an administrator can set a temporary password for the user.    </li> <li>Click Reset Password.</li> </ol>"},{"location":"guides/users/manage-customers/#lock-a-user-account","title":"Lock a user account","text":"<p>When you lock a user's account, the user will no longer be able to access any applications or the My Account portal.</p> <p>To lock a user account:</p> <ol> <li>On the Asgardeo Console, click Users and select the user.</li> <li>Enable the Lock user toggle at the bottom of the user's profile.   </li> <li>Enable the checkbox to confirm your action.</li> <li>Click Confirm.</li> </ol> <p>Note</p> <p>You can unlock the user account again using the Lock user toggle explained above.</p>"},{"location":"guides/users/manage-customers/#delete-a-user","title":"Delete a user","text":"<p>A user account can be deleted by administrators. Once an account is deleted, the action is irreversible.</p> <p>To delete a user account:</p> <ol> <li>On the Asgardeo Console, click Users and select the user.</li> <li>Click Delete User at the bottom of the user's profile.</li> </ol> <p></p> <ol> <li>Enable the checkbox to confirm your action.</li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/manage-groups/","title":"Manage groups","text":"<p>A group is a collection of users who have the same privileges to access resources in an organization.</p> <p>One user can be assigned to any number of groups. Applications can get details about groups a user belongs to in the authentication response (e.g., ID token) from Asgardeo as a user attribute.</p> <p>Note</p> <p>Administrators and users onboarded from remote user stores cannot be assigned to groups from Asgardeo Console.</p> <p>For example, you can create the following user groups: <code>Admin</code>, <code>Manager</code>, and <code>Developer</code>. When one user group is granted access to a resource, it applies to all users in the group.</p>"},{"location":"guides/users/manage-groups/#onboard-a-group","title":"Onboard a group","text":"<p>There are two ways to onboard a group: - An administrator can onboard users from an on-premise user store by connecting a remote user store to Asgardeo.</p> <pre><code>!!! note\n    If the remote user store access type is read-only, you cannot update the user groups onboarded from this read-only user store.\n</code></pre> <ul> <li>Administrators can add groups via the Asgardeo Console.</li> </ul> <p>Let's look at how administrators can onboard groups from the Asgardeo Console.</p> <ol> <li>On the Asgardeo Console, click Groups.</li> <li>Click New Group and provide the following details.<ul> <li>Group Name: A unique name to identify the group.</li> <li>Add Users: If you already have existing users, you can search and add them. </li> </ul> </li> <li>Click Finish.</li> </ol>"},{"location":"guides/users/manage-groups/#assign-users-to-groups","title":"Assign users to groups","text":"<p>Users can be assigned to groups. Admins can restrict access to resources based on the groups.</p> <p>To assign users to groups:</p> <ol> <li>On the Asgardeo Console, click Groups.</li> <li>Select the group to assign the user.</li> <li>Click Edit and navigate to Users.      </li> <li>Click Assign User and select users to add to the group.</li> <li>Click Save.</li> </ol>"},{"location":"guides/users/manage-groups/#remove-users-from-groups","title":"Remove users from groups","text":"<p>Users can be removed from the assigned groups by administrators.</p> <p>To remove users from groups:</p> <ol> <li>On the Asgardeo Console, click Groups.</li> <li>Select the group to remove the user.</li> <li>Click Edit and navigate to Users.     </li> <li>Click Edit icon.</li> <li>Clear the checkbox for the user(s) you want to remove.</li> <li>Click Save.</li> </ol>"},{"location":"guides/users/manage-groups/#assign-groups-to-application-roles","title":"Assign groups to application roles","text":"<p>You can assign groups to application roles and grant permission for the group's users to access an API resource. See manage application roles  for more information.</p> <p>To assign a group to a role:</p> <ol> <li>On the Asgardeo Console, click Groups.</li> <li>Go to the Roles tab and click + Assign Roles.</li> <li>Expand the application to which the required roles belong.</li> <li>Select the application role/s you wish to add to the group.     </li> <li>Click Save to assign the group to the selected application role.</li> </ol>"},{"location":"guides/users/manage-groups/#delete-a-group","title":"Delete a group","text":"<p>An administrator can delete groups via the Asgardeo Console. To delete a group:</p> <ol> <li>On the Asgardeo Console, click Groups.</li> <li>Click the trash icon next to the group you wish to delete.</li> <li>Select the checkbox and confirm your action.</li> </ol>"},{"location":"guides/users/manage-groups/#view-remote-user-store-groups","title":"View remote user store groups","text":"<p>Once you connect a remote user store to Asgardeo, you can view the onboarded groups and the members of the groups. To view the onboarded groups:</p> <ol> <li>On the Asgardeo Console, go to Groups.</li> <li>Select your user store from the drop-down menu.</li> </ol> <p>Note</p> <p>These groups are read-only. Administrators can only view the group details and the assigned members.</p>"},{"location":"guides/users/manage-sessions/","title":"Manage active sessions","text":"<p>A session corresponds to the time a user spends on an application from one user agent (e.g., browser) instance. We can consider one session as the time interval between a user's login and logout.</p> <p>Asgardeo maintains user sessions based on session cookies. Active sessions in Asgardeo are terminated in the following instances: - User closes the browser - User tries to terminate the sessions via the Asgardeo Console and My Account - User logs out of an application - User resets the password</p> <p>Active sessions can be terminated explicitly by using the session management APIs as well.</p> <p>An administrator or an owner can view and terminate the active session(s) of users via the Asgardeo Console.</p>"},{"location":"guides/users/manage-sessions/#view-active-sessions-of-users","title":"View active sessions of users","text":"<ol> <li>On the Asgardeo Console, select Users.</li> <li>Select a user and click Edit.</li> <li>Go to Active Sessions to view details. </li> </ol>"},{"location":"guides/users/manage-sessions/#terminate-active-sessionsessions","title":"Terminate active session/sessions","text":"<ol> <li>Click  Termination Sessions under the selected session. This terminates the respective session only.</li> <li>Click Termination All. This will terminate all the sessions of that user.</li> </ol>"},{"location":"guides/users/migrate-users/","title":"Migrate users to Asgardeo","text":"<p>Owners of organizations in Asgardeo may need to migrate users from an existing identity provider (IdP) to the Asgardeo user store. This guide explains why you may need user migration and how to get it done.</p>"},{"location":"guides/users/migrate-users/#when-is-user-migration-required","title":"When is user migration required?","text":"<p>You may need to migrate users from an external IdP to Asgardeo if the organization requires:</p> <ul> <li>To combine users from multiple systems to one IdP for proper user management.</li> <li>To reorganize, restructure, and simplify data storage.</li> <li>To combine user data storages for centralized user management during company acquisitions and mergers.</li> <li>To move or separate identity data due to geopolitical, data protection, compliance, and regulatory reasons.</li> <li>Effective identity management that can provide additional protection over user data storage, scalability in IAM, and minimal maintenance costs.</li> </ul>"},{"location":"guides/users/migrate-users/#how-to-migrate-users-to-asgardeo","title":"How to migrate users to Asgardeo?","text":"<p>You can contact the Asgardeo team at asgardeo-help@wso2.com for guidance on migrating your existing user base from your current IdP to your Asgardeo user store.</p> <p>Note</p> <p>Make sure you use your owner account or an administrator account to send the request.</p> <p>Alternatively, you can use traditional approaches to user migration. However, these methods run with challenges as listed in the section below.</p>"},{"location":"guides/users/migrate-users/#challenges-of-traditional-user-migration","title":"Challenges of traditional user migration","text":"<p>Identity providers generally support various automatic user migration methods, which help administrators import user records (including group details, attributes, and other characteristics) from external systems.</p> <p>These traditional methods come with various challenges as explained below, which become an operational overhead for administrators and provide a bad user experience:</p> <ul> <li> <p>Credential transition</p> <p>Identity providers use hashing algorithms to store user passwords securely. The password policies and hashing mechanisms vary across different IdPs. Due to this, a hashed password on one system will not be usable on another.</p> </li> <li> <p>Schema matching</p> <p>Schemas of one system might not match the schemas of the other system to which the organization is migrating. In such scenarios, the administrators will experience the overhead of matching the schemas one-to-one.</p> </li> <li> <p>End-user experience</p> <p>Due to the challenge of credential transition, when migrating users in bulk, the following methods are used to activate the user accounts:   * Setting a temporary password for each user.   * Sending an invitation email with a password reset link.</p> </li> </ul> <p>The invitation emails may be missed out or ignored by the users and users may even try to use the old password on the new systems. This causes user dissatisfaction with the organization.</p> <p>Note</p> <p>All the challenges mentioned above are handled by the Asgardeo team during user migration. This reduces the operational overhead on administrators and provides end-users with a better user experience.</p>"},{"location":"guides/users/attributes/","title":"Manage attributes and mappings","text":"<p>Information directly related to users in an organization, such as username, email, address, etc., is stored as user attributes in Asgardeo. You can view the attributes, update them, and decide if and how they should appear in a user's profile. Learn more about managing attributes in your organization.</p> <p>You can also map your OpenID Connect attributes or SCIM2 attributes to user attributes in your organization.</p>"},{"location":"guides/users/attributes/manage-attributes/","title":"Manage attributes","text":"<p>An attribute is a piece of information about a particular user. It can be anything associated with the user, such as name, group, preferences, etc.</p> <p>User attributes represent information directly related to the user, such as the street address, username, email, first name, and more.</p> <p>You need user attributes to maintain the required user information in an organization. You can select the user information for your applications by using these attributes. Also, the user information displayed in user profiles is managed using attributes.</p> <p>See the information given below to manage attributes in your organization.</p>"},{"location":"guides/users/attributes/manage-attributes/#view-attributes","title":"View attributes","text":"<p>To view the attributes available for your organization:</p> <ol> <li>On the Asgardeo Console, click Attributes.</li> <li>Click Attributes again under the Manage Attributes section.    </li> </ol> <p>You can now see the complete list of attributes along with Attribute Display Name and Attribute name.</p>"},{"location":"guides/users/attributes/manage-attributes/#add-custom-attributes","title":"Add custom attributes","text":"<p>To add a custom attribute:</p> <ol> <li>On the Asgardeo Console, click Attributes.</li> <li>Click Attributes to see the list of attributes.</li> <li>Click New Attribute and enter values for the following properties:</li> </ol> <p></p> <p> Attribute Name The name that will be shared with applications. Protocol Mappings Mappings are auto-generated for the protocols. You can customize them here.    Attribute Display Name The name that will be used in a user's profile. <pre><code>  &lt;/tbody&gt;\n</code></pre> <p> 4. Click Finish</p>"},{"location":"guides/users/attributes/manage-attributes/#update-attributes","title":"Update attributes","text":"<p>To update the properties of a user attribute:</p> <ol> <li>On the Asgardeo Console, click Attributes.</li> <li>Click Attributes to see the list of attributes.</li> <li>Click Edit for the attribute you want to update.    </li> </ol> <p>!!! note Info      The Attribute field specifies the unique identifier of the attribute. It always starts with <code>http://wso2.org/claims</code>. This cannot be edited.</p> <ol> <li>Update the following values.     Attribute Display Name Update the display name of the attribute that will show in user profiles. Description Update the description for the attribute. Display this attribute on the user's profile If this checkbox is selected, the attribute is displayed in user profiles. Make this attribute required on user's profile If this checkbox is selected, users are required to specify a value for this attribute on their profile. Make this attribute read-only on user's profile If this checkbox is selected, the value for this attribute will be read-only in user profiles. </li> <li>Click Update.</li> </ol>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/","title":"Manage OpenID Connect attribute mappings","text":"<p>You can map OpenID Connect attributes to default attributes in the organization. This allows applications that implement OpenID Connect login to receive user information in the ID token.</p>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/#view-openid-connect-attributes","title":"View OpenID Connect attributes","text":"<p>To view the OpenID Connect attributes available for your organization:</p> <ol> <li>On the Asgardeo Console, click Attributes &gt; Manage Attribute Mappings.</li> <li>Click OpenID Connect.    </li> </ol> <p>You can find the mapped OpenID Connect attributes.</p>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/#add-an-openid-connect-attribute","title":"Add an OpenID Connect attribute","text":"<p>Asgardeo supports some OpenID Connect attributes by default. You can add new OpenID Connect attributes as follows:</p> <ol> <li>On the Asgardeo Console, click Attributes &gt; Manage Attribute Mappings.</li> <li>Click OpenID Connect &gt; New Attribute.</li> <li>Enter values for the following properties:     OpenID Connect Attribute The OpenID Connect attribute name that will be shared with applications in the ID token and userinfo responses. User attribute to map to Select the default attribute that should be mapped to the new OIDC attribute. </li> <li>Click Save.</li> </ol> <p>For example, shown below is an OpenID Connect attribute mapped to a user attribute in Asgardeo:   OpenID Connect Attribute User attribute to map to <code>email_home</code> <code>http://wso2.org/claims/emails.home</code> </p> <p>You need to enable <code>email_home</code> as a requested attribute for your application and also add it to an OIDC scope. You can then configure your application to receive this user information when a user signs in.</p> <p>After user authentication, you can find the <code>email_home</code> claim in the ID token, as shown below.</p> <pre><code>    {\n      \"isk\": \"69b37037a2349763dc48e2a30a62c3feebf0b5823cf869e149352737ddc0ca63\",\n      \"at_hash\": \"7qgloEmkz3kGBTtH7RI4qw\",\n      \"sub\": \"user@sample.com\",\n      \"amr\": [\n        \"BasicAuthenticator\"\n      ],\n      \"iss\": \"https://accounts.asgardeo.io/t/bitfrost/oauth2/token\",\n      \"given_name\": \"alice\",\n      \"sid\": \"5580be2b-a12d-43a4-823a-9d1352b88269\",\n      \"aud\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n      \"c_hash\": \"VlKxb3UhuYtFEG_VftAa0g\",\n      \"nbf\": 1625557031,\n      \"azp\": \"UEP40cZTZfxJfGdDWFmTrwqluxoa\",\n      \"nickname\": \"nick\",\n      \"exp\": 1625560631,\n      \"iat\": 1625557031,\n      \"family_name\": \"john\"\n      \"email_home\": \"john_home@gmail.com\"\n    }\n</code></pre> <p></p>"},{"location":"guides/users/attributes/manage-oidc-attribute-mappings/#delete-an-openid-connect-attribute","title":"Delete an OpenID Connect attribute","text":"<p>To delete the OpenID Connect attributes available in your organization:</p> <ol> <li>On the Asgardeo Console, click Attributes &gt; Manage Attribute Mappings.</li> <li>Click OpenID Connect and select the attribute to delete.</li> <li>Click Delete and select the checkbox to confirm your action.</li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/","title":"Manage SCIM 2.0 attribute mappings","text":"<p>Attributes in your organization are mapped to the following SCIM 2.0 schemas mappings: - Core schema attributes - User schema attributes - Enterprise schema attributes - Custom schema attributes</p> <p>The attributes in the core, user, and enterprise schemas are well-defined in the SCIM 2.0 specification and you can't modify the attributes in these schemas. Custom schema attributes can be added or deleted by users.</p>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/#view-scim-20-attributes","title":"View SCIM 2.0 attributes","text":"<p>To view the SCIM 2 attributes mapped to user attributes in your organization:</p> <ol> <li>On the Asgardeo Console, click Attributes&gt; Manage Attribute Mappings.</li> <li>Click SCIM 2.0.    </li> </ol>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/#add-a-scim-20-custom-schema-attribute","title":"Add a SCIM 2.0 custom schema attribute","text":"<p>You can add new SCIM 2.0 custom schema attributes as follows:</p> <ol> <li>On the Asgardeo Console, click Attributes &gt; Manage Attribute Mappings.</li> <li>Click SCIM 2.0 and click New Attribute.</li> <li>Enter values for the following properties:     SCIM Attribute The SCIM attribute name that will be shared with applications. User attribute to map to Select the default attribute that should be mapped to the new SCIM attribute. </li> <li>Click Save.</li> </ol>"},{"location":"guides/users/attributes/manage-scim2-attribute-mappings/#delete-a-scim-20-custom-schema-attribute","title":"Delete a SCIM 2.0 custom schema attribute","text":"<p>To delete the SCIM 2.0 custom schema attributes available in your organization:</p> <ol> <li>On the Asgardeo Console, click Attributes &gt; Manage Attribute Mappings.</li> <li>Click SCIM 2.0 &gt; Custom Schema and select the attribute to delete.</li> <li>Click Delete and enable the checkbox to confirm you action.</li> <li>Click Confirm.</li> </ol>"},{"location":"guides/users/attributes/manage-scopes/","title":"Manage OIDC Scopes","text":"<p>In Asgardeo, each piece of user information is mapped to a user attribute.</p> <p>OpenID Connect (OIDC) Scopes are a convenient way of grouping such user attributes. Applications can use scopes to request access to the user attributes corresponding to them. Access to other attributes that do not belong to the requested scopes is restricted.</p>"},{"location":"guides/users/attributes/manage-scopes/#default-oidc-scopes","title":"Default OIDC scopes","text":"<p>Asgardeo uses <code>openid</code> as a marker scope during authentication and it will not return any user attributes for the <code>openid</code> scope.</p> <p>Listed below are the default OpenID Connect scopes that applications can request and the corresponding user attributes:</p> Scope Description Attributes <code>profile</code> This requests to retrieve profile information of the user. <ul> <li>name</li> <li>family_name</li> <li>given_name</li> <li>middle_name</li> <li>nickname</li> <li>preferred_username</li> <li>profile</li> <li>picture</li> <li>website</li> <li>gender</li> <li>birthdate</li> <li>zoneinfo</li> <li>locale</li> <li>updated_at</li> </ul> <code>email</code> This requests access to the end-user's email related claims. <ul> <li>email</li> <li>email_verified</li> </ul> <code>address</code> This scope value requests access to the address view of the user. This will return sub fields of the address claim. <ul> <li>address</li> <li>street_address</li> </ul> <code>phone</code> This scope value requests access to the information related to the phone number of the user. <ul> <li>phone_number</li> <li>phone_number_verified</li> </ul> <code>groups</code> This scope value requests access to the groups to which the user belongs. <ul> <li>groups</li> </ul>"},{"location":"guides/users/attributes/manage-scopes/#create-custom-scopes","title":"Create custom scopes","text":"<p>To add new scopes to your organization:</p> <ol> <li>In the Asgardeo Console, go to Scopes</li> <li>Click New OIDC Scope to open the Create OpenID Connect Scope dialog box.    </li> <li>Enter values for the required properties and click Next:      Scope The scope name that will be shared with applications. Display name The scope name that will be displayed in the Scopes section. Applications should use this scope name to request the corresponding attributes. Description The description of the scope. </li> <li>Select the attributes that should correspond to the scope and click Finish.     </li> </ol>"},{"location":"guides/users/attributes/manage-scopes/#edit-scopes","title":"Edit Scopes","text":"<p>You can add or delete attributes to scopes based on your requirement.</p> <ol> <li>On the Asgardeo Console, go to Scopes</li> <li>Select the scope to edit.</li> <li>To add a new attribute to the scope:<ol> <li>Click New Attribute.</li> <li>Select the attribute you wish to add and click Save.</li> </ol> </li> <li>To delete an attributes from the scope, click the trash icon next to it.</li> <li>Click Save Changes to save the updates.</li> </ol>"},{"location":"guides/users/attributes/manage-scopes/#use-scopes-to-request-attributes","title":"Use scopes to request attributes","text":"<p>As an application developer, you can follow the steps given below to configure your applications to request user attributes using scopes.</p> <ol> <li> <p>First, go to the Asgardeo Console and see that your application has the required attributes enabled.</p> </li> <li> <p>Copy the scopes listed at the end of the User Attributes section. You may have default OIDC scopes or custom scopes listed.</p> <p></p> </li> <li> <p>When configuring the authentication request in your client app, append the scope parameter with the scopes that you need:</p> <ul> <li>For client apps using the SDK:</li> </ul> <p><code>json{6}   {     \"clientID\": \"&lt;client ID&gt;\",     \"baseUrl\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;\",     \"signInRedirectURL\": \"https://localhost:3000\",     \"signOutRedirectURL\": \"https://localhost:3000\",     \"scope\": [ \"openid\", \"address\", \"phone\", \"profile\" ]   }</code></p> <p>!!! note     Find out more about configuring applications.</p> <ul> <li>For client apps using direct API calls to authenticate:</li> </ul> <p><code>js{6}   curl -X GET \\   https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize \\     -d 'client_id={client_id}'     -d 'response_type=code'     -d 'redirect_uri={redirect_uri}'     -d 'scope=openid%address%phone%profile'</code></p> </li> </ol> <p>When the user logs in, Asgardeo will prompt the user with a consent screen to authorize access to the user attributes. Once the user consents, your application will have access to the requested user attributes.</p>"},{"location":"guides/users/user-stores/","title":"Manage user stores","text":"<p>Administrators in an organization can use user stores to store information about users of an organization.</p> <p>Asgardeo maintains the following two types of user stores:</p> Internal user store This is the <code>DEFAULT</code> user store of Asgardeo. You can add users and groups to this user store and make changes to them via the Asgardeo Console. Remote user store             This is a remote user store that administrators can connect to Asgardeo. These user stores can be configured with two access types:  <ul> <li>Read-only  - The users and groups of read-only user stores cannot be modified through Asgardeo.</li> <li>Read-write - You can perform create, read, update, and delete operations on users in the user store                 and read and update operations on groups through Asgardeo.</li> </ul>"},{"location":"guides/users/user-stores/#whats-next","title":"What's Next","text":"<ul> <li>Connect a remote user store</li> <li>Configure high availability for a remote user store</li> <li>Update the configurations of a remote user store</li> </ul>"},{"location":"guides/users/user-stores/configure-a-user-store/","title":"Connect a remote user store","text":"<p>Note</p> <p>If you have connected a remote user store before 7th February 2023, you will have Read-Only access for the user store. If you need Read-Write access for your user store on Asgardeo,</p> <ol> <li>Delete the existing remote user store.</li> <li>Register a remote user store again with Read/Write access type.</li> <li>Set up the remote user store with the latest user store agent.</li> </ol> <p>You can connect your on-premise user store to Asgardeo and onboard users and groups from it. Note that this user store connection is read-only, which means you cannot use the Asgardeo Console to modify this user store.</p> <p>Administrators get the opportunity to manage access to business applications and manage users and groups based on the access type of the user store.</p> <p>Follow the guide below to set up a remote user store in Asgardeo.</p>"},{"location":"guides/users/user-stores/configure-a-user-store/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>An organization in Asgardeo.  Create an organization if you don\u2019t have one already.</p> </li> <li> <p>An on-premise user store. Currently, Asgardeo supports:</p> </li> <li>Lightweight Directory Access Protocol (LDAP)</li> <li> <p>Active Directory (AD)</p> </li> <li> <p>To run the user store agent, you need to have:</p> </li> <li>JAVA 8 or JAVA 11 installed locally</li> <li>JAVA_HOME configured correctly</li> </ul> Note <ul> <li> <p>Recommended hardware requirements      CPU cores <code>2</code> Storage <code>500 MB</code> of free space on disk. Operating System The connector can run on Windows or Linux. RAM <code>1 GB</code> </p> </li> <li> <p>Connectivity methods      Protocol Web socket Port 443  :::</p> </li> </ul>"},{"location":"guides/users/user-stores/configure-a-user-store/#register-a-remote-user-store","title":"Register a remote user store","text":"<p>To configure a remote user store for your organization:</p> <ol> <li>On the Asgardeo Console, go to User Stores.</li> <li>Click Connect userstore to open the following:    </li> <li> <p>Enter the following details about the user store.  Name A unique name to identify your user store. Description A description for the user store. Remote user store type Select your user store type Access Type            Select the access type of the user store. It can be any one of the following:  - Read-only            - Read/Write  Note : The access type of the user store cannot be modified after creation.         </p> </li> <li> <p>Click Next and under Map Attributes, map Username and User ID attributes to that of your user store.</p> <p>Warning</p> <p>These two attributes need to be mapped correctly for proper authentication.</p> <ul> <li><code>Username</code> - This attribute is used as the user identifier. Provide an attribute that identifies your user in your on-premise user store. For the best experience, use a username that satisfies validation rules in Username Validation section.</li> <li><code>User ID</code> - This attribute is used to uniquely identify a user entry. Provide an attribute that uniquely identifies a user entry in your user store.</li> </ul> </li> <li> <p>Click Finish to complete the registration.</p> </li> </ol>"},{"location":"guides/users/user-stores/configure-a-user-store/#set-up-the-remote-user-store","title":"Set up the remote user store","text":"<p>After registering the user store, you\u2019ll be redirected to the Setup Guide of the user store agent.</p> <p>To assemble and configure the user store agent bundle:</p> <ol> <li> <p>Download the user store agent.</p> </li> <li> <p>Configure the properties and connection details of the local user store by following these steps:</p> <ol> <li>Unzip the downloaded user store agent.</li> <li>Go to the root directory of the user store agent and open the <code>deployment.toml</code> file.</li> <li> <p>Update the configurations of the <code>deployment.toml</code> file according to your user store settings. A sample configuration is given below for reference.</p> <pre><code>[user_store]\ntype = \"ldap\"\nbase_dn = \"dc=wso2,dc=org\"\nconnection_url = \"ldap://localhost:10391\"\nconnection_name = \"cn=admin,dc=example,dc=org\"\nconnection_password = \"adminpassword\"\nuser_id_search_filter = \"(&amp;amp;(objectClass=inetOrgperson)(uid=?))\"\nuser_name_list_filter = \"(objectClass=inetOrgperson)\"\nuser_id_attribute = \"uid\"\nuser_name_attribute = \"cn\"\nuser_name_search_filter = \"(&amp;amp;(objectClass=inetOrgperson)(cn=?))\"\npassword_hash_method = \"PLAIN_TEXT\"\ngroup_search_base = \"ou=Groups,dc=example,dc=org\"\ngroup_name_attribute = \"cn\"\ngroup_name_search_filter = \"(&amp;amp;(objectClass=groupOfNames)(cn=?))\"\ngroup_name_list_filter = \"(objectClass=groupOfNames)\"\ngroup_id_attribute = \"gid\"\nmembership_attribute = \"member\"\n</code></pre> <p>Note</p> <p>Refer  remote user store          properties  for the complete list of user store configurations.</p> </li> </ol> </li> <li> <p>Return to the Asgardeo Console and, click Generate Token to create an installation token. The installation token is essential to run the user store agent.     !!! warning</p> <pre><code>- Copy the installation token and save it in a safe location. You won't be able to see it again!\n\n- This token has no expiry time, but in case you lose or forget it, you can [regenerate an installation token](../../guides/users/user-stores/update-user-stores/#regenerate-the-installation-token).\n</code></pre> </li> <li> <p>To start the user store agent, navigate to its root directory and run one of the following commands based on your operating system:</p> <ul> <li>Linux/OSx:     <pre><code>sh wso2agent.sh\n</code></pre></li> <li>Windows:     <pre><code>wso2agent.bat -- run\n</code></pre> Enter the installation token generated in the previous step when prompted.</li> </ul> </li> </ol> <p>??? note (Optional) Run the user store agent as a background process</p> <pre><code>1. Create a file named `accessToken` in the root directory of the agent.\n2. Add the installation token obtained from the previous step.\n3. Run the user store agent.\n    - Linux/OSx:\n        ``` json \n            sh wso2agent.sh start\n            ```\n    - Windows:\n        ``` json \n        wso2agent.bat start\n        ```\n</code></pre>"},{"location":"guides/users/user-stores/configure-a-user-store/#whats-next","title":"What's Next","text":"<ul> <li>Configure high availability for a remote user store</li> <li>Manage remote user stores in Asgardeo</li> </ul>"},{"location":"guides/users/user-stores/configure-high-availability/","title":"Configure high availability for a remote user store","text":"<p>It is recommended to maintain high availability for your remote user store in Asgardeo as it includes user information that must be available at all times.</p> <p>To maintain high availability for the remote user store, you need to connect a second user store agent.</p>"},{"location":"guides/users/user-stores/configure-high-availability/#prerequisites","title":"Prerequisites","text":"<p>Configure and connect a remote user store in Asgardeo.</p>"},{"location":"guides/users/user-stores/configure-high-availability/#connect-a-second-user-store-agent","title":"Connect a second user store agent","text":"<p>To connect a second user store agent:</p> <ol> <li>On the Asgardeo Console, go to User Stores.</li> <li>Select your user store from the User stores list.</li> <li>In the General tab, a second user store agent is listed under User Store Agent Connection(s).</li> <li> <p>Click Generate token on the second user store agent.    </p> <p>Note</p> <p>An installation token can only be used to connect to one user store agent. You cannot use the same installation token to run a second agent.</p> </li> <li> <p>Run a second user store agent by navigating to its root directory and by using one of the following commands based on your operating system:</p> <ul> <li> <p>Linux/OSx:     <pre><code>sh wso2agent.sh\n</code></pre></p> </li> <li> <p>Windows:     <pre><code>wso2agent.bat\n</code></pre> Enter the second installation token generated in the previous step when prompted.</p> </li> </ul> </li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/","title":"Manage remote user stores in Asgardeo","text":"<p>This guide walks you through the process of managing your remote user stores via the Asgardeo Console.</p>"},{"location":"guides/users/user-stores/update-user-stores/#update-attribute-mappings","title":"Update attribute mappings","text":"<p>To update attribute mappings via the Asgardeo Console:</p> <ol> <li>On the Asgardeo Console, go to User Stores</li> <li>Select your user store from the User stores list.</li> <li> <p>Go to the Attribute Mappings tab and update the required information.</p> <p>Note</p> <ul> <li>Update Custom Attributes and Local Attributes mapped to your user store.</li> <li>Map Asgardeo attributes with the corresponding on-premise user store attributes.</li> </ul> </li> <li> <p>Click Update to save the configurations.</p> </li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#disconnect-a-user-store-agent","title":"Disconnect a user store agent","text":"<p>To disconnect a user store agent:</p> <ol> <li>On the Asgardeo Console, go to User Store</li> <li>Select your user store from the User stores list.</li> <li>In the User Store Agent Connection(s) section, click Disconnect on the user store agent that you wish to disconnect.</li> <li>Select the checkbox to confirm your action and click Confirm.</li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#regenerate-an-installation-token","title":"Regenerate an installation token","text":"<p>An installation token is used to run a user store agent. Once generated, an installation token is displayed only once.</p> <p>In case you forget or lose this installation token, you can regenerate it.</p> <p>Warning</p> <ul> <li> <p>If you regenerate a token without disconnecting the user store agent, the agent will be disconnected forcefully. You will need to re-run the user store agent with the new installation token.</p> </li> <li> <p>If the token is compromised, it is essential to regenerate an installation token.</p> </li> </ul> <p>To regenerate an installation token:</p> <ol> <li>On the Asgardeo Console, go to User Store</li> <li>Select your user store from the User Stores list and go to the General tab.</li> <li>In the User Store Agent Connection(s) section, click Regenerate Token on the user store agent that you wish to regenerate the token for.</li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#disable-a-user-store","title":"Disable a user store","text":"<p>Warning</p> <p>If you disable a user store, its users will lose access to Asgardeo applications and administrators can no longer view users or groups of that user store in the Asgardeo Console.</p> <p>To disable a user store:</p> <ol> <li>On the Asgardeo Console, go to User Stores and select your user store.</li> <li> <p>Turn on the Disable User Store toggle at the bottom of the page to disable the user store.    </p> <p>Note</p> <p>You can re-enable a disabled user store by switching off the toggle.</p> </li> </ol>"},{"location":"guides/users/user-stores/update-user-stores/#delete-a-remote-user-store","title":"Delete a remote user store","text":"<p>A user store can be deleted by an administrator. Once a user store is deleted, the action is irreversible.</p> <p>Note</p> <p>Once you delete the remote user store the user store agents associated with this user store will be forcefully disconnected.</p> <p>To delete a user store:</p> <ol> <li>On the Asgardeo Console, go to User Store and select your user store.</li> <li>Click Delete User Store at the bottom of the page.    </li> <li>On the pop-up window, type the user store name and click Confirm to delete the user store.</li> </ol>"},{"location":"guides/your-asgardeo/","title":"Your Asgardeo","text":"<p>If you are an owner of an organization or an administrator, you can manage your Asgardeo accounts using the My Account portal.</p> <p>The owner is a user who creates an organization in Asgardeo. This grants the owner all the administrative rights by default. An administrator is a user who is invited in to the organization and assigned administrative priviledges.  </p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/","title":"Self-service for owners and administrators","text":"<p>If you are an owner or an administrator in an Asgardeo organization, go to the My Account portal to easily access and self-manage your information from anywhere.</p> <p>You can perform the following activities on this portal: - Update profile information - Change password - View linked social accounts - View and revoke active sessions</p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#access-my-account-portal","title":"Access My Account portal","text":"<p>You can access the My Account portal using the following URL:</p> <p>https://myaccount.asgardeo.io</p> <p>You can also switch to My Account from the Asgardeo Console. Click your profile icon as shown below and select My Account.</p> <p></p> <p>You are now automatically signed in to the portal.</p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#update-profile-information","title":"Update profile information","text":"<p>The user details displayed in your profile corresponds to the default attributes that are enabled for the organization.</p> <p>To update your profile information via My Account:</p> <ol> <li>Sign in to the My Account portal.</li> <li> <p>Click Personal Info to see the profile information.    </p> </li> <li> <p>If required, update the editable information.</p> </li> </ol>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#change-password","title":"Change password","text":""},{"location":"guides/your-asgardeo/asgardeo-self-service/#manage-linked-social-accounts","title":"Manage linked social accounts","text":""},{"location":"guides/your-asgardeo/asgardeo-self-service/#export-profile-information","title":"Export profile information","text":"<p>??? note Sample JSON file    This is a sample of the exported <code>json</code> file with an admin user's profile information.</p> <p><pre><code>{\n\"user_profile\": {\n\"accountState\": \"UNLOCKED\",\n\"emailVerified\": \"true\",\n\"country\": \"SriLanka\",\n\"givenname\": \"firstname\",\n\"created\": \"2021-04-07T15:07:58.001440Z\",\n\"modified\": \"2023-04-25T04:31:05.838894Z\",\n\"emailaddress\": \"tom@wso2.com\",\n\"userid\": \"36d2dd61-6e58-4b54-bfbe-f8621236c88b\",\n\"username\": \"tom@wso2.com\",\n\"lastname\": \"Jerry\"\n},\n\"linked_accounts\": [\n{\n\"connection\": \"Google\",\n\"connectionId\": \"xxxx\",\n\"linkedAccountId\": \"xxxx\",\n\"isExternalConnection\": true\n}\n]\n}\n</code></pre>    :::</p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#manage-login-sessions","title":"Manage login sessions","text":""},{"location":"guides/your-asgardeo/asgardeo-self-service/#enroll-totp-for-asgardeo-users","title":"Enroll TOTP for Asgardeo users","text":"<p>If you, as an administrator or an organization owner, want to register an authenticator app for generating OTP values, you can configure it via the My Account portal.</p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#initial-setup","title":"Initial setup","text":"<p>Follow the steps given below to set up an authenticator app using My Account.</p> <ol> <li>In your My Account portal, go to Security &gt; Additional Authentication.     </li> <li>Click the + icon and scan the prompted QR code using an authenticator application.     </li> <li>Enter the TOTP code obtained after scanning the QR code and click Verify.     </li> </ol>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#regenerate-the-qr-code","title":"Regenerate the QR code","text":"<p>If you deleted the scanned QR from the authenticator app, follow the steps below to reconfigure it.</p> <ol> <li> <p>In your My Account portal, go to Security &gt; Additional Authentication.</p> </li> <li> <p>Click the eye icon (view) next to the authenticator app.</p> <p></p> </li> <li> <p>Click Regenerate to generate a new QR code.</p> <p></p> </li> <li> <p>Enter the TOTP code obtained after scanning the QR code and click Verify.</p> <p></p> </li> </ol>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#configure-backup-codes","title":"Configure backup codes","text":"<p>When you have enabled at least one additional authentication method in the Additional Authentication section, authentication using backup codes will be available as a recovery option for MFA. Users can use these backup codes to log in when they cannot obtain the required MFA codes.</p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#enable-backup-codes","title":"Enable backup codes","text":"<p>Note</p> <p>You need to configure at least one additional authenticator from the My Account portal. See more information on configuring the authenticator app.</p> <p>To enable backup codes:</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li>Click <code>+</code> to add backup codes.     You will see a popup window with ten backup codes. Each backup code can be used only once.     </li> <li>Click Download Codes or Copy Codes and save the copied or downloaded backup codes securely, as the codes will only be shown once.</li> <li>After saving the backup codes, click Close.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#regenerate-backup-codes","title":"Regenerate backup codes","text":"<p>In case you have lost these backup codes or have used them all, follow the steps below to generate a new set of backup codes.</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li>Click on the refresh icon to regenerate the backup codes.     </li> <li>On the confirmation window, click Regenerate to confirm your action.     You will see a popup window with ten backup codes. Each backup code can be used only once.     </li> <li>Click Download Codes or Copy Codes and save the copied or downloaded backup codes securely, as the codes will only be shown once.</li> <li>After saving the backup codes, click Close.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/your-asgardeo/asgardeo-self-service/#remove-backup-codes","title":"Remove backup codes","text":"<p>To remove the backup codes:</p> <ol> <li>On the My Account portal, go to Security &gt; Additional Authentication &gt; Recovery Options.</li> <li>Click on the trash icon to remove the existing backup codes.     </li> <li>On the confirmation window, click Remove to confirm your action.</li> </ol> <p>Note</p> <p>The backup code configurations will not be applied to your active sessions by default, therefore it is recommended to terminate your active sessions.</p>"},{"location":"guides/your-asgardeo/delete-your-user-account/","title":"Delete your user account","text":"<p>If you have a requirement to delete your own user account from Asgardeo, see the guidelines and instructions given below.</p>"},{"location":"guides/your-asgardeo/delete-your-user-account/#owners","title":"Owners","text":"<p>If you are the owner of one or multiple Asgardeo organizations, you will have user accounts (of type Owner) in each organization. Currently, you are not allowed to remove your owner accounts or to transfer your ownership of organizations to other users.</p> <p>To delete your owner account(s), you need to remove the organizations that you own.</p>"},{"location":"guides/your-asgardeo/delete-your-user-account/#administrators","title":"Administrators","text":"<p>If you want to remove your administrator account from an organization, you need to send a request to another administrator in the organization. See the instruction on deleting administrators.</p> <p>Note</p> <p>Note that removing your administrator account from one organization only removes your association with that organization. Your administrator account will continue to persist in other organizations that you are associated with.</p>"},{"location":"guides/your-asgardeo/manage-subscriptions/","title":"Manage subscriptions","text":"<p>Start your Asgardeo journey with the free plan and use it for as long as you want if it fits your requirements. You can also upgrade to a paid plan, downgrade to a lower plan, or cancel your subscription, as explained below.</p> <p>See the pricing details and the available resource limits and usage limits for each subscription plan.</p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#upgrade-the-subscription-plan","title":"Upgrade the subscription plan","text":"<p>To upgrade your subscription:</p> <ol> <li>Sign in to the Asgardeo Console.</li> <li> <p>Click Upgrade on the upper menu or go to the profile menu and select Billing Portal to open the portal.</p> <p></p> </li> <li> <p>On the Subscriptions page, select your preferred billing cycle, your business use case, the number of monthly active users (MAUs), the subscription plan, and the support plan.</p> <p>Note</p> <p>Find detailed information about subscription plans in Plan details</p> </li> <li> <p>Once you have evaluated the subscription details, you can do one of the following:</p> <ul> <li> <p>Subscribe to an Essentials or a Professional plan by following the steps below:</p> <ol> <li>Once you have decided on an appropriate plan, click Upgrade.</li> <li> <p>Enter your billing and payment details and agree to our terms of fees and payment</p> <p></p> </li> <li> <p>Click Upgrade to complete your subscription.</p> </li> </ol> </li> <li> <p>Upgrade an existing paid subscription by selecting a higher tier plan and following the same steps mentioned above.</p> </li> <li> <p>Subscribe to an Enterprise plan by clicking Contact Us, and submitting your information. The Asgardeo team will get back to you with the next steps.</p> </li> </ul> </li> </ol>"},{"location":"guides/your-asgardeo/manage-subscriptions/#plan-details","title":"Plan details","text":"<p>The topics below explain about the options available to you when selecting a plan that is right for you.</p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#billing-cycle","title":"Billing cycle","text":"<p>You can choose to be billed monthly or annually for your subscription. However, note that the monthly active users (MAUs) count that exceeds the allowed limit is always charged monthly.</p> <p>Note</p> <p>Billing cycles start on the 1st day of every month. Depending on the day of the month on which you subscribe, you will be charged a prorated fee for the first month. </p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#business-use-case","title":"Business use case","text":"<p>Choose your business use case from the available options:</p> B2C (Business-to-Consumer)                     Your organization focuses on providing digital services directly to individual consumers.          B2B (Business-to-Business)                     Your organization focuses on providing digital products and services to other businesses that will enable those services for their business users.          B2E (Business-to-Employee)                     Your organization focuses on providing products or services directly to its employees.          <p>Note that the price for each subscription plan varies depending on the business use case.</p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#monthly-active-users-maus","title":"Monthly Active Users (MAUs)","text":"<p>This value indicates the total number of users that can be authenticated into your system using Asgardeo within a month. Use the slider to select the number of monthly active users (MAU) you expect to have. Note that the price for each subscription plan varies depending on the MAU.</p> <p>If you are on the free subscription, the MAU count will be throttled when the limit is exceeded. However, for higher subscription plans, additional MAUs will not be throttled but charged as specified in the Asgardeo pricing page.</p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#subscription-plan","title":"Subscription plan","text":"<p>Depending on your selected use case, the available subscription plans will change. You can customize the subscription plan by changing your selected options such as  MAUs, support plan, etc.</p> <p>Note</p> <p>To compare the different subscription plans, go to Asgardeo pricing.</p> <p></p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#support-plan","title":"Support plan","text":"<p>The support plan you select determines the availability of support services from the Asgardeo team. Select the support plan you want using the drop-down list available for the subscription plan, as shown in the following example.</p> <p>Available support packages for each plan are as follows:</p> <ul> <li>Essentials plan: Optional Basic(12/5 SLA) support</li> <li>Professional plan: Optional Basic(12/5 SLA) or Enterprise(24/7 SLA) support</li> <li>Enterprise plan: Enterprise(24/7 SLA) support included.</li> </ul> <p></p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#manage-billing-and-payment","title":"Manage billing and payment","text":"<p>Your billing and payment information will be saved in the Billing Details tab. You can use this tab to edit your billing details or to add or delete a payment method.</p> <p></p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#manage-invoices","title":"Manage invoices","text":"<p>Once you have upgraded to a paid plan, you can find and download your invoice from the Invoices tab that appear.</p> <p></p>"},{"location":"guides/your-asgardeo/manage-subscriptions/#downgradecancel-your-subscription","title":"Downgrade/Cancel your subscription","text":"<p>Contact the Asgardeo support team at asgardeo-help@wso2.com for subscription downgrades and cancellations.</p>"},{"location":"guides/your-asgardeo/recover-password/","title":"Recover your password","text":"<p>If you are an owner or an administrator in an Asgardeo organization, you can recover a forgotten password by following the instructions on the Asgardeo sign-in page.</p> <p>To recover your password:</p> <ol> <li>Go to the sign-in page via the My Account Portal.</li> </ol> <p></p> <ol> <li>Click Forgot password?.</li> <li>Enter your username and click Send Reset Link.    </li> </ol> <p>An email notification is sent to your email address.</p> <ol> <li>Open the email you received and click Reset Password.    </li> <li>Enter new password and Proceed.</li> </ol> <p>Now you have reset your password and can sign in using your new password.</p>"},{"location":"integrations/","title":"Index","text":""},{"location":"references/","title":"References - Overview","text":"<p>See the topics in this section for references that will help you while working with Asgardeo. This includes concepts related to Asgardeo features, configuration details, and other resources.</p> <ul> <li> <p>User roles in Asgardeo and their associated permissions.</p> </li> <li> <p>OpenID Connect and SAML settings for applications.</p> </li> <li> <p>OpenID Connect and SAML settings for enterprise identity providers in Asgardeo.</p> </li> <li> <p>Grant types used in Asgardeo.</p> </li> <li> <p>The API references you need for writing conditional authentication scripts.</p> </li> <li> <p>Remote user store properties you need for configuring Asgardeo user store agent.</p> </li> <li> <p>Monitor logs in Asgardeo.</p> </li> <li> <p>Email templates in Asgardeo.</p> </li> <li> <p>Accessibility compliance in Asgardeo.</p> </li> <li> <p>Data residency in Asgardeo.</p> </li> <li> <p>Localization in Asgardeo.</p> </li> </ul>"},{"location":"references/accessibility/","title":"Accessibility compliance","text":"<p>Asgardeo conforms with Level A and Level AA success criteria and techniques of the Web Content Accessibility Guidelines 2.1 (WCAG 2.1).</p> <p>This makes content on Asgardeo more accessible to a broader range of people with disabilities and makes the product more usable in general. With this, the business user registration interfaces and sign-in interfaces offered by Asgardeo are now operable through a keyboard interface. Color is not used as the only visual means of conveying information anymore.</p> <p>Content is now robust and understandable, making it more user-friendly.</p> <p>WSO2 provides a Voluntary Product Accessibility Template (VPAT) document for Asgardeo with details of the product's compliance with Web Content Accessibility Guidelines 2.1 (WCAG 2.1).</p>"},{"location":"references/application-logs/","title":"Application logs","text":"<p>Logs in Asgardeo are designed to help developers diagnose and troubleshoot issues that occur when using Asgardeo features such as onboarding an application, and configuring an authentication flow.</p> <p>Furthermore, support engineers can also use logs to troubleshoot user issues.</p>"},{"location":"references/application-logs/#analyze-logs","title":"Analyze logs","text":"<p>You can access logs in Asgardeo by navigating to Logs on the Asgardeo Console. The logs portal looks as below.</p> <p></p> <p>You can analyze logs by combining one or more of the following filters:</p>"},{"location":"references/application-logs/#filter-logs-by-time","title":"Filter logs by time","text":"<p>You can change the timeframe of the logs by clicking the dropdown next to the search bar.</p> <p></p> <p>Note</p> <p>By default, the console displays logs that occurred in the last 15 minutes.</p> <p>Besides the given timeframes, you can select a custom time range by following the steps below.</p> <ol> <li>Scroll down to the bottom of the timeframe dropdown and select Custom Time Range.</li> <li>Provide your desired time zone and the time range.</li> <li> <p>Click the button to submit.</p> <p></p> </li> </ol>"},{"location":"references/application-logs/#search-for-logs","title":"Search for logs","text":"<p>You can use the search bar to search for logs based on the Trace ID, Action ID, Client ID, Result Message or the Result Status. Learn more about these parameters in the structure of logs section.</p> <p>For example, the diagram below shows the results for a search based on the Result Message.</p> <p></p>"},{"location":"references/application-logs/#filter-logs","title":"Filter logs","text":"<p>When you expand a log in Asgardeo by clicking on it, you will get the following view.</p> <p></p> <p>Click the filter icon next to one or more of the log parameters and Asgardeo will narrow the search based on those parameter values. Learn more about these parameters in the structure of logs section.</p> <p>For example, if you would like to view logs related to a request, click the filter icon next to the relevant traceId and click Run Query to filter out all the related logs.</p> <p></p>"},{"location":"references/application-logs/#add-custom-logs-to-authentication-scripts","title":"Add custom logs to authentication scripts","text":"<p>In addition to the logs generated by Asgardeo, organization administrators can define their own logs when setting up conditional authentication scripts. This is helpful when you need additional information to troubleshoot an application issue.</p> <p>Note</p> <p>Custom logs are marked by the  icon in the logs portal.</p> <p>There are three types of custom logs that you can define in conditional authentication as explained below.</p>"},{"location":"references/application-logs/#info-logs","title":"Info logs","text":"<p>Info logs are used to log additional information related to a flow. You can define info logs using the utility function <code>Log.info()</code>.</p> <p>For example, an application developer sets up the following info log in the conditional authentication script to verify which user groups are allowed to log in.</p> <pre><code>.....\nvar allowedGroups = ['Supplier'];\nLog.info('Allowed groups: ' + allowedGroups.toString());\n.....\n</code></pre> <p>Once a user attempts to log in, this information is logged in the logs portal as shown below.</p> <p></p>"},{"location":"references/application-logs/#debug-logs","title":"Debug logs","text":"<p>Debug logs can be used to check the status of a condition defined in the conditional authentication script. You can define debug logs using the utility function <code>Log.debug()</code>.</p> <p>For example, an application developer sets up a debug log in the conditional authentication script to determine whether the first step of a login attempt succeeded.</p> <p><pre><code>...\nexecuteStep(1, {\nonSuccess: function (context) {\nLog.debug('first step successful'); }\n})\n...\n</code></pre> Once a user succeeds the first login step, the debug log appears in the logs portal as shown below.</p> <p></p>"},{"location":"references/application-logs/#error-logs","title":"Error logs","text":"<p>Conditional authentication scripts can cause two types of error logs in the logs portal.</p> <ul> <li> <p>Application errors that occur due to syntax errors in the conditional authentication script.</p> <p>For example, your conditional authentication script may have a syntax error that the editor does not flag as shown below. <pre><code>.....\nvar allowedGroups = ['Supplier'];\nLog.info('Allowed groups: ' + alowedGroups.toString());\n.....\n</code></pre> Once a user attempts to log in, the error is logged in the logs portal as shown below.</p> <p></p> </li> <li> <p>Custom errors that you define using the utility function <code>Log.error()</code>.</p> <p>For example, an application developer sets up an error log in the conditional authentication script to identify when a user outside the allowed user groups tries to log in.</p> <p><code>java var allowedGroups = ['Supplier']; ...    executeStep(1, { onSuccess: function (context) {     var user = context.currentKnownSubject;     var isMember = isMemberOfAnyOfGroups(user, allowedGroups);     if(!isMember){         Log.error(user.username + ' is not a member of the groups: ' + allowedGroups.toString());     } } }) ...</code> Once an unauthorized user attempts to log in, the error is logged in the logs portal as shown.</p> <p></p> </li> </ul>"},{"location":"references/application-logs/#structure-of-logs","title":"Structure of logs","text":"<p>The following table explains some of the common properties found in Asgardeo logs.</p> Property Description id Unique ID for each log event recordedAt Timestamp at which the event occurs traceId Unique ID to correlate the log event to a specific request flowId Unique ID to correlate the log event to a specific flow input Parameters applicable for the action. This can be either request parameters or method parameters or request headers. resultStatus Status of the action. Either <code>Success</code> or <code>Failed</code> resultMessage Description of the result status. E.g. reason for the failure. actionId A unique ID to identify a specific action performed by the system. configurations System configurations relevant to the action (This can be UI / organization / system level configurations)."},{"location":"references/application-logs/#sample-scenarios","title":"Sample scenarios","text":"<p>The following scenarios describe how you can use logs to troubleshoot some common issues that occur when using Asgardeo.</p>"},{"location":"references/application-logs/#application-onboarding","title":"Application onboarding","text":"<p>Follow the steps below to observe an application error log due to incorrect client credentials.</p> <ol> <li> <p>Onboard an application to Asgardeo but provide incorrect client credentials when configuring the application.</p> </li> <li> <p>Attempt to log in to the application with a user account. An error will occur in the application.</p> </li> <li> <p>Go to the logs portal on the Asgardeo Console and observe the following error log.</p> <p></p> </li> </ol>"},{"location":"references/application-logs/#conditional-authentication","title":"Conditional authentication","text":"<p>Follow the steps below to observe an application error log due to not meeting the conditions of an authentication script.</p> <ol> <li> <p>Onboard an application to Asgardeo.</p> </li> <li> <p>Restrict login to anyone outside the <code>employee</code> group using group-based access control.</p> </li> <li> <p>Define a custom error log in the authentication script.</p> </li> <li> <p>Log in to the application with a user account not belonging to the <code>employee</code> group. An error will occur in the application.</p> </li> <li> <p>Go to the logs portal on the Asgardeo Console and observe the following error log. </p> </li> </ol>"},{"location":"references/authorization-policies-for-apps/","title":"Authorization policies for apps","text":"<p>In the context of Asgardeo, an authorization policy can be engaged when authorizing an API resource to an application. The policy selection determines the enforcement mechanism for controlling access to the API resource. Asgardeo offers two options:</p> <ul> <li> <p>Role-Based Access Control (RBAC): This approach allows developers to enforce authorization to API resources based on application roles. The process flow once a user selects RBAC is as follows</p> <ol> <li>The user attempts to access an application with controlled access to API resources.</li> <li>Asgardeo verifies the user's group assignment.</li> <li>Asgardeo retrieves the user's roles by checking the group-to-role mappings.</li> <li>Asgardeo evaluates the permissions associated with the user's roles.</li> <li>Based on the assigned permissions, Asgardeo grants or denies the user with controlled access to the API resources.</li> </ol> <p>To summarize, Asgardeo validates the user's group assignment, determines the roles based on the group-to-role mappings, examines the permissions associated with the roles, and decides whether to permit or restrict the user's access to the API resources.</p> </li> <li> <p>No Authorization Policy: If an authorization policy is not required for an API resource, no authorization will be applied by default. This option allows users to access the API resource based on authentication and consent without any additional authorization requirements. Choosing this policy will provide unrestricted access for the API resource.</p> </li> </ul> <p>When configuring an authorization policy, it is important to carefully consider the security requirements of the API resource and select the appropriate policy that aligns with the desired level of access control.</p>"},{"location":"references/data-residency-in-asgardeo/","title":"Data residency in Asgardeo","text":"<p>Data residency is the geographical (or regulatory) boundary where your data is stored and processed.</p> <p></p>"},{"location":"references/data-residency-in-asgardeo/#datacenters","title":"Datacenters","text":"<p>Asgardeo uses two regional datacenters to store data:</p>              Country                       Regional Datacenter                       Location                       United States (US)                       East US                       Virginia                       Europe (EU)                       Northern Europe                       Ireland          <p>You can onboard to Asgardeo in your preferred region by using the relevant URL (listed below). Your data will be stored in the corresponding regional data center.</p> <ul> <li>Asgardeo Console - US region: https://console.asgardeo.io/</li> <li>Asgardeo Console - EU region: https://console.eu.asgardeo.io/</li> </ul> <p>However, note that certain types of data are always exclusively stored in the US datacenter as explained below.</p>"},{"location":"references/data-residency-in-asgardeo/#subscription-data","title":"Subscription data","text":"<p>Your subscription account is the user account that is created when you are onboarded to Asgardeo. Billing details are linked to this account. Listed below are some of the subscription data:</p> <ul> <li>Billing email</li> <li>Subscription ID</li> <li>Tier details</li> </ul> <p>Data from an Asgardeo subscription account is exclusively stored in the US datacenter. That is, even if you choose the EU datacenter when you create your account, this data is always created and stored in the US datacenter at present.</p>"},{"location":"references/data-residency-in-asgardeo/#administrator-data","title":"Administrator data","text":"<p>Users onboarded to Asgardeo as organization administrators are granted access to the global WSO2 services such as billing and support. Therefore, the administrator data (including profile information and login information from the billing/support portals) are also exclusively stored in the US datacenter.</p> <p>The profile information of organization administrators includes all the data that organization administrators enter in their user profiles.</p>"},{"location":"references/data-residency-in-asgardeo/#end-user-data","title":"End-user data","text":"<p>Data of your end users are only stored in the regional datacenter you selected when onboarding to Asgardeo.</p>"},{"location":"references/data-residency-in-asgardeo/#data-sharing","title":"Data sharing","text":"<p>Some of your data, such as logs, will be accessible outside your selected region to ensure that WSO2\u2019s global entities (currently includes the USA, Sri Lanka, and Brazil) can provide technical support and other services. For example, technical support teams outside the region will need access to this data for various support and troubleshooting purposes. However, this data is stored only in the regional datacenter that you have selected.</p> <p>Therefore, note that your organization\u2013level logs may include personal information (such as the IP addresses and email addresses) of your end users.</p>"},{"location":"references/data-residency-in-asgardeo/#data-privacy","title":"Data privacy","text":"<p>Learn about Asgardeo\u2019s privacy policy to understand how your data privacy is protected.</p>"},{"location":"references/data-residency-in-asgardeo/#get-support","title":"Get support","text":"<p>If you require more details or have other data residency requirements for your organizations and businesses, contact the Asgardeo support team.</p>"},{"location":"references/email-templates/","title":"Email templates","text":"<p>Asgardeo organizations use default email templates to send email notifications. You can customize the existing templates to match your organization\u2019s requirements using the Email Templates API.</p>"},{"location":"references/email-templates/#email-templates-in-asgardeo","title":"Email templates in Asgardeo","text":"<p>The following is a comprehensive list of email templates that are available in Asgardeo.</p> <p>Note</p> <p>Some of the email templates below need to contain URLs. Learn how to generate these URLs in the URLs in email templates section.</p> Template ID Description LiteUserEmailConfirmation                 ResendLiteUserEmailConfirmation              These emails are generated when you create an account in Asgardeo. EmailConfirm             AccountConfirmation             ResendAccountConfirmation                  These emails are sent when a user creates an account in your Asgardeo organization. The email will prompt the user to confirm their account/email  VerifyEmailOnUpdate This email is generated when the user changes the email associated with the account. AccountIdRecovery This email is generated when a user requests an account ID recovery.  PasswordReset                 resendPasswordReset                 AdminForcedPasswordReset                 resendAdminForcedPasswordReset These emails involve password resets. Depending on whether the user or the administrator initiates the password reset, separate emails are generated.  initiateRecovery This email is generated when a user initiates a password reset using security questions.  passwordResetSuccess This email is generated when a user successfully resets the password.  AdminForcedPasswordResetWithOTP                 resendAdminForcedPasswordResetWithOTP              These emails are generated when a user initiates password reset using OTP. The email template can display the OTP using the {{ confirmation-code }} literal. TemporaryPassword This email is generated when a user is offered a temporary password by the administrator. The email template can display the temporary using the {{ temporary-password }} literal. AccountLockAdmin                 AccountUnlockAdmin                 AccountEnable                 AccountDisable These emails are generated when a user account is enabled or disabled.  AccountLockFailedAttempt This email is generated when a user account gets locked due to a specified number of failed login attempts. The email template can display the lock duration using the {{ lock-duration }} literal. AccountUnlockTimeBased This email is generated when a user account is unlocked automatically once the lock duration exceeds. UnseenDeviceLogin This email is generated when the logs in to using an unrecognized device. The email template can display the time of login using the {{ login-time }} literal. idleAccountReminder This email is generated when there is no activity in the user account for a specified amount of time. TOTP This email is generated when the user is given a TOTP to log in. The email template can display the token using the {{ token }} literal OneTimePassword This email is generated when a user is given a new password to log in. The email template can display the password using the {{ otp-password }} literal EmailOTP                 ResendEmailOTP              These emails are generated when a user is given a one-time password to sign in to an application. The email templates can display the password using the {{ OTPCode }} literal. magicLink              This email is generated when a user logs in with a magic link. The application name and the expiry time of the link can be accessed by the literals {{ application-name }}, and {{ expiry-time }} respectively. AskPassword                 resendAskPassword These emails are generated when a user is asked to create a password for the newly created account.  selfSignUpNotify                 selfSignUpSuccess These emails are generated when a user uses self sign-up to register in your organization."},{"location":"references/email-templates/#urls-in-email-templates","title":"URLs in email templates","text":"<p>Some email templates in Asgardeo should contain URLs which users can click to complete an action. Explained below are those URLs and in which email templates these URLs should contain.</p> <ul> <li> <p>URL to confirm a user account</p> <pre><code>{{ account.recovery.endpoint-url }}/confirmliteuserregistration.do?confirmation={{ confirmation-code }}&amp;callback=https://{{ server.placeholder.websiteHostName }}/early-access\n</code></pre> <p>This URL is used in the <code>LiteUserEmailConfirmation</code> and <code>ResendLiteUserEmailConfirmation</code> templates.</p> </li> <li> <p>URL to confirm an email address</p> <p><pre><code>{{ account.recovery.endpoint-url }}/confirmregistration.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}\n</code></pre> This URL is used in the <code>EmailConfirm</code> template.</p> </li> <li> <p>URL to confirm a user account</p> <p><pre><code>{{ account.recovery.endpoint-url }}/confirmregistration.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;spId={{ spId }}\n</code></pre> This URL is used in the <code>AccountConfirmation</code> and <code>ResendAccountConfirmation</code>.</p> </li> <li> <p>URL to verify an updated email address.</p> <p><pre><code>{{ account.recovery.endpoint-url }}/confirmregistration.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;amp;username={{ url:user-name }}\n</code></pre> This URL is used in the <code>VerifyEmailOnUpdate</code> template.</p> </li> <li> <p>URL to reset a password</p> <pre><code>{{ account.recovery.endpoint-url }}/confirmrecovery.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;callback={{ callback }}&amp;spId={{ spId }}&amp;type=reset\n</code></pre> <p>This URL is used in the <code>PasswordReset</code> and <code>resendPasswordReset</code> templates.</p> </li> <li> <p>URL to reset a password (admin forced)</p> <p><code>ts {{ account.recovery.endpoint-url }}/confirmrecovery.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;type=reset</code></p> <p>This URL is used in the <code>AdminForcedPasswordReset</code> and <code>resendAdminForcedPasswordReset</code> templates.</p> </li> <li> <p>URL to generate a password for a newly created account</p> <pre><code>{{ account.recovery.endpoint-url }}/confirmrecovery.do?confirmation={{ confirmation-code }}&amp;userstoredomain={{ userstore-domain }}&amp;username={{ url:user-name }}&amp;type=invite\n</code></pre> <p>This URL is used in the <code>AskPassword</code> and <code>resendAskPassword</code> templates.</p> </li> <li> <p>URL generate magic links</p> <pre><code>{{ carbon.product-url }}/commonauth?mlt={{ ma\\Token }}\n</code></pre> <p>This URL is used in the <code>magicLink</code> template.</p> </li> <li> <p>URL to prompt the user to access My Account after a user self signs up.</p> <pre><code>{{ authentication.endpoint-url }}?client_id=MY_ACCOUNT&amp;t={{ tenant-domain }}&amp;relyingParty=MY_ACCOUNT&amp;type=oidc&amp;sp=My+Account&amp;isSaaSApp=true&amp;authenticators=BasicAuthenticator:LOCAL\n</code></pre> <p>This URL is used in the <code>selfSignUpNotify</code> and <code>selfSignUpSuccess</code> templates.</p> </li> </ul> <p>Note</p> <p>Be sure to use proper HTML URL encoding when including above URLs in email templates.</p>"},{"location":"references/email-templates/#literals-in-email-templates","title":"Literals in email templates","text":"<p>Email templates use literals to display dynamic information on email templates. The following are the template literals that are accessible for all email templates in Asgardeo.</p>"},{"location":"references/email-templates/#general-literals","title":"General literals","text":"<p>The following literals about the user are accessible for all email templates.</p> Literal Description {{ user-name }} Name of the user account. {{ user.claim.givenname }} Given name of the user. {{ userstore-domain }} Name of the user store. {{ tenant-domain }} Name of the organization."},{"location":"references/email-templates/#branding-literals","title":"Branding literals","text":"<p>You can use the following literals and customize email templates to fit the branding of your organization.</p> <p>You can configure the values of these literals from the Asgardeo Console. Refer to the branding documentation to learn more.</p> Literal Descriprion {{ organization.logo.img }} Organization logo {{ organization.logo.altText }} Logo alternative text {{ organization.copyright.text }} Copyright text {{ organization.support.mail }} Support email {{ organization.color.primary }} Primary color {{ organization.color.background }} Email background color {{ organization.font }} Email font {{ organization.font.color }} Email body font color {{ organization.button.font.color }} Email button font color"},{"location":"references/grant-types-in-asgardeo/","title":"OAuth2 grant types of Asgardeo applications","text":"<p>OAuth 2.0 defines several grant types used to obtain an access token, which is required to access protected resources on behalf of a user or an application. Each grant type is designed for a specific use case and supports different parameters.</p> <p>The grant types supported by Asgardeo applications are as follows:</p> <p>OAuth 2.0 grants - Authorization code grant - Refresh token grant - Client credentials grant - Implicit grant - Password grant</p> <p>Asgardeo's custom grants - Organization switch grant</p>"},{"location":"references/grant-types-in-asgardeo/#authorization-code-grant","title":"Authorization code grant","text":"<p>The Authorization code flow provides a secure way for a client application to obtain an access token without exposing the user's credentials to the client application. The user only authenticates with the authorization server, which then issues an authorization code that can be exchanged for an access token.</p> <p>This helps to protect the user's credentials and prevents them from being compromised by malicious client applications.</p> <p>The following diagram shows how the authorization code flow works. </p> <ol> <li>The user visits the client application and requests for login through Asgardeo.</li> <li>The client application redirects the authorization code request to Asgardeo.</li> <li>Asgardeo prompts the user to enter credentials.</li> <li>The user enters the credentials.</li> <li>After successful authentication, Asgardeo sends the authorization code to the client application.</li> <li>The client application uses this authorization code to request an access token from Asgardeo.</li> <li>Asgardeo sends the access token and ID token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns the requested user information to the client application.</li> </ol>"},{"location":"references/grant-types-in-asgardeo/#refresh-token-grant","title":"Refresh token grant","text":"<p>The refresh token grant provides a secure way for client applications to obtain a new access token without requiring the user to re-authenticate. This can help improve the user experience by avoiding unnecessary login prompts and reducing the load on the authorization server by reducing the frequency of authentication requests. Refresh tokens typically have a longer lifetime than access tokens, and the user or the authorization server can revoke them at any time.</p> <p>The following diagram shows how the refresh token flow works. </p> <ol> <li>The client application requests user information from the resource server by providing the access token.</li> <li>As the access token is expired, the resource server returns an error message.</li> <li>By sending the refresh token, the client application requests a new access token from Asgardeo.</li> <li>Asgardeo sends a new access token and a new refresh token.</li> </ol>"},{"location":"references/grant-types-in-asgardeo/#client-credentials-grant","title":"Client credentials grant","text":"<p>The client credentials flow provides a secure way for client applications to obtain an access token without user authentication. This can be useful in scenarios where the client application needs to access its own resources, such as data storage or APIs, but does not require access to user data. However, it is important to ensure that the client credentials are kept secure, as any party that posses these credentials can obtain access tokens and access the client's resources.</p> <p>The following diagram shows how the client credentials grant flow works. </p> <ol> <li>The client application sends its credentials (<code>client_id</code> and <code>client_secret</code>) to Asgardeo and requests an access token.</li> <li>Asgardeo sends the access token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns the requested user information to the client application.</li> </ol>"},{"location":"references/grant-types-in-asgardeo/#implicit-grant","title":"Implicit grant","text":"<p>Note</p> <p>Asgardeo does not recommend using implicit grant in it's applications.</p> <p>The implicit grant flow is an OAuth 2.0 grant type that enables a client application to obtain an access token directly from the authorization server without an intermediate authorization code exchange. This flow is commonly used in browser-based applications where the client application runs in a web browser.</p> <p>However, it is important to note that the access token is exposed in the browser's URL fragment, which can make it vulnerable to certain types of attacks, such as cross-site scripting (XSS). As a result, this flow is typically not recommended for applications that require high security.</p> <p>The following diagram shows how the implicit grant flow works.</p> <p></p> <ol> <li>The user visits the client application and requests for login through Asgardeo.</li> <li>The client application redirects the authorization request to Asgardeo.</li> <li>Asgardeo prompts the user to enter credentials.</li> <li>The user enters the credentials.</li> <li>After successful authentication, Asgardeo sends the access token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns requested user information to the client application.</li> </ol>"},{"location":"references/grant-types-in-asgardeo/#password-grant","title":"Password grant","text":"<p>The password grant flow is an OAuth 2.0 grant type that enables a client application to obtain an access token by presenting the user's username and password directly to the authorization server. This flow is generally considered less secure than other grant types, as it requires the client application to handle and transmit the user's credentials.</p> <p>The password grant is primarily used in scenarios where the client application is highly trusted, and the user experience is prioritized over security concerns. It is generally not recommended for use in public-facing applications or scenarios where sensitive data is accessed.</p> <p>The following diagram shows how the password grant flow works.</p> <p></p> <ol> <li>The user visits the client application and requests for login through Asgardeo.</li> <li>The client application requests the user's credentials.</li> <li>The user sends the requested credentials to the client application.</li> <li>The client application sends the user's credentials and requests an access token from Asgardeo.</li> <li>Asgardeo sends the access token to the client application.</li> <li>The client application can now request user information from the resource server by providing the access token.</li> <li>The resource server returns the requested user information to the client application.</li> </ol>"},{"location":"references/grant-types-in-asgardeo/#organization-switch-grant","title":"Organization switch grant","text":"<p>The organization switch grant is a custom grant type in Asgardeo that enables users to switch between different organizations in a hierarchical organization structure.</p> <p>Client applications should always use one of the traditional grant types to authorize user access. The organization switch grant is also required when the authorization request is for resources of a suborganization. That is because it is necessary to switch between the root organization and the suborganization to obtain access tokens that are valid for suborganizations.</p> <p>The following diagram illustrates this flow.</p> <p></p> <ol> <li>The user visits the client application and requests login through the root organization.</li> <li>The client application redirects the authorization code request to the root organization.</li> <li>Asgardeo prompts the login page of the root organization's application.</li> <li>The user selects the Organization Login authentication option.</li> <li>The root organization prompts the user to enter the suborganization name.</li> <li>The user enters the suborganization name.</li> <li>The root organization sends an authorization code request to the suborganization.</li> <li>The suborganization prompts the user to enter credentials.</li> <li>The user enters the credentials.</li> <li>The suborganization sends the authorization code to the root organization.</li> <li>The root organization uses this authorization code to request an access token from the suborganization.</li> <li>The suborganization sends the access token and ID token to the root organization.</li> <li> <p>The root organization sends the authorization code to the client application.</p> <p>Note</p> <p>This is the response to the authorization code request in step two.</p> </li> <li> <p>The client application uses this authorization code to request an access token from the root organization.</p> </li> <li>The root organization sends the access token and ID token to the client application.</li> <li>The client application exchanges the access token received in the above step for an access token for the suborganization.</li> <li>The root organization initiates an exchange for an access token and sends an access token against the suborganization to the client application.</li> <li>The user requests information from the client application.</li> <li>The client application requests user information from the suborganization by providing the access token received in step 17.</li> <li>The suborganization returns requested user information to the client application.</li> </ol>"},{"location":"references/localization-in-asgardeo/","title":"Localization in Asgardeo","text":"<p>Asgardeo enables a language picker on the following interfaces exposed to business users, allowing business users to select their preferred language.</p> <ul> <li>Interfaces related to the business user registration/sign-up flow, login flows (including MFA), and the account recovery flow.</li> <li>Interfaces of the self-care portal (My Account)</li> </ul> <p>The default language on these interfaces is configured as explained in the language settings section.</p> <p>Note</p> <p>When user attributes configured on Asgardeo are displayed to users (during user sign-up and consent management flows), only the default user attributes get translated.</p> <p>These interfaces are i18n-supported, which allows Asgardeo to update the text content from i18n resource files. This feature allows your business users to experience these use cases in their preferred language. The languages that Asgardeo currently supports are listed below.</p>"},{"location":"references/localization-in-asgardeo/#supported-languages","title":"Supported languages","text":"<p>Below are the languages currently available for the i18n-supported user interfaces of Asgardeo.</p>              Language                       Code                       English          <code>en_US</code>              French          <code>fr_FR</code>              Spanish          <code>es_ES</code>              Portuguese          <code>pt_PT</code>              German          <code>de_DE</code>"},{"location":"references/localization-in-asgardeo/#language-settings","title":"Language settings","text":"<p>The following methods can set the language used by Asgardeo interfaces exposed to business users.</p>"},{"location":"references/localization-in-asgardeo/#language-switcher","title":"Language switcher","text":"<p>The language switcher is available at the footer of the (i18n-supported) Asgardeo interfaces, which allows business users to select the preferred language for Asgardeo.</p> <p>Note that Asgardeo will remember the language selected from this switcher, and it will be applied to all i18n-supported interfaces.</p>"},{"location":"references/localization-in-asgardeo/#browser-level-settings","title":"Browser-level settings","text":"<p>The language preference specified in the user's browser is applied to Asgardeo interfaces by default, provided it is an Asgardeo-supported language. However, the user can still change the language on the Asgardeo interfaces by using the language switcher.</p>"},{"location":"references/localization-in-asgardeo/#application-level-settings","title":"Application-level settings","text":"<p>As an application developer, you can configure the application to send the <code>ui_locales</code> parameter in the sign-in request or authorization request when the user signs in to the application.</p> <p>Note</p> <p>The <code>ui_locale</code> parameter is only available for OIDC flows and not for SAML flows.</p> <p>You can provide a list of strings, separated by a space, to define the locales. Asgardeo will search through the list until an Asgardeo-supported locale is found, and the first Asgardeo-supported locale in the list will be used as the default locale. If a supported locale is not found, Asgardeo will use the browser-level locale.</p> <p>Consider the following examples:</p> <ul> <li>If the <code>ui_locales</code> is sent as <code>fr_FR</code>, French is used as the default locale.</li> <li>If the <code>ui_locales</code> is sent as <code>fr_FR en_US</code>, French will be the default locale since it\u2019s the first Asgardeo-support locale in the list.</li> <li>If the <code>ui_locales</code> is sent as <code>si_LK en_US</code>, English (en_US) will be used as the default locale because the first given locale (<code>si_LK</code>) is not supported.</li> </ul> <p>The following examples demonstrate how to set the <code>ui_locales</code> parameter in your application.</p> <ul> <li>Example 1: Setting the default locale from the <code>signIn</code> request.</li> </ul> <p>You can send the <code>ui_locales</code> in the signIn request as a parameter.</p> <p>!!! note     Learn more about setting the signIn request using the Asgardeo SDKs.</p> <p>The following sample illustrates the <code>signIn</code> request using the JS/React SDK.</p> <pre><code>&lt;SecureApp\nfallback={&lt;div&gt;Loading&lt;/div&gt;}\noverrideSignIn={async () =&gt; {\nawait signIn({\n'ui_locales': 'fr_FR en_US'\n});\n}}\n&gt;\n&lt;AppContent/&gt;\n&lt;/SecureApp&gt;\n</code></pre> <ul> <li>Example 2: Setting the default locale from the authorization request.</li> </ul> <p>If you are sending the locale in the authorization request directly, you can append the <code>ui_locales</code> query parameter with the list of locales as shown below.</p> <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/authorize?scope={scope}&amp;response_type=code&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}&amp;ui_locales={ locales list }\n</code></pre> <p>Note</p> <p>The privacy policy and terms of conditions URLs are specified in your branding configurations. The <code>ui_locales={ locales list }</code> parameter is appended to these URLs, which allows you to show the translated content for the user from your end.</p>"},{"location":"references/app-settings/oidc-settings-for-app/","title":"OIDC settings for apps","text":"<p>You can find the OpenID Connect protocol related settings under protocol section of the selected application.   </p>"},{"location":"references/app-settings/oidc-settings-for-app/#basic-settings","title":"Basic settings","text":""},{"location":"references/app-settings/oidc-settings-for-app/#client-credentials","title":"Client credentials","text":"<p>When your application is registered in Asgardeo, a client ID is generated as the identifier of the application. If you register a traditional web application, a client secret is generated in addition to the client ID as shown below.</p> <p></p>"},{"location":"references/app-settings/oidc-settings-for-app/#allowed-grant-types","title":"Allowed grant types","text":"<p>This will determine how the application communicates with the token service. Web application template supports following grant types:</p> Grant type Description Code Used for executing the OAuth2 Authorization Code flow in client applications. Upon user authentication, the client receives an authorization code, which is then exchanged for an access token. The client can use this token to access the required resources. Client Credentials Used for executing the OAuth2 Client Credentials flow in client applications. Users are authenticated from the user credentials and an access token is granted. The client can use this token to access the required resources. Refresh Token The client can use the refresh token to get a new access token when the original access token expires, without having the user re-authenticate. Implicit Used for executing the OAuth2 Implicit flow in client applications. Clients without a back-channel (hence cannot securely store secrets) can receive the access token directly in the URL. This grant type is not recommended. Password Used for executing the OAuth2 Password flow in client applications.  The client sends the user's credentials to get an access token. This grant type is not recommended. Organization Switch A custom OAuth2 grant type that allows clients to get access to suborganization APIs in Asgardeo. The client can exchange the access token received from the root organization for an access token of the suborganization.   <p>It is recommended to use code grant for public clients. For single-page application templates, code grant is enabled by default. You can enable refresh token grant to get refresh tokens. However, implicit grant and password grants are not recommended due to security reasons.</p> <p>See grant types of Asgardeo for more details.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#public-client","title":"Public client","text":""},{"location":"references/app-settings/oidc-settings-for-app/#authorized-redirect-urls","title":"Authorized redirect URLs","text":"<p>Authorized redirect URLs are not required for <code>Client Credentials</code> and <code>Password</code> grant type.</p> <p></p> <p>The <code>redirect_uri</code> sent in the login request and the <code>post_logout_redirect_uri</code> sent in the logout request should match with one of the registered authorized redirect URLs.</p>"},{"location":"references/app-settings/oidc-settings-for-app/#allowed-origins","title":"Allowed origins","text":""},{"location":"references/app-settings/oidc-settings-for-app/#advanced-settings","title":"Advanced settings","text":""},{"location":"references/app-settings/oidc-settings-for-app/#proof-key-for-code-exchangepkce","title":"Proof Key for Code Exchange(PKCE)","text":"Mandatory Support Plain Transform Algorithm"},{"location":"references/app-settings/oidc-settings-for-app/#access-token","title":"Access Token","text":""},{"location":"references/app-settings/oidc-settings-for-app/#id-token","title":"ID Token","text":""},{"location":"references/app-settings/oidc-settings-for-app/#refresh-token","title":"Refresh Token","text":""},{"location":"references/app-settings/oidc-settings-for-app/#certificate","title":"Certificate","text":"<p>The certificate is used to validate signatures of signed requests from the application to Asgardeo and to encrypt requests from Asgardeo to the application.  You can either Provide Certificate or Use JWKS endpoint to add a certificate.  Follow the steps given below to Provide Certificate.</p> <ol> <li> <p>Select Provide Certificate and click New Certificate. </p> </li> <li> <p>Upload the certificate file or copy the certificate contents. </p> </li> </ol> <p>??? note If you have certificate in other formats such as <code>.crt</code>, <code>.cer</code> or <code>.der</code>, expand here to convert your certs to PEM format using OpenSSL Convert CRT to PEM <pre><code>openssl x509 -in cert.crt -out cert.pem\n</code></pre> Convert CER to PEM: <pre><code>openssl x509 -in cert.cer -out cert.pem\n</code></pre> Convert DER to PEM: <code>openssl x509 -in cert.der -out cert.pem</code> :::</p> <p></p>"},{"location":"references/app-settings/saml-settings-for-app/","title":"SAML settings for apps","text":"<p>You can find the SAML protocol related settings under protocol section of the selected SAML application.   </p>"},{"location":"references/app-settings/saml-settings-for-app/#basic-settings","title":"Basic settings","text":""},{"location":"references/app-settings/saml-settings-for-app/#assertion-consumer-service-urls-acs-urls","title":"Assertion consumer service URLs (ACS URLs)","text":"<p>The Assertion Consumer Service (ACS) URL determines where Asgardeo will send the SAML response. An application can have multiple ACS URLs. SAML authentication response and logout response are sent to one of the ACS URLs configured.</p>"},{"location":"references/app-settings/saml-settings-for-app/#default-assertion-consumer-service-url-default-acs-url","title":"Default assertion consumer service URL (Default ACS URL)","text":"<p>Since an application can register multiple assertion consumer URLs, you need to pick one of them as the Default Assertion Consumer URL. If there is only one ACS URL, it will be taken as the Default ACS URL.</p> <p>Note</p> <ul> <li>If no ACS URL is given in the authentication request, Asgardeo sends the response to the default ACS URL.</li> <li>If an ACS URL is given in the authentication request, and it matches with one of the registered ACS URLs, the Asgardeo sends the response to the ACS URL sent in the request(the matched one).</li> </ul>"},{"location":"references/app-settings/saml-settings-for-app/#idp-entity-id-alias","title":"IdP entity ID alias","text":"<p>This value can override the default Identity Provider (IdP) entity ID (accounts.asgardeo.io/t/{organization_name}). The IdP entity ID is used as the <code>saml2:Issuer</code> of the SAML response that is generated by Asgardeo. This should be a valid URI/URL.</p> <p><pre><code>&lt;saml2:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\"\nxmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n&gt;accounts.asgardeo.io/t/{organization_name}&lt;/saml2:Issuer&gt;\n</code></pre> </p>"},{"location":"references/app-settings/saml-settings-for-app/#advanced-settings","title":"Advanced settings","text":""},{"location":"references/app-settings/saml-settings-for-app/#request-validation","title":"Request Validation","text":"Enable request signature validation <p>Specifies whether Asgardeo must validate the signature of the SAML authentication request and the SAML logout request that are sent by the application.</p> <p>Note</p> <p>This option will only be available after a certificate is uploaded. Learn more about certificates.</p> <p></p>"},{"location":"references/app-settings/saml-settings-for-app/#response-signing","title":"Response Signing","text":"Sign SAML response <p>Specifies whether the SAML responses generated by Asgardeo should be signed.</p> Digest algorithm <p>Used as the digest algorithm in authentication response and logout response. This is specified as the <code>DigestMethod</code> algorithm in the <code>Signature</code> element.</p> Signing algorithm <p>Used as the signing algorithm to sign the authentication response and logout response. This specifies the <code>SignatureMethod</code> algorithm to be used in the <code>Signature</code> element in the SAML response. </p>"},{"location":"references/app-settings/saml-settings-for-app/#single-sign-on-profile","title":"Single Sign-On Profile","text":"Bindings <p>Specifies the mechanisms to transport SAML messages in communication protocols. Bindings define how SAML request-response protocol messages can be exchanged between identity provider and SAML application via HTTP transport.</p> <p>Asgardeo by default supports the following bindings: - HTTP Post - HTTP Redirect </p> Enable IdP initiated SSO <p>Specifies whether to initiate Single Sign-On (SSO) from the IdP instead of the application. If this is selected, a service provider is not required to send the SAML2 request. The Request URL is used by the IDP to forward the users directly to the service provider. </p> <p>Request <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/samlsso?spEntityID={sp_issuer}\n</code></pre></p> <p>Sample request <pre><code>https://api.asgardeo.io/t/bifrost/samlsso?spEntityID=https://sample.app/saml/sp\n</code></pre></p> <p>Note that, you need to encode the URLs before calling the single signon service. </p>"},{"location":"references/app-settings/saml-settings-for-app/#assertion","title":"Assertion","text":"Name ID format <p>Specifies the name identifier format that is used to exchange information regarding the user in the SAML assertion.</p> <p>For SSO interactions, you can configure the following types of NameID formats.</p> <ul> <li>urn:oasis:namesSAML:2.0:nameid-format:persistent</li> <li>urn:oasis:namesSAML:2.0:nameid-format:transient</li> <li>urn:oasis:namesSAML:1.1:nameid-format:emailAddress</li> <li>urn:oasis:namesSAML:1.1:nameid-format:unspecified</li> <li>urn:oasis:namesSAML:1.1:nameid-format:X509SubjectName</li> <li>urn:oasis:namesSAML:1.1:nameid-format:WindowsDomainQualifiedName</li> <li>urn:oasis:namesSAML:2.0:nameid-format:kerberos</li> <li>urn:oasis:namesSAML:2.0:nameid-format:entity</li> </ul> <p>Specifies the name identifier format that the application wants to receive in the subject of an assertion from Asgardeo.</p> <p>Asgardeo uses <code>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</code> as the default name identifier.</p> <pre><code>&lt;saml2:Assertion ID=\"_1fc418b1886158a8c239f9ee5205718b\"\nIssueInstant=\"2021-07-07T08:28:30.228Z\"\nVersion=\"2.0\"\nxmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n&gt;\n-\n   -\n    &lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;Alica@bifrost.com&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"mjagocahejhadgbaldpgpoipaghellkjkdnpilcp\"\nNotOnOrAfter=\"2021-07-07T08:33:30.228Z\"\nRecipient=\"http://localhost:8080/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;/saml2:Subject&gt;\n-\n    -\n&lt;/saml2:Assertion&gt;\n</code></pre> Audiences <p>Specifies the audiences, to whom this SAML assertion is intended.</p> <p>The issuer of the application will be added as the default audience <pre><code>&lt;saml2:Assertion ID=\"_1fc418b1886158a8c239f9ee5205718b\"\nIssueInstant=\"2021-07-07T08:28:30.228Z\"\nVersion=\"2.0\"\nxmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n&gt;\n-\n   -\n    &lt;saml2:AudienceRestriction&gt;\n&lt;saml2:Audience&gt;https://sampleapp.com/saml/sp&lt;/saml2:Audience&gt;\n&lt;/saml2:AudienceRestriction&gt;\n-\n   -\n&lt;/saml2:Assertion&gt;\n</code></pre> </p> Recipients <p>Recipient is a URI specifying the entity or location to which Asgardeo can present the assertion.</p> <p>This attribute may specify the recipient endpoint to which the assertion should be delivered. This attribute is helpful in preventing an intermediary from redirecting the assertion to some other endpoint.</p> <p>By default, Asgardeo sends <code>ACS URL</code> as the <code>recipient</code> value.</p> <p>After adding <code>http://localhost:8081/sample-app-new/home.jsp</code> as a <code>recipient</code>:</p> <pre><code>&lt;saml2:Subject&gt;\n&lt;saml2:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;Alica@bifrost.com&lt;/saml2:NameID&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"jegiegkloeahkcllbnbcohgdeklidegeoiijhado\"\nNotOnOrAfter=\"2021-07-07T08:44:45.727Z\"\nRecipient=\"http://localhost:8081/sample-app/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;saml2:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"&gt;\n&lt;saml2:SubjectConfirmationData InResponseTo=\"jegiegkloeahkcllbnbcohgdeklidegeoiijhado\"\nNotOnOrAfter=\"2021-07-07T08:44:45.727Z\"\nRecipient=\"http://localhost:8081/sample-app-new/home.jsp\"\n/&gt;\n&lt;/saml2:SubjectConfirmation&gt;\n&lt;/saml2:Subject&gt;\n</code></pre> Enable encryption <p>Specifies whether to enable encryption for SAML assertion.  To enable encryption, you should configure the certificate of your application. You can configure the certificate from the Certificates section.</p> Assertion encryption algorithm <p>The Assertion encryption algorithm you select specifies the symmetric encryption algorithm that is used for encrypting the SAML Assertion.</p> <p>The following encryption process is enforced by the Assertion encryption algorithm:</p> <ol> <li>First, a SAML2 Key is generated. This key is used for maintaining a secure communication channel with the application.</li> <li>Asgardeo then uses the generated SAM2 Key value and the symmetric encryption algorithm specified here to encrypt the SAML Assertion.</li> </ol> Key encryption algorithm <p>The key encryption algorithm you select specifies the asymmetric encryption algorithm that is used for encrypting the SAML2 key.</p> <p>Asgardeo uses the Public Key of the application (obtained from the certificate)  and the asymmetric encryption algorithm specified here to encrypt the SAML2 Key.</p>"},{"location":"references/app-settings/saml-settings-for-app/#attribute-profile","title":"Attribute Profile","text":"Enable attribute profile <p>Specifies whether to include the user\u2019s attributes in the SAML assertions as part of the attribute statement. You can configure user attributes by navigating to User Attributes section in the application.</p> <p></p>"},{"location":"references/app-settings/saml-settings-for-app/#single-logout-profile","title":"Single Logout Profile","text":"<p>All the settings under this section are related to single-logout. In Single logout, if one application logs out from a browser session, Asgardeo will send logout requests to all the other SAML applications participating in the same browser session.</p> Enable SLO <p>Specifies whether you want to enable single-logout to your application. By default, this is disabled for applications.</p> Logout method <p>Specifies the logout method that is supported by the application. Asgardeo supports below logout methods: - Back Channel logout - Front Channel HTTP Redirect - Front Channel HTTP Post</p> <p>Back Channel logout is enabled by default.</p> Single logout response URL <p>Specifies the endpoint of the application to where the single logout response should be sent. If you do not specify this URL, Asgardeo will use the Default ACS URL.</p> Single logout request URL <p>Specifies the endpoint of the application to where the single logout request should be sent. If you do not specify this URL, Asgardeo will use the Default ACS URL.</p> IdP initiated single logout <p>Asgardeo facilitates IdP initiated SAML2 single log out requests. The following parameters can be used with the IdP initiated SLO request:</p> Request Parameter Description slo Must have the value \u201ctrue\u201d to mark the request as an IdP initiated log out request. spEntityID Value of the parameter should be the SAML issuer value of the application returnTo Value of the parameter should be the URL which needs to be redirected to, after the log out. If this parameter is present in the request, then the \u2018spEntityID\u2019 parameter must also be present. <p></p> <p>Enable: Specifies whether to support IdP initiated logout.</p> <p>Return to URLs: Specifies the URLs to which the user should be redirected after the logout. The <code>returnTo</code> parameter sends in the logout request should match with any of the URL configured as Return to URLs or Default ACS URL.</p> <p>If <code>Return to URLs</code> is not configured, the <code>returnTo</code> parameter should match with <code>Default ACS URL</code>.</p> <p>Request <pre><code>https://api.asgardeo.io/t/&lt;organization_name&gt;/samlsso?slo=true&amp;spEntityID={sp_issur}&amp;returnTo={url}\n</code></pre></p> <p>Sample request <pre><code>https://api.asgardeo.io/t/bifrost/samlsso?slo=true&amp;spEntityID=https://sample.app/saml/sp&amp;returnTo=http://localhost:8081/sample-app/index.html\n</code></pre></p> <p></p> <p>Note that, you need to encode the URLs before calling the single logout service.</p>"},{"location":"references/app-settings/saml-settings-for-app/#certificate","title":"Certificate","text":"<p>The certificate is used to validate signatures when authentication requests or logout requests from the application are signed. Note that request signature validation should be enabled.  You can either upload your certificate file or copy the contents. Follow the steps given below.</p> <ol> <li> <p>Select Provide Certificate and click New Certificate. </p> </li> <li> <p>Upload the certificate file or copy the certificate contents </p> </li> </ol> <p>??? note If you have certificate in other formats such as <code>.crt</code>, <code>.cer</code> or <code>.der</code>, expand here to convert your certs to PEM format using OpenSSL Convert CRT to PEM <pre><code>openssl x509 -in cert.crt -out cert.pem\n</code></pre> Convert CER to PEM: <pre><code>openssl x509 -in cert.cer -out cert.pem\n</code></pre> Convert DER to PEM: <code>openssl x509 -in cert.der -out cert.pem</code> :::</p> <p></p>"},{"location":"references/conditional-auth/api-reference/","title":"Conditional authentication - API reference","text":"<p>Asgardeo provides a set of defined functions and objects to write your conditional authentication script. They are grouped as follows:</p> <ul> <li>Core functions: These are the basic functions used in the script. These are used to identify the user who initiated the login flow, execute a step in the login flow, handle login failures, etc. Listed below are the core functions that can be used in conditional authentication scripts.</li> <li><code>onLoginRequest()</code></li> <li><code>executeStep()</code></li> <li><code>fail()</code></li> <li> <p><code>sendError()</code></p> </li> <li> <p>Utility functions: These utility functions are used for specific scenarios. For example, checking whether the login user belongs to a specific user group. Listed below are the utility functions that can be used in conditional authentication scripts.</p> </li> <li><code>isMemberOfAnyOfGroups()</code></li> <li><code>setCookie()</code></li> <li><code>getCookieValue()</code></li> <li><code>prompt()</code></li> <li><code>getUserSessions()</code></li> <li><code>terminateUserSession()</code></li> <li><code>sendEmail()</code></li> <li><code>callChoreo</code></li> <li><code>getValueFromDecodedAssertion()</code></li> <li><code>getUniqueUserWithClaimValues()</code></li> <li> <p><code>getAssociatedLocalUser()</code></p> </li> <li> <p>Object references: You can use objects to capture user behaviors and set attributes. For example, you can use the user and request objects and write the login conditions accordingly. Listed below are the object references that can be used in conditional authentication scripts.</p> </li> <li><code>context</code></li> <li><code>step</code></li> <li><code>user</code></li> <li><code>request</code></li> <li><code>response</code></li> <li><code>session</code></li> <li><code>application</code></li> <li><code>userAgent</code></li> <li><code>connectionMetadata</code></li> </ul>"},{"location":"references/conditional-auth/api-reference/#core-functions","title":"Core functions","text":"<p>These are the basic functions that are required for defining the application login flow using an authentication script.</p>"},{"location":"references/conditional-auth/api-reference/#initial-login-request","title":"Initial login request","text":"<p><code>onLoginRequest()</code></p> <p>This function is called when Asgardeo receives the initial login request. It includes the parameters given below.</p> <ul> <li>Parameters</li> </ul> <p> <code>context</code> The authentication context, which contains the context information about the request. </p> <ul> <li>Example</li> </ul> <pre><code>onLoginRequest(context)\n</code></pre> <p></p>"},{"location":"references/conditional-auth/api-reference/#execute-a-step","title":"Execute a step","text":"<p><code>executeStep()</code></p> <p>This function is called to execute an authentication step in the login flow. You need to define your application's login flow before using this function.</p> <p>This method accepts an object as a parameter and should include the details listed below.</p> <code>&lt;stepId&gt;</code> (Mandatory) The step number in the login flow. <code>&lt;options&gt;</code> (Optional) A map that can configure step execution. Authentication option filtering is supported. For more information, see the example on filtering connections in a step given below. <code>&lt;eventCallbacks&gt;</code> (optional) The object that contains the callback functions, which are to be called based on the result of the step execution.     Supported results are <code>onSuccess</code> and <code>onFail</code>, which can have their own optional callbacks as anonymous functions. <p>The following sample template shows how the above categorization can be used in a script.</p> <pre><code>executeStep(&lt;stepId&gt;, {\n&lt;options&gt;:[\n//The objects of the option\n]\n},\n{\n&lt;eventCallback&gt;: function()&gt; {\n//eventCallback can be `onSuccess` or `onFail` \n//Define what should be done\n}\n});\n</code></pre> Parameters <p>This section describes the options you can use to configure the <code>executeStep()</code> function, and the values you can use as local authenticators and federated IdPs in the function.</p> <ul> <li>Options</li> </ul> <p>You can use these options when executing an authentication step through the script. See the examples given below for details.</p> <p> <code>authenticationOptions</code> List the authentication methods that will be prompted for this step. <code>authenticationOptions.authenticator</code> The name of the local authenticator used. <code>authenticationOptions.idp</code> The name of the federated identity provider used. <code>authenticatorParams</code> Pass the configuration for the step authenticators or identity providers. <code>authenticatorParams.common</code> Specify the common configurations for both local authenticators and federated identity providers. <code>authenticatorParams.local.{authenticator-name}</code> The name of the local authenticator used in the application. The configurations passed here will be available for that specific authenticator. <code>authenticatorParams.local.{federated-identity-provider}</code> The name of the federated identity provider used in the application. The configurations passed here will be available for that federated identity provider. </p> <ul> <li> Connections: Local authenticators and federated IdPs </li> </ul> <p>When you want to access your configured connections in an authentication step, you can use the following values through the options explained above.</p> <p>See the example on filtering connections in a step given below for details.</p> <p>The local authenticators are represented by the <code>authenticator</code> parameter. The table shows the connection names (as displayed on the Asgardeo Console) and the corresponding authenticator name you can use in the scripts.</p> <p> Connection Name Authenticator Email OTPemail-otp-authenticator Identifier FirstIdentifierExecutor Magic LinkMagicLinkAuthenticator Security Key/BiometricsFIDOAuthenticator SMS OTPsms-otp-authenticator TOTPtotp Username &amp; PasswordBasicAuthenticator </p> <p>The external identity providers are represented by the <code>idp</code> parameter. The federated connection names are generated based on the name you assign to the connection at registration.</p> <p>::: tip Example   If you add a federated google connection with the name bifrost google, the value you can use in your authentication scripts is <code>bifrost_google</code>.   :::</p> Examples <p>Shown below are ways to define a login flow using the core functions.</p> <ul> <li>Example 1: Use <code>stepId</code></li> </ul> <p>This example uses only the <code>stepId</code>.   <pre><code>executeStep(1)\n</code></pre></p> <ul> <li>Example 2: Use <code>stepId</code> and <code>eventCallbacks</code></li> </ul> <p>This example uses only the <code>stepId</code> and <code>eventCallbacks</code>.   <pre><code>executeStep(1, {\nonSuccess: function(context) {\n//Do something on success\n}\n});\n</code></pre></p> <ul> <li>Example 3: Use all parameters</li> </ul> <p>This example uses the <code>stepId</code>, <code>options</code>, and an empty <code>eventCallbacks</code> object. Different properties can be defined by the <code>options</code> object, such as <code>authenticationOptions</code> and <code>authenticatorParams</code>. However, you cannot write a script with only the <code>stepId</code> and <code>options</code>. See the following two examples:</p> <p><pre><code>executeStep(1, {\nauthenticationOptions:[{\nauthenticator: 'totp'\n}]}, {}\n);\n</code></pre> <pre><code>executeStep(1, {\nauthenticatorParams: {\nlocal: {\nemail-otp-authenticator: {\nenableRetryFromAuthenticator: 'true'\n}\n}\n}, {}\n);\n</code></pre></p> <ul> <li>Example 4: Filter connections in a step</li> </ul> <p>The <code>authenticationOptions</code> array filters out connections (local authenticators and federated identity providers) of a step based on a condition.</p> <p>This can be achieved by specifying an array named <code>authenticationOptions</code> to the <code>options</code> map.  You can have <code>idp</code> as an array item for federated connections and <code>authenticator</code> as an array item for local connections, as shown below.</p> <pre><code>``` js\nexecuteStep(1,{\n  authenticationOptions:[{authenticator:'BasicAuthenticator'},{idp:'google'}]\n  },{\n      onSuccess: function (context) {\n          // Do something on success\n};\n```\n</code></pre>"},{"location":"references/conditional-auth/api-reference/#fail-the-login-flow","title":"Fail the login flow","text":"<p><code>fail()</code> </p> <p>This function redirects the user to the redirect URI provided in the authorization request when the login flow fails.</p> <p>This function takes a map as an optional parameter. When a map is provided as the parameter, the redirect URL will be appended with the following properties (which should be contained in the map). Otherwise, the default parameters are passed. All the properties passed in the map are also optional.</p> <ul> <li>Parameters</li> </ul> <p> <code>errorCode</code> The error code to be appended in the redirect URL. <code>errorMessage</code> The error message to be appended in the redirect URL. <code>errorURI</code> The URI of a web page that includes additional information about the error. </p> <ul> <li>Example</li> </ul> <pre><code>var parameterMap = {'errorCode': 'access_denied', 'errorMessage': 'login could not be completed', \"errorURI\":'http://www.example.com/error'};\nif (!isAuthenticated) {\nfail(parameterMap);\n}\n</code></pre>"},{"location":"references/conditional-auth/api-reference/#redirect-to-error-code","title":"Redirect to error code","text":"<p><code>sendError()</code></p> <p>This function redirects the user to an error page. It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>url</code> The URL of the error page that the user is redirected to. If the value is null, the user is redirected by default to the retry.do error page.         Note that any relative URL is assumed to be relative to the host\u2019s root. <code>parameters</code> Key value map passed as parameters. These are converted to query parameters in the URL. </p> <ul> <li>Example</li> </ul> <p>It is recommended to use an i18n key to describe the error messages so that they can be internationalized easily on the error page.</p> <pre><code>var user = context.steps[1].subject;\nvar isAdmin = hasRole(user, 'admin');\nif (!isAdmin) {\nsendError('http://www.example.com/error',{'status':'000403','statusMsg':'You are not allowed to login to this app.', 'i18nkey':'not.allowed.error'});\n}\n</code></pre>"},{"location":"references/conditional-auth/api-reference/#utility-functions","title":"Utility functions","text":"<p>The implementation of utility functions can be found in the WSO2 extensions code repository.</p>"},{"location":"references/conditional-auth/api-reference/#check-group-membership","title":"Check group membership","text":"<p><code>isMemberOfAnyOfGroups()</code></p> <p>This function returns <code>true</code> if the specified user belongs to at least one of the given groups, and returns <code>false</code> if the user does not. It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>user</code> A user object representing the user details. <code>groups</code> A list of strings that contain the groups. Each string is a group name. </p> <ul> <li>Example</li> </ul> <pre><code>var groups = ['admin', 'manager'];\nvar user = context.steps[1].subject;\nvar isMember = isMemberOfAnyOfGroups(user, groups);\nif (isMember) {\nexecuteStep(2);\n}\n</code></pre> <p></p>"},{"location":"references/conditional-auth/api-reference/#set-cookie","title":"Set cookie","text":"<p><code>setCookie(response, name, value, properties)</code></p> <p>This function sets a new cookie. It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>response</code> The HTTP response. <code>name</code> Name of the cookie. <code>value</code> Value of the cookie. <code>properties</code> <p>A map that may contain optional attributes of the cookie with the two custom attributes given below.</p> <ul> <li><code>sign</code>: The default value is <code>false</code>. If it is set to true, the value will be signed.</li> <li><code>encrypt</code>: The default value is <code>false</code>. If it is set to true, the value will be encrypted.</li> </ul> </p> <ul> <li>Example</li> </ul> <p>The size of the value has to be less than the RSA key pair length if '<code>encrypt</code>' is enabled (set to true).</p> <pre><code>setCookie(context.response, \"name\", \"test\", {\"max-age\" : 4000,\n\"path\" : \"/\",\n\"domain\" : \"localhost\",\n\"httpOnly\" : true,\n\"secure\" : true,\n'sameSite': 'LAX',\n\"version\" : 1,\n\"comment\" : \"some comments\",\n\"encrypt\" : true,\n\"sign\" : true})\n</code></pre> <p></p>"},{"location":"references/conditional-auth/api-reference/#get-cookie-value","title":"Get cookie value","text":"<p><code>getCookieValue(request, name, properties)</code></p> <p>This function gets the plain-text cookie value for the cookie name if it is present. It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>request</code> HTTP authentication request. <code>name</code> Name of the cookie. <code>properties</code> <p>A map that may contain optional attributes of the cookie:</p> <ul> <li><code>decrypt</code>: The default value is <code>false</code>. If it is set to <code>true</code>, the value will be decrypted.</li> <li><code>validateSignature</code>: The default value is <code>false</code>. If it is set to <code>true</code>, the signature will be validated before returning a response.</li> </ul> </p> <ul> <li>Example</li> </ul> <pre><code>getCookieValue(context.request,\"name\", {\"decrypt\" : true,\"validateSignature\" : true })\n</code></pre> <p></p>"},{"location":"references/conditional-auth/api-reference/#prompt-for-user-input","title":"Prompt for user input","text":"<p><code>prompt()</code></p> <p>This function prompts user input. It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>templateId</code> Identifier of the template that needs to be prompted. <code>data</code> The data to send to the prompt. <code>eventHandlers</code> The callback event handlers. </p> <ul> <li>Example</li> </ul> <pre><code>var onLoginRequest = function(context) {\nexecuteStep(1, {\nonSuccess: function (context) {\nvar username = context.steps[1].subject.username;\nprompt(\"genericForm\", {\"username\":username, \"inputs\":[{\"id\":\"fname\",\"label\":\"First Name\"},{\"id\":\"lname\",\"label\":\"Last Name\"}]}, {\nonSuccess : function(context) {\nvar fname = context.request.params.fname[0];\nvar lname = context.request.params.lname[0];\nLog.info(fname);\nLog.info(lname);\n}\n});\n}\n});\n}\n</code></pre> <p></p>"},{"location":"references/conditional-auth/api-reference/#get-user-sessions","title":"Get user sessions","text":"<p><code>getUserSessions()</code></p> <p>This function returns a session object  (i.e., all the active user sessions of the specified user or an empty array if there are no sessions). It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>user</code> This is a user object that represents the user details. </p> <ul> <li>Example</li> </ul> <pre><code>var user = context.currentKnownSubject;\nvar sessions = getUserSessions(user);\nfor (var key in sessions) {\nLog.info(\u201cSession ID: \u201d + sessions[key].id);\n}\n</code></pre> <p></p>"},{"location":"references/conditional-auth/api-reference/#terminate-user-session","title":"Terminate user session","text":"<p><code>terminateUserSession()</code></p> <p>This function returns a session object (i.e., all the active user sessions of the specified user or an empty array if there are no sessions). It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>user</code> This is a user object that represents the user details. <code>sessionId</code> This is the <code>sessionId</code> string of the session that needs to be terminated. </p> <ul> <li>Example</li> </ul> <pre><code>var user = context.currentKnownSubject;\nvar sessions = getUserSessions(user);\nif (sessions.length &gt; 0) {\nvar result = terminateUserSession(user, sessions[0]);\nLog.info(\u201cTerminate Operation Successful?: \u201d + result);\n}\n</code></pre>"},{"location":"references/conditional-auth/api-reference/#send-email","title":"Send email","text":"<p><code>sendEmail()</code></p> <p>This function sends an email to the specified user. It includes the parameters listed below.</p> <ul> <li>Parameters</li> </ul> <p> <code>user</code> An object representing the user details. <code>templateId</code> Identifier of the email template. The email template specifies the body of the email that is sent out. <code>placeholderParameters</code> Used to replace any placeholders in the template. </p> <ul> <li>Example</li> </ul> <pre><code>var user = context.steps[1].subject;\nvar firstName = user.localClaims['http://wso2.org/claims/givenname'];\nsendEmail(user, 'myTemplate', {'firstName':firstName});\n</code></pre>"},{"location":"references/conditional-auth/api-reference/#call-a-choreo-api","title":"Call a Choreo API","text":"<p>This function invokes an API hosted in Choreo. It includes the parameters listed below.</p> <p>Note</p> <p>Note that to use the <code>callChoreo</code> function, the API should,   - contain an endpoint that accepts <code>POST</code> requests.   - return a status code of <code>2xx</code>.</p> <ul> <li>Parameters</li> </ul> <p> <code>connectionMetadata</code> An object containing the necessary metadata to invoke the API. . See ConnectionMetadata for more information. <code>payloadData</code> An object representing the payload that needs to be sent in the API request body. <code>eventHandlers</code> An object that contains the callback functions, which are to be called based on the result of API invocation.  Supported results are <code>onSuccess</code>, <code>onFail</code>, and <code>onTimeout</code>. </p> <ul> <li>Example</li> </ul> <pre><code>var connectionMetadata = {\n\"url\": \"&lt;Choreo API URL&gt;\",\n\"consumerKey\": \"&lt;Consumer key of the Choreo Application&gt;\",\n\"consumerSecret\": \"&lt;Consumer secret of the Choreo Application&gt;\"\n};\n\nvar requestPayload = {\"example-key\": \"example-value\"};\n\ncallChoreo(connectionMetadata, requestPayload, {\nonSuccess: function(context, data) {\nLog.info(\"Successfully invoked the Choreo API.\");\n},\nonFail: function(context, data) {\nLog.info(\"Error occurred while invoking the Choreo API.\");\n},\nonTimeout: function(context, data) {\nLog.info(\"Invoking Choreo API timed out.\");\n}\n});\n</code></pre> <p>??? note Using Asgardeo as the key manager   If you are using Asgardeo as the key manager in your Choreo organization, append  the <code>asgardeoTokenEndpoint</code> parameter to the <code>connectionMetadata</code> variable as follows:     <pre><code>var connectionMetadata = {\n\"asgardeoTokenEndpoint\": \"https://api.asgardeo.io/t/&lt;organization_name&gt;/oauth2/token\"\n};\n</code></pre>   :::</p>"},{"location":"references/conditional-auth/api-reference/#get-parameter-value-from-jwt","title":"Get parameter value from JWT","text":"<p><code>getValueFromDecodedAssertion(jwt, parameterName, isParameterInPayload)</code></p> <p>This function returns a string containing the parameter's value in a decoded Json Web Token (JWT). It includes the following parameters:</p> <ul> <li>Parameters</li> </ul> <p> <code>jwt</code> The JWT to be decoded. <code>parameterName</code> The name of the parameter in the JWT for which the value should be retrieved. <code>isParameterInPayload</code> Indicates whether the parameter to be retrieved is in the JWT header or body.  Value should be <code>true</code> if the parameter to be retrieved is in the body. </p> <ul> <li>Example</li> </ul> <pre><code>var state = getValueFromDecodedAssertion(context.request.params.request[0],\"state\",true);\n</code></pre>"},{"location":"references/conditional-auth/api-reference/#get-unique-user","title":"Get unique user","text":"<p><code>getUniqueUserWithClaimValues(claimMap, context)</code></p> <p>The utility function will search the underlying user stores and return a unique user with the claim values. The claim map consists of the claim and value.</p> <ul> <li>Parameters</li> </ul> <p> <code>claimMap</code> A map that contains the claim URI and claim value. <code>context</code> The authentication context, which contains the context information about the request. </p> <ul> <li>Example</li> </ul> <pre><code>var claimMap = {};\nclaimMap[MAPPED_FEDERATED_USER_NAME_CLAIM] = federatedUserName;\nclaimMap[MAPPED_FEDERATED_IDP_NAME_CLAIM] = idpName;\nvar mappedUsername = getUniqueUserWithClaimValues(claimMap, context);\n</code></pre>"},{"location":"references/conditional-auth/api-reference/#get-associated-user","title":"Get associated user","text":"<p><code>getAssociatedLocalUser(federatedUser)</code></p> <p>This function returns the local user associated with the federate username given as input.</p> <ul> <li>Parameters</li> </ul> <p> <code>federatedUser</code> The federated user object. </p>"},{"location":"references/conditional-auth/api-reference/#object-reference","title":"Object reference","text":""},{"location":"references/conditional-auth/api-reference/#context","title":"Context","text":"<p>Contains the authentication context information. The information can be accessed as follows:</p> <code>context.steps[n]</code> Access the authentication step information, where 'n' is the step number (1-based). See [step](#step) for more information. <p>The step number is the one configured at the step configuration, not the actual order in which they get executed.</p> <code>context.request</code> Access the HTTP authentication request information. See [request](#request) for more information. <code>context.response</code> Access the HTTP response, which will be sent back to the client. See [response](#response) for more information. <code>context.serviceProviderName</code> Get the application name."},{"location":"references/conditional-auth/api-reference/#step","title":"Step","text":"<p>Contains the authentication step information. It may be a null or invalid step number.</p> <code>step.subject</code> Contains the authenticated user\u2019s information from this step. It may be null if the step is not yet   executed. See [user](#user) for more information. <code>step.idp</code> Gives the name of the federated connection that is used to authenticate the user. <code>step.authenticator</code> Give the name of the authenticator that is used for authenticating the user. You can find the authenticator names from the [ connection names table](#authenticatorNames)."},{"location":"references/conditional-auth/api-reference/#user","title":"User","text":"<code>user.uniqueId</code> The unique identifier of the user. <code>user.username</code> The user\u2019s username. <code>user.userStoreDomain</code> <code>(Read/Write)</code> The user store domain of the local user. <code>user.localClaims[\u201clocal_claim_url\u201d]</code> <code>(Read/Write)</code>  User\u2019s attribute (claim) value for the given \"local_claim_url\". If the user is a federated user, this will be the value of the mapped remote claim from the identity provider. <code>user.claims[\u201clocal_claim_url\u201d]</code> <code>(Read/Write)</code>  Sets a temporary claim value for the session. <code>user.localClaims[\u201clocal_claim_url\u201d]</code> Updates the claim value in the user store as well. The <code>user.claims[\u201clocal_claim_url\u201d]</code> parameter is an alternative to setting a temporary claim. <code>user.remoteClaims[\u201cremote_claim_url\u201d]</code> <code>(Read/Write)</code>  User\u2019s attribute (claim) as returned by the identity provider for the given <code>remote_claim_url</code>. Applicable only for federated users."},{"location":"references/conditional-auth/api-reference/#request","title":"Request","text":"<code>request.headers[\u201cheader_name\u201d]</code> The request\u2019s header value for the given header name. <code>request.params.param_name[0]</code> The request\u2019s parameter value for the given parameter name by the <code>param_name</code> index (<code>param_name</code> is an array). <code>request.cookies[\u201ccookie_name\u201d]</code> The request\u2019s cookie value for the given cookie name. <code>request.ip</code> The client IP address of the user who initiated the request. If there are any load balancers (eg. Nginx) with connection termination, the IP is retrieved from the headers set by the load balancer."},{"location":"references/conditional-auth/api-reference/#response","title":"Response","text":"<code>response.headers[\u201cheader_name\u201d]</code> (Write) The response header value for the given header name."},{"location":"references/conditional-auth/api-reference/#session","title":"Session","text":"<code>session.userAgent</code> This is the userAgent object of the user session. See [userAgent](#user-agent) for more information. <code>session.ip</code> This is the session\u2019s IP address. <code>session.loginTime</code> This is the session\u2019s last login time. <code>session.lastAccessTime</code> This is the session\u2019s last accessed time. <code>session.id</code> This is the session\u2019s ID. <code>session.applications</code> This is the list of application objects in the session. See [application](#application) for more information."},{"location":"references/conditional-auth/api-reference/#application","title":"Application","text":"<code>application.subject</code> This is the subject of the application. <code>application.appName</code> This is the name of the application. <code>application.appId</code> This is the ID of the application."},{"location":"references/conditional-auth/api-reference/#user-agent","title":"User agent","text":"<code>userAgent.raw</code> This is the raw userAgent string. <code>userAgent.browser</code> This is the web browser property that is extracted from the raw userAgent string. <code>userAgent.platform</code> This is the operating system property that is extracted from the raw userAgent string. <code>userAgent.device</code> This is the device property that is extracted from the raw userAgent string."},{"location":"references/conditional-auth/api-reference/#connectionmetadata","title":"ConnectionMetadata","text":"<p>It contains the necessary metadata for invoking the API when calling the callChoreo function.</p> <code>connectionMetadata.url</code> URL of the Choreo hosted API. <code>connectionMetadata.consumerKey</code> The consumer key of the Choreo application. <code>connectionMetadata.consumerSecret</code> The consumer secret of the Choreo application. <p>If the consumer key and the consumer secret are added as secrets, they should be included in the ConnectionMetadata as aliases, as shown below.</p> <code>connectionMetadata.consumerKeyAlias</code> The name of the secret that stores the consumer key. <code>connectionMetadata.consumerSecretAlias</code> The name of the secret that stores the consumer secret."},{"location":"references/idp-settings/oidc-settings-for-idp/","title":"OIDC settings for IdPs","text":"<p>You can find the OIDC enterprise IdP settings in the Settings tab of the selected OIDC enterprise IdP.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#mandatory-settings","title":"Mandatory settings","text":"<p>Listed below are the mandatory settings.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#client-id","title":"Client ID","text":"<p>The client ID that is generated when registering Asgardeo as an OIDC application in the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#client-secret","title":"Client secret","text":"<p>The client secret that is generated when registering Asgardeo as an OIDC application in the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#authorization-endpoint-url","title":"Authorization endpoint URL","text":"<p>The OpenID Connect standard authorization endpoint URL of the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#token-endpoint-url","title":"Token endpoint URL","text":"<p>The OpenID Connect standard token endpoint URL of the external identity provider.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#authorized-redirect-url","title":"Authorized redirect URL","text":"<p>This is where the user needs to be redirected after completing authentication at the external identity provider. The identity provider needs to send the authorization code to this URL upon successful authentication.</p> <p>You should configure <code>https://api.asgardeo.io/t/{your_organinzation_name}/commonauth</code> as the redirect URL/callback URL when you register Asgardeo as an OIDC application in the external IdP.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#additional-settings","title":"Additional settings","text":"<p>Listed below are additional settings.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#user-info-endpoint-url","title":"User info endpoint URL","text":"<p>The OpenID Connect standard userinfo endpoint  of the external identity provider. If this URL is not given, user attributes are taken from the ID token of the token response received from the external IdP.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#logout-url","title":"Logout URL","text":"<p>The OpenID Connect standard logout endpoint of the external identity provider. If this URL is given, Asgardeo sends logout requests to the external IdP when a user logs out from the connected application.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#scopes","title":"Scopes","text":"<p>This is a list of case-sensitive OpenID Connect scopes that needs to be requested from the OIDC external IdP. See the OpenID Connect specification for more information about what scopes can be configured here.</p>"},{"location":"references/idp-settings/oidc-settings-for-idp/#additional-query-parameters","title":"Additional query parameters","text":"<p>Asgardeo supports sending additional information to your OIDC external IdP in the form of query params in the login request. - Fixed query params - Dynamic query params   - Query param value sent in the application login request   - Query param value resolved in a conditional authentication script</p> <p>You can check below examples when an application developer wants to send login_hint as a query param to external provider.</p> Fixed query params <p>Here Asgardeo sends the fixed query param to the external identity provider in the login request. - Sample Query Param: <code>login_hint=none</code> </p> Dynamic query params <ol> <li> <p>Query param value sent in the application login request</p> <ul> <li> <p>Sample Query Param: <code>login_hint=${login_hint_value}</code>      You can see a sample OIDC request from an application below.    <pre><code> https://api.asgardeo.io/t/bifrost/oauth2/authorize?scope=openid&amp;response_type=code&amp;redirect_uri=&lt;redirect_uri&gt;&amp;client_id=&lt;client_id&gt;&amp;login_hint_value=user@gmail.com\n</code></pre> </p> </li> <li> <p>If the application does not send the query param in the login request, the particular parameterized query param will not be sent to the external OIDC identity provider.</p> </li> </ul> </li> <li> <p>Query param value resolved in a conditional authentication script</p> </li> <li> <p>Sample Query Param: <code>login_hint=$authparam{login_hint_value}</code>      Here login_hint_value needs to be resolved from the conditional auth script.      </p> </li> <li> <p>Sample conditional auth script: <code>js       // Step 1: username and password authentication         // Step 2: OIDC enterprise login         var onLoginRequest = function(context) {           executeStep(1, {               onSuccess: function(context) {                   // Extracting authenticated user from the first step.                   var emailAddress = context.steps[1].subject.username;                   executeStep(2, {                       authenticatorParams: {                           common: {                               'login_hint_value': emailAddress  // This is where we resolve the dynamic query param.                           }                       },                       authenticationOptions: [{                           idp: 'OIDC enterprise IDP' // Name of the OIDC idp.                       }]                   }, {});               },           });       };</code> </p> </li> </ol>"},{"location":"references/idp-settings/oidc-settings-for-idp/#enable-http-basic-auth-for-client-authentication","title":"Enable HTTP basic auth for client authentication","text":"<p>Specify whether to enable HTTP basic authentication for the token request. Otherwise, client credentials are sent in the request body instead of the HTTP header.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/","title":"SAML settings for IdPs","text":"<p>You can find the SAML IdP related settings under settings section of the selected SAML IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#basic-settings","title":"Basic settings","text":""},{"location":"references/idp-settings/saml-settings-for-idp/#service-provider-entity-id","title":"Service provider entity ID","text":"<p>Also known as  issuer. Specifies the entityID of Asgardeo which acts as the application. This value will be used as the <code>&lt;saml2:Issuer&gt;</code> in the SAML requests initiated from Asgardeo to external Identity Provider (IdP). You need to provide a unique value as the service provider entityId.</p> <p>It is recommended to use a valid urn(e.g: urn:asgardeo:id) as the entityID.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-single-sign-on-url","title":"Identity provider Single Sign-On URL","text":"<p>Single sign-on URL of the external IdP. This is where Asgardeo will send its authentication requests.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#assertion-consumer-service-acs-url","title":"Assertion Consumer Service (ACS) URL","text":"<p>The Assertion Consumer Service (ACS) URL determines where Asgardeo expects the external identity provider to send the SAML response.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-entity-id","title":"Identity provider entity ID","text":"<p>Also known as the issuer of identity provider. This is the <code>&lt;saml2:Issuer&gt;</code> value specified in the SAML responses issued by the external IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-nameid-format","title":"Identity provider NameID format","text":"<p>Name ID defines the name identifier formats supported by the external IdP. Name identifier is how Asgardeo communicates with external IdP regarding a user.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#http-protocol-binding","title":"HTTP protocol binding","text":"<p>Specifies the mechanisms to transport SAML messages in communication protocols. Bindings define how SAML request-response protocol messages can be exchanged between identity provider and SAML application via HTTP transport.</p> <p>Asgardeo supports below bindings: - HTTP Post - HTTP Redirect - As Per Request</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#single-logout","title":"Single Logout","text":""},{"location":"references/idp-settings/saml-settings-for-idp/#accept-identity-provider-logout-requests","title":"Accept identity provider logout requests","text":"<p>Specifies whether single logout request from the IdP must be accepted by Asgardeo. By selecting this configuration, Asgardeo can process the SAML IdP initiated logout requests and send the back-channel logout requests to the downstream applications.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#identity-provider-logout-enabled","title":"Identity provider logout enabled","text":"<p>Specifies whether logout is supported by the external IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#idp-logout-url","title":"IdP logout URL","text":"<p>Provides the logout endpoint URL of the IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#request-response-signing","title":"Request &amp; Response Signing","text":""},{"location":"references/idp-settings/saml-settings-for-idp/#strictly-verify-authentication-response-signature-info","title":"Strictly verify authentication response signature info","text":"<p>Specifies if SAML2 authentication response from the external IdP must be signed or not. If this setting is selected, Asgardeo will validate the signature in authentication response sent by the external IdP.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#logout-request-signing","title":"Logout request signing","text":"<p>Specifies if SAML2 logout request to the external IdP from Asgardeo must be signed or not.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#authentication-request-signing","title":"Authentication request signing","text":"<p>Specifies if SAML2 authentication request to the external IdP from Asgardeo must be signed or not.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#signature-algorithm","title":"Signature algorithm","text":"<p>Used as the signing algorithm to sign the authentication request and logout request.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#digest-algorithm","title":"Digest algorithm","text":"<p>Used as the digest algorithm in authentication request and logout request.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#advanced","title":"Advanced","text":""},{"location":"references/idp-settings/saml-settings-for-idp/#include-protocol-binding-in-the-request","title":"Include protocol binding in the request","text":"<p>Specifies whether the transport mechanism should be included in the small authentication request.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#find-user-id-from-requests","title":"Find user ID from requests","text":"<p>To specify an attribute from the SAML 2.0 assertion as the user identifier, configure the subject attribute from the attributes section.</p>"},{"location":"references/idp-settings/saml-settings-for-idp/#additional-query-parameters","title":"Additional query parameters","text":"<p>Asgardeo supports sending additional information to your SAML external IdP in the form of query params in the login request. - Fixed query params - Dynamic query params   - Query param value sent in the application login request   - Query param value resolved in a conditional authentication script</p> <p>You can check below examples when an application developer wants to send login_hint as a query param to external provider.</p> Fixed query params <p>Here Asgardeo sends the fixed query param (e.g: <code>login_hint</code>) to the external identity provider in the login request.</p> <pre><code>- **Sample Query Param:**\n`login_hint=none`\n  ![Add fixed query param in enterprise IDP config](../../assets/img/guides/idp/saml-enterprise-idp/queryparam/fixed-query-param.png)\n</code></pre> Dynamic query params <ol> <li> <p>Query param value sent in the application login request</p> <ul> <li>Sample Query Param: <code>login_hint={login_hint_value}</code> </li> <li>If the application does not send the query param <code>login_hint_value</code> in the login request, the particular parameterized query param  will not be sent to the external SAML identity provider.</li> </ul> </li> <li> <p>Query param value resolved in a conditional authentication script</p> </li> <li> <p>Sample Query Param: <code>login_hint=$authparam{login_hint_value}</code>      Here login_hint_value needs to be resolved from the conditional auth script.      </p> </li> <li> <p>Sample conditional auth script: <code>js       // Step 1: username and password authentication         // Step 2: SAML enterprise login         var onLoginRequest = function(context) {           executeStep(1, {               onSuccess: function(context) {                   // Extracting authenticated user from the first step.                   var emailAddress = context.steps[1].subject.username;                   executeStep(2, {                       authenticatorParams: {                           common: {                               'login_hint_value': emailAddress  // This is where we resolve the dynamic query param.                           }                       },                       authenticationOptions: [{                           idp: 'SAMLIDP' // Name of the SAML IdP.                       }]                   }, {});               },           });       };</code> </p> </li> </ol>"},{"location":"references/remote-user-store/remote-user-store-properties/","title":"Remote user store properties","text":"<p>The following table provides descriptions of the key properties to apply in <code>deployment.toml</code> file to configure the user store that you need to connect.      Configuration name Description <code>type</code>                      Type of the user store you are trying to connect. You can update the type parameter as <code>ldap</code>                     if you are using LDAP (Lightweight Directory Access Protocol) and <code>active_directory</code> if you are                     using an Active Directory user store.  Example: <code>type = \"ldap\"</code> <code>connection_url</code> Connection URL to the user store server.  Example: <code>connection_url = \"ldap://localhost:389\"</code> <code>connection_name</code>                      The username used to connect to the user store and perform various operations. This user does not have to be                     an administrator in the user store, but this user MUST have permission to read the user list and users' attributes and                     to perform search operations on the user store. The value you specify is used as the DN ( Distinguish Name ) attribute                     of the user. This property is mandatory.  Example: <code>connection_name = \"uid=admin,ou=system\"</code> <code>connection_password</code> Password for the ConnectionName user. Example: <code>connection_password = \"password\"</code> <code>ldap_connection_timeout</code>                      Timeout in making the initial LDAP connection. This is configured in milliseconds.                      Example: <code>ldap_connection_timeout = 2000</code> <code>base_dn</code>                      The starting point the directory server uses when searching for users authentication within your Directory.                      Example: <code>base_dn = \"dc=example,dc=org\"</code> <code>user_search_base</code>                      DN of the context or object under which the user entries are stored in the user store. In this case,                     it is the \"users\" container. When the user store searches for users, it will start from this location                     of the directory.  Example: <code>user_search_base = \"ou=Users,dc=example,dc=org\"</code> <code>user_name_list_filter</code>                      Filtering criteria for listing all the user entries in the user store. This query or filter is used                     when doing search operations on users. In this case, the search operation only provides the objects                     created from the specified class. This query is the same as listing out all the available users in                     the management console.  Example: <code>user_name_list_filter = \"(objectClass=user)\"</code> <code>user_name_attribute</code>                      The attribute used for uniquely identifying a user entry. Users can be authenticated using their                     email address, UID, etc. The name of the attribute is considered as the username.                      Example: <code>user_name_attribute = \"cn\"</code> <code>user_name_search_filter</code>                      Filtering criteria are used to search for a particular user entry.                      Example: <code>user_name_search_filter = \"(&amp;(objectClass=user)(cn=?))\"</code> <code>user_entry_object_class</code>                      The object class is used to construct user entries.                      Example: <code>user_entry_object_class = \"inetOrgperson\"</code> <code>user_id_attribute</code>                      The attribute used for uniquely identifying a user entry. The value of the attribute is considered                     as the unique user ID.  Example: <code>user_id_attribute = \"objectGuid\"</code> <code>user_id_search_filter</code>                      Filtering criteria used to search for a particular user entry using the user id attribute.                      Example: <code>user_id_search_filter = \"(&amp;(objectClass=user)(objectGuid=?))\"</code> <code>password_hash_method</code>                      Specifies the Password Hashing Algorithm uses the hash the password before storing in the user store.                     Possible values:  <code>SHA</code> - Uses SHA digest method. SHA-1, SHA-256  <code>MD5</code> - Uses MD 5 digest method.                      <code>PLAIN_TEXT</code> - Plain text passwords.(Default) Example: <code>password_hash_method = \"PLAIN_TEXT\"</code> <code>read_groups</code>                      Specifies whether groups should be read from the user store. If this is disabled by setting it to                     false, none of the groups in the user store can be read, and the following group configurations are                     NOT mandatory: group_search_base, group_name_list_filter, group_name_search_filter, or group_name_attribute.                     Example: <code>read_groups = \"true\"</code> <code>group_search_base</code>                      DN of the context under which group entries are stored in the user store.                      Example: <code>group_search_base = \"ou=Groups,dc=example,dc=org\"</code> <code>group_entry_object_class</code>                      The object class is used to construct group entries.                     Example: <code>group_entry_object_class = \"groupOfNames\"</code> <code>group_name_attribute</code>                      Attribute used for uniquely identifying a group entry. This attribute is to be treated as the group name.                      Example: <code>group_name_attribute = \"cn\"</code> <code>group_name_search_filter</code>                      Filtering criteria used to search for a particular group entry.                      Example: <code>group_name_search_filter = \"(&amp;(objectClass=groupOfNames)(cn=?))\"</code> <code>group_name_list_filter</code>                      Filtering criteria for listing all the group entries in the user store. The group search operation                     only returns objects created from this class.                     Example: <code>group_name_list_filter = \"(objectClass=groupOfNames)\"</code> <code>group_id_enabled</code> Whether the unique groupid is enabled or not.Example: <code>group_id_enabled = \"true\"</code> <code>group_id_attribute</code>                      The attribute used for uniquely identifying a group entry. The value of the attribute is considered as the unique group ID.                     Example: <code>group_id_attribute = \"gid\"</code> <code>membership_attribute</code>                      Attribute used to define members of groups.                     Example: <code>membership_attribute = \"member\"</code> <code>group_created_date_attribute</code>                      This attribute is to be treated as the group created timestamp.                     Example: <code>group_created_date_attribute = \"whenCreated\"</code> <code>multi_attribute_separator</code>                      This property is used to define a character to separate multiple attributes. This ensures that it                     will not appear as part of a claim value. Normally \u201c,\u201d is used to separate multiple attributes, but                     you can define \",,,\" or \"...\" or a similar character sequence                     Example: <code>multi_attribute_separator = \",\"</code> <code>case_insensitive_user_name</code>                  Enables the case-insensitivity of the user's username. The default value is true for this configuration.                  Eg: If a user's username is test, that user can also use the username as TEST.                 Example: <code>case_insensitive_user_name = \"true\"</code> <code>immutable_attributes</code>                  This property is used to define a list of attributes that are considered unchangeable attributes in the user store.                  This property needs to be configured only for user stores with Read/Write access.                 Example: <code>immutable_attributes = \"whenCreated,whenChanged,location\"</code> </p>"},{"location":"references/user-management/user-roles/","title":"Asgardeo user roles","text":"<p>Roles consist of the permissions that are required by users to access the Asgardeo resources such as functions available on the Asgardeo Console, REST APIs, etc.</p> <p>When you assign a role to a user, you are controlling what the user can do in Asgardeo.</p> <p>By default, Asgardeo has the Administrator user role. This role includes all administrative permissions in the organization. An organization can have many users with the administrator role. An administrator is a privileged user who has overall access to the organization.</p> <p>The following list contains the permissions enabled for an Administrator:</p>"},{"location":"references/user-management/user-roles/#user-management","title":"User management","text":"<ul> <li>View users</li> <li>Onboard users</li> <li>Update user profiles</li> <li>Delete users</li> <li>Terminate sessions</li> <li>View groups</li> <li>Create groups</li> <li>Update and delete groups</li> <li>View assigned users to groups</li> <li>Asign users to groups</li> </ul>"},{"location":"references/user-management/user-roles/#application-management","title":"Application management","text":"<ul> <li>View apps and app settings</li> <li>Register apps</li> <li>Update and delete apps</li> <li>Update Sign-in methods</li> <li>Update protocol settings</li> </ul>"},{"location":"references/user-management/user-roles/#connections-management","title":"Connections management","text":"<ul> <li>View connections and connection settings</li> <li>Create new connection</li> <li>Update and delete connections</li> </ul>"},{"location":"references/user-management/user-roles/#organization-management","title":"Organization management","text":"<ul> <li>Create new organizations</li> <li>Create suborganizations</li> <li>As the suborganization creator, view, update, and delete suborganizations that you created</li> <li>Share applications from the root organizations to it's suborganizations</li> </ul>"},{"location":"references/user-management/user-roles/#managing-attributes-and-scopes","title":"Managing attributes and scopes","text":"<ul> <li>View attributes</li> <li>Create new attributes</li> <li>Update and delete attributes</li> <li>View scopes</li> <li>Add new attributes to scopes</li> <li>Update and delete scopes</li> </ul>"},{"location":"references/user-management/user-roles/#managing-organization-settings","title":"Managing organization settings","text":"<ul> <li>View account recovery scenario and settings</li> <li>Configure account recovery scenarios</li> <li>View self registration related settings</li> <li>Configure self registration for users</li> <li>View account security related settings and configurations</li> <li>Configure account security related settings</li> </ul>"},{"location":"tutorials/","title":"Tutorials - Overview","text":""},{"location":"tutorials/#tutorials-overview_1","title":"Tutorials - Overview","text":"<p>See the topics listed below for end-to-end tutorials on how to use Asgardeo with different technologies and different use cases.</p> <ul> <li>Authenticate users into Android applications using Asgardeo</li> <li>Authenticate users into Flutter applications using Asgardeo</li> <li>Connect Asgardeo as an OIDC attribute provider for verifiable credentials (VC) with Microsoft Entra Verified ID</li> <li>Connect Asgardeo as an OIDC attribute provider for verifiable credentials (VC) with MATTR</li> </ul>"},{"location":"tutorials/auth-users-into-android-apps/","title":"Authenticate users into Android applications using Asgardeo","text":"<p>An Android app is a software application that runs on Android devices or emulators. It is distributed in the form of an APK file, which is a ZIP archive that contains the app code, resources, and metadata. Android apps can be written in Kotlin or Java and are executed within a virtual machine.</p> <p>There are two ways to implement user authentication in your application:</p> <ul> <li>Add the logic to handle user authentication into the application.</li> <li>Use an identity provider to handle user authentication in your application.</li> </ul> <p>If you choose the first option of handling user registration and login within the application, there are certain difficulties that you need to consider.</p> <ul> <li>First, the application itself will be responsible for maintaining user identities and implementing secure password policies. It also needs to include bot detection mechanisms and ensure proper security protocols are in place for authentication.</li> <li>If you want to include a dedicated login option for admins, it needs to be handled within the application. However, if an admin makes a mistake, it will be difficult to identify the error and the respective admin, as the application will not know which admin logged in.</li> </ul> <p>To avoid these challenges, it is recommended to use an identity provider to handle user registration and authentication. This means that all user identities are managed by the identity provider and that the login data is recorded. In cases of harmful activity, it will be easier to identify who was online and what they did, which makes problem-solving and threat elimination easier.</p> <p>Asgardeo, a SaaS-based customer identity and access management (CIAM) solution, is a suitable identity provider for Android applications.</p>"},{"location":"tutorials/auth-users-into-android-apps/#overview","title":"Overview","text":"<p>This tutorial guides you through the process of integrating user authentication capabilities into an Android application using Asgardeo as the CIAM provider.</p>"},{"location":"tutorials/auth-users-into-android-apps/#authentication-flow","title":"Authentication flow","text":"<p>The high-level flow for the integration is as follows:</p> <ol> <li>The user clicks the login button of an Android application.</li> <li>The user is directed to the Asgardeo login page.</li> <li>The user enters their Asgardeo account credentials.</li> <li>The user is authenticated via Asgardeo, and upon successful login, they are redirected to the application\u2019s home page.</li> <li>If the user clicks the logout button of the application, they are logged out from Asgardeo and redirected to the relevant page.</li> </ol>"},{"location":"tutorials/auth-users-into-android-apps/#oidc-authentication-method","title":"OIDC authentication method","text":"<p>Before you dive into integrating Asgardeo with your mobile application, let's take a closer look at the authentication mechanism you will use for login capabilities. Authentication involves various protocols, but for this example, we'll be using the OIDC protocol, which is widely recognized as the industry standard for mobile applications.</p> <p>To ensure a secure authentication process for your Android application, let's use the OIDC protocol with PKCE. Learn more about the authorization code flow with PKCE.</p>"},{"location":"tutorials/auth-users-into-android-apps/#sdks","title":"SDKs","text":"<p>In the world of software development, an SDK (Software Development Kit) is an essential set of software tools and programs that enable developers to create applications for specific platforms, operating systems, computer systems, or devices. It's like a kit of different items that come with the tools and instructions required for assembling them, similar to putting together a standard car model.</p> <p>When integrating Asgardeo with your mobile application, you can use any third-party OIDC SDK that supports the protocol. For this tutorial, let's use the app-auth Android SDK. With the app-auth Android SDK, you can easily add OIDC-based login and logout capabilities to your Android applications.</p>"},{"location":"tutorials/auth-users-into-android-apps/#sample-scenario","title":"Sample scenario","text":"<p>In this tutorial, we'll use the example of creating Meal Magic, a food delivery app that requires user authentication for ordering food. You'll begin by building a basic application without integrating Asgardeo authentication.</p> <p>Then, you'll integrate Asgardeo authentication into the application. After successful authentication, the user will see their username on the next screen and will be able to select a location to find nearby restaurants. The application will also provide a logout option for users to log out.</p>"},{"location":"tutorials/auth-users-into-android-apps/#prerequisites","title":"Prerequisites","text":"<p>Set up any one of the following environments to edit and refactor your Android application code.</p> <ul> <li>Android Studio</li> <li>IntelliJ IDEA</li> <li>Visual Studio Code</li> </ul>"},{"location":"tutorials/auth-users-into-android-apps/#step-1-set-up-the-application","title":"Step 1: Set up the application","text":"<p>First, you need to create the application.</p> <p>After installing Android Studio, create a new project with a basic activity, and design the application login page and the home page.</p>"},{"location":"tutorials/auth-users-into-android-apps/#step-2-register-the-application-in-asgardeo","title":"Step 2: Register the application in Asgardeo","text":"<p>To integrate Asgardeo as your CIAM provider, you need to register your application in Asgardeo. Since you are building an Android application, it should be registered as a mobile application. See the instructions on registering a mobile application.</p> <p>Note</p> <p>When registering the application, it's important to specify <code>com.sample.mealmagic://home</code> as the authorized redirect URI, which must also match the redirect URL specified in the application configuration.</p> <p>After registering your application with Asgardeo, you can enable user attributes for the app. These attributes correspond to the user's profile information that can be retrieved by the application with the user's consent.</p> <p>Note</p> <p>If you need additional attributes that are not listed in the user\u2019s profile section by default, you can configure new attributes and retrieve them through the <code>profile</code> scope.</p> <p>Note that admin users are not allowed to log in to the Android application. Therefore, it is necessary to create a business user in Asgardeo. See the instructions on managing users in Asgardeo.</p>"},{"location":"tutorials/auth-users-into-android-apps/#step-3-install-dependencies","title":"Step 3: Install dependencies","text":"<p>Add dependencies in the <code>build.gradle</code> file.</p> <pre><code>dependencies { \u2026\u2026\u2026\u2026\u2026\nimplementation 'net.openid:appauth:0.7.0'\nimplementation 'com.squareup.okio:okio:1.14.1'\n}\n</code></pre> <p>Appauth is an SDK for application authentication, while Okio is a library that simplifies and enhances the usage of <code>InputStream</code> and <code>OutputStream</code> classes from the standard <code>java.io</code> package by providing a buffered source.</p>"},{"location":"tutorials/auth-users-into-android-apps/#step-4-configure-the-callback-url","title":"Step 4: Configure the Callback URL","text":"<p>Once the authorization flow is completed on the browser, Asgardeo will redirect to the callback URL sent in the authorization request. In order for the app to capture this response, it must register with the Android OS as a handler for this redirect URI as below.</p> <p>Add <code>RedirectSchema</code> to the <code>build.gradle</code> file.</p> <pre><code>android.defaultConfig.manifestPlaceholders = [       'appAuthRedirectScheme': 'com.example.myapplication'\n]\n</code></pre>"},{"location":"tutorials/auth-users-into-android-apps/#step-5-implement-sign-in","title":"Step 5: Implement sign-in","text":"<p>We have two activities - <code>MainActivity</code> and <code>UserInfoActivity</code>. The main activity has a sign-in button. Once the user clicks the sign-in button, at the code level, we need to send a call to Asgardeo to get the authorization code.</p> <p>As mentioned earlier, it's a best practice for mobile applications to use OpenID Connect (OIDC) with the PKCE option. Since PKCE is being used, the authorization request must include a code challenge and code challenge method. When using the app-auth SDK, these parameters are automatically included in the authorization request via the builder method, so there's no need to manually add them.</p> <ol> <li>First, fetch the identity provider metadata information using the <code>fetchFromIssuer</code> method and add the information to <code>AuthorizationServiceConfiguration</code>.</li> </ol> <p>!!! note       You can find the issuer details in the Info tab of the application you created in Asgardeo.</p> <ol> <li>After providing the issuer details, call the <code>builder</code> method with the required parameters.</li> </ol> <p>The following parameters must be sent:</p> <p>              Client id                        This is the client ID of the application registered in Asgardeo. Note that client secrets are not issued for mobile apps since they are public clients. However, the PKCE extension is enabled by default as a security measure.                        Redirect URI                        This is the URI to which the authorization code is sent upon authentication and where the user is redirected upon logout. This is the callback URL configured in Asgardeo for the Android mobile app.                        Response type                        Use <code>Code</code> as we are using the authorization code grant.                        Scopes                        Use scopes to define the required access. If you include <code>profile</code>, the user's profile details will be sent in the ID token. To obtain the ID token, you must also send the <code>openid</code> scope. For our use case, to get the user's name and other profile details, we will request the <code>openid</code> and <code>profile</code> scopes.             These scopes should be configured in the Asgardeo application as well.           </p> <pre><code>@Override\npublic void onClick(View view) {\n\nString tokenEndpoint = ConfigManager.\nreadConfigValues(view.getContext(), \"token_endpoint\");\nString clientId = ConfigManager.readConfigValues(view.getContext(), \"client_id\");\nString redirectUrl = ConfigManager.\nreadConfigValues(view.getContext(), \"redirect_url\");\nString scopes = ConfigManager.readConfigValues(view.getContext(), \"scopes\");\nAuthorizationServiceConfiguration.fetchFromIssuer(Uri.parse(tokenEndpoint),\n(serviceConfiguration, ex) -&gt; {\nUri redirectUri = Uri.parse(redirectUrl);\nif (serviceConfiguration != null &amp;&amp; clientId != null) {\nAuthorizationRequest.Builder builder = new AuthorizationRequest.Builder(\nserviceConfiguration,\nclientId,\nResponseTypeValues.CODE,\nredirectUri\n);\nif (scopes != null) {\nbuilder.setScopes(scopes.split(\",\"));\n}\nAuthorizationRequest request = builder.build();\nAuthorizationService authorizationService = new AuthorizationService(\nview.getContext());\n\nCustomTabsIntent.Builder intentBuilder = authorizationService.\ncreateCustomTabsIntentBuilder(request.toUri());\ncustomTabIntent.set(intentBuilder.build());\nIntent completionIntent = new Intent(view.getContext(),\nUserInfoActivity.class);\nIntent cancelIntent = new Intent(view.getContext(), MainActivity.class);\n\nauthorizationService.performAuthorizationRequest(request, PendingIntent.\ngetActivity(view.getContext(), 0,\ncompletionIntent, 0), PendingIntent.\ngetActivity(view.getContext(), 0,\ncancelIntent, 0), customTabIntent.get());\n}\n});\n}\n</code></pre> <ol> <li>After implementing the logic described above, set the <code>AuthorizeListener</code> as the <code>OnClickListener</code> for your sign-in button.</li> </ol> <p>!!! note       This triggers an authorization request to Asgardeo when the sign-in button is clicked, and the Asgardeo login page opens on your browser.</p> <ol> <li>To log in, use your Asgardeo credentials.</li> </ol> <p>!!! note       - As mentioned in the code snippets above, if the authorization is successful, you are redirected to the <code>UserInfoActivity</code>. If it fails, you are redirected to <code>MainActivity</code>.       - Once the authorization flow is successful, an authorization code is sent to the application via browser redirection. The application must then send the authorization code and additional information to Asgardeo to get the access token and ID token.</p> <ol> <li>To retrieve the access token in the <code>UserInfoActivity</code> class of your application, add the following code.</li> </ol> <p>!!! note       This code retrieves the authorization response and performs the token request to get the access token and ID token.</p> <pre><code>@Override\nprotected void onStart() {\n\nsuper.onStart();\nhandleAuthorizationResponse(getIntent());\n}\n\nprivate void handleAuthorizationResponse(Intent intent) {\n\nfinal AuthorizationResponse response = AuthorizationResponse.fromIntent(intent);\nAuthorizationService service = new AuthorizationService(this);\nif (response != null) {\nperformTokenRequest(service, response.createTokenExchangeRequest(),\nthis::handleCodeExchangeResponse);\n}\n}\n\nprivate void performTokenRequest(AuthorizationService authService, TokenRequest request,\nAuthorizationService.TokenResponseCallback callback) {\n\nauthService.performTokenRequest(request, callback);\n}\n\n\nprivate void handleCodeExchangeResponse(TokenResponse tokenResponse,\nAuthorizationException authException) {\n\n\nidToken = tokenResponse.idToken;\naccessToken = tokenResponse.accessToken;\ncallUserInfo();\n}\n</code></pre>"},{"location":"tutorials/auth-users-into-android-apps/#step-6-get-user-information","title":"Step 6: Get user information","text":"<p>After receiving the access token, you can use it to authenticate and call the user info endpoint. This retrieves the requested user details. In this scenario, since we only requested the <code>profile</code> scope with the username, the user info endpoint contains the username.</p> <p>Note</p> <p>You can find the UserInfo endpoint in the Info tab of the application you created in Asgardeo.</p> <pre><code>String userinfoEndpoint = ConfigManager.\nreadConfigValues(getApplicationContext(), \"userinfo_endpoint\");\nURL userInfoEndpoint = new URL(userinfoEndpoint);\nHttpURLConnection conn = (HttpURLConnection) userInfoEndpoint.openConnection();\nconn.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);\nconn.setInstanceFollowRedirects(false);\nString response = Okio.buffer(Okio.source(conn.getInputStream())).\nreadString((StandardCharsets.UTF_8));\nJSONObject json = new JSONObject(response);\n\nTextView username1 = findViewById(R.id.username1);\nTextView username2 = findViewById(R.id.username2);\n\nusername1.setText(json.getString(\"username\"));\nusername2.setText(json.getString(\"username\"));\n\nButton btnClick = findViewById(R.id.logout);\nbtnClick.setOnClickListener(new LogoutListener());\n</code></pre>"},{"location":"tutorials/auth-users-into-android-apps/#step-7-implement-logout","title":"Step 7: Implement logout","text":"<p>To enable users to log out of the application, add an <code>on-click</code> listener to the logout button as shown below.</p> <pre><code>public class LogoutListener implements Button.OnClickListener {\n@Override\npublic void onClick(View view) {\n\nString logoutEndpoint = ConfigManager.\nreadConfigValues(view.getContext(), \"logout_endpoint\");\nString url = logoutEndpoint + \"?id_token_hint=\" + idToken;\n\nCustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();\nCustomTabsIntent customTabsIntent = builder.build();\ncustomTabsIntent.intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY |\nIntent.FLAG_ACTIVITY_NEW_TASK\n| Intent.FLAG_ACTIVITY_SINGLE_TOP);\ncustomTabsIntent.launchUrl(view.getContext(), Uri.parse(url));\n}\n}\n</code></pre> <p>When the user clicks the logout button, the application sends a logout request to the Asgardeo logout endpoint.</p> <p>Note</p> <p>You can find the logout endpoint in the Info tab of the application you created in Asgardeo.</p> <p>As a result, the user will be logged out from Asgardeo and redirected to the default logout page. If you want to redirect the user to a different page, you can include the <code>post_logout_redirect_uri</code> parameter in the logout request.</p> <p>Once the logout is successful, the user is redirected to the URL specified in the <code>post_logout_redirect_uri</code> parameter.</p>"},{"location":"tutorials/auth-users-into-android-apps/#step-8-try-it-out","title":"Step 8: Try it out","text":"<p>Let's walk through the end-to-end flow of the application we built in this tutorial.</p> <ol> <li>Run the Android application.</li> </ol> <p>After the application starts, you will see the login page with the Sign In option.</p> <p></p> <ol> <li>Click Sign In to start the authentication process.</li> </ol> <p>You are redirected to Asgardeo's login page, where you enter valid user credentials.</p> <p></p> <ol> <li>Use the credentials of the user you created on Asgardeo.</li> </ol> <p>Upon the first login attempt, Asgardeo prompts for consent to share the configured attributes with the Android application.</p> <p></p> <ol> <li> <p>Give your consent accordingly, allowing the application to access your profile information.</p> </li> <li> <p>Once logged in, you will see a home page.</p> </li> </ol> <p></p> <ol> <li>Log out from the application by clicking Log out.</li> </ol> <p>You get redirected to the login page upon a successful logout.</p>"},{"location":"tutorials/auth-users-into-android-apps/#summary","title":"Summary","text":"<p>In this tutorial, we covered the steps to add authentication to an Android application using Asgardeo as the CIAM provider. The AppAuth SDK was used for integrating the authentication and authorization capabilities. We also looked at the configurations required on the Asgardeo side for the application.</p> <p>Starting with a basic Android application without user authentication, we modified the code to successfully integrate the login, logout, and user info retrieval methods with Asgardeo. You can access the completed source code of the application.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/","title":"Authenticate users into Flutter applications using Asgardeo","text":"<p>Flutter, introduced by Google, is an open-source software development kit (SDK) that enables developers to create high-quality and high-performance cross-platform applications for mobile, web, desktop, and embedded apps with a single codebase.</p> <p>There are two ways to implement user authentication in your application:</p> <ul> <li>Add the logic to handle user authentication into the application.</li> <li>Use an identity provider to handle user authentication in your application.</li> </ul> <p>If you choose the first option of handling user registration and login within the application, there are certain difficulties that you need to consider.</p> <ul> <li>First, the application itself will be responsible for maintaining user identities and implementing secure password policies. It also needs to include bot detection mechanisms and ensure proper security protocols are in place for authentication.</li> <li>If you want to include a dedicated login option for admins, it needs to be handled within the application. However, if an admin makes a mistake, it will be difficult to identify the error and the respective admin, as the application will not know which admin logged in.</li> </ul> <p>To avoid these challenges, it is recommended to use an identity provider to handle user registration and authentication. This means that all user identities are managed by the identity provider and that the login data is recorded. In cases of harmful activity, it will be easier to identify who was online and what they did, which makes problem-solving and threat elimination easier.</p> <p>Asgardeo, a SaaS-based customer identity and access management (CIAM) solution, is a suitable identity provider for Flutter applications.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#overview","title":"Overview","text":"<p>This tutorial guides you through the process of integrating user authentication capabilities into a Flutter application using Asgardeo. As Flutter supports multiple platforms with a single codebase, let's focus on developing for the iOS platform.</p> <p>For detailed instructions on platform-specific development, see Flutter's installation guide.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#authentication-flow","title":"Authentication flow","text":"<p>The following steps explain the high-level authentication flow:</p> <ol> <li>The user clicks the login button of a Flutter application.</li> <li>The user is directed to the Asgardeo (CIAM provider) login page.</li> <li>The user enters their Asgardeo account credentials.</li> <li>The user is authenticated via Asgardeo, and upon successful login, they are redirected to the application\u2019s home page.</li> <li>If the user clicks the logout button of the application, they are logged out from Asgardeo and redirected to the relevant page.</li> </ol>"},{"location":"tutorials/auth-users-into-flutter-apps/#oidc-authentication-method","title":"OIDC authentication method","text":"<p>The Flutter application integrates with Asgardeo using the OIDC protocol, which is a standard way of supporting secure authentication and identity and access management. OIDC supports several grant types, and here the Authorization Code flow is used.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#sdks","title":"SDKs","text":"<p>In the world of software development, an SDK (Software Development Kit) is an essential set of software tools and programs that enable developers to create applications for specific platforms, operating systems, computer systems, or devices.</p> <p>When integrating Asgardeo with your mobile application, you can use any third-party OIDC SDK that supports the protocol. For this tutorial, let's use the flutter_appauth SDK. With this SDK, you can easily add OIDC-based login and logout capabilities to your Flutter applications.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#prerequisites","title":"Prerequisites","text":"<p>Be sure that the following prerequisites are fulfilled.</p> <ul> <li>Flutter SDK</li> </ul> <p>Follow the Flutter Installation Guide to install the SDK, tools, and dependencies.</p> <ul> <li>Development environment</li> </ul> <p>Set up any one of the following environments to edit and refactor your Flutter application code.</p> <ul> <li>Android Studio</li> <li>IntelliJ IDEA</li> <li>Visual Studio Code</li> </ul>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-1-set-up-the-application","title":"Step 1: Set up the application","text":"<p>Clone this repository to get the sample application. At this initial stage, the application contains sign-in, view profile, and sign-out options that let you navigate the pages. User authentication is not implemented yet. Furthermore, all profile information is hard coded at the application level.</p> <p>In this tutorial, we will walk you through the process of adding authentication capabilities to the application using Asgardeo as the CIAM provider. You will also learn how to retrieve and display the profile information of an authenticated user.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-2-register-your-application-in-asgardeo","title":"Step 2: Register your application in Asgardeo","text":"<p>To integrate Asgardeo as your CIAM provider, you need to register your application as a Mobile Application in Asgardeo. Since you have chosen iOS as your development platform, you will register it as a mobile application. See the instructions on registering a mobile application.</p> <p>Note</p> <p>When registering the mobile application, be sure to add <code>wso2.asgardeo.sampleflutterapp://login-callback</code> as the authorized redirect URI. This is the same callback URL you will add when setting up the application.</p> <p>After registering your application with Asgardeo, you can enable user attributes for the app. These attributes correspond to the user's profile information that can be retrieved by the application with the user's consent.</p> <p>Note</p> <p>If you need additional attributes that are not listed in the user\u2019s profile section by default, you can configure new attributes and retrieve them through the <code>profile</code> scope.</p> <p>In this tutorial, you will retrieve the First Name, Last Name, Mobile, Country, Birth Date, and Photo URL as profile information.</p> <p>Note that admin users are not allowed to log in to the Android application. Therefore, it is necessary to create a business user in Asgardeo. See the instructions on managing users in Asgardeo.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-3-install-dependencies","title":"Step 3: Install dependencies","text":"<p>Let\u2019s start the integration by adding the required dependencies:</p> <ul> <li>flutter_appauth</li> </ul> <p>A wrapper package around AppAuth that provides functionalities for the authentication and authorization of users. This dependency will be used to communicate with Asgardeo to perform user authentication.</p> <ul> <li>http</li> </ul> <p>A composable, future-based library for making HTTP requests. This will be used to access Asgardeo server endpoints in the application flow.</p> <p>To add these dependencies:</p> <ul> <li>Update the <code>dependencies</code> section of the <code>pubspec.yaml</code> file located in the root directory of your project as follows:</li> </ul> <pre><code>dependencies:\nflutter:\n  sdk: flutter\nhttp: ^0.12.1\nflutter_appauth: ^4.2.1\n</code></pre> <ul> <li>Get them downloaded by running the <code>flutter pub get</code> command in a terminal opened at the project root directory.</li> </ul> <p>Note</p> <p>This tutorial uses Flutter version 3.3.10 and <code>flutter_appauth</code> version 4.2.1. Hence, the current implementation is only guaranteed to support those particular versions without any issues. You may find other available versions of <code>flutter_appauth</code> here.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-4-configure-the-callback-url","title":"Step 4: Configure the Callback URL","text":"<p>The callback URL is the method by which Asgardeo communicates back with the application. Once the authentication process is complete, Asgardeo redirects users back to the location specified in the callback URL.</p> <ul> <li>iOS setup</li> </ul> <p>Update the <code>&lt;dict&gt;</code> element in the <code>Runner/Info.plist</code> file located in your iOS folder by adding the following entry:</p> <pre><code>&lt;dict&gt;\n\u2026\u2026\n\u2026\u2026\n&lt;key&gt;CFBundleURLTypes&lt;/key&gt;\n&lt;array&gt;\n&lt;dict&gt;\n&lt;key&gt;CFBundleTypeRole&lt;/key&gt;\n&lt;string&gt;Editor&lt;/string&gt;\n&lt;key&gt;CFBundleURLSchemes&lt;/key&gt;\n&lt;array&gt;\n&lt;string&gt;wso2.asgardeo.sampleflutterapp&lt;/string&gt;\n&lt;/array&gt;\n&lt;/dict&gt;\n&lt;/array&gt;\n&lt;/dict&gt;\n</code></pre> <ul> <li>Android/macOS Setup</li> </ul> <p>Follow the Readme of the Flutter AppAuth plugin for the configurations required for macOS and Android.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-5-integrate-your-application-with-asgardeo","title":"Step 5: Integrate your application with Asgardeo","text":"<p>Follow the steps given below to integrate your application with Asgardeo:</p> <ol> <li>Add the following code snippet to the <code>lib/main.dart</code> file to import the required external packages:</li> </ol> <pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\nimport 'package:flutter_appauth/flutter_appauth.dart';\nfinal FlutterAppAuth flutterAppAuth = FlutterAppAuth();\n</code></pre> <ol> <li>Set the required variables by adding the following code snippet:</li> </ol> <pre><code>const clientId = '&lt;Client ID&gt;';\nconst redirectUrl = '&lt;Redirect URI&gt;';\nconst discoveryUrl = '&lt;Discovery&gt;';\nconst userInfoEndpoint = '&lt;UserInfo&gt;';\n</code></pre> <pre><code>!!! note\n  You can find the values of these parameters in the **Quick Start** and **Info** tabs of the registered application in Asgardeo.\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;\n            clientId\n        &lt;/th&gt;\n        &lt;td&gt;\n            This is the client ID of the application registered in Asgardeo.&lt;/br&gt;&lt;/br&gt;\n            &lt;b&gt;Note:&lt;/b&gt; Client secrets are not issued for mobile apps since they are public clients.\n            However, the PKCE (Proof Key for Code Exchange) extension is enabled by default as a security measure.\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;\n            redirectUrl\n        &lt;/th&gt;\n        &lt;td&gt;\n            (Required) This is the URI to which the authorization code is sent upon authentication and where the user is redirected upon logout.&lt;/br&gt;&lt;/br&gt;\n            &lt;b&gt;Note:&lt;/b&gt; This is the URI given as the Authorized redirect URIs (e.g.: &lt;code&gt;wso2.asgardeo.sampleflutterapp://login-callback&lt;/code&gt;) when the application in Asgardeo is created. This should be constructed by appending &lt;code&gt;://login-callback&lt;/code&gt; to the callback URI we used when configuring the Callback URL.\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;\n            discoveryUrl\n        &lt;/th&gt;\n        &lt;td&gt;\n            This is the OpenID Connect Discovery endpoint in Asgardeo, which is used to discover Asgardeo\u2019s metadata required to interact with it.\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;\n            userInfoEndpoint\n        &lt;/th&gt;\n        &lt;td&gt;\n            This is the endpoint in Asgardeo that is used for retrieving user profile information from Asgardeo.\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>Now, you need to modify the <code>loginFunction()</code>, <code>retrieveUserDetails()</code>, and <code>logOutFunction()</code> methods in the application. All these methods reside in the <code>lib/main.dart</code> file.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-6-implement-login","title":"Step 6: Implement login","text":"<p>First, you need to initiate the two variables <code>_idToken</code> and <code>_accessToken</code> in the <code>_MyAppState</code> class and modify the <code>initState()</code> method to keep the received id token and access token in the login flow as below.</p> <pre><code>class _MyAppState extends State&lt;MyApp&gt; {\nlate int _pageIndex;\nlate bool _isUserLoggedIn;\nlate String? _idToken;\nlate String? _accessToken;\nlate String? _firstName;\nlate String? _lastName;\nlate String? _dateOfBirth;\nlate String? _country;\nlate String? _mobile;\nlate String? _photo;\n\n@override\nvoid initState() {\nsuper.initState();\n_pageIndex = 1;\n_isUserLoggedIn = false;\n_idToken = '';\n_accessToken = '';\n_firstName = '';\n_lastName = '';\n_dateOfBirth = '';\n_country = '';\n_mobile = '';\n_photo = '';\n}\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n}\n</code></pre> <p>You can change the login method to authenticate application users to the system through Asgardeo. The authorizeAndExchangeCode() method in the <code>flutter_appauth</code> library handles the end-to-end authentication flow.</p> <p>You can replace the current implementation of the <code>loginFunction()</code> with the following code snippet:</p> <pre><code>Future&lt;void&gt; loginFunction() async {\ntry {\nfinal AuthorizationTokenResponse? result =\nawait flutterAppAuth.authorizeAndExchangeCode(\nAuthorizationTokenRequest(\nclientId,\nredirectUrl,\ndiscoveryUrl: discoveryUrl,\npromptValues: ['login'],\nscopes: ['openid', 'profile'],\n),\n);\n\nsetState(() {\n_isUserLoggedIn = true;\n_idToken = result?.idToken;\n_accessToken = result?.accessToken;\n_pageIndex = 2;\n});\n} catch (e, s) {\nprint('Error while login to the system: $e - stack: $s');\nsetState(() {\n_isUserLoggedIn = false;\n});\n}\n}\n```\n\nHere\u2019s how the flow works in more detail:\n\n- [AuthorizationTokenRequest](https://pub.dev/documentation/flutter_appauth_platform_interface/latest/flutter_appauth_platform_interface/AuthorizationTokenRequest-class.html) is created by passing the `clientId`, `redirectUrl`, `discoveryUrl`, and `scopes`.\n\n  The scope parameter defines the actions that the Flutter application can perform on behalf of the user, and it is used to retrieve the required user attributes by the application. The following are the scopes defined in the request:\n\n  - `openid`: Performs [OIDC sign-in](https://openid.net/specs/openid-connect-core-1_0.html#Authentication).\n  - `profile`: Retrieves the user's profile information.\n\n- The `AuthorizationTokenRequest` object is then passed into [appAuth.authorizeAndExchangeCode()](https://pub.dev/documentation/flutter_appauth/latest/flutter_appauth/FlutterAppAuth/authorizeAndExchangeCode.html) to start the sign-in process.\n\n  The user is directed to Asgardeo\u2019s sign-in page for authentication. As a result, [AuthorizationTokenResponse](https://pub.dev/documentation/flutter_appauth_platform_interface/latest/flutter_appauth_platform_interface/AuthorizationTokenResponse-class.html) is received. It contains two token types returned by Asgardeo.\n\n  - **Access Token**: A token represents access delegated to the client application by the user to access the user's protected resources. It has a specific scope and duration.\n  - **ID Token**: A security token represented as a JSON Web Token (JWT) that proves the user's successful authentication with Asgardeo. Furthermore, it contains other requested user profile information.\n\n## Step 7: Retrieve user information\n\nOnce the user has logged in to the system, there is a section that shows the user's profile information. To get this information from Asgardeo, we will implement the `retrieveUserDetails()` method. This method uses the access token received in the login flow and includes it in the header section of the request as a bearer token to access the `/userinfo` endpoint.\n\nThen, the retrieved profile information response is parsed and set to the corresponding variables.\n\nYou will notice that the ID token contains the same set of user information and wonder why we are using a different API call to fetch them separately. Calling the `userinfo` endpoint with the retrieved access token is an alternative way of retrieving the user\u2019s profile information.\n\nFurthermore, this demonstrates how access tokens are used for accessing protected resources (such as the `userinfo` endpoint) on behalf of the user.\n\nYou can use the following code snippet to replace the content of the `retrieveUserDetails()` method.\n\n```js\nFuture&lt;void&gt; retrieveUserDetails() async {\nfinal userInfoResponse = await http.get(\nuserInfoEndpoint,\nheaders: {'Authorization': 'Bearer $_accessToken'},\n);\n\nif (userInfoResponse.statusCode == 200) {\nvar profile = jsonDecode(userInfoResponse.body);\nsetState(() {\n_firstName = profile['given_name'];\n_lastName = profile['family_name'];\n_dateOfBirth = profile['birthdate'];\n_country = profile['address']['country'];\n_mobile = profile['phone_number'];\n_photo = profile['picture'];\n_pageIndex = 3;\n});\n} else {\nthrow Exception('Failed to get user profile information');\n}\n}\n</code></pre>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-8-implement-logout","title":"Step 8: Implement logout","text":"<p>Finally, change the <code>logOutFunction()</code> method, which performs the user logout. The following code snippet handles the user\u2019s sign-out functionality.</p> <pre><code>void logOutFunction() async {\ntry {\nfinal EndSessionResponse? result = await flutterAppAuth.endSession(\nEndSessionRequest(\nidTokenHint: _idToken,\npostLogoutRedirectUrl: redirectUrl,\ndiscoveryUrl: discoveryUrl,\n),\n);\n\nsetState(() {\n_isUserLoggedIn = false;\n_pageIndex = 1;\n});\n} catch (e, s) {\nprint('Error while logout from the system: $e - stack: $s');\n}\n}\n</code></pre>"},{"location":"tutorials/auth-users-into-flutter-apps/#step-7-try-it-out","title":"Step 7: Try it out","text":"<p>Let's walk through the end-to-end flow of the application we built in this tutorial.</p> <ol> <li> <p>Run the Flutter application using the following command.</p> <pre><code>flutter run\n</code></pre> </li> </ol> <p>After the application starts, you will see the login page with the Sign In option.</p> <ol> <li>Click Sign In to start the authentication process.</li> </ol> <p></p> <p>You will be redirected to Asgardeo's login page, where you will enter valid user credentials.</p> <ol> <li>Use the credentials of the user created when you registered the application in Asgardeo.</li> </ol> <p></p> <p>Upon the first login attempt, Asgardeo prompts for consent to share the configured attributes with the Flutter application.</p> <ol> <li>Give your consent accordingly, allowing the application to access your profile information.</li> </ol> <p></p> <ol> <li>Once logged in, you will see a home page with the View profile and Sign out options.</li> </ol> <p></p> <ol> <li>Go to the Profile Information section by clicking View profile.</li> </ol> <p>You can now view the logged-in user's profile information. You can click Back to home to navigate back to the home page.</p> <p></p> <ol> <li>Log out from the application by clicking Sign out.</li> </ol> <p>You get redirected to the login page upon a successful logout.</p>"},{"location":"tutorials/auth-users-into-flutter-apps/#summary","title":"Summary","text":"<p>In this tutorial, we demonstrated how to add authentication to a Flutter application using Asgardeo as the CIAM provider. The integration of authentication and authorization capabilities was made possible with the use of the Flutter AppAuth plugin.</p> <p>We also provided a detailed guide on how to configure the application on Asgardeo. Starting with a sample Flutter application without user authentication implemented, we modified the sign-in, sign-out, and user info retrieval methods to successfully integrate authentication and profile info retrieval capabilities using Asgardeo.</p> <p>The completed source code of the application.</p>"},{"location":"tutorials/connect-asgardeo-with-mattr/","title":"Connect Asgardeo as an OIDC attribute provider for verifiable credentials (VC) with MATTR","text":"<p>Verifiable credentials are a digitalized representation of paper-based credentials and can be stored in a digital wallet. These credentials can be cryptographically verified, making them more tamper-evident (i.e., it provides clear evidence if the credential has been tampered with) and more secure than their physical forms.</p> <p>It allows the holder to own, control, and manage the credentials and to address several issues in traditional verification systems like paper-based verification, physical inspections, etc.</p> <p>If you or your organization are already managing user accounts in an OpenID Connect (OIDC) attribute provider (such as Asgardeo), you can use OIDC login to share user attributes to offer verifiable credentials.</p> <p>This tutorial explains how this is done using MATTR and Asgardeo, where MATTR acts as a decentralized identity management platform for issuing verifiable credentials, management, and verification, while Asgardeo acts as the OIDC identity provider. Given below are the high-level steps you will follow:</p> <ol> <li>Configuring MATTR to connect to Asgardeo with OpenID Connect.</li> <li>Issuing verifiable credentials to the MATTR Wallet.</li> <li>Verifying credentials presented by the Wallet holder.</li> </ol>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-1-connect-mattr-to-asgardeo-with-oidc","title":"Step 1: Connect MATTR to Asgardeo with OIDC","text":"<p>Follow the instructions below to begin.</p>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-11-register-an-application-in-asgardeo","title":"Step 1.1: Register an application in Asgardeo","text":"<p>To register your application in Asgardeo:</p> <ol> <li>Go to your organization from the Asgardeo Console.</li> <li> <p>To create an OIDC application, go to Develop &gt; Applications, click +New Application, and select Traditional Web Application.</p> <ol> <li> <p>Give a name for the application, select the OpenID Connect protocol, provide an authorized redirect URL, and click Register to complete the registration.</p> <p>Note</p> <p>For now, let's give a dummy value as the Authorized redirect URL. You\u2019ll update this later when you configure MATTR and create a credential issuer.</p> </li> <li> <p>Take note of the client ID and client secret.</p> <p>Note</p> <p>You will need them to configure the MATTR credential issuer later.</p> </li> </ol> </li> <li> <p>Go to the Info tab and take note of the Token URL.</p> </li> <li>Go to the User Attributes tab, select the mandatory user attributes that you need to offer with the verifiable credential (for example, Email, First Name, Last Name, and Date of Birth.), and click Update to save the changes.</li> </ol>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-12-create-a-user-account-in-asgardeo","title":"Step 1.2: Create a user account in Asgardeo","text":"<p>If you currently do not have any users in your Asgardeo organization, follow the instructions below to create a new user account.</p> <ol> <li>On the Asgardeo Console, go to Manage &gt; Users.</li> <li>Click + Add User and provide the required details.</li> </ol> <p>Later, this user will log in to Asgardeo to get verifiable credentials to the MATTR Wallet.</p>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-13-configure-mattr-and-create-a-credential-issuer","title":"Step 1.3: Configure MATTR and create a credential issuer","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Go to <code>https://mattr.global/</code>, create a MATTR account, and take note of your client ID, client secret, and tenant domain.</p> <p>Note</p> <p>From now on, let's refer to the MATTR client id as <code>&lt;MATTR_CLIENT_ID&gt;</code>, its client secret as <code>&lt;MATTR_CLIENT_SECRET&gt;</code>, and its tenant domain as <code>{tenant-subdomain}</code> or <code>&lt;TENENT_DOMAIN&gt;</code>.</p> </li> <li> <p>Get an access token for the MATTR tenant by sending the following request:</p> <p>Note</p> <p>We are using a cURL command to send the request in this example.</p> <pre><code>curl -i -X POST \"https://auth.mattr.global/oauth/token\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \n    \"client_id\": \"&lt;MATTR_CLIENT_ID&gt;\",\n    \"client_secret\": \"&lt;MATTR_CLIENT_SECRET&gt;\",\n    \"audience\": \"https://vii.mattr.global\", \n    \"grant_type\": \"client_credentials\" \n}'\n</code></pre> <p>Note</p> <p>From now on, let's refer to the value of the <code>access_token</code> parameter in the response as <code>&lt;BEARER_TOKEN&gt;</code>.</p> </li> <li> <p>Create a MATTR  decentralized ID (DID) with a BLS key type, which supports BBS+ signatures.</p> <pre><code>curl -i -X POST \"https://{tenant-subdomain}.vii.mattr.global/core/v1/dids\" \\\n-H \"Authorization: Bearer &lt;BEARER_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \n    \"method\": \"key\",\n    \"options\": {\n    \"keyType\": \"bls12381g2\"\n    }\n}'\n</code></pre> <p>Note</p> <p>From now on, let's refer to the value of the DID parameter in the response body as <code>&lt;DID_ID&gt;</code>.</p> </li> <li> <p>Create a MATTR credential issuer using the following cURL command:</p> <pre><code>curl -i -X POST \"https://{tenant-subdomain}.vii.mattr.global/ext/oidc/v1/issuers\" \\\n-H \"Authorization: Bearer &lt;BEARER_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"credential\": {\n    \"issuerDid\": \"&lt;DID_ID&gt;\",\n    \"name\": \"&lt;ISSUER_NAME&gt;\",\n    \"context\": [\n        \"https://schema.org\"\n    ],\n    \"type\": [\n        \"VerifiableCredential\",\n        \"&lt;CREDENTIAL_TYPE&gt;\"\n    ]\n    },\n    \"federatedProvider\": {\n    \"url\": \"&lt;TOKEN_ENDPOINT_URL&gt;\",\n    \"scope\": [\n        \"openid\",\n        \"profile\",\n        \"email\"\n    ],\n    \"clientId\": \"&lt;OIDC_APP_CLIENT_ID&gt;\",\n    \"clientSecret\": \"&lt;OIDC_APP_CLIENT_SECRET&gt;\"\n    },\n    \"claimMappings\": [\n    {\n        \"oidcClaim\": \"email\",\n        \"jsonLdTerm\": \"email\"\n    },\n    {\n        \"oidcClaim\": \"given_name\",\n        \"jsonLdTerm\": \"given_name\"\n    },\n    {\n        \"oidcClaim\": \"birthdate\",\n        \"jsonLdTerm\": \"birthdate\"\n    },\n    {\n        \"oidcClaim\": \"family_name\",\n        \"jsonLdTerm\": \"familyName\"\n    }\n    ]\n}'\n</code></pre> <p>Update the values in the above request as follows:</p> <ul> <li><code>&lt;ISSUER_NAME&gt;</code> and <code>&lt;CREDENTIAL_TYPE&gt;</code>: Provide meaningful values.</li> <li><code>&lt;TOKEN_ENDPOINT_URL&gt;</code>: Provide the Asgardeo token endpoint URL.</li> <li><code>&lt;OIDC_APP_CLIENT_ID&gt;</code>: Provide the OIDC application ID.</li> <li><code>&lt;OIDC_APP_CLIENT_SECRET&gt;</code>: Provide the OIDC application secret that you created when configuring the application in Asgardeo.</li> <li><code>claimMappings</code>: Configure the claims that you need to offer with the verifiable credential to the wallet holder by adding them in the <code>claimMappings</code> parameter in the request payload. See the MATTR-supported credential claim mappings.</li> </ul> <p>Note</p> <p>In the step that displays the QR code, we\u2019ll refer to the <code>id</code> parameter in the response as <code>{issuer-id}</code>.</p> </li> <li> <p>On the Asgardeo Console, go to the Protocol tab under Develop &gt; Applications, select your OIDC application, and do the following updates:</p> <ol> <li>Use the <code>callbackUrl</code> parameter under <code>federatedProvider</code> in the above response body as the authorized redirect URL for the OIDC application.</li> <li>Enable CORS by adding the MATTR  origin into the Allowed origins field, and then click Update.</li> </ol> </li> </ol>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-2-issue-verifiable-credentials-to-a-mattr-wallet","title":"Step 2: Issue verifiable credentials to a MATTR Wallet","text":"<p>Follow the steps given below.</p>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-21-display-the-qr-code","title":"Step 2.1: Display the QR code","text":"<p>Get a QR code that can be scanned to get verifiable credentials from the MATTR Wallet. Given below is an example from <code>https://goqr.me/api/</code>.</p> <pre><code>https://api.qrserver.com/v1/create-qr-code/?size=400x400&amp;data=openid://discovery?issuer=https://{tenant-subdomain}.vii.mattr.global/ext/oidc/v1/issuers/{issuer-id}\n</code></pre>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-22-get-verifiable-credentials-with-mattr-wallet","title":"Step 2.2: Get verifiable credentials with MATTR Wallet","text":"<p>Follow the steps given below.</p> <ol> <li> <p>Download the MATTR mobile wallet app to your mobile phone.</p> <p>Note</p> <p>See this documentation for details.</p> </li> <li> <p>Go to the MATTR mobile wallet app and scan the QR code.</p> </li> <li> <p>Click Proceed and log in to your account in Asgardeo.</p> <p></p> </li> </ol> <p>Now, you can view your credentials in your MATTR Wallet.</p>"},{"location":"tutorials/connect-asgardeo-with-mattr/#step-23-verify-credentials","title":"Step 2.3: Verify credentials","text":"<p>Let's use a sample MATTR application to perform the credential verification. For the steps below, use the previously created MATTR tenant or a new tenant. If you are using a new MATTR tenant, you need a new access token.</p> <p>Note</p> <p>The presentation request does not support DID with a BLS key type, which we created earlier. Hence, you may need to create a new DID by removing <code>keyType</code> in the options of the credential issuer creation request body.</p> <ol> <li> <p>Create a credential presentation template with MATTR.</p> <p>Replace the <code>&lt;TEMPLATE_NAME&gt;</code> with a meaningful value and <code>&lt;CREDENTIAL_TYPE&gt;</code> with the same value used in the issuer-creation step.</p> <pre><code>curl -i -X POST \"https://{tenant-subdomain}.vii.mattr.global/core/v1/presentations/templates\" \\\n-H \"Authorization: Bearer &lt;BEARER_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"domain\":\"&lt;TENENT_DOMAIN&gt;.vii.mattr.global\",\n    \"name\":\"&lt;TEMPLATE_NAME&gt;\",\n    \"query\": [{\n    \"type\":\"QueryByFrame\",\n    \"credentialQuery\":[\n        {\n        \"reason\": \"Please provide your educational award and surname from your Certificate\",\n        \"frame\":{\n            \"@context\":[\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/security/bbs/v1\",\n            \"https://mattr.global/contexts/vc-extensions/v1\",\n            \"https://schema.org\",\n            \"https://w3id.org/vc-revocation-list-2020/v1\"\n            ],\n        \"type\": [\"VerifiableCredential\", \"&lt;CREDENTIAL_TYPE&gt;\"],\n        \"credentialSubject\":{\n            \"@explicit\":true,\n            \"given_name\":{}\n        }\n        },\n        \"trustedIssuer\":[\n        {\n            \"issuer\":\"&lt;DID&gt;\",\n            \"required\":true\n        }\n        ],\n        \"required\":true\n        }\n    ]\n    }]\n}'\n</code></pre> </li> <li> <p>Download and configure the MATTR sample application by visiting the GitHub repository below.</p> <pre><code>https://github.com/mattrglobal/sample-apps/tree/master/verify-callback-express\n</code></pre> <p>Update the environment variables in the <code>.env</code> file according to your setup. Specifically, for the <code>TEMPLATEID</code> variable, use the ID value you received from the response to the previous request.</p> </li> <li> <p>Run the sample application and start an Ngrok tunnel to your localhost.</p> <p>::: tip If everything is set up correctly, the running terminal shows you a QR code. :::</p> </li> <li> <p>Scan the QR code with the MATTR Wallet and click Send.</p> <p></p> <p>Note</p> <p>Once sent by the wallet holder, the callback endpoint defined in the presentation request receives the verification response and requested credentials. In this case, the sample MATTR application receives the response and prints it to the running terminal.</p> <pre><code>{\npresentationType: 'QueryByFrame',\nchallengeId: 'GW8FGpP6jhFrl37yQZIM6w',\nclaims: {\nid: 'did:key:z6MkisTmUeMWzqbwxTad2jrhoAXrLZN1BggiYUNsVBR7FUYW',\n'http://schema.org/birthdate': '1996-09-05'\n'http://schema.org/given_name': 'john'\n},\nverified: true,\nholder: 'did:key:z6MkisTmUeMWzqbwxTad2jrhoAXrLZN1BggiYUNsVBR7FUYW'\n}\n</code></pre> </li> </ol> <p>Now you know how to issue verifiable credentials for wallet holders and how to verify them with MATTR using Asgardeo. You can continue to harness the full capabilities that Asgardeo provides by customizing the sign-in flow, enhancing application security, etc.</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/","title":"Connect Asgardeo as an OIDC attribute provider for verifiable credentials (VC) with Microsoft Entra Verified ID","text":"<p>Microsoft Entra Verified ID is a verifiable credential issuance and verification service provided by Microsoft Azure. It allows users to generate, present, and verify their digital identities.</p> <p>Microsoft allows configuring an IDP (such as Asgardeo) as an OpenID Connect (OIDC) attribute provider for verifiable credentials using their <code>idTokens</code> attestation in which the claims provided through the OIDC id token is used to generate the verifiable credential.</p> <p>This tutorial explains how this is done using Asgardeo and Microsoft Entra. Given below are the high-level steps you will follow:</p> <ol> <li>Configure Microsoft Entra Verified ID to issue verifiable credentials.</li> <li>Configure Asgardeo as an OIDC attribute provider.</li> <li>Try out the Microsoft Verified ID Node JS sample.</li> </ol>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#sample-scenario","title":"Sample scenario","text":"<p>Consider the sample use case given below.</p> <p>Krusty Krab is a fast-food restaurant owned and operated by Mr. Krabs. Krusty Krab has an employee management system where employees can log in and perform their employee-related operations, such as payroll handling, expense reimbursement, etc.</p> <p>Krusty Krab utilizes Asgardeo as their identity provider and has created an organization named krustykrab. Every Krusty Krab employee has an account in the Asgardeo organization.</p> <p>Recently Mr. Krabs decided to issue employee credentials to their employees using Verifiable Credentials, which the employees can then use to prove their employment at Krusty Krab.</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-1-configure-microsoft-azure-for-verifiable-credentials","title":"Step 1: Configure Microsoft Azure for verifiable credentials","text":"<p>Note</p> <p>To proceed with this tutorial, you need to have a tenant with an active Azure subscription. If you haven\u2019t claimed an Azure subscription before, you can create an account for free and claim $200 credits.</p> <p>Before proceeding with this tutorial, check all the prerequisites mentioned in the Azure documentation.</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-11-create-a-key-vault","title":"Step 1.1: Create a key vault","text":"<p>First, we need to create an Azure key vault instance to store the public and private keys generated by the Verified ID service.</p> <ol> <li>Sign in to the Azure portal and from the home page select Create a resource.</li> <li>Select Key Vault and click Create.</li> <li>Provide the following information and click Review + Create.</li> </ol> <p>::: tip    Leave the rest of the values to their defaults.    :::</p> <p>              Configuration                       Description                       Subscription                       Select your subscription if not already selected.                       Resource group                       Select the resource group. You can create a new resource group if you don\u2019t already have one.                       Key vault name                       Enter a unique name for the key vault.                       Region                       Select the region.          </p> <pre><code>![create vault key](../assets/img/tutorials/oidc-attribute-provider-ms/img-1.png)\n</code></pre> <ol> <li>Review the details and click Create.</li> </ol>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-12-set-access-policies-for-the-key-vault","title":"Step 1.2: Set access policies for the key vault","text":"<p>A key vault access policy defines the security principles that can perform operations on the secrets and keys stored in the key vault. You need to define access policies for both the Verified ID Service Administrator account and the Request Service API Principal.</p> <ol> <li>On the Azure portal, go to the previously created Key Vault instance, and from the left menu, select Access policies.</li> <li> <p>Select the user account that you need to configure access policies for and click Edit from the upper menu.</p> </li> <li> <p>Verify that the following key permissions are enabled.</p> </li> </ol> <p>::: tip    <code>Sign</code> should be the only key permission you need to update.    :::</p> <pre><code>- **Key Management Operations**: Create, Delete\n- **Cryptographic Operations**: Sign\n\n![access policies for key vault](../assets/img/tutorials/oidc-attribute-provider-ms/img-2.png)\n</code></pre> <ol> <li>Click Next and then save the changes.</li> </ol>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-13-set-up-verified-id","title":"Step 1.3: Set up Verified ID","text":"<p>The next step is to create and set up a Verified ID service instance.</p> <ol> <li>On the Azure portal, search for \u201cverified ID\u201d, select the listed Verified ID tile, and select Setup from the left menu.</li> </ol> <p></p> <p>Now, you will see three tiles, as shown in the above image.</p> <ol> <li>Click Update under Define organization settings.</li> </ol> <p>!!! note     In this step, you're required to provide a domain for your organization. This domain binds your decentralized ID (DID) to something tangible that the users might know about your business. It'll be used for all of your credentials. Digital wallets use this information to validate that your DID is linked to your domain.</p> <pre><code>For this tutorial, let's deploy a simple web application in vercel. Later, you're required to host some DID well-known files on this site.\n</code></pre> <ol> <li> <p>Enter an organization name and a trusted domain, and then select the key vault you created previously for the key vault.</p> </li> <li> <p>Under Advanced settings, you can select the trust system.</p> </li> </ol> <p>!!! note     By default, this is selected as Web. As per your preference, you can change this to ION.</p> <p></p> <ol> <li>Save the updates.</li> </ol> <p>Note</p> <p>When you set up the verified ID, the access policies in the Azure key vault are automatically updated to give the required permissions for service principles of the verified ID.</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-14-register-an-application-in-azure-ad","title":"Step 1.4: Register an application in Azure AD","text":"<p>In this tutorial, let's use a Microsoft verifiable credentials sample web application to configure credential issuance and verification. For the sample application to invoke the Microsoft Entra Verified ID, you need to register an application on the Azure portal and grant API permissions.</p> <ol> <li>Sign in to the Azure portal and search for \u201cAzure active directory\u201d.</li> <li>Select App registrations from the left menu and click New registration.</li> <li>Provide a display name for your application and select Accounts in this organizational directory only (Default Directory only - Single tenant) for the supported account types.</li> <li>Click Register to complete the registration.</li> </ol> <p></p> <p>Now, we need to grant permissions to the application to access the \u201cVerifiable Credentials Service Request\u201d service principal.</p> <ol> <li>Go to the created application on the Azure portal and select API permissions from the left menu.</li> <li>Click Add a permission and select APIs my organization uses.</li> <li>Search for \u201cVerifiable Credentials Service Request\u201d and click the listed tile.</li> </ol> <p></p> <ol> <li>Choose Application Permission and check VerifiableCredential.Create.All.</li> <li>Click Add permission and then select Grant admin consent for your tenant name.</li> </ol> <p></p> <pre><code>!!! note\n    You can choose to grant issuance and presentation permissions separately if you prefer to segregate the scopes into different applications.\n</code></pre> <p>Next, we need to create a client secret for the registered application.</p> <ol> <li>From the left menu, select Certificates &amp; secrets and click New client secret.</li> <li> <p>Give a description and an expiry time for the secret.</p> <p></p> </li> </ol> <p>Be sure to keep a record of the secret's value. You'll use this value for a configuration in a later step. The secret value won't be displayed again and isn't retrievable by any other means.</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-15-register-your-decentralized-id","title":"Step 1.5: Register your decentralized ID","text":"<p>Now, you need to complete setting up the Azure Verified ID service. You can skip this step if you have selected <code>did:ion</code> as your trust system.</p> <ol> <li>Go back to the Verified ID service and select Setup from the left menu.</li> <li>Click Register under Register decentralized ID to register your DID document.</li> <li>Copy or download the DID document and host the JSON file in the /.well-known directory on your web server.</li> </ol> <p></p> <ol> <li>After hosting the file, click Refresh registration status.</li> </ol> <p>::: tip    If the system can access the hosted file, it is indicated by a green tick on the status.    :::</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-16-verify-domain-ownership","title":"Step 1.6: Verify domain ownership","text":"<p>Now, you need to verify domain ownership to establish trust between the DID and the domain.</p> <ol> <li>Click Verify under Verify domain ownership.</li> <li>Copy or download the manifest file and host it under the <code>/.well-known</code> directory of your web server.</li> </ol> <p></p> <ol> <li>After hosting the file, click Refresh verification status.</li> </ol> <p>::: tip    If the system can access the hosted file, it is indicated by a green tick on the status.    :::</p> <p>With that, you have completed setting up the Entra Verified ID instance. Now you should be seeing all the tiles with a green tick, as shown below.</p> <p></p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-2-configure-asgardeo-as-the-oidc-attribute-provider","title":"Step 2: Configure Asgardeo as the OIDC attribute provider","text":"<p>In this step, you will configure the connection between Asgardeo and the Microsoft Verified ID service. Here, we need to create an application in Asgardeo with the Mobile template.</p> <ol> <li> <p>On the Asgardeo Console, go to Develop &gt; Applications.</p> </li> <li> <p>Click New Application and select Mobile Application:</p> </li> </ol> <p></p> <ol> <li> <p>Enter the following details:</p> <p></p> <p> Parameter Description Name A unique name to identify your application. Authorized redirect URLs Enter <code>vcclient://openid/</code> as the authorized redirect URI. Be sure to click the plus sign in front of the redirect uri input field. </p> </li> <li> <p>Click Register to complete the registration.</p> </li> <li> <p>Go to the User Attributes tab, mark the required attributes as Mandatory, and click Update to save the changes.</p> </li> </ol> <p></p> <p>::: tip    Be sure to copy the scopes displayed on the page.    :::</p> <ol> <li> <p>Go to the Protocol tab, clear the PKCE checkbox, and click Update to save the changes.</p> <p>Note</p> <ul> <li>PKCE is disabled as it is not required for the tutorial.</li> <li>The listed configurations in the Guide tab are needed for the next step of the tutorial.</li> </ul> </li> <li> <p>Go to Manage &gt; Users on the Asgardeo Console and add a new user from there.</p> <p>Note</p> <p>This step is required to ensure you can log in to the application. You need a business user registered in the Asgardeo organization to be able to perform user login.</p> </li> </ol> <p></p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-3-create-a-verifiable-credential-for-the-id-token","title":"Step 3: Create a verifiable credential for the ID token","text":"<p>Now, let's create a credential for the Verified ID service with the id token attestation type.</p> <ol> <li>On the Azure portal, go to the previously configured Verified ID service, and select Credentials from the left menu.</li> <li>Click Add a credential, select Custom credential as the credential type, and click Next.</li> <li>On the credential creation page, provide a unique credential name.</li> <li> <p>Adjust the JSON content under the Display definition as per your requirement.</p> <p>Note</p> <p>This defines the style of the verifiable credential card stored in the wallet. By default, this only contains texts for the English language. If you want to support multiple locales, add multiple entries as a comma-separated list.</p> <pre><code>// The sample display definition used for the tutorial.\n{\n\"locale\": \"en-US\",\n\"card\": {\n\"backgroundColor\": \"#FB8114\",\n\"description\": \"Use your verified credential to prove to anyone that you are an employee of Krusty Krab.\",\n\"issuedBy\": \"Krusty Krab\",\n\"textColor\": \"#000000\",\n\"title\": \"Employee Credential\",\n\"logo\": {\n\"description\": \"Krusty Krab Logo\",\n\"uri\": \"https://krusty-krab-vc-issuer.vercel.app/resources/logo-wobg.png\"\n}\n},\n\"consent\": {\n\"instructions\": \"Sign in with your Asgardeo account to get your card.\",\n\"title\": \"Do you want to get your Krusty Krab Verified Credential?\"\n},\n\"claims\": [\n{\n\"claim\": \"vc.credentialSubject.userName\",\n\"label\": \"User name\",\n\"type\": \"String\"\n},\n{\n\"claim\": \"vc.credentialSubject.displayName\",\n\"label\": \"Display name\",\n\"type\": \"String\"\n},\n{\n\"claim\": \"vc.credentialSubject.firstName\",\n\"label\": \"First name\",\n\"type\": \"String\"\n},\n{\n\"claim\": \"vc.credentialSubject.lastName\",\n\"label\": \"Last name\",\n\"type\": \"String\"\n}\n]\n}\n</code></pre> </li> <li> <p>Configure the Rules definition.</p> <p>Note</p> <p>This is the most important part, where we add configurations for the connection with Asgardeo. The rules definition determines what the user should do to get the credential.</p> <p>Here, the attestation should be an <code>idTokens</code> attestation, and the rules definition should contain the Asgardeo application\u2019s client ID, openid configuration url, scopes, and claim mappings. See the below table to learn how to retrieve these values on Asgardeo.</p> </li> </ol> <p>              Key                       Description                       clientId                       The OAuth 2.0 Client ID received from the created Asgardeo application.                       configuration                       The OpenID Connect identity provider metadata discovery endpoint of the Asgardeo organization.                       redirectUri                       The URL to which the authorization code is sent upon user authentication.                       scope                       The scopes requested from the Asgardeo application.                       mapping                       The output and input claim mappings for VC and Asgardeo. You\u2019ll be able to find the identifier for the <code>inputClaim</code> from the User Attributes tab of the created Asgardeo application.          </p> <p><code>json    // The sample rules definition used for the tutorial.     {     \"attestations\": {         \"idTokens\": [         {             \"clientId\": \"&lt;client_id&gt;\",             \"configuration\": \"https://api.asgardeo.io/t/&lt;org_name&gt;/oauth2/token/.well-known/openid-configuration\",             \"redirectUri\": \"vcclient://openid/\",             \"scope\": \"openid profile\",             \"mapping\": [             {                 \"outputClaim\": \"userName\",                 \"required\": true,                 \"inputClaim\": \"$.username\",                 \"indexed\": false             },             {                 \"outputClaim\": \"displayName\",                 \"required\": true,                 \"inputClaim\": \"$.preferred_username\",                 \"indexed\": false             },             {                 \"outputClaim\": \"firstName\",                 \"required\": true,                 \"inputClaim\": \"$.given_name\",                 \"indexed\": false             },             {                 \"outputClaim\": \"lastName\",                 \"required\": true,                 \"inputClaim\": \"$.family_name\",                 \"indexed\": true             }             ],             \"required\": false         }         ]     },     \"validityInterval\": 2592000,     \"vc\": {         \"type\": [         \"KrustyKrabCredential\"         ]     }     }</code></p> <ol> <li> <p>Click Create to save the changes.</p> </li> <li> <p>Go to the created verifiable credential, click Issue credential, and take note of the following information.</p> </li> </ol> <p>::: tip    This information is required when configuring the sample application.    :::</p> <ul> <li>Authority: The decentralized identifier.</li> <li>Manifest: URL that the authenticator evaluates before displaying the verifiable credential issuance requirements.</li> </ul>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-4-configure-the-application","title":"Step 4: Configure the application","text":"<p>You have now completed all the configurations for trying out the verifiable credential flow. In this tutorial, you will be using the Azure verifiable credential Node JS sample application.</p> <ol> <li>Clone the GitHub repository or download the sample code by visiting the following URL:</li> </ol> <pre><code>https://github.com/Azure-Samples/active-directory-verifiable-credentials-node\n</code></pre> <ol> <li>Open the <code>config.json</code> file inside the 1-node-api-idtokenhint folder and provide values for the required configurations as explained below.</li> </ol> <p>              Configuration                       Description                       azTenantId                       The ID of your tenant. You can get this from the Overview section of Azure Active Directory component.                       azClientId                       The client ID of the Azure application. You can get this from the created application in the Azure Active Directory component.                       azClientSecret                       The client secret you created for the Azure application.                      CredentialManifest                       The manifest URL received from the Verified ID credential.                       IssuerAuthority                       The issuer authority of the Verified ID credential.                       VerifierAuthority                       The verifier authority of the Verified ID credential. For this tutorial, this value is the same as the issuer authority.          </p> <ol> <li> <p>Leave the rest of the configurations empty and save the file.</p> </li> <li> <p>Open the <code>presentation_request_config.json</code> file and modify the following values under the <code>requestedCredentials</code> object as per your VC configurations:</p> </li> <li> <p><code>acceptedIssuers</code>: Your VC issuer authorities.</p> </li> <li><code>type</code>: Your VC type.</li> </ol>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-5-try-it-out","title":"Step 5: Try it out","text":"<p>Now, let's run the application and try out the verifiable credential issuance and verification flows.</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-51-start-the-application","title":"Step 5.1: Start the application","text":"<p>Follow the step below to start the application.</p> <ol> <li>Open a terminal, navigate to the <code>1-node-api-idtokenhint</code> folder, and run the following command:</li> </ol> <pre><code>npm install &amp;&amp; npm start\n</code></pre> <ol> <li> <p>Set up Ngrok:</p> <p>Note</p> <p>The sample application runs on port 8080. You can visit the sample application by opening the <code>http://localhost:8080</code> URL. However, to try out the VC flow, the website must be available via a public URL. Let's use Ngrok for this tutorial.</p> </li> <li> <p>Download and install Ngork on your computer.</p> </li> <li>Go to the Ngrok directory and open a new terminal.</li> <li> <p>Run the below command to host the sample application with Ngrok.</p> <pre><code>```bash \n./ngrok http 8080\n```\n</code></pre> </li> <li> <p>Open the displayed public URL, and you\u2019ll see the MS verifiable credential sample application.</p> </li> </ol> <p></p> <pre><code>!!! note\n    Microsoft Verifiable Credentials use the Microsoft Authenticator app as the digital wallet. Hence, prior to trying out the sample, you need to download and install the Microsoft Authenticator app from the Google Play Store or the Apple App Store.\n</code></pre>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-52-get-the-verifiable-credential","title":"Step 5.2: Get the verifiable credential","text":"<p>To get the KrustyKrab verifiable credential:</p> <ol> <li> <p>Click Get Credential on the above sample website.</p> <p>Note</p> <p>If everything is configured correctly, the website shows you a QR code.</p> </li> </ol> <p></p> <ol> <li>Open your Microsoft Authenticator app and go to the Verified IDs tab.</li> </ol> <p>You\u2019ll be able to scan the QR code there.</p> <p></p> <ol> <li> <p>Scan the QR and you\u2019ll see an option to sign in with Asgardeo.</p> </li> <li> <p>Click Sign In with Asgardeo, and you are redirected to the login page provided by Asgardeo.</p> </li> <li> <p>Sign in with the user account you added previously.</p> </li> </ol> <p></p> <p>After successful authentication, you are redirected to the Microsoft Authenticator app.</p> <ol> <li>Click Add to add the KrustyKrab credential to your wallet.</li> </ol> <p></p> <p>You can view the user details you received from Asgardeo by clicking the verifiable credential card inside the wallet.</p>"},{"location":"tutorials/connect-asgardeo-with-ms-entra/#step-53-verify-the-credential","title":"Step 5.3: Verify the credential","text":"<p>Now that you have added the KrustyKrab credential to the wallet, you can use it to verify the Krusty Krab employment.</p> <ol> <li>Go back to the home page of the sample website and click Verify Credential.</li> </ol> <p></p> <p>If everything is configured correctly, the website shows you a QR code.</p> <ol> <li>Scan the available QR code using the Microsoft Authenticator app, and it will prompt you to share the KrustyKrab credential.</li> </ol> <p></p> <ol> <li>Click Share.</li> </ol> <p>The sample website now receives the user details from the KrustyKrab credential.</p> <p></p> <p>Now that you have successfully configured Asgardeo as an OIDC attribute provider for Microsoft Entra verifiable credentials, you can continue to harness the full capabilities that Asgardeo provides by customizing the sign-in flow, enhancing application security, etc.</p>"}]}